#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Nov 17 18:06:02 2022

@author: kumargaurav
"""
import math
import numpy as np
from scipy.interpolate import interp1d
T=4.5e+9#yr
angle=45 #degree
U=5.29#km/s
R=(0.5e+0)/2 #km
C_d=2.8e+6  # km**2.2
P_i=2.85e-18 #(km**2 yr)**-1
Q=(6.85e-4) #MJ/kg
rho_T=1.5e+12 #kg/km^3
rho_I=1.75e+12 # kg/km^3
mu=0.40
K_vg=0.3
G=6.67e-20 #km^3 kg^-1 s^-2
K_1=0.15
I_0=2/5*4*math.pi/3*R**5*rho_T
Omega=7e-4 #rad/sec
# H=np.array([5.25, 5.75, 6.25, 6.75, 7.25, 7.75, 8.25, 8.75, 9.25, 9.75, 10.25, 10.75, 11.25, 11.75, 12.25, 12.75, 13.25, 13.75, 14.25, 14.75, 15.25, 15.75, 16.25, 16.75, 17.25, 17.75, 18.25])
# N=np.array([3, 8, 8, 17, 38, 64, 91, 116, 164, 185, 224, 338, 554, 789.7390, 1547.966, 2992.338, 5671.776, 10463.90, 18630.66, 31739.63, 51398.54, 78939.77, 115400.3, 162026.4, 221080.1, 296503.1, 394278.9])
# alpha=np.array([0.8519375, 0, 0.6547179, 0.6986694, 0.4527928, 0.3057228, 0.2108332, 0.3007717, 0.1046558, 0.1661526, 0.3573374, 0.4291861, 0.3079478, 0.5845556, 0.5724986, 0.5554168, 0.5319492, 0.5010692, 0.4627473, 0.4186979, 0.3726901, 0.3298225, 0.2947575, 0.2699278, 0.2549590, 0.2475485, 0.2448941])
# K=np.array([0.0001010, 8, 0.0006473, 0.0003269, 0.0198169, 0.2734186, 1.6583163, 0.2708355, 17.6513577, 4.4379702, 0.0487013, 0.0082256, 0.1901505, 0.0001069, 0.0001502, 0.0002480, 0.0005074, 0.0013489, 0.0047433, 0.0211743, 0.1065190, 0.5041878, 1.8723967, 4.8785930, 8.8410969, 11.9685917, 13.3809528])

# P_v=0.092
# D_ast=1329*10**(-H/5)*P_v**(-1/2)

############## Size Frequency Distribution
SFD=np.array([[1000, 1e-10], [794.328, 1], [630.957, 1], [501.187, 3], [398.107, 
  4], [316.228, 7], [251.189, 15], [199.526, 32], [158.489, 
  69], [125.893, 131], [100, 222], [79.4328, 338], [63.0957, 
  501], [50.1187, 687], [39.8107, 908], [31.6228, 1249], [25.1189, 
  1796], [19.9526, 2578], [15.8489, 4122], [12.5893, 7000], [10, 
  12677], [7.94328, 23062], [6.30957, 41704], [5.01187, 
  73929], [3.98107, 126569], [3.16228, 206299], [2.51189, 
  322599], [1.99526, 485949], [1.58489, 711089], [1.25893, 
  1015599], [1, 1.60962*10**6], [0.794328, 2.55107*10**6], [0.630957, 
  4.04317*10**6], [0.501187, 6.408*10**6], [0.398107, 
  1.0156*10**7], [0.316228, 1.60962*10**7], [0.251189, 
  2.55107*10**7], [0.199526, 4.04317*10**7], [0.158489, 
  6.408*10**7], [0.125893, 1.0156*10**8], [0.1, 
  1.60962*10**8], [0.0794328, 2.55107*10**8], [0.0630957, 
  4.04317*10**8], [0.0501187, 6.408*10**8], [0.0398107, 
  1.0156*10**9], [0.0316228, 1.77233*10**9], [0.0251189, 
  3.22511*10**9], [0.0199526, 5.86874*10**9], [0.0158489, 
  1.06794*10**10], [0.0125893, 1.94332*10**10], [0.01, 
  3.53627*10**10], [0.00794328, 6.43495*10**10], [0.00630957, 
  1.17097*10**11], [0.00501187, 2.13081*10**11], [0.00398107, 
  3.87744*10**11], [0.00316228, 7.05578*10**11], [0.00251189, 
  1.28394*10**12], [0.00199526, 2.33639*10**12], [0.00158489, 
  4.25153*10**12], [0.00125893, 7.73651*10**12], [0.001, 
  1.40781*10**13], [0.000794328, 2.5618*10**13], [0.000630957, 
  4.66171*10**13], [0.000501187, 8.48291*10**13], [0.000398107, 
  1.54364*10**14], [0.000316228, 2.80896*10**14], [0.000251189, 
  5.11146*10**14], [0.000199526, 9.30133*10**14], [0.000158489, 
  1.69256*10**15], [0.000125893, 3.07996*10**15], [0.0001, 
  5.60461*10**15], [0.0000794328, 1.01987*10**16], [0.0000630957, 
  1.85586*10**16], [0.0000501187, 3.37711*10**16], [0.0000398107, 
  6.14533*10**16], [0.0000316228, 1.11827*10**17], [0.0000251189, 
  2.03491*10**17], [0.0000199526, 3.70293*10**17], [0.0000158489, 
  6.73822*10**17], [0.0000125893, 1.22615*10**18], [0.00001, 
  2.23123*10**18], [1.*10**-6, 2.23123*10**18],[1.*10**-7, 2.23123*10**18]])


SFD=np.log(SFD)

#d_l=(C_d*P_i*(R**2)*T)**(1/2.2)

############ Largest expected impactor
N_d=1/(P_i*(R**2)*T)
N_d=np.log(N_d)
Bin=0;
for i in range (len(SFD)):
    if SFD[i,1]>N_d:
        Bin=i
        break
    
d_l=SFD[Bin,0]+(((SFD[Bin,1])-(N_d))*((SFD[Bin-1,0])-(SFD[Bin,0]))/((SFD[Bin,1])-(SFD[Bin-1,1])))

############ Diameter for CD events 
d_q=(2*Q*(U/5.5)**(2-3*mu)*rho_T/rho_I/U**2)**(1/3)*2*R
d_q=np.log(d_q)
for i in range (len(SFD)):
    if SFD[i,0]<d_q:
        Bin=i
        break
N_q=SFD[Bin,1]-(d_q-SFD[Bin,0])*(SFD[Bin,1]-SFD[Bin-1,1])/(SFD[Bin-1,0]-SFD[Bin,0])
P_q=(P_i*(R**2)*T)*np.exp(N_q)
print("CD Diameter ", "{:e}".format(np.exp(d_q)) )

##################  Number of expected significant impactors  and expected life time
d_min=np.log(0.1)+d_q
for i in range (len(SFD)):
    if SFD[i,0]<d_min:
        Bin=i
        break
N_min=SFD[Bin,1]-(d_min-SFD[Bin,0])*(SFD[Bin,1]-SFD[Bin-1,1])/(SFD[Bin-1,0]-SFD[Bin,0])

T_life=1/(P_i*R**2*np.exp(N_q))
P_min=(P_i*(R**2)*T_life)*np.exp(N_min)
print("Life cycle", "{:e}".format(T_life))
print("Siginificant impacts","{:e}".format(P_min))
####################  Mass loss or gain during the collisions
V_esc=np.sqrt(2*G*4/3*R**3*rho_T*math.pi/R)
T_sim=T_life/10
d_max=np.log(0.5)+d_q
M_loss=(P_i*(R**2)*T_sim)*(3/5*K_1)*(2.2*math.pi*rho_I*C_d/6)*((V_esc/K_vg/U/np.cos(angle/180*math.pi))**(-3*mu))*np.exp(d_max)**(0.8)/0.8/(4/3*math.pi*rho_T*R**3)
M_gain=(P_i*(R**2)*T_sim)*(2.2*math.pi*rho_I*C_d/6)*np.exp(d_max)**(0.8)/0.8/(4/3*math.pi*rho_T*R**3)

#print(np.exp(d_l),np.exp(d_q),P_q,np.exp(d_min),P_min,T_life)

print("Mass loss", M_loss)
print("mass gain", M_gain)

################### Angular velocity gained

wobble=20.31/math.pi*R*U*rho_I/I_0*(np.exp(d_max)**0.8-np.exp(d_min)**0.8)/np.exp(d_min)**(-2.2)
print("wobble", wobble/Omega )

############# Expected timing bwtween two impacts

T_s=np.exp(d_min)**2.2/(C_d*P_i*R**2)
beta_0=np.arctan(wobble/Omega)
beta_f=np.arctan(0.01)
T_0=1/2*np.log(beta_0/beta_f)*1.1e-3/Omega**3/(2*R)**2
k=np.log(beta_0/beta_f)
beta=min(beta_0*np.exp(-k*T_s/T_0),beta_0)

print("final wobble", np.tan(beta))







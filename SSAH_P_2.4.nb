(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[         0,          0]
NotebookDataLength[   2195035,      44478]
NotebookOptionsPosition[   2188071,      44311]
NotebookOutlinePosition[   2191002,      44393]
CellTagsIndexPosition[   2190704,      44381]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[""], "Input",
 CellOpen->True,
 CellChangeTimes->{{3.893145923416092*^9, 
  3.89314593902262*^9}},ExpressionUUID->"6d6f7d20-73d3-4b85-804a-\
ddbf00f65999"],

Cell[CellGroupData[{

Cell[TextData[{
 "A ReadMe file ",
 ButtonBox["SSAH ReadMe.nb",
  BaseStyle->"Hyperlink",
  ButtonData->{"SSAH ReadMe.nb", None}],
 " (click it ) is available for help in running this program.  \n",
 StyleBox["\[Copyright] K. A. Holsapple, 2018, 2019,",
  FontSize->18],
 " 2020, 2021. \nNew users wishing to change or understand the code are \
encouraged to get a  Mathematica tutorial book , or  there are many online \
tutorials.  A ",
 ButtonBox[" ",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://math.bme.hu \:203a ~jtoth \:203a Mma \:203a Mathematica \
Cookbook\n"], None},
  ButtonNote->
   "https://math.bme.hu \:203a ~jtoth \:203a Mma \:203a Mathematica Cookbook\n\
"],
 "\[OpenCurlyQuote]Cookbook\[CloseCurlyQuote] is available ",
 ButtonBox["here",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://www.dropbox.com/s/hi336qkb3zqfhnj/Mathematica%20Cookbook.pdf?\
dl=0"], None},
  ButtonNote->
   "https://www.dropbox.com/s/hi336qkb3zqfhnj/Mathematica%20Cookbook.pdf?dl=\
0"],
 ".\n\nThis version includes the ability for the population to change with \
time from fragmentation and depletion.\n\nAfter code changes, it is prudent \
to save, quit and restart SSAH.\n\nThere may be a few gremlins hiding in the \
dark corners.\n\nTo begin, put cursor anywhere in the cell below and hit \
\[OpenCurlyDoubleQuote]Enter\[CloseCurlyDoubleQuote] (not \
\[OpenCurlyDoubleQuote]return\[CloseCurlyDoubleQuote]) .."
}], "Subsection",
 CellDingbat->"\[HappySmiley]",
 Evaluatable->False,
 CellOpen->False,
 FontFamily->"Arial",
 FontSize->14,
 FontWeight->"Regular",
 FontColor->GrayLevel[0.5],
 Background->GrayLevel[
  0],ExpressionUUID->"9d7c071d-752a-4a05-8619-c6a6a90508bb"],

Cell[BoxData[
 RowBox[{"\n", 
  RowBox[{
   RowBox[{
    RowBox[{"mversion", "=", "\"\<P_2.4\>\""}], ";"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{"variable", " ", "population", " ", "allowed", " ", "again"}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dir", "=", 
     RowBox[{"NotebookDirectory", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
   
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      StyleBox["SetOptions",
       InitializationCellWarning->False,
       GlobalInitializationCellWarning->False], "[", 
      RowBox[{"$FrontEnd", ",", 
       RowBox[{"InitializationCellWarning", "\[Rule]", "False"}]}], "]"}], 
     ";"}], "*)"}], "\n", 
   RowBox[{
    RowBox[{"nb", "=", 
     RowBox[{"EvaluationNotebook", "[", "]"}]}], ";"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{"G", ":", " ", 
     RowBox[{
     "gives", " ", "the", " ", "notebook", " ", "in", " ", "which", " ", 
      "this", " ", "function", " ", "is", " ", "being", " ", 
      RowBox[{"evaluated", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"$PlotTheme", "=", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Scientific\>\"", ",", "\"\<Grid\>\"", ",", "\"\<LargeLabels\>\""}],
       "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"SetOptions", "[", 
      RowBox[{
       RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
       RowBox[{"NotebookEventActions", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<WindowClose\>\"", "\[RuleDelayed]", 
          RowBox[{"FrontEndExecute", "[", 
           RowBox[{
           "FrontEndToken", "[", "\"\<DeleteGeneratedCells\>\"", "]"}], 
           "]"}]}], "}"}]}]}], "]"}], ";"}], "*)"}], "\n", 
   RowBox[{
    RowBox[{"localtime0", "=", 
     RowBox[{"LocalTime", "[", "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"!", 
       RowBox[{"ValueQ", "[", "firsttime", "]"}]}], ",", 
      RowBox[{"firsttime", "=", "True"}], ",", 
      RowBox[{"firsttime", "=", "False"}]}], "]"}], ";"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{"load", " ", "it", " ", "the", " ", "first", " ", "time"}], " ", 
    "*)"}], "\n", "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"CloseAllInputCells", "[", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"nb", ",", "cells"}], "}"}], ",", 
       RowBox[{
        RowBox[{"nb", "=", 
         RowBox[{"EvaluationNotebook", "[", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"cells", "=", 
         RowBox[{"Cells", "[", 
          RowBox[{"nb", ",", 
           RowBox[{"CellStyle", "\[Rule]", "\"\<Input\>\""}]}], "]"}]}], ";", 
        " ", 
        RowBox[{"(*", " ", 
         RowBox[{"G", ":", " ", 
          RowBox[{
          "Module", " ", "defines", " ", "local", " ", "variables"}]}], " ", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"SetOptions", "[", 
           RowBox[{"#", ",", 
            RowBox[{"CellOpen", "\[Rule]", "False"}]}], "]"}], "&"}], "/@", 
         "cells"}], ";", 
        RowBox[{"opentest", "=", "False"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"OpenAllInputCells", "[", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"nb", ",", "cells"}], "}"}], ",", 
       RowBox[{
        RowBox[{"nb", "=", 
         RowBox[{"EvaluationNotebook", "[", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"cells", "=", 
         RowBox[{"Cells", "[", 
          RowBox[{"nb", ",", 
           RowBox[{"CellStyle", "\[Rule]", "\"\<Input\>\""}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"SetOptions", "[", 
           RowBox[{"#", ",", 
            RowBox[{"CellOpen", "\[Rule]", "True"}]}], "]"}], "&"}], "/@", 
         "cells"}], ";", 
        RowBox[{"opentest", "=", "True"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"SetOptions", "[", 
     RowBox[{"$FrontEndSession", ",", 
      RowBox[{"InitializationCellEvaluation", "\[Rule]", "True"}]}], 
     RowBox[{"(*", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"InitializationCellEvaluation", "\[Rule]", "True"}], ",", 
        RowBox[{"InitializationCellWarning", "\[Rule]", "False"}]}], "}"}], 
      "*)"}], "]"}], ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"image", "=", 
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1:eJzsvQeUHMl556m3d++t9t4+mSMpcUVx5UiREilDShrODID23rvy3ntf7X21
9wbdjYZpoA3Q8MAMMMB4zMDbAWZoZG733WmXlMgZ0Q080Kbui4jMrKysrOqq
RvegQSLfHx+iojIjI7OyKn/9xRdf/onWVWb8T7/xG7/h+00wZZrqVK9XU1v+
O/BC4PRZTE6DPtfpN5gM3he1/wdUXoR1/wf8Q+XgcnAZLUG0LCMtBR8tBh8G
gwvB5cXHC0uLS0GoQm8FF5aDj/CLddXCOuvZ6M/y8iKv1rs/0fe73p/709L6
Xj/P/vncaN/HRM/z8+/Ls3U9PJ3rbe0+x432fVnvngRZ5xCBxPISEAW8eAS0
AHZx8XGQXhYWFpaWlghtLLOWIHtZDi8vB4FGFpYfLC89AhwBIFnClfDJLC0+
hPajH3hwjewSfbDrYVfR2+f9+dW263p+Vrc89XPCts/69fas93+j2dWdn4S0
cT6vRJeN1v91/bwiDxwvmCgeP34IJoiJHTDk0SMgCQQhCQAJBg8gm8XlRwAk
0BTyjwDlPF7G9UFWt9d7Wb8v1PP+rEd/nvXl+fmJvTzr19uz3v+Ntjz/fYu9
bLT+fwbnZ4lqgfaQEOfkwsIjQhyYRoKLi4vxAslyOJAsAd4sPX74aBlxCdrV
4mO0x8XFx0wbtKUUbaG6F78NtRxmo7W/uLi8iBaujdIOrYj9Li2ik8ZjkZYi
bbR+JmhXpyff79r2J4HzGe1zD12H4faJehWHol63a3V+lviFzgafEv6+fBbn
M4GraN3P5zr3P0HL+pTXyUZRostanczVfL5RvgI8iv55rep41/H7m2j/Ez2u
Net/gvvFd8/lxYUgRyv8XlEjXKFTgflkgYzXLCwsgZaxeyRhIEExJI+BSWBn
S8g5goBk6XEQNby0HOKoiK0S++CWwrblKsj3Q5rgDy+/XZ3ibz9R+6vRn7XQ
aq6Ttdpv/NfV6j6s+JeNeT4TuYrW/Xyuc/8Ts+uvRH9X1/t7lPDv8OqWuK+r
jfX9jd7/aPaz+L4ktN9ED5NzlugrdmEBDaZQsIEvv+XFpYXHD+MBklAdsvBX
LCDSwuP79+59evvuvce3bz++++lDaOnenbt4uX/3zsP49GhVirPxVYt/v3du
P4yiB7xa/34+K0rsfG686+HpKPp1tbpvza/7+Xx6ev55PdevluAWT8SqjPJ7
9ZC6StH6d+mV0UV7+/bt+/fv/vKXv/zFLz69e/vB44cLv/z5L4LBODwk7MEj
RDso3nhx8fHl8+eG+we6OvtnZw5O7ZiZ33tw39z8zMzM7Oze2Zn5SM3N7o+i
A7yandmfkKK186y0/+umRM/b0zrP67/fg7yamz3Eq2fnuDbWfn9Vlejv0nqf
/8Tb57/+o2ttzsPafQRr0/+1O5/rfV3x/y5RmjnC0ez0YdQgUAEsFAyg9qen
Z+fn52en5+Zm9s7NzG8dGevt6frgxrU4gWSZAZIlFHYCRPL6yVeK8ws0avPV
y9/93of/8oPv/fM/fv+ffvADrO//S6S+/71/5tUPvv//rKu+/71/4dV673dN
9S9x2+f9WVv7mZ2f/xm33VDnc6P157P5fDeaeI4O/8r9c/z26Z3P/5mIntr5
XOl4f12+v/QN9H/QllLYx/S9/5eyRFBGYPADGgZwI9//R6j46NZ3/+kH/3zt
ygd9Pf16neadt19fWlqIF0iWycASmU28fPrEcaVUZtDbf/7TR7AKNSGbcaXE
Hey03mOsazk2yqdQ6M76hTQE47afjdaiP+sdU7Q2dr3PzyqWZ+TzfTr9SdT+
amj9zs9ncz4TWqI08tR+TxJdNtT1sHYfFjfQl/OJkMAP9n2TRKRgcnhw++Hu
7VMmnfrMu2/g2TfsZiN3GQNIJAadkwESsuly2BLqJBWdG6mIeN3YUbsbTZyu
rjqoLGqU8rpGfa9CCfZnfc//KvqzlKAS71KCSnSJHs2e0HX1THy+qzmf/Hpq
35en9GWM+nsbRQmftwSvh5j9j3/WScQtL7ZN9Pub8PGuYkms/4l+rxP+XiR8
vUU/qBhfLuYTZPV/mQ0kO3aa9Kr3330juDKQLIQDyQJp/PUTx1WSEJAsLeCr
kdovk8gu7g9ow2itlqd+IBtE630+E29nVT8gG16JnrdEb0BrdcN6VvSsHG80
pk38Ol+rZVXneTHe6f9Yy3Hb1Wkdj/cz6f9aXVdxX/8r/uETOqtRgcSsAyA5
HR+QLEUASfD1E8dCQLKIgAR1mNotJ7nus7QkSpjR/r54vpBlrf7Cfb48X54v
z5fny8ZcVnKtLIccFARIltYESBaQcNI1BCRSEQtIlmMDSYLYuXZ/Wj9ffiWW
RK+fX7fr6vl5eL6wl+fXw/NlQyyLSPgKe0yYZAmPpIQDyf3dO7abdYonA5Ij
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
0RYQ/Jm6sPD44SLxmD9tIMF9WPrk4x93t7d57fYqh7Pa6fJbbWAZ1bCEalyO
OG2N21nn9tS5XZG2xuWGd5/c1ro9tR7XKm1ITtSg2xGp8NVccbXMpzqPl5LX
jeXCcuMTQp0TtBrUkHXo9ZkW0PG63HBW4TPy2+w+qw1UaXfAS/IWiOwILDr5
LtQIFKA1sNC3Krcb5HM4cMFb6/NVezz1Vb56rw/WoTqJehKmeo83huqiqMHr
S0ix2mfOSUiuep+HqMHvpeTzg6L1B46RiF1Gm7D7AII22TZCDV4iH2PJmqgp
0ge2ZYnZKVGjz88nL59QfQPahCo3+X2g5kp/c6UPl73xW7JV3JZSi7+qxc+x
IbVVVrZVEhtSa5W/lbbQWmt1VWt1ZUsVyB+ormTUVlPFq/ba6hjqrOG3XbU1
HXU13XW1nfW1xGJVg+1qqOlqqMMWqbuxFtTbwG/7Gut6muoYS+qhQNTfVI9E
vwzVYzuA3+W1A3grXg21NHI03NoEGgk082q0rQm0tb2ZaKyjhWi8s5ml1omu
AKNt3W2MJnvaidiV7JVhW9C2DqTJzgBb27vaQDu627f3doB29HWCpgZ7tvd3
DjQ3NXvc1TZbjd0JqrKChZcOUJPX211XN9reNhxohaODQ9ja3kr2QvqJ+xPY
3t++vb9tZ3/HzoH2XQOduwY7dg907h7oYLRnsHN6qGtmuHtutHfv1j6wpMCI
1MyPD+yfGAQLa052NY93Ne0b6z+1d9fr87tem9v+yu7Ro1PDx6dGju8ZfWX3
8PE9w8d2DTJ6ZWro+NTQq1PorZPTI69OD7+6e+iVPUNgj++GdwePTQ28unvg
1enBk9NDJ2eHX5sZfm1u5NTsyOm50df3bgW9sW8Ma+L1veOn58ZOzW59fQbp
9PToqT0jp6aHiE7PDINenx16c+/IW/tG39k/9s7+0XcPbAV75uDYmUOj7x0a
Z4RqDo6dPTxx9jBlzx+aOH9o7OKRyUtHt119ZdflV3dcOTF19eSu66d2X399
9403pkE335q99fbch2/P33p3/613D9589/D1M0evv3f8e1ff/fSTf0WEtgQ8
8CjIP2TDDyQP7zxePyB5/BgYaenH//4jvVqVm5JalJFZlpVVkJJSmJoKKsYq
SQmpKCWlIDW5ILotTMPb0rYoLa0oPRVscUZacXo6Y5l6sIXpaYW0LcpIL4J3
47bFmRnFmenx2/AWaGWmUDZCeMMwlWRklLAs57iQ5RXVB1pZqUSoEbodps3S
rAy8PiXcW0oFaan5qSl5Kcm5yUkgKEANnDryLrM+Ppno5JRmZkKbUC6AzwKv
k5eWUpaXU5SZJS4pKsrKyEtLhkbKc7PLc3PQJnSHUWeeQFHPQxTFai0zHY4C
zglLaWXZmWyV52SVZ2eD0Jp8gqua85Jf2ZnEotagzQhRe2StyV6/LCe7DFty
PkEVOUikb0SCcAlzckTZOcKsbCJBdlaESCWsiVYGK87JIZLkZYtyc0S5WZEW
b5IBVpiTiTekrCg7W4StODcLNUJbSW4utMa1tGQ5eTKOzc2V5+UxUuTnKvLz
Qcq8fFKga5CVFeTKWBZX5ioL8kCqwnyQuqiAI01xIVvakiK2dMX8Vl9SrCst
NpQV6cuKjOXFhvJiY0UJVhnLIpkEpSBzFGsRlpmFZRxrFZUT2cQVSMJypoZU
2kUVjHWIBXaJgGNjCG0lLCeCMojUOyUVLqkgUh6FEORVikA+lZjIr5ZUasSM
qrQSRtU6KVGNXkZUa5CDmJeoRitlVKORMGLXNxhUWApQo17RoJPX6+V1Olmz
TV+jVxhKCsuSthRt3lyWDDeL9OLktOLNKVAu3pwkzMgQZ2Sayst8arlPKXPL
hF4F6jCoSgudUdYZFdBUg17arJe0GOStRlm7SdVhUXaY1WC7LCqibqu6267p
der6XPp+t2HApR90GwbdRrYGXIY+hw4E5RGfZchjGvAYR/3W7fXuPQH/rmbP
rgbX9gbnrgbHrmbXVJN9Z5N9d7MDywaabnZOt7pmWlwzAfdsK5Tte5qtu0FN
lqkmC9hdjWao2dNim2m1zwQcc2322Xb73nbHvg7n4W7/kZ7Ko71VRFA+1OU/
2Ok71OU72Ok92O450OYG7Q+49rc5DrQ7D3a4DnU6j/Z4jvf5Xun3vzrgA50Y
9J8aqT41WnV6tIYRqhmpfn205i2kWrBvb617Z6zu7YmGd7Y1EHtme/N7u1rO
7g6cnW49N91+fqbj7GzH2b2d5/Z1nZ3vfn9/z/sH+s8cGnn78Njlt/b//N/+
MbjwaXDxPuDB8tICGrZZYOJGOClSlzhAMr1j9xMAyTIDJEa9C4BkaZEGkqVl
PGrz+N/+17+atdrS7BwghPLMTFFuLvMLKczKEmdmi7OyJJnZkswsQWZmRVZm
PBY2RL+HLCvCP6oi6qc1TBW5lIWfU0FezvpZcV6uMD+XttnC/Gxi0W94XoYo
L4Nj2evAVozwzz66KTBHFM0S4b1nsUTtAt9B0E2BvpXkMLuAHtI9z6UsfC74
BsdYqCH14rw8Uhbm5YEl75J24MxL8vOgBWlBPmonPx9ulAAhgvy80uxMWWmx
qDC/Ii8H7qr4/KNGxDlPaiX5+TEkzeNaSW4eHALY8HZyJOjQcrHNhrskWGl+
jiQf3UPReQudvRximXbCLdUa20I9vttSlt4LZaWwYX5epIVbKpzGSEveZSQq
wJsUwKGRlsP2xdzW5bn56G6em6/IzZNTN/pslnIZ0ff9fOZursrPI/d0couP
ZuWFaB1iQWRzsm2kVRdgPKAtViFIk8+12sICTWEB2+qKCpEKi5GKCrVFhfpi
xAnEhlRSoC8uAAs3L30prFMAlpSJNZYWAVEwFrjCVFZMLMhcXmIuL7KWhayl
FOoLwTI1tvJiS0UxWKughLnL0yplyyEotYlKGOsQljiFZU5RqUtU7hKXgXVL
ytllt7iCWI+43IPLHonAI63wSgReSYVPKvRJBbFtlVRUJRWuaKtlohq5pEYu
RlIIia1VSGqVIqI6lbhOJaxXS+rVIrANGnGDRgq2UStp1IrANunETTop2Ga9
DG7xRC0GKRHc7hmFKmm16CWt4S8p6WRNGgmoWYvq243yTrOSMEOf0xgwqa2l
BaLkTRXJScK0dEFqenlyqig9U5aZXb4lWZSWqsjM9MulTQZNnUZep4TeShu1
Mugq9LDVqAiY5NBmh0HaaZR0mxW9VsWATTVoVw85NCMOzbBdyWjEoRpyqoZd
6lGneqtLBRp3acfcWmLHnJqtLs02jx7sqF1FypN+464qy55a+65q065qw54a
00yDdV+zfb7VOd9iA+1rtmKZQfubrFBzsMW+v9V6qNV2IGA70GyZb7EcbLFC
DVgieOtwwH64zUp0tMN+rNNxotv7Wpf3VLfvdI8fLOhkpwcEhde63PDWyU7X
ax2eEx3Okx3OE52O1zqdr3U7Xu/xvNHveavf+9aA++1BD+jMiP/MiDfSvjfs
f2/Y+/5I5fsjPrBnR/1nx6rPT1RfnKy/uKPu8q6Gy7ubruxpvjrTdG22+dre
lqv7Wq/NB64daLt+sP364Y4rR7ouHR28cHz0o7MHbv/4B8FHPw0u3MZRJZyE
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
WQkFeHlxCjHJ1ZlGhCXzzQRIsJqu7W++uj9w6UDntVM77vz794KLt9Gj7JYQ
iywtLDKJVdkIsUwQ4lkDEg6TrKhIIFlB4S4X5ub+HEieA8mTAUm0lGj8QAK7
UBTlwx+MQCa5m16WFxVmvPAPf/GlP/i7r37lL//wS//9t37rj3/nd4qSNwOu
iDLTIyYC88+viQdIYrhH4hyyoeJX4wYSdgxJQkBCmIQNJPEkHuEASeSTawiK
UE6SmEBCUUcUIAnzjUSEsK45kHDcI2wgiTqzhgESVQUDJGz3CAdI2BEjDJAQ
GummJ9h2U+nipYRG8JNiNN12TZfP2l/vG2qqGg7UAo101Xg6qjx9DdUjbS1t
lV6PTqsXCqxSqV0u15WWguQ5ecLULBLCSgZuyHgNLQQqZN5N2ZaMkk1ppS+n
CJLTREmpwCQVm75TsekFRUayvTSvx24c8dn6ncZBh37IpR926sd9pm0+w7hH
s82v2e7X7qjU7qyC+75+ph55IWgs0e+p0gKQTLpk25zyCTfKwjpilwKQ0KGw
cjKgQ5KhMZnQdlaqd/lUsCHCEkwjFJD41DSKhHlICJDMN1rmG00MiszVa2dq
1cAhU9Vq0K4qFTASiGAJTkSPUtDPN+iBSY4ErIyf5ESnA8onu+zETwIoAkyC
nhHcYcbDN1SYKxm+obKOhDlGqgiNXNldg9KM7KolQqMzU3VQACwBFKFoBPhk
V82l3XXAJAhLZpGuzDZi1V+da7g813xhvv3GazvusYEEgGMDA4kgHEjiFxs5
Iod4eKcMx8kknBDZpz58E7vl+He9/kCyXvixkYDkSXrFm52VRwRIgEaUxQVl
GenJ3/rblG9/y6aQ5ycn/8WXv/znf/AHf/KFL3zl974AcFKWlgZ/UQqzM+SF
ecqCvLUFElVh7ipiSEIzfDk0wsKSaEDCMAl7mIbtDGEDCRBIaLCGD0g44BEt
/Qjvo/RQTfjDfFkqtImKGBqxCwp5gYShkVCu+HAmiQYknCm9jCrFJSgLa0wg
qZJRqpbzJECL5hsh7hEOkLTgtPBMxAgbSBivCBGTHL7HLEI50CxSlAPNKCFZ
R7rt6l67tsdpGKzzTXQ0jbc3jnU0DbXUd9b6ehurB1rquuuq6x1Wt1qtLSsz
lJe7FAq7VGqsqNAVl4ozskiUCGeWDVMJQAIq3Zxa/HJyxZZ0UWpG2eak4pdf
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
tcm5S6WV8mhXyhA9Vg9Asny1BlxZuHbg3g+e2wgkBB5+NoDk00aRzwVIPmsm
2ZxT86BYshoE29BUsvPD+CiKqLl9jDaexPdFA5KNy1uN/SCfQsjXikUHaiP/
dWl54fbt5dlZ7DhLc7OLszOLs3M7bJdn5/HGze3SzNzSzMyjtztZw8LM7MLM
HdrOz87Nz81saBfmZxuO17dzs3fmZmbZlo4vzM3jvYvzC2jRx8gc+UPaedyT
/FnXbr7KvNwo5mqDS/Xjs7N3IHacvmS16b1z27fMu8jnwlfEfLcbNX/rFunM
0W/yDvk/Oz+Hl0tzeHlr5uaN2Znb+B4IkwCHZm6fmRoPaOVJgyZr1AJCsgZF
Qivpt2kpkGQNjNlkFUg2aOvMmjVPDQUSih8sjawCiXbtMF87E9Tq0A7ZNRWH
tuIyDOKl2zQadR/Mxc6OlQ6XckeHB54+OHZ8tDw9RM6gOXNg7NhYZbSQGoj6
seNb5RJRextn926wR89Tu/hNrZzd+9ABkFAjCYBE1tmZ83sm+nNHqpUTEyMH
hvonilkAydRQPz1Xtz/kx4Q4U5DEo1Jh/824XD6NxsjnY5ONWbAL2wEkHpXC
IZMpu7r4e/bRCFJZWwewR9TahlbQ3KLs6dXzScBnyu3AnYeSMdqOFbKAjcFY
uBgNxZ024IffqAOKoIOPQH06mAlQKUaCw6n4WD5DIkUzScBJxuXIeVy1FDGV
gENAI1hY1Gz2qtVgJ+JVaW1nCYT6aCiKUJsJDSWlbICWjSRh819o3ylTJG2O
hNUeMZpTDkfB58t7vYANq1gM7IHAHqAOfDlBvR4LcCuVGMFLLAMoQuNqDDwe
aETXy2HMI3yHBAQioUEjNpEEHEKL1aNv6ONROiL12Th8ekIQ+ujQc4IgRcda
cTYS5trSpWwl5es17e3qtibZvm9pOx8PqtuLbvHzE9F3X5qcvXro7htHF65O
vv/G/uXr1aWr5cUrxeUrgwyTML6by4zj5srY/NX97xEg+QkLJDTZ9hdA8kUA
koeIJGlIJvepENIwz/d+QLJmYNkWSLZBlEaL6atTr3pjNdf7ZNN8vkCyJiFf
IxIASA6OVvG7M3ac+Tu3FxfITkg1e2eGFTu4lRY2tfPMGze3m2du39Yv477a
5s/sFn/m6v40nDAzt67Fre6QZmO7eSb5Mz/XcLzh3egIAxAN7nPfZ923Xfke
tvj/MnebYbDZudu3b9+5dZt8MxhGZ+b20uIseAwd8t6Z20CXu7dvHqqUIqQq
GqhDTc+jSellYBIaQ0I8OAbVVkCSa5RcsxWQ0CSaNTlAI1o2zJXSCJFNPeTU
DbkNRcCJ3zqW8O7Px07WBs5MDD97ZOrC9PjR0dJYf/LMgdr5Q5OHq6VSIhR1
mCwyMX4k9u3Z07tr16qDphlAgg5oBOp56inu3r2K7m7s7PsH+09OVs8eHAfP
7C8XDgwXoVouDU6gyb+gCOYAOzNoBEwSMhiAH9h58143kCCg09gk5MQ9SWur
qKlFwdT0AJmARrRcnlUqs8sVAYMhaDQmnDZAxdQgoZ1SPALgGc1nABsRmzlg
0rs0ypDFCBQBmUBJplwbcIVOHoyGsM7JARImWoqFM14Xnj6SiA3Ho+AiAAmW
ETYaaYkPLIZu66TACGNGoNEj1GBCY0iMXD71koBGwAbUFqHncEEpEA3qwASv
ShPSG2NmKyn4ZrWCOvDZAWPADICHS6EgacsGAwgEHVwyC4UEP1YFJsF6MNki
EIJJ9Jw+tuQIBRIIQOJVqomrSCAiMSS9fWjtEoVVJDNwhaARfZ8AomcX0jOD
SFJwRy8tYg8ageTNnar2Ltm+fcr2JlX7U9Kmrytavm7mPlkLa1/cn1r+9kkw
yeK1iffeGLv3+sjS1YENQEKY5PLo3JWpFSD58O/XcILQyL+sosi/dSB56KDW
lUF6tu+DYMmjhLY+DJDUYclOgKSB02e9nWSDd+aTA5J12nHe7qcLJBsQCCNK
Xq+sr1fJ502P1e7Nz1NrAzEmzC3OodmxsFky++XGllgU5hYevaX3r9d91zNT
J3yg7TWzfj5DUnMMgq28vD231s6wa9j0ebf6BnYycyff20Pcv+EdiAVoZm5z
y37bd4hBZWFhcXlhYYlBmdvUvkRA5c4dzF6amXl/9s7Z/RNRkyamVWSMqqRG
kjUo+m1a5rA8JSOCKBtSfbcFkpUjadZohDmbpt5Zs+qaIcYQCiQkgKQOVCiQ
lN0GWvTsUCl94cDIK2ePvXz2KDVrTA8Xzx/Zf2yiVuvPYhN3qOTSjg7wRveT
T5HQkad2Q7279vbtaVqNaN0DIOE3Nan7ejI+NwgB9wGTQEdq5alSHhrLZ8AA
MbsFTEKTfyNWE/oJhyPJVEaNWSx5rxeUgt1W1d3N27dP0Nws7ehUdPeI29rx
FLQUSPx6Q9xuj1qt4IrJYmG8P5cLeAshP2USdKJ2i8+gDZoN4JCEyw4mgfBB
gCtDTBTrUCIKkqlmkuiUGTgpBH00dCRhszBR02qsh+a5gAH0XOIcgRTtHeSQ
XCYElObn0o66q9sqFHkUSrABzVuhIa80/8UmlnqUar9G51NrqRmEVBdhnC/g
DdwcLT41E+9NhKfjJWgEl2ghfXwhJoEAI3gjMAnvBYFoe3p1vRxqKkGLBdjF
EptIQv01JKqEMZig9ShUYYPFo9GbRFItV2DkiUx8sY7DJyjSw6XF7WkqEDWS
kPokLZ3abq68BR+wTdayR9G+W9mxi7f7TwS7/zig6njz7PDCa0dnLo8tkITf
IcZCwrpsVo0kl0fnr0zde+tZBkj+4aOPPlgFkn/5ogGJqPNzBpLtc4E/DSB5
FBr5fIGkvsYaRj4zINmCST69GJJ1N1/N+uk1iPgqPkct5B+eGGM8IzP0F+R6
zKgX9qyG2jzzk9VWj9tqAZsBox4zNovFjJlGJENRhNUss63vUPOzDAnseP72
miUsMPcJ3GeL7/kOcekwH3B+kXzqO8Rqwlh4gCG3yLX5ecaKdGfu9q2Fm++c
nhwL6ZUJvYrk/GokOaOSloivBxI255fNstmcX7MBSFgm2RpISKwIPUevHkgq
Ln3JqS279KQmfNI3PZA8NTb4yrmjoJHzh8YPVgbG+tNnD02emZ44VKuMFfNh
qwk/vji7d4M6Vmwju/bwdqOzl7evZTWidReuittb8I8IbHBouAwUOTo6dG56
4sLhqUMjg5ODxC1SioWTLju2/gCTdRu1mbM+d87nS7lcKYeDBlE45XJdX5+0
rU3Y0gIgAfDQA2tErW0QPcvGr9fjLVmvd6yQHU4ngEBY5EAkiH7a66LmkZDF
iJWARlIeJ2UVGltSZKJYsZipYiHn92ABtWyqkoxhbUPRcNRspEEj2PFp2Vjq
r2EsJCRPliShdHSCTJiT6dpo/iw6IBCgiEMixSVxUzMDKp1sMo66u9cqkrjk
SrtEZuTzDTweLUiLDsAD9weQgFKAIjQ+BIN4IvETMVnA6NNBl0JBjTZ4Ox6E
p2ABwBK0ek4fng6BPajbiJIJOhCxydicPp3RKJSoern6PgE1lVAjCbWQkGRk
pizJ6vE6vZKmTklTOxPB267r69b2tktbd/c9+VUwydnh6Nz14wuvTy+9Pgkm
Wb5eWb66prtXKzTdZjOQgAd+JoCkXrLuDugL4r5RbKoqv6bVGm4NOKThIE0f
fmQgeThtoBHW1rGSPrMSL7EGDOvgpG4NDf0aaiZZuGGuzZZOpW1X2ygIdrtc
mG2ABFCh2VGtNlKIdUPyL7m5oBdAohLwDo6O3MPee/sGCZlgiGSW2YSYQAiy
B83MzOC346WlpZs3b6JPR+odHLiKmfQ36Lt377Jvv8NscnQCvRtGqOMAd6Pz
abu4uEgnYw6eMs/ETNA30nZ5eZlOxsuFhQVMoPdhF4M7sPPrfTHUWbPA/KHL
wJ9bt25hnInxII8js5l14RH0zhtcNvWi3qi52zRkZXZ5fgGavXV7keLLHWJo
WsKmzrz8HIVV0ZVgqTM3b91bXFpgMKuhT2obrUatrL1cmLmzfOfmibEqgCRp
UANIsgZFxiBN6SUEP6izxkAGWZdNzqzImKRQ1iyD2GNrKIqwGrCsHtrLiNSE
tyloig0lE3I+r0NNz8gr2mQDdtmQR13xaspuVRmXPIaSi9QeOVJKTQ8mLhwY
een0oWeP7T82MbK/MnBkrPLsiSMnpsYAJCP5tEUm5ewlnhqCB7v2cJ7cRS0k
3L3N/CaSbtMDVtm3FxK1t7g0ypFs/NhY5TyQ5sAYWmh6uIjBEZCD15X2OIEB
YQvxttDE27zfT2ul+nQ6q1RqFAp1PB5oBPgB2qFZPGiZDolRCZlMYJiheHy8
kC0nonGnLWI3hm0GWqweEBJzWIEl9AgbvMQ4iWJNxoZTJMcH4AEawWLQx0ow
ODmQp5cyLodLIbNLxUy2uA4o4lVpHFK5trdPQbiic9X00UmtJTR5lhpJaJ8t
/86k0HbSdBsSZMJUkdVzuWAMiDhcRCLWF4M+KIUOUsMICIRUM+NwlF1d6p4e
Gl5CDSnAJMASLsk7OtCSjN2ODlxiDSxgHsCPTSx1K1RYv0ephnxqrV2u0PMF
wDlNH9fIE5gFIk0PR8kUc6PuJ5J3w6QIEYgCk3T2iZs7JS1dIBbMxHuxPAOv
V9XVLG9/fNCve/PpscVvn5i9Ngkmmb08vHh55L3XxucuDS1cqdy7PjJ3qbTw
6vDCdeKy+ce/+unHH/xPphzZxysWko//9WOGT34mgGQDmWzQ5wgkG+Y/XFTJ
5wUkG6q2sqYPFkg2M4Z6Uxm3bZhkazvJ5wwkO9RmGlmpkMZnWEvQN10beX8e
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
f3F2ZOHa9Ozl6uL1Kphk/vUJAiR//d7HH/zdeiD5ADDwBQeStVgRRhRFWH0G
THLfLOBtMm4eAku+sEBCE3V3YiRZt6T7RaSsWVF2bkupw5JPCkga5hfr6mN6
+Rs8QX0USA6OVu/NL87dmqVAQkpSzGMfn19evkeiD+7Mfu97byWT6Z4ezte/
/s1vfvOx1tb2UCjy2mtvYNrNm7ehGzduYZfGGw8fPioUijHnj/7oKx0dXYFA
6JVXLuM+uMQUtZg/deqMXq9/6qmnvvrVrz722GMcDqdcLtMYFWokoVgCTgBp
DA4Ocrncx5984k+/9mePPfG40Wz6znf/HL/4U0PEd7/3F16/r6WtFVe//s1v
yJWKkVr1R++8zThhZhcWl+cXlm7eujM3v7h8971bt2cw8vobb3Z0dvMFouuv
vUFzYt69cQvt4tLdc+cutHd0aTS6t976IZa6IfG5vs7JHbwDu/rt2cX5pXff
viEVy375l76kUqjvLt3DF4hx+jXSRF0m7Xdli/+M21s3bk5OTv7yL/3SH/zB
H5AomoUFEte6sxiSufrg2PWZwg2BhCTRMECSscrXaMSkaggkrHmk/rQaiiIb
gIQKNFIPJCvF0Fx6wiQuPU2rqQQsoJFnJ4efnqo+Mz3+3PHpM4f3nzo89fy5
EwCSMwfGpkr5iWJ2arB/IBLM+LwAEo9Oq+rjaPk8dAAh1DDiVKvMUoldqbDK
JS6NMua2DmVih8dKx6eGD1YH0JkeLg5E/djoRW3NkvZ2ZU8PWgBJ1GodzWZp
YdW4x+E2aMIOi99isGtUYYcNdzaKRTaFwqlWg0NMEjxCOd7ff2J8DEBCD8iL
2MwxhxUcMpyJ4RH5EIkkCZi1ABVcpXEpI5kkUKSWTdHDfKmzBhAC9sh4XbRG
K5ZRTafBJ2aJkBxdLRO7FJKwUVsM+gcCvqBeT1J9u3sVHT3iZhJNUV80vt5l
Q4FE2tIGrXPitHTRGuzKthVo2RANa+TyKJB4FCqHRAbSAIrQbF/0gRwFn28g
EKBFXOUdHSABjJuFQkogfrUGYuuWkBgSjYbKx4AK9eaQSFe50sQT0AP+NF19
xj6huU+i7eRpOriKFtBIL6TqWEn7hQAexKLS2y1tawKTSNtWPhr9yLJWvGx1
SmUOiVjb0y3Yt4e36ylp817prq9rWr52puSfv3po4er4/NVhAMnMtdEVIPnw
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
wgE3y2v1MpF50IjRoPE6bU6riTRF4WRZe7ipSVFfL/Cj48b13tuvy21O9Enu
3pkZY0oj8oVZu8kAgiLlDZNeo5JJwFGcHFx5tV7ZXKnlkuFkxBcLukvZOHz9
5lr1cG9zZ3Nlc61eLWTqpdzuxgqgBa5fszg/Pz4GIJFOTsDdgD2G2tr6bt0C
ywFIWM3v6ZQNmAQQMjk8KB7smxoflsxMaBWLNHkU8rqwpH5AeDgeu5lODTvY
ZpmrD4/2nj+69613n3/3g3d++QfffvfZg73NRjYZWK6kD1gIZY1d5EplpVrE
VYFGDjfXdleX16ulTCQY8TjxA62UClhSxikTSvX69MCK0TFR/wDwY3Z4lPq/
TPQN9Le0wkY6ugAks6NjZAsi8eLEpGp+AT8NRSfYXNXUNGWJUJs//GSLk1P4
1m0y+212m06vXpAwaJmeXphiSvgnszZT04AQmqDBkiZrsBI7EoHQgOgFKMIb
RyNskghGKEJ2vlVcU2prUyrsRVLzC7w8KT8rcX5mhHPiKqNUybfba5q40Unm
mQmwRCgRTwpvPJBwHfcUPJAIq4TO17OcuRIlMyGKCIGEtEHOY0kTYgmV33g7
RReZwM5wi/BizgOJsGiab1xoVWlgdqXOpgCW6HggISYRprOeTPRwHXjtGh32
8i6Z837/bibyopH7k092//x3n/7WD1/+1T/znd//i3/qv/7jz15tF9fjzlrA
mjDr827XeipTCyfTDl/C4c56A6uJzH6psp5OlwIByj5txKPLsQhII+fxAEi4
chuKk1gBJEARPo0E1FEOBmnihgxrACRFXyDjdNOagse7HIluZ3Ob2exWLrdR
yD8/PmIRElIAoRKbn38RQPLzjwMSJooCIPnf/qiQYlU2BCSOi5rrfYZAgm3O
A8nH0sgXAyRXZJILN8PKt6KRzw9IrowlX3UgAYqAScKWJVZu43SwQmAuSJJ0
u7CZW6fTzs6Ku7u7r1+nIAnN1AzcvtsLLLnTypat7QxIbt9uu/ZNj2lpu1HP
x1lDnEal+OF7L48Pth/cPzja34pH/OVCGh8xvn+0u9aoHGyvL5fzcLvSuanx
oT7RQO9AdzvprZnUSsmkWCNZZHUcegMcHEBFI1/UKKRghpDf5XaYrVYdTKuS
kiyJlWu8sqRVaRVSEjafE40Nd3YAk3BtrV//OqW2tl+/1nXr5mBn+7x4HECC
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
dFYWSKjZxHIYyWuVyHaAhNEkEYpsMrmxVWAWiJwyhUMi9SiUJOwi5HUb5X96
beWjd5778PaFD15b/+DWwgevzn3yxgKxt1Y+eXv147fWP7yz+sHttU/euXzv
zev/6uULLy8Mjri1Sb2k12HsdJgTVmPCZmt3uHqDocFobLQtCSAZCIa7Pb7h
aLTH54ubLTGTOcxIl/g1OgokqRySP6qk1mMCCRvHOQxI9gDGNwQkXPmR4xsX
SLhOkt1Cm711N6nAjVwO/ACNgEMAJzRSQ0wGbiEhG+JRkUiAJWwKCteNQ0/y
rQISTlbqHs/JHwuQ+I2GgMlIYz1OnSbhdW/Nz9569ukXrl7ZWJgb7GwHThjU
ipKCs6dOPAEDhDz1+GPUQ0Kx5MTDD8MqCvOxL4BGfDYLbbDrMBuwvw93d04M
9IFVsC/opZKcJ0+cPfkUmCT/1FPF2ZkFp05RpVay5WWeKcrMJl1Xcs/mnz7V
WFnuNOpxErVMJOI1ilubNXKJQiwAjQhbGklhcl21UirSKKRifguRmU3G/C5L
V1t4fmpkfWmGhk4mR/qABNGAKxZ0UxpZmh3v7YgFPQ4wDMAJYAMYoP0BbUZd
WyQ4OTIItABjYPS7bNGABxxCaQSQMzU6ONTb1deZBIfYdOqOSHCwM0ll31bm
py9trW2vLU2PDeHlWLm1Oj89NrA2P3lla+Xi+uLK7PhwT7It5Bnu6wKNXNhY
AZbgu8U12E367mS8MxL1mC0AEtrYjvaUwUZcU1YGIGmqqastr+QCCUWRpvJq
2E5n3l1Rd6paxlVb5dbpUBqp3JHDpTRSgwnVyGW06XaBJJNI6VIgqcovJOXA
3OzWw4Fkf6O9YwIJ6yTBRMZrxXeC74FfV6/gCwAeBtIaUooJOIQEa1qa5Hye
QtBq0agAJPitBofEPG6rWtUdjXSGQ/jDkzWRwhkwCZFvZYReVQIhmIRtTMMC
Sap/zQMCSZrDIQ1IDELJFwMStvFNGpCwMvV7xdx2Lb2NDttxeB+K0GfvCyRp
ySRHlP2yQMJlEodUCeMCCUMjQiovbxGKASQ2sdQpU2GZSyILyMVBScut5bG7
bz179/aF919d/eiN1Y9eX/jlW8u//eHab/+LrU/eWvr4zirsvVfm795avnv7
/IfvXP/p61feOj91cTA+7DEm9Ioup6XDae1wOfqDwYFIdCTRBqNta+Z7e8cS
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
gE6KigZIpKnJOfgFs1vhEGdhHvBQ4LAV5mRDlTBJX2crJbimx4dHB3pKC3Jg
ksrSQgQOivPsjTUVFSUF+OFCL7XswhlAgmfATwEacVhMOqUMt+PvalVxYRb+
oGnVuWaTSaWARgqsNoNcocoQM3pke49QrzYePAQkEw4kdMCt1+CA9vy6akjc
GsFdAAl/K65KxOzA5ZIk7CYaCf44Z+u0nEzw1x6BA3wIS5BG6IBf1Mp1YfXZ
x5Xr5sqGaHnVJn051CIRb9Xm0kHioykrr2LEIzHCPQ9/mh6/YSw/ABJ+hoRr
Yu+9cEOlrXk6I4Ijx3pAwpiEt+/GJ0iYYJdsKENSoNbkqWQ58pQqi+Te/UOv
P3nP2adufe/UyfdPnfjw2ROf/urW3/3mjt++fPdnr9z5h9fv+dOb9/zxzW98
fube375yz8cv3vn+83ecPXXnO7/64f/+t/c4kFzFXTargOSZhx9sqfOVITl/
/ty5c5989HFleUWWXleQ49DK5ZUlJR0NderMDL+NG0K3boGWW6urAA/KkKwH
JLSU43HX+p3ANwlfGty9Hrd75FWuIEisOiZseg3iArUll0GU9YPEvspWX+/w
WMrxuMtnGuTSJuNcWZB43eUJEqp6vbINSdZvElgIFHHarKVWS6GJabBfZDUD
JDXFhbkmQ0ZiAv6wL+6cObh7F2SSnWVQyjJkmWk6tSwnO8ts1FSVF48N940M
9gz2tIEiMxND8Mbe+R27ZsYP71ugzTU4wDWOF3dNjw/1tDVWOwsdubas2orS
3Tt34ISIkyPOiQuzU/t2z83uGOvtap2eHFmY2zE7OXZwcTcgNDU6NDkyCA7p
5VJBFDObRp4mwglIIkxOCI9Iio1Njk8UJSUDJCqZXJ4pgUYUMmZensp9USqV
crkcLDEajcXFxbhOTU0FSAQCQWJiIq3XXH/99fAJFXIQSC6hhuRiL7RNGBTZ
tPF6aiMfExG5e27+7ltvD/cLjPQPYHqMhIbGbveL27o9KSAo0Y/Jk8T7B8Wz
M26SwyLTIpkqGoAkKTyaQCKMjoFJ8BIBBnAIsNdUW9VSXwOH0AYZQAIv+OTI
AAy5tLBzYri/JN9RV+ns72rra2tGjPf3jPV1dzTU9re3DHd3djbW15c7y/KZ
fAj+kFp1GrkotTTX0dXU0FBRhttxS2G2lYb85lusCDgEIDEpVfg20uIT8P0Q
SNzwSOQo4s6ZCPkFJFxXNHwu23UWn5hEyRNXezR3yzKAhPBAm39ptq9Vo6ZC
Vrteh19galECjeBh/CJVms23Rq0Iv4+rOzzv5WuEgkDi3SSNX0/irZELgGQl
S5Y/xd0Enopa+WsxvkGyMn+yPG1H4ru61d1G3j3wV6PlmsBzPeG5u/hbg1cJ
VznrcqhoC7AuXy3PV2WW6tL3j9SeeeKe1x+75Z2nT7779LF3nz7y/rPHP/rF
zR/96rZPf3M7geRPZ7/5hzfu//y1+z596e4PfnnX28/e/e6v/+kv/5NZsvl7
ZUhWA8kXXzBf5bNPPrVZrOkpybWVFUM9PW0NDUV2W0JEWOANm1JjY8Z7e+pK
S6iZ8FcJEu/UBx8kFPhO6Pb/JiDhTOKNB/6iic+twa5FHCp2XWUUzgX7oa0B
Ev4QnEsDife9BWbTVwCS1XrL+wQJKIIgmZRl24ptFrwIJdlWg0wCkOBv+/z4
2EhPV3lBnlmjYjYFS0TpqQKpOBUmgR92z0+XFOaM9HfumZuCN6jvFkCytDCz
f89OIAS3z0+DFvO47u1o6mypKyvKKcyxTY0OAiG7ZiZ72ptxfpyZGMExbNPT
2XJw3+6J0QF8AI2AJX2dbe1N9Vk6tSgxXpIiNKs1KvbMkhgRmRgdnRwfL4xL
UEikerXGqNVJMyXQCASiUChoNw0ogmNc4xgUcTqdWVlZCQkJ4AeuIyIiIiMj
t2/fTrtu/f39r2G3vVBj1asNkuuuuZaCZILrpPiEe++865t33xsVGBIfGpYc
GR29dRtCGBgMkxBIEgKCEQBJaniUKCo+OSw6ISQiiV2yYWpIYuMIJIBBSX5O
WVE+BMLsY3IWIwASXA/3deHVxusPlnS3NdVXlQ32dMxOjo70dM6Af4N93c0N
0EhTVXlzdeVARxtM0lRVAYTYjXqdTAJ4QCN9bS3VJUVVxYX5VjN+PWAS3F7i
yLFotNSRVZMpYecsMwOIcUB5EqII3cgVtfJ7xRM83Gs3AtYtzI3cpmCmhzxv
ow03ulebKclSKgAS/HGGTBD55iyqJHEPsknnb6jh0iN0Izfjhj32oRF2pYb6
kDC7bOhGbr2GAwmVkQAkPk1CGFhtCvBqGnHd7p0YWRMkHurAh/y8Db/FvQdI
uOrWHLWGJv+CGTRfj28SfkP4iwJJvjaLAiAp1BqZPicqRb5aWqBJG2/K+9VP
bnnpoROnHzt69vHDbz1x8J1njnz4/E2f/ur237585+9fuwsm+eOb3wBIfn/6
/s9evufDF+5+6/l73nvxR3/9fz8ASL44/7flotarMe3X9X/neTOFv6RdNu11
9QDJv/zPv5w/9+WXtMXmS+bL/OUv//W7z36r02gjQ0MyRWkVeEOkVgdt2bxt
43XRgQEwc2d9HTTCZvkUdNIHSwASrmeat0m421fe63tLL98hFwuG1Z7wShWW
uEByoWKSq0oUD67wZcLBA+/T8WFnXQ0ONBkiTixrD+BbO65IkuRSV3YMKx3i
SZfVyHH5MuGHN1rcx2bXqo3FDJzAJKV2RiY2NVNMVZabk2M0MInudKY/SbbF
kGs3F+Ta6mvKe7tacWzN0k2NDyzMTc7tGJ2ZGEJMjvSBJcN9HTunRjqaa+ur
SnfvxOlvAneNDfbiSQoc1rkd44u7ZqGR3o6W+ekJAslAb0dlWdEYO1ZnqLcL
Gtk1M4V393ibbzXq8MYcAY3gFJYcE8uMkEtMjI+OEqelqmRSo1ajUsqpkJUE
otVqcUBbfWUyGRwCqOAatwuFQjgkOjo6mL1s2bIFIKFuJGus1FzBnImrTxrb
DhYHNF8YtyfExX/jnntvOXYi3C8wJig4JSomZtt2RHJQiMAvQBgYmugXFOcX
CJAkBYelRUSLomJTwqMEYez+X7aoFS8LMIBXyarVQXFM6amzuLQgtyjX3lBd
UVNeWl9VTu1zBzpanXmOmtIi2GNqqH+sr3uwsw0BlrTUVLbX1w52ti/smBzv
720oryi0ZWeplTAhfg0qiwrgk7L8XFKKFf+BG3Q4wHV5fgEgRO1YCSG0RkMZ
EnIIlxvh7f9N4RBC6qBMCHEFx/QhF9AINXKn/bk4gEaMckYjeJuJX1pqRULj
bNieJFJgw6PZCLfD1z35V8zVtXovzfCXbNzNWhmW8KtHCCfURl6TLkZQqzRv
k/CXWvgs8Wh3tlasnIZjZnudscEuxLjHCntsvfGeAMhfuFnRoo3d5mNXqsgk
xA+OHGQSGpO3dvKEgh5J2345jRTozNSWpEhnKNLr81SyfJWop9z80P2LLz10
88sPHT798L7XHlo8+/iBt58+/O6p4+89f+KTF2/57at3fH7m3s/P3P+7V+/9
9KW7OZCwGZJ//+L8X9desqEGqlcqQ8Ledn4NkNDlw/c/kIgzt2y6Ptjfb2xg
4PDSEv5TkqWlSIRJpGUCCdtyRElFrVcQJHxC/F+QrAck9BhmVA174sZ1dWF+
S2V5e02VQZqpSE22szukEN7rNeuPq1lJcrEm8QSJRxPX9YDkEkzivbLDgYQf
ZJKSbGuJzVZksWTrtPgPJzU2xqxRMY2z2pumJ0eG+rvaW+ob6yoBkvLSgl07
J+Znx3fNjM9PM5UkowNdfZ3N40M9Y4PddZUlbY3Vi7umce/0+OD4UF9Hcz0N
/AVI9s7P7N65Y9/uOdpx09ZcV5iXjS/R0drQ3lQPkLQ11lE5pUiYmBIXk5GU
SDs4cF5LjI5OiIlOEyYppRKEnC1jVSmUGnaDr4a9MG3Q2IvNZqP9NQKBII29
ZGRkREVF+fv7b9++nTqQQCN+fn445rbbXG2Q4Ok2bbyeCERTb4ICAvt7+w4v
7Y8NCY8PDUsICROEhDDDa7ZuFwYEJQWEEEhcSzahEclh7DzB8EiAJDk6RsSm
HXRSGTRSlG3Pt1uzswywHGRSmJPd094C5nU0N0wMMwOaK4vyC2zmzsa63tYm
mGRysI9do+kY6mrvaqrvbW2eHhk6sDDfVlfjMJpsOr1BIUsXJCgzRKAIIifL
WGCz4E+rOjNDIxEDJEyTtOIShEKUTpWr1I3EvfKS4FXFKnAXu7pqWTmTuAVC
HeaXQeKa9ksz79z5DVp8Yabust1Z8YcdDqFmaDCDR/9VTiNcLStXyEre4C3f
LKdHOJDwBtn4AAkbLor4HHDjkSHht0q7HJBwI/a4+cJrgISfHuGWbCjf4gGS
bIWSQMLZgw8Sb3jwQcKP1UBSoDcRSAp1OoAkVyluLjT+4Na5lx+69aUHD59+
5OCZR/a9+RgzyOadZ5jGIx/94uZPXrwNFPn8tftwzWVI3Es2DEh4vVSvLkjc
ty2DpKfHDZJzrifA/33xxRcAiSg17YYN1yF62tq+cdddjZXl+I+F21yD31XC
M7fFhg33UGD3wWogcd+11hi+SwMJf/nGmzeXDxJ+XBpIPNqpXcHdN/wMCUBS
kZcjFQpEcTH1pcWNZaWgi32VvcA+gwbcfP1AslbJ6yX0ll8/SHyWmvhKpDAm
oV6yRVZXpWuDs6Q8L6e5ugKKOHF4/+03H2N3x9RCFxPDvTvGBg4uzu/bPQuK
gBxzO0Zxy0h/5+RIX2dLXUO1Ewe4FyBZmJ3AqRCfhbPhrpnJpYWdh/ft2TM3
vTA7NTMxNNTbPjLYU1qU21Rf1d3R3N3WNNLfnZdtyUxLxhvz2NDgML9tYqEg
x5qF02tGcrIkLS05MUGeKdbrNGqVgsJo1CPMZrPBYFCpVDCJQqEASIoKCtPT
RKmpqZGRkcnJybGxsQkJCTfeeGNgYCBuCQgIuMa995bm3/EG/l6VC393MLU9
oZE3EWHhS3sXv//tfwjdxvSkTY9j1pbi/PyTA4MTt/uTRihDApAIQ8IFwWFx
/kGumb+RUWlx8TQCD6+SszCvpryUaoabaqt62puH+7rw4uOFnR4ZnBjodeY5
HCZ9Y1XpQGfz5FDP/BTTSaantX68v2dqqL+joa61trqjvsFuMKoyxLBBSmwc
jOEwGXB7niVLkZ4mTU02KuUACa5p4G9TZVVpTi5VhlA3EnIINUDzpkhavADB
lY5QGQkHEm4QMPtUbo2kZSAUIjGX5WCNwdSp0swdvVxq0arpG+OawVITNjwh
jCTHZ7HhsbPGo6SEX1jC3//rbh0vJpBQ8CpJMrjcyGogITN4dGr1AIZ3f3jv
4N/Lzfxlm9Ur+e1YfZayrFy1YT7LtQDEsoQ62DvkylylukCjY5IYOq73uw7h
HkzjvkWrBSqK9Hp+FOp0a4CECZ2RBQ9znatS5CjEFRb53UvDrz5650sPHH39
0cNvPH7w9Z8tMSB5ipmp98FzJz584eQnL97x2Ut3IT598a4PfnnX2efufvuF
H/zn/3gXIDkHTlx9kHy5Yr2GmWXDB8mX50gprkf+5S9/+e2nn6WlpG7euAFR
XlQ0PTZm1WnAe64AG5CmJjmUG2HTI3JOIz5TJV8ZSHw+w3pA8pWaZM1GZ5cA
EkqVcFUiUIFeIs5IiLOoFE3lzvJch8ce4UsAyfpNcgUR4vFsFwTJJYy8WadJ
fILEV595BiTl9myABIIqtdsgw/aaqsqCPLyVnh0bnh4f3js/s2NsCDjBNQSy
uGv68L6FE4eXdjLDa4bm8d/bYDd00dVa31hT1tZYDaLsmZvaO78DBzXlJcV5
9pZ63Di+b/fc/j3zeDbIBPcyNbGTI80N1S2NNYiBbqZTfX1VuU4pw4kP781T
42NNKgUt32SmptqzsoxajVbJOEQuk2jUSq1GpWV7syqVSrFYLGEvMpmMqR7R
G8TpGZmZmXBIUlJSSEhIVFTU1q1bAZLw8PBt27bBIZs3b6ZmILR68hWA5Nrl
0TnX0YcxUdGHDx76/j98NzwwOCowKCEkLMbPLyEgUBgQFL/NL2F7YOz2gHgI
JCg0KTgsJSxSGBoRHxAcHxyKRyaGRyRHx+CFwqtkx085P6eusgwmKSvKb6yp
bG+qgyHBko7m+r625sqifLNGaVTKKotzd04MzY4PttVX9nc0wSSLO6cXdkxA
HQ0VZUXZdk2mBCdx4oReJrcb9c68HI1ELEkRykWp8Aki32quKytlal/z8vEY
OvXjmvIklNTir9HwTOJCCBWycj6hPAk3DpiNFSDBgSwlVZqcgmDzHsxmXnxL
+OcDJPiDr5Vm4tcG3wPgQSyhGTpEEfyLZKlpKwtZl5MkHqUm/Idxk/WoA5sH
SDwyJFRJwjfJclJCzkuMcHWqFw8S7jiLN/aXnyTxBol3JQnN3PEACTNPhweS
Yr1xDZPAHt4gQbgpovcBEqZrqxZfJVejZ65VKrs8s0CdfnC0+czj9zEj8x47
dvaJI288eoCdqXfs/VMnPnrupg+fR5x8/xcnP/jlLe8/f8s7P7/1zWfuOPuL
7/3Hv77z5fl/P3+1QeJxM4Hkb399+sGfAiTd3aMcSKiAhZ7n048/yRCl+225
MS4qcnHXzkNLe3QyCcKqUYMiYAklSdhrmTdIWKh4msQ7SeI9g+/yd+leJki+
OplcaZCQRnLdg2boQzqJc3etc2mGm//rDZJ1yuTKgmTlE154j/DFDuNb57Zf
j1vWLjXBl2auLVnFNguuYZICSxbOYrunJ/u72qgM0lmY67AYQQ5Y4sDeueOH
Fkkd8MnkSB9A0t3W0N/VgqC5ewf27qINHaUFOa0NNbStBhShpZzeDjxnKTRS
VpJfV13W1lxHuRRmc41KjhOfLC2F+mDUVjipKKK1oTbfYYdDdFo1TGK1ZDns
Nr1eq1DItFotKCKXyvB3gHFIhhjXEnGmSCRKTEyklAgc4u/vD4Fs2bJlq/tC
7dFoiw1tyL1KJiF+0Ig9V9XKtdds3MR0j58cn/jWffcLYuKig4LBjISgoNjt
fjGbtyT6BcRvCwBIqIBEGBLOgCQsLD4wMNrfPz44ODE8LDk6SpQYTyApznOw
+3bL6iqdCBw01jD97hA1zoJ8m7E4x4LrPKuhobIELMGNM2MDA53NEwO97fU1
uWYTmGGQK3DipnSHWpxp0WgpH8I1Hmmrq5kaGqh1liB6WppyTFn4FIfRpJVI
yR5cHxKPuhF3rGg8khqXyG6u4Uwi5CBBA/gooBH2gGlyQgsx0mShRJiE3xOA
BNfQCH5haG4OM/WYbdHmejwkwwaeQZkmZpZ+RJnqdIkmQ8rFakmS1UDCKyDJ
oMSIT5DwKzc8J/96gcQ7B+IzOEKYFQqE2yQrup/xF2t8rt3wQUJPSwP+chSq
PJWGQFJiMHEmIZC4TMJSZDWQ0O0eIHFtsWH6pGnZMhWdXclUzOYo5Q5Z6mRL
ycsP3/n6E7e/+fhxgOTNxw6CIu89cwLXHz9/84fPnmCm2Dxz7O2njr351NEz
jx979bGb33z+u3/+l7e/IpDw7/ECyb/+218YirhB8te//hXXH33wYYow+YYN
1yXFxx3et3fP3Aw0AtjDFWz1CCMTtqJVTYs1BBJCCAcS74UbL5ZcBEguCgmr
fQr/2S745Tw+nSCxfpbY2aYff5clGwTToMNqxqmcOuvimF/U6q2LrwwkFysW
r6e9cN+SS5gOvB6TcBUp69l947SZy+3WkmwrFZOU5zpK7LaBtpaZ0aHBno6W
+uocq0kpSdfIM2srioENaGTf7llyBSgCgVB6pKm2fKC7lbIoJw7vhzFwZuxs
aaA9HXvmpvfvmd8xNtDWWF2cZ8uxGmqrnM7iPGhkanxocdfszqkxCMSgVuD9
ON7tKiUZ1JiruQ6Pd5QVF9iyTCqlnECShVc7x2614q8y03IkMzMzLSU1IS4+
Jio6IiwcB0mJAiAkPj4eJ/1t27Zt374dICF+wCdBQUGbN2++xr2AQr1BrjZI
6MldX2vjhms3XIdvY2xs7Kf/9COpKCMqMCg9LoHxxtZt8Vu3U4Ykzi8wMTAE
ICGTCEJCYv39AZKEkBBhVGRqbAzOwladBi+UszCvylnUVFsJQPa0N+Nlh0nK
ivIqSgp6WusHu1pG+zq6mmvrK4orinJsBhVuHOvv7G1r6G5uyLdmSVKECJzB
FaJ0yidoMiVGhRI/Czw/TAKQVBYVDHV1dDU1FDuy2+trJwb6svUGVYbYptPj
mhZcaIsNv288v0Gr90A9Aol7n+/ydGA3QlxzgVmWsIsvwEZyiliQmJGYQN8z
vkOQDCaBTDiHeGdaEExl7EqQaMUyhFd1q+8lGwSN1eM3jce5njMJaYRbuOGn
R7jwbh2//uDnNPgg4eNntSUb/i4bGgHMryEhkEAjiHy1lkBCJlkNJKut2niA
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
TaGnh63BEa4EyTC2BqZmxtqpea0JizVt1k+F7Z+/eODHv/f5N1659e63H3/7
20+++8fP/xRA8sHPgRkIJB+8/yvUcYNBktvj5hMBEmyMBwUSxlfxkk0lTcFl
NBIqnx4pAZIySzZU9w3d6otAgk1ynyDZ1CQVguT+C1zLF5PEWBNc78ckFdaQ
VPIsBkjKUOQ+QUKbpFKQ5PtuqCQJXNBHb8OX9LmmB7PrS3Pnj62tzk/1R8P9
8cjU8MD81DgIBJBy9NABtJnv8vz0+ur+tZXlo2urM3vHfE6bUaPktbe11tW0
19cJ2jnc1pae5iYI+FTJ59nVakUvr3tPE7e5lc9pF3Z09ra0ynr40l6+SihT
iuUSnqijpb0e7vw7qimWUKmSnQyQ4FEk+AMtu+SDyq7s3EkGa8I8EQgeRX2C
HgeKwAk4ZE99g0Qk1qo1eq0u4PNTmxT7w7FgNBGKGVQ6GVfEbweE8JU8ibxX
AH8oVFaKFnHgqJdQuQuVUGJW6SEQSOxGs1GthdDIqOYaekarGC21oOpWvHAD
3lAJReAKOMr5XKWQr5NJ4GjVaKMeL2gBHtfR2/KiQlagCAraDIqiIEF9uEVB
YibGrhKeKaAIvDi8EXovbBKyB4c9i5W9WR7lELUaBTmfpEKQbHQQs0a74xmt
nmI7yBQtLynVGsMWRYUgKfrEoiAhy1lJkDDWa3Augrz1FzUJ3ueXjZDc1Fb0
CDEiPteeQzMDHTFIkEbSjhxRNka/0i8CICH3GkYnVIbE6YoaTSmrYchjfOTQ
+N3vff6tbz1599tP3P3u0z/506/8/H8CSH5KpUEwSO69j8pbSZAgUfymgcRf
2AJcdMYagysPZIObCkFSZNGnCEjQXgO/HpCUYknlkNjS2g2ZICJzIzhnQrLk
fnImDwMk5XMj5HySykHS79+IgQ2N5CK/QBNkp0cGw6HhSBBiiDbJSCw8EA1m
gl6qwHVx7uiBfSPpWMRrj3pdw+nE/oWZU0fXUDnr1MTwYF9yed/MvrnJuenx
2amxbCLid9lsOrVeLlHwenuaG7sbGzob6rr21Pc07ZH1dMk6O7iNjWIOR9XD
k3A6exsomUg6u0EmvNYOHqdTxhWIufy2uj11u6ppluyk21hoIezcgdWBwZAL
Oi1STfW8FDxOsoR8HF2JgsyNoPQIit356Ght62nvlotkWoUGBJKIxcPBUCIc
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
aRIpjGRSSWd61dqg3gAIwWwJvCg1kw8DkyARiVQg6kKJgqUQjyGNZMJ7JvPY
IEx0sPkCEA5yCAIJXBnBhrEBZmlkNMKFl9ECzyQyYQwDEpYkYXYimBsRAWac
RhBIWN6DVW2YuIVlSLjyjZ9XuagCSRYAWAISHkVkQMLyJLxtmuiVmkgpyUQ9
eTIDhPBCFKY8UTVPY0BCkyRx2tBHmKQSJUxST6Qa9HXr6awIJPf2+mh+ACSq
QMLHWJ5kTB8yo2faTFiyL5CgHBrRlA7Ry/ZyeSnbRo6wJElrcqbluIDkuMjk
uPIkDAaU7HEsQHLQp3QmuL/uOzRnX/nrWEalXO5L6ZHVahViEpDwGRI+PUJY
hU7TgxjVqxjUt6Q0C5DsaUuIbzyJteZYmzBCCB+qQIJqE1bfGeOQVo0KXxu0
ZbiOaRNAkfP9BsTpLjysnhu0L68P4InleDBkN3tNpOMmbLeH7U4AAL/B6tWZ
A0abW2MMmuz2xRW/3hQ0mrq5NFwHnnh9e3Rp1L663ru01oW4vDm8vL261W0W
hQh2pgjhaCIUiYdi6XgqGU116t31wQbxja/3hq3hWms0qPXWmsNRvdst1Ivh
hEejN52Yc84vQtjn5ugMHa1rRQdAArcUdrrCVCtC1iafL+h2o50pdvt2SsXz
G+uwpgOQAIfAh2FBiAMXoYBkvdu+sL1588LF9U4XV3zRp50ubWxxxL4bUhyh
1Rw2sReZATUkkzlEBUsmtbhi8YXlSeC1gBaARtqlMsAD3Ay3FpOWImzXRR5A
PBD8Ppy1h3SEBinUWT1SomPfIQC9WsUSoA527sDvhXkhvvgidd+IJRsEEiQT
GuqFEh5LZEDCMwk217ACDU8jY70zXDcNnyEJ2B0h6S8uNQf5JgFJKhSVAQnW
a5BD4CAEJk/IT8dlrntNwQl58H03tUSGRV0gxqqq+DHJew17c9C9RIkizM8E
CaeeFGqCWLhBIMHCDWpIzq6t05LNHWmwL4sfAMkBgIR29WYYk0y//rEAST2T
gn8A3Tz8A8hJU2+ynLFehgGJsk/ngQLJEZnkbQGS2QHjiMmW6Xb0B/IwOTqQ
yPIe+FPRWk0OJBXJfF7OJKqurSREIGnAc9n55IRGCQI4hO0gkxA1iAJIWImH
BxKUjgCQnOm1MSuCFZyz3RqJfuPcoInHAUvguTUhBkziMxsDFgsaywdN1pDZ
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
H5keUwvP4mAlaEEZrBbOI5aDRDK2lK7jGOmmYDy+1sQdZ7NsErNCg7t9yYk2
YkmERRjEYdTT81wsQCLdLMNt++VPPWbrR5IP+T5bniL6ACU5PVAYzka6RITN
zhQkoBEV1QWWPtgCDXMImoSsu4kagbcJSzkiP3B3Fdnx7ewiBwkokUyEC/AD
jSyDxJ/UpoJVigiNMlIXEKn1i1B6xmi8NkbrG/Pjp5oLj0w2//zV6U/PLX51
affNS0vgkK/PTd+7NHf3wtRXp4buXZy8fwloMQ3Xu5cm712ewobVb65MfHuZ
gOTba1NwT/f5EpDcuTIhbLS5PAmvk0+JIPnu2pwcJN//8Aw2tdoECXojiRwB
TDUSFoH3GKYRBAk79tdimLyMH3KNOG6S1YDkyS3crGpc24oTXJ8WSLJiSGyB
5Mmw5EloxHLfzaNbjlkGie0eV0dAEgNZCSSJkk4Sx1mCu4N5llgFCZoErvxg
NDtFEojjINmUmbpmkIBGIFsKMyErLNkIk0kyWooytham0/AbcITtwC0lG1tL
89rK8mk2NhWntZZltJZlEpaU50K6q4payzd2Vha1lRe0lRe2VxQ1l+Rtzk7N
iQyOUvqavNyAHAASCFZFdPDMcnI2eXiaPNz1ri5GDxd4GzCjKjMJhDPYWDa6
tWK4oWzblqLttcVwP761arihYqi+fKSparS5pndLac3GlNyYoFhdQHCAp97L
VevhqnF30Xq6mXy9TH7wGz38Og/kgGeiM45DIQGNbHAmO5HpgxKno8Aj1ejr
S56GStSIynIuvTBXhJmEr1SIZRMTK4/IF26ClFqyQzlQwZdHJGPB7ICETUiT
WIh1s0iG1mJYf4tJqTMqtKgR3BYEGiHh2lZ5kIBGlO5CGyqE7Iei3T46V3f4
e4N/OzCkDhBCiOKOvcpaWhth5RGtixsE3owmIVfaLIR0wY02OKIWJ+Jihw+8
bgzwC1crQhW+wX5uYQFuKWb/qsyo2a7NFw6MfXpp79dXd399edfXF3eSbbyX
Zu+cn7x9buz26aF750ZvnRq8f37s7tkRuL93bvzmmZHbF0bvXBy9d2ns3qWR
B5dGv7sy/uDqOCmDEJBM3b06CSC5dxlMQnN5HEDy3RULkDy4uvOpgoQeK/z7
/2Vn2+8PFCTlhSuARBiwbwkSYRtOhIVGeJAwOUinl/z4QbKqplarILF6xs2z
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
10fGPzm549MzS+8emjq7o2e2uWiwKr2rMKElJ6Y2Jawi1lifGtVTkgl/8y8N
Nl/cNfzeq3MfnV74/PziV5fIcTN3Lu24e3HuzrmZO+em756fuXNm/PbpMaDI
dxen758ZuX1i++0T20Aj35wdAZDcOT14/9woq37whRFeIzxL7pH3jzFvMH6w
V/gPcdWGLNwI41tn/gQSi8aPP4HEBkhSbBwfbAckVk2CNw4+uOWvZCXErRYk
6TERXKJYeJBgcmJiSChIeJOsFiT2Kz8PDxKrK02Od7RKQGJt2+8zBxKmER4n
DCTLJhE1AsH5JI6AxBZRGEisbvt1HCTy44ARJGgSmUay2Ww0ybl71hZxsphJ
yIbf8lyMuFgDRMnFrpLeqo3MJELgQ7E2wkAysHkj1kloGEikJuFBMl5fOFZX
gMs34BAGkpmtBCRwhexoqYAASMi1tXJHW/lsS+lca9lOYElryVxzKX2lfKmn
brG/aaixsjIzPt6sClH6Bin9Q9VqXiN8pSLKGAwgAYqE6U0IEtJAYjABSCBw
w0a5YlcJMQmtk2CZhYtBdjXJQYJ7eRhImElMGgMJnj6MpxsDS+h0EaO3n9nT
W+fsZHbdkKZXDFRsPDHT99aLkx+8Nvf+y+PvHxx7d9/2t3f33djT886Lfe+9
NPCLg32fvLz905cHPnmp/6MXez55qeeLV/s+O9z70Uudv36x85PDfZ8fG/nk
yMiHh4c/OjLx+cn5z07Of3xi/pdHZt57ZfyN/cPn57tPTbdd2TXw/qszn5xe
vHlxz92r+29f2f31+fkvz019cXbyy7MTt86OQwhCzo0/uDgFhLh7evT+2fG7
p4YgWBiB690zQ3gFXYBD4J0QsiJD4YHrOHDlI36KTCm5e2GCwYO2xU7wr/Ag
ITNdL5P5rhARJDttg+R/P0mQNG2u7e4e/m//9//HQPIDTin5/gdsao0PDYMg
SHA8GgMJHR1PYq1t1X6FxNbZNzZie0fwipuC+T04a7KK5LzgRzBajbAngkQO
kpW/0HrxJNJqVrdX186jnIeBjUZWy1fAHpH4YhoYKToyI4b0tWbFxaVHR+cn
JaVFRGRGRwE8sqKiSIhJ4nLj47NjYzOi4PXYjQnx4BOL7/8Es9oKyUMOd5Ut
3EgXcfglGAk/rMqE6QKu+GJhChAiFQSSGx8HJqEfJuclxpVmpMJVMh6NxdYp
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
KIAosUZdtF6HRCGlEjAJgESthJgDA4MUCrgGK5VkC49GBSFLM1pVmNIPKBKl
9gWHlKVGd1YWjDVVwd9bX0UOXLvLczpKMtuK0lsKUpsLkrtL0xc6q8/MD1zd
M3xlYeDCXNeF6bbXl3puLPVcnG68vqP1zYW2N3Y231hshQBIbiy2v7XUASHN
JLvawSfvkbJJ+y/2dEA+2Nf14f4+yK/39Yog6SfXlwY+ern/41cGPjxETPLJ
4b5PD/V8frj3i1f7vjg8gCD58tVBunYzcvMoCVnEAZYc237r+ODtE0N87oBG
xNw/OYQ7f4WcGSYj0Whrq9WSCBMI60IR22WJQ3DsPGeS5U4S+yBhSzYPfnHy
2QdJXEgogoQtzdgHiSM7bv4EkqcCEjvT0lZVIbH65RYVkjgiCnpgTUJJTm5H
Q+PY9u1TIyNDfX0DXV2gEYWPT3t9Q215BfyWlJucUpa7Ea7psXEQ1mQir5Aw
k9j/aR9+ZerhQbIqk/BNpyt+K3nNRG4S0AgEWJKVSH5+AElBempJdmZLTXVb
bU1z9aaSrAy1l5sxwAf3FLM1GsdNssyShwCJZJj8Q4CEN4l8L7AAEmaS+oJ0
jNwkVkHCHQRssWQjdpWsHSTY4MqDBE0iBwlOc4XwIGFbb+hMEilIppvEsWmN
RbPNRcAPAAlCZaa5hMwkaauAV0Ajuzo2IUh2tZXPbS3YRUolpbs7K/Z2VwFL
Ftord/Vs2dPbsHegeU9/02Lv1vmehqm2Lf1bSpqLM2tykwEnuVEh6SGGJKOa
VE7UfriyE6dTRWoCo7Sk7xQSoVGGKgPCVIHBAb4Qs593kL9PSKBPcIA3JELp
A4lW+aYHa8pTIjvLc+e76o9Obz+3a+zU3MCpuT64npjrPz7bRzIzcGKm78RM
z/md/Zfm+05PtJydarm6s/PqXBvkynTLtbmWG4ud13c0X51teH2+CVjyzp7O
1+dbgChvLXWBSX6+2CGaRADJr/Z2kl02+/s+2C+ABENBso0HyWdEIz1fHRkA
dXz12nZKkWHqEAEkpJeVauTW8W23T+CNhUzuHidBkNw5OQihA0mGBZOcoZ0h
Z6QLNMgPeX+svEIirt1YB4nQ2moLJGJTK5XG7wkenhRIPnvvPRyM9s///X/+
gQ6tF95BQfLPf//3CJKEsHCeHDxIbFHEEZzIww8o4yOfumaHHwlhIQkRoRBH
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
qiZ1CtBRrXxcJz9SX9mnqhhplELhiKpsUle10K6Yb61aapOe7JAeaypbbq1k
um8qVpl4EhaQAIqsdYowkAB7sICExSRGMjEACRlrw8skxgBXAiRKQ2L5CVOM
K52rhC5jFMFYYqCRGYNloQgfkBh9I0Yg+XBe9+5i+6fnp+78HAMJnamVAgkM
JFv7ASRGJjGuMQCJqKRQXqP5xa/vwntbG5uGCuDv5vp//Nu/picnebs5G6jD
zSQuh7BkOcBViDQEJZCdnk65xsrAxk1TD/UQXMFvhfh4AZPAT8PV0cHOxtbe
zubvv/t3f/wH3wH95Z/+yQ+++1xGSmJxXjbwfHiQv4+7Cx4IzB2qwwggxwNP
w0eEVzLrTXP2kUhaXhloR+hdP59tZYEiWOCBJvGhyjjFitCndtZVxNNr40vy
k+xCrB4cVm8O9pCwuCUykK2ooAAQK3vJvshCqAxfOlnBd1n5VWKCArFig4PA
crePCwnmFfkgXQMIvxsfGkK2hHL8NjPumYT7bhjx5JYHJUeEEKVEhoIwkKRG
hdFKiw4XUnpMBCgzOoLmE3hJi89hEomVExuFlRsXDWK9zIuPAQGQFCTGGBVF
qzApGik5ClSUEg0CLClONYgV9UoCX2lh/BCnsEW7Srhz3EhS42UZSfLMZEVW
ijI7DWikOjNJkZVUk5WszEmqy09VZMarcpPVhak12fHAG0Ag1QyW1BQkKfOS
64ozQLLshPqSTMAYdWlWbVG6siAdXtbkp4FtKM0C9oACbFZfkq0py1aX59aX
ZTVWFugkBVpJUWetaLS1fuVo77XTc4Afb11cvr527PT8yInpwdX5kVMLo6uL
oyfnRo7PDJ0CLJkfO7E4fnS0e3F+pLO9vqFe1qarH+xs62nRycpL4BHkZmfj
4+zi6eCIM54FevgG+wZGBoSCoAwK9Q/09/R0d3QE9nB3dAZocXNwsnv5kJON
jePhw6729sG+vsW5uSp5lU5d21BbU1VRqlbK66qlDbXVtYoqUUlBSU5mdnJC
SXZaeV5mRmxkekxYRXZqrai4UVZelZfeUFHYIivtqavq08jhvHrqpc2y8rbq
CjhfVXF6l7Jsorl6pqV6rlWx1FW70CxZahKdbBGd7pQCmWAnybKu5Gw7IhCE
Ih1Ia+0VwB5X++QXuyVmk/ExcwRf6pVf7lNc6VUAjRj5BM2+hyNJSKo0QiZY
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
y6v2BjNxNtC1aHVGa6qtTatt1WnBcoXXE8vaHmy7TtfWpONuydpeSLyfatM2
CVizLS2oo9GS7dTq4LB3art0TR1NTdha3tLy3rmWrlnI0upsbsaCJ09nc2tH
S6vR4jUGS9TV0sJSTzN7jWV1t7aCdvQR8qneFrbta22Df+W4lrulZQsf2Va9
7e2gvo4O0EA7VpfVFp7kbcQOdFhlBzl2qLPrSFcHbYe7uoe6O4coO9zdM9zT
hTXS221U12hP92iPyeI11ljYfqy3Z6y3G9vxvt7xvh6wE/2COjrQZ6bBHqzp
4X5+Hekjmhrqw/0XoJmRgdnRQfxyZX7qxqW1j9567dN33vjxx+/99NMP/uGz
D3/0yXufvP36269deevaJbA//vT9Lz9579MP3vn4vZuff/TeFx+//95bN4Ai
brx66eqV88h10de9vLRw7crFy+fPrZ1dBXvp4tqrly5effXSG9ev3Xzrxgfv
vP3hB+/85MvPfvqTL/7xpz/6h59++b9+/OU//PhzWPOjLz7+7KP3P3r/5ofv
3gT76QfvfvHpB198/MGH77315mtX37zx6uvXXnnt6qXL58+ePDYP+zo2N722
enLl+OLizOTU+Nji9PSpkyfOnDx5YnFhdmJicXZq5dix1RPHlhcXYcuFqan5
6aNQPn9m9cTC7PGF2auXzp9dPTk9PgKssbaycnZ15dzq6qVza1cvXnzl4oUL
p09DbVDPxMjw+VOn4JDevHZt7dTy6tLS4uwM7G5hfnb55PHVlZOgkyfQysmx
0ZHBI4O9fV1t7fDcbqxXq1W1amU92Ia6+jpVba1Spa6rb21uOTIwODczu3zi
5KtXXjl/7uyZ06unl4/DiZxaPgaHBOWLF86uLC+NDA8M9HROT4wuzU0tzowv
LxwFnVpEOr04cWF59rVzS29dXnn78jI03O9dYuv9yyc/uLLMqw9fXf7w6gro
o2uroI+vn8L69LVVrj67cQqECtdPYwsvP3/tzOevnfrixtkvbpwG++XrZ758
fY3YH7259qO3zvz4jbM/fOMsKr+59uO3zv3o5jmwP3xr7Uc3L/zknUv/8N6V
n7535aOrK1dOjI21q7rqKqa61O9fOfHPn73+jx9d+/KdSz9879V//snHt/7r
Z/qtR/qNhw8f3Nti4lk3NrZMIPH4gATlYhUEEljWYVebW1/95rcP7z+4f/fe
/du3Nh7cf3Dn9sPbPHpw69bjE+wa9ssreItXQlU9+oa//vu371Ci6hHYL+je
XZO9ewdtjC29nmPvYstseQcslJnauNb8s2jl3W2swH5ZQl/WfttHd+48vHsH
28dRP9ca7opbZl86XM97t765c/sbo71959Zto6XXm1mW7n/DWOO3ybL4U9z1
Qt84XJD79+6wLMhsX5Slz4u21lx52hqP7Q6vRdcEnQW5Aw16eJttH9xCvwiu
Zf1MeI+ZWAu69/XXWHD6LBkukcB1eHjnG9qi2m5/vWvLqo1r4ao+unvLYCmh
jxv0FWW/fnTLJLwGVXXn6/u3vgKLDvj2V+v3busf3dt6eO/R3W+2Ht4F6R/e
gzUb9+/Au7Dl/dtfw7v69Qdbj+6v378Dj1+m/PDRvdvr9+9tPLgLF+TWN1/B
0xnaDri1Hj28D5YIr19/9AALxShuPgS7sX4ftP4I1bD5EFkiqB9aokcP796/
d+vB/dughw/ugO7e+frera9g/YM738AH4RhQ5XfRHlGjcB8dCdjNh8y+7t/D
9zmsQbfow/t3v/n6zu2vUGarR/egDGvW7z+AQ4YtoQy1baw/xPXA9rfhot27
C2vAQj2wDaqfOTuoHM4IxNRwD90Jd8HeNXt637oHZ38X7m1G8GzEBXgI3P7m
FtQK+6UuERzeXfjAI2a5A1vd+vrhQ7gC9+FA0enf++bRffii4Wv9zfqdX+sf
fK1/8JX+/m+37vyKK/1d0K/59KvNu7/cvPsLbLfu/YqUsbbusO3Gnf/iCj6y
deeXXIsKt/8vSE9ZQz23UFWbtw016B/8Rn//1w+/+T/rd35561c/v/vrn+vv
/Ub/6Cuo59Gt//vw1i827/1Wv3EPwGBz4xHTXbKFvRP7DyRUVSYg2dh4/8Zr
ouJSLpA8eID2givbeLQOQke4uc6wDUvGSNzHp32sf2Pfjor5qkwWvj7Uz7W5
voWu4AayzFAlQ9mwpZ5rmdq4llU/c+EFLc/xEPsktKU3aZuNNxjXHNcKfV8o
uJrHbm0abkUC21vUzc21QteHPnKWLNRmtTXcFeZ2a2NTcKc7vQ7b3J889xtz
rzJ9shvkDjRqg2M38VFxrRV3gjXa6d1lPHf9xrqZxbcW127pjc8ocyv0KW7N
PFvy6hFlNwzPRrqMtG6wUCE0/cglzmy/8RAVwOIC3ob5XUATb3zqbqA7B8pb
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
CEm3sHxkwXT5d2ZRDj300K6J8grlGhR8iKcP1FrDN7QvfvGLT3va03gQP2Iz
Cd9tz7sekeDwwQcfLKbArnT+bW9723777efvySefrKEFfVG5pj/60Y/uuuuu
G2ywAXSSC+y7775YFgMuHwlhSJ9VftFFF73vfe/baaedXv3qV2+22Wb7778/
L3N9GIKuIiTCGRpw6623ul6j9LXeeuvtvPPOxxxzzDXXXJOZgeJ1GQXfvPzy
yw8//HA1bzAtPrznPe+5+uqr86C2la1y++23n3TSSbvtttuGG26o8m233faE
E07ICkm9Pf7449/5zndCGzaAlALzA6dFhRrKmtJTTjllr7320r1K1bveB/k+
9qszb37zm4VUjHTvvfc+66yzeGI3L1oVw4TAG220EftcYYUVbrvttvmzrPUk
OlIln7e85S3Edeedd1bTfJyd6DyXB2jnnXce7CJq3SDqz33uc2GSZHLllVe6
jAoA5kEHHYR45/FHkWElU986n8nDNrtRiURb5Rwk9CnqMPaWkJSNkZIOf+Qj
H9HnTTfd9FWvepWw+Pa3v515RywMUtM8RYv08vjHPx6Y/9mf/RlrZH6+zMP9
XMmKdt99d16TFK9yhAjN2CW873jHOwztpS99KanKQT72sY+JYm38XTDdQ0dN
++yzDzg1fBkoFeseiTF4txhCPRYsFxMxzzjjjAzkZS972Rve8IYjjjjixhtv
LP4/u7B5ktl+BYUK77jjDu0y6fXXX/+Vr3wlx3nXu9518cUXk2TNGwD2D33o
Q7ohicAoGMaWW25JGoTGdFskH6zTrtZdg8M88pGP5E0EYoBvfOMbmfQzn/lM
ohhMkgQQMlesle23355f6Bjts6J0TBApcFAPQ9U9quH1J554YtmzdqHfpZde
6uItttjCGJnfLrvsYjja7eY+C2MwRx99tDq5jBiqn6973ev4L+Ewv8xXB5fO
OeccFvv617+e8XBbSR8DALmxgcoQ1WykH/jAByi97LaUDvm/8IUv8OXXvOY1
Osa1OT5I1C57e9jDHoaZlBjbZK3r5wlDYv/yL/+SUl784hcH61qKm0gtpnMB
FTLCSb/AKYyXWP76r/9ampP6wzoiecIksZe//OVAQwy67LLL3EUIIgUhs7cl
lliCJayzzjr7T8sBBxyQDtcavMiKO7NqY3Ql4YNoxozq1JR1hRK3U6L62dv5
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
3JZu+1tH4ZX5Bam63u9oBERDSyGvnuV1TbTNdqd26Ui7lri+jF/UeYkhmaG+
1Fo2UFbdchLt5oj4Gk4d+5n9VuUR87U5abYJd9PQI74YjuFnoq9mGstnW1D1
mV0RVMA8e1VarpV5P+gnh0poboNddangouund1yf2c7/0HO/D8WVyYUXNBsf
fta/a6w9JabrQabrXz/E37N0ufpQr4+ZmW4nyffGnj6glHW0USHqbLMZZ8F0
Py8JMIMF/WkDqYFMihG19lPfMB79gfYL5h6+3c0tk/4xQf51sbSLgnQve65b
VjbTrKv3a3sYVz2gbI9lnukXzHdTnlk/LejfLFM1620e1sz27yPLr/EIoiMr
lhPVFIMNZtbQ0pyOVQ0L+rc25HrZJf7cqj7bQss2uub1N9pCVskwlDXPWdJD
/Wn5fzlgWMFkukGAWUJCnKdsYEFzvkSN3a860OYvJeoclz048MeVRkFBLC2P
RcrFyomqhm5uRKvIlTceqiGjm+kXMJesUmdt/q2zwoLe8908RVdpJB1uMWRw
ce2GJvyqOZf5BtbpGHduHx7FB8v9Y9Lk4Mo6NvnB/pT+8gifmU2YZ05pbnlU
3RX5z06fwE6my4RaN6nP7IoFqk0Ps4OvSGyr03Q1L4Prml3JZZN6ots02L6B
Iivea1KxbiyhVU8C4GWB7RO6rjnQwKAMpFKhOmbHh7hhNZR7ddjodIw9LJh3
SGado+WDOsmTYOMXVUNUGQkzA7WhOnUG3WTudNlMv92j3rXXekfZYey/wkS7
1rFkkqlUekEwajNO1ye2Zc8A02VxyYVOQ7Wl+5XKYkdISghds+Jottl6WYou
CYQxdg0zH2BX11COrldHu42x65Xe3jsYaWvkZbptnJrMPWmkDUBtT1ocDj/5
+fSyZRqz/SnTubJlO+UFLf95sDmrresPJO964B10ab58qj+ZfqzK21MiJ33u
1npNu3GsazCzUKhtqFVQWXslR62c26HNNJs+qqsL5r7AtN1bnZrbDW4lhJZc
tfLpmqnyVsst5hQMFsTNNifGtHRlkG53c1O5amUAGq126oKuoTctwZv0+/6q
xfl7b1sht/UP6EGNsbXkMtFiFCmpp8hJeVYppVTWmmsptBhvW0p0g1hf3agu
VUNd7yCtKIojPdgcDt8Odj7hqZ9KPuWkNYSFgkw314Pqlm4u4Znv5u03LdAt
tIlSX6mm4Kh2fFS1Id6DPreuXUbSWk7JfNKUGn7L/Voa3PXA2P47achzwXj7
uYbTBvpidF0D0bNNRtn1AXegr5bftrKdL/nBZGM70q6h1gPMGVTbdn4g+cGN
NYQBx6iqiou2N06aZKFNUtraBmfclXAm/TH+rfTq9sH5GF2DpV2De+3kcwFO
mFWbrA2k9yuUxZGQtDg2aThGfVNCrnyha6yl9ZHWDguRynJaKtK2PkC5stgW
mbt56N3W1hpV62X1TSFAy0YG4m09dLZ/E243d/FYa5yFWu0e4a4xzm5uWCy4
KPmU9Eqks3NzxlYv1dt6FUW7JX/gIN283e6tPwYha2lcdbK63Q5wQTPJ3zUe
1CJ/O8wBas00i+hmG8ZYt9fw24Sxm+vyLdNoBzVgg63E2iG3TKlNFedbVz0H
aSGuNaSK2m1nZpqTJ0uVbYxbqHl3c92tleeAS1RbLUHtmhR+PskZCHkgsRZy
58eddsjzb2wrHHDLScP0uiYil/UO3GG+eKvyQfioCtv1nC3DqSZKQfM9oi2F
AwMCM7ig/l0wdw9+KaitpxXdpOEA1b02ls32z5vq+q53gQebIxlb/6rT1VJn
+3KT1gZaMGklM8DM9t4aclU+2MZYTl1yGMinNfW20ZZCt6pp9Ts/fLSzcFXb
wDK7Bj0GKFFqrWXnLex3jVGV8Nvw1zXu2RpGyWqQ37U0o6281V1bSQsjFUYL
B/Jr5LZQ0BvotPuVyuJISP5Ly+Qhyn9rJ36B8lD9/E3p/y9b/qvH+18tt1+2
/l/7uP6frfyyNf/8fi5u8lzcyi/b/192jP/VevlNqefXVf+i6v+vq5+/SLu/
7K+LooyEZLFSx3+UX9TxFtf+/7Llv3pci1v9v67+/IIN/bLV/j/7+V8tz//f
yi8rwN8U+f/a7fw31A4XVT//n20tZuL6/46QjGUsYxnL4lYW20g6lt/osjiT
tIWVkZCMZSxjGctYxvJbWH6j2Eg3EpKxjGUsYxnLWMayGJSRkIxlLGMZy1jG
MpZFXkZCMpaxjGUsYxnLWBZ5GQnJWMYylrGMZSxjWeRlJCRjGctYxjKWsYxl
kZeRkIxlLGMZy1jGMpZFXkZCMpaxjGUsYxnLWBZ5GQnJWMYylrGMZSxjWeRl
JCRjGctYxjKWsYxlkZeRkIxlLGMZy1jGMpZFXkZCMpaxjGUsYxnLWBZ5GQnJ
WMYylrGMZSxjWeRlJCRjGctYxjKWsYxlkZeRkIxlLGMZy1jGMpZFXkZCMpax
jGUsYxnLWBZ5GQnJWMYylrGMZSxjWeRlJCRjGctYxjKWsYxlkZeRkIxlLGMZ
y1jGMpZFXkZCMpaxjGUsYxnLWBZ5GQnJWMYylrGMZSxjWeRlJCRjGctYxjKW
sYxlkZeRkIxlLGMZy1jGMpZFXkZCMpaxjGUsYxnLWBZ5GQnJWMYylrGMZSxj
WeRlJCRjGctYxjKWsYxlkZeRkIxlLGMZy1jGMpZFXkZCMpaxjGUsYxnLWBZ5
GQnJWMYylrGMZSxjWeRlJCRjGctYxjKWsYxlkZeRkIxlLGMZy1jGMpZFXkZC
MpaxjGUsYxnLWBZ5GQnJWMYylrGMZSxjWeRlJCRjGctYxjKWsYxlkZeRkIxl
LGMZy1jGMpZFXkZCMpaxjGUsYxnLWBZ5GQnJWMYylrGMZSxjWeRlJCRjGctY
xjKWsYxlkZeRkIxlLGMZy1jGMpZFXkZCMpaxjGUsYxnLWBZ5GQnJWMYylrGM
ZSxjWeRlJCRjGctYxjKWsYxlkZeRkIxlLGMZy1jGMpZFXkZCMpaxjGUsYxnL
WBZ5GQnJWMYylrGMZSxjWeRlMSUk1Uo+1L+zs7M++/vggw/WxT/72c+GvZmd
be9asGBBPuQuf+dXm2tSub//9m//VvXMzMxUZ3LB/Hb/z//5P4P+uyv1V+v5
pmqrn9KrfG7bSk8GMnFZrs+VM9OSn2anpa051+RzK5P67KdBEzXAjC6fSSOX
aTrNDVrMh2q02m2by08ZVJUSTlXV3lLXD9TqQyvGkmp1psaez2ml9JUPEWOr
0Ix0cO+/TUv+dWNdnI6VFmosbR9qXCW9arHtZIm92m0FGJkrVX87qLqlHcjg
Q1tb2flA7PNvKUW0om6Nv5XSwCSqhwPEiELb+rvGC8orayz5poTcNcZcwi8z
y4f2slanrbTb79PbwV060xpt67m+/9//+3+3XWql0Y7XN9G4hgaaLSdqpQdD
SjsD5bZwV42WeFu55XOZenllq7tBPS3YVn/aobWXlbW0wjTAXNaCQ9VQptvW
M19TNcZ8X/+2WN3qvbW0gVTbG6v+urHtatlhhYb5UhoMp/XfVvgDZBtY/sDa
B0NufxrAxYPT0s0tC3XJ1pFbiPiNKospIfn3zjQoRyn//M///I//+I8xp9iS
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
4Qztn3POOYZZT2QCSjTie91jzOuvv74U0pfletUEmZx//vm66mJXFgrdc889
kdXpp5/OtsO93Qh7taVp1pvhs1jjeuCBBxiMEbmYfGJ4+slo6YWIYuS33npr
2AUhI3iULuF1sc7feOON6owuyE09bOamm25yl1YoumvmfAiQTBiGv5dffrlW
jK5rZjhVyKrXW2+9ZZdd1hD0jWHEVunOkNmML7VYT1IKPULGrr/+euK9//77
XUwOXJgGaVNzBk44CWehZDqmKkp3JUmyrvxaUE8++mMg6mGruAQ4SosEYrx+
NVJ/2UMhEqU/73nP+8AHPlAkPHkQWaG4j3jEI4455hiNkqGLXSbVYvOEzLp8
IPYwqOhU50mVNMiNEPLkdJBrx7SAkjoNXIf19oc//GGF6aRLbODcc88lQ47M
5rv+EZLvSYxR8Q4NwYFMKkZrbPWrX/1qiZp563yYsGrhw2te8xqdNBbi0g3K
ZZksmb11U2ZI7/vss8+jHvUoAE4FibPshFJ0sjiAzrs9uEGGIQwPTtcQqk0f
XOx2/XdZzaUU3Sq2WRNW/kI/2qFffwOMrveh1u3oBtUb+AXT4nvCdA1/Jwca
gZDk007OG7v+xMFbiF5o0QTrpXpVEYs6jSL1EIvvKYJ1GTVUybqjQAHh+DdY
TZIaol+36A8lspYYcDfNQ+VfKufIvm+X5fzmcJLFjpAMjCpf8gvotMUWW/CX
V7/61WuvvXZgsyYKchlf23Fa3vnOd2bGXgzdd9992XA31S+Plun7FZ9fa621
jjzySBr/0Ic+9IpXvALs+6vm/fbbj6GmQkby3ve+V1V+evGLX/yc5zxnlVVW
ecc73sFKXSZ1fdvb3iYTdwGIYPPbb7+9fuZiH1h410PTK1/5Su3KK1/1qle5
Zd111+XOEiX90c/VV189AbSb+0TGMLfddlsD5+P50ljU/K53vaub5q0+qEHn
Vbj//vtnyhQDWW211Visa9inpt/3vvftsssuRmfUG220Ebju+rl3Xu+CDTbY
gKzgp/j75je/mbO0U+gEAnCM66STThKGiLQmNPTw9a9/vR7yjkc+8pFcPmwE
r3NZ7lII/Pjjjyc3PxHUpptuuuuuu8IlTeuVgAsAuRXHdPHjH//4pZZaiqD0
xMC1QrxvfetbddL1LnjjG99IlSWo9uGC2IeyElHy4lakSfm5PH2p/OUvfzk1
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
5Mx1TYeHHlm77iP9vfLq2Fy58/R4phfvPt/nBV5Z/9EG8v96OKX9gw/ly3/d
4SOpEd+8fvzpYPOWLa6/odDGTZ9S4+GUI59/sblEydsfaN+O56LtKA3RCP/X
rF2fPUeu/AUKtrq/TYOGjRs3adaocdN776t43vkX9uz1LBkWL1mWN1+Brt16
UNHRKvzpgAcffJDe90cffUQ4BjPUrl370KFDYKEuXbrkz59/3LhxIDQtgfCO
BtxUHn722eatW7evXr32oYceyZr16kWLlhzt0kRiw4aNyJYt++TJU4+6hUjs
l1+PwIqs2bJv/PQzqoM55e+t8MOPP4nzO3buKlvuXsj7dt/3X+7ac8utJdq1
7wDHvtm7r3adeoWLFINRsIX/k6dMy5L16n79X+Qt2ALTTHY0XG3X/yOpKTzc
un1bsxbNCxa6ftKUydz85fCvXJx1ztmvjnlNXOV1Kq1YqQr0fP3Nt5IUxf54
8GeYdl3BQrt2f0UeSWHuvAXXFyo8fMSoo+I4+PPtJUuXK3/fTz//okIWLV46
Z+782XPmLV22Yveer8mTkhpVgatWry1ZqsxtJUpu2bqdO5TWrHnLHDlzf/Tx
J1Ib/q9esw6JdHq8MxJRi34+9Cuqgkp8vGGj8vC3dduOSpWrFr/x5vtbt33o
4UfrN2iE/lxxZRaKEiuozpiji9DHhn9J/pcOpIg5f/5MyqEfD44ZMaJ1k4bz
Zk73vDQr+dOHMj4asbX1/iCIAElNAMm33x0FJLgIF5BEQ0AS/iXZnzz5ps8/
y3VN7gWLFn78yYa8+fN17d7t672Ex28/2/z5nq+/ItiBWKpWr7b+448If0fx
gA9jCDTEoFmz5xI0wRgAjEsuvfzFgS/xSE/fmTDx2rz5byhctF79hnXrNahc
pRpxkPhLjCNkD3ppCBEQLAEZh3453LxFK36m+BUIBTVt3qxk6VK79uxWzN2+
c0fpO8q0bttGwdcPpNhujJ/E/auz5wTSEPT3fbf/4E+Hvt//w7T/ToewXr2f
I+S9P/1DAtmw4SMDk4/S5X/++efPPfdcrSS59957ASTaTwpEqVWrVuHChevU
qfPqq69u3749NTV64MCPb7wx7rHHOjVo0Khx46ZFixbPnj3nihWrACoY+JAh
Q3PmzD1v3gIZOzV26dr94ksu2/DJpxBzT9nytWrXhTZBODAbwAOUAqmEcgJ3
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
qXX659MH0Akrp0WbJFdJ0zx1UKGz9YaeJiul1TQ0+NdWjDc2dm0+topMeOaN
D183GhsaGi0MjRcKhIBwjMJAcUhw1IzKCT4xMlQc7LtyYfru/z71626M5scS
Erli0KKXc6zSNj07C15WscvyIVHiPYcszxy7itxKxNstn7lNz9fa3/setRXh
2u9+ZD+9Rfp4bgXkM0UgWOFT+GwemOvBelJOw2i3W34DlKtHoXBZ563VP68+
Tk0dUrSidzPorDrtXacc87cU85UjHRrzc6Oe7aQm5/XXl2yFFBj5jTVbviBt
VUU64btqEpI1IbHDV+LFWyXylTb5gopDb7QGC4+duCY7icSKFZd5jMJ3+Bvn
iuQYT3mNsNM47Axif8tIOe2blxrXv+lxpVFVDjMgg1PJSteir3gnPLMWPiZK
W39RbRCfTsiv23tOfPR53Vr98+ljW7o+rpP+GnMNrqxyiuuvOJtnRf5mWwY0
mh+vGj87Q+2NDzufEiBUXQeJa8W2SvjTsatBLuGLex0NJyQo2lZFLld0g1f0
admv5+6M5W/GZXGOp/CI6ixoyiHfLNPAO47JbuLttq+xX7/+ngbtGa9cahcu
OTT5mBu1bxafLNTsiNopv1P+05j+DehT2wcM8UdfRp30XiLyt6DsZpffrPVj
+fle/OwankLyeYov08gwD6HHLl6w21GQhxhfI4knJMGOiI5LG5wEiU34iXDj
1iimjXq6jHvy0z/MlcOPc20zzKw8Hhn8LLzjmOwmnte+GW2UtFf6LMjOWzde
T7skOb7OFf3z4hN6tdZjnaPpEbVRfjviQ1yCiTeif159dI/1Qsoef+ofbiSW
JRv8LRf+8eBZgx5S/MwbGb5u8Vy3C+ckooUT3DJib5FtYh6cdvwffCTQmg==

        "], {{0, 709}, {731, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> ColorProfileData[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIj
UNAApJaBycDRxcmVCagqN6+kKMjdSSEiMkqB/QIDBwM3gzCDMYN1YnJxgWNA
gA9IdV5+XioDBvh2jQFkIMNlXZBZmPJ4AVdyQVEJkP4DxEYpqcXJDAyMBkB2
dnlJAVCccQ6QLZKUDWZvALGLQoKcgewjQDZfOoR9BcROgrCfgNhFQE8A2V9A
6tPBbCYOsDkQtgyIXZJaAbKXwTm/oLIoMz2jRMHIwMBAwTElPylVIbiyuCQ1
t1jBMy85v6ggvyixJDUFqBbiPjAQhCgEhZiGoaWlhSaJ/iYIQPEAYX0OBIcv
o9gZhBgCJJcWlUGZjEzGhPkIM+ZIMDD4L2VgYPmDEDPpZWBYoMPAwD8VIaZm
yMAgoM/AsG8OAIg4XPo=
          "], "RGB", "XYZ"], Interleaving -> True, 
        MetaInformation -> <|
         "Exif" -> <|
           "Orientation" -> <|
             "CameraTopOrientation" -> Top, "Mirrored" -> False|>, 
            "XResolution" -> 150, "YResolution" -> 150, "ResolutionUnit" -> 
            "inch", "PixelXDimension" -> 731, "PixelYDimension" -> 709|>|>],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{731, 709},
      PlotRange->{{0, 731}, {0, 709}}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"depleteplot", "=", 
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1:eJzsvflzFWd+/zs3680yniVT+SGVqmTyQ/6BpCrfZCqVTKYyVbeSWzcD2je0
IgRikYTYQSwGxL7KICRACwiQhJBAiE1CgCRWof2c00crOB57vIwXbMYGAbrv
02/1x41AMrKNpcf+vKvdbnU//fSz9eHz6s+z/DR+7pTpv/e9730v4//Gbkrc
wp+np8ctnvpD/BE8JyMleU5S4v8zZ35SclL6/4n/fZxMxu76H3zve4HjIZVK
pVKpVCqVSqVSqVQqlUqlUqlUKpVKpVKpVCqVSqVSqVQqlUqlUqlUKpVKpVKp
VCqVSqVSqVQqlUqlUqlUKpVKpVKpVCqVSqVSqVQqlUqlUqlUKpVKpVKpVCqV
SqVSqVQqlUqlUqlUKpVKpVKpVCqVSqVSqVQqlUqlUqlUKpVKpVKpVCqVSqVS
qVQqlUqlUqlUKpVKpVKpVCqVSqVSqVQqlUqlUqlUKpVKpVKpVCqVSqVSqVQq
lUqlUqlUKpVKpVKpVCqVSqVSqVQqlUqlUqlUKpVKpVKpVCqVSqVSqVQqlUql
UqlUKpVKpVKpVCqVSqVSqVQqlUqlUqlUKpVKpVKpVCqVSqVSqVQqlUqlUqlU
KpVKpVKpVCqVSqVSqVQqlUqlUqlUKpVKpVKpVCqVSqVSqVQqlUplrJ48eTLR
SVCpVCqVSqVSqVQq1bdNCpsqlUqlUqlUKpVKpRqvnjytiU6OSqVSqVQqlUql
UqkMk+KkSqVSqVQqlUqlUqlUKpVKpVKpVCqVSqVSqVQqlUqlUqlUKpXKII3o
+4o/H9uaqPSoVCqVSqVSqVQqlcosjeBKEOXg4ODDhw+/macTYLFnMiQxIw7G
GPgpAVy3PHXJfeDm5QcPHmD/6NEj19XA/uHDR67In4rQDg/uHj4jpYRI3Hnh
SV7ln3yE3Ci3qFQqlUqlUqlUKtW3T7/73e/8fr/P5/sGnkXaEv766KOPBGlf
nCuhTz/9lAeDgyQ7Hg9i/9lnn5Hg3NE+sjXkAsMR/ln5C8F5/MYbb2Jj/M/V
iGTjT5Rkb2/vhx9+6GTh88gFKnWiJJVKpVKpVCqVSvXt0zfGlWArobmbN2+m
pqZGRESEh4ffu3fPzZJfyJWNjY2zZ8+OjY2dNm1aUlJySsqs+PjE2Nh4+8+k
lJSUc+fODblcou4E8MANlXJ4794n2N+4cWvz5q3JySnR0dNCQsIQc3b2xrNn
z0sw0iujwjEe8cknn+zbt2/ZsmVRUVHR0dFhYWHz5s3bu3fvb3/7gTv+IXVZ
qlQqlUqlUqlUqm+pvmF/5QcffLBz587Q0NDIyEhAZXBw8HvvvefuOyohR4sk
Pz+ftwNLQ0PDg4JCIiKisIHpcAYRHj58mPQ3ZLsRR/RWHbJ9mkPP6/JaXV0T
FhaBLTw8EjETLXEQGRmNS0NP96FlnPfv358/fz5YEs/FPsIWADMkJCQtLeOd
d96TZChUqlQqlUqlUqlUqm+rvjGuBIXV19fHx8cDwUCFU6dOBX/FxMS88847
L9L3VVRcXEx8W7VqVWFh8f79B4uLD+fl7S8oKNi3bx/2zAvHjcpd0vn2aTAc
PhgcfHzhQh2IkFC5evWrp0+fqa29uHnzVnAlTgYHh16+fNkdFfTRRx+lpaUB
JwHIs2bNAvA2NjaWlJQkJycja4hn7ty0Bw8G+UCCrTtJKpVKpVKpVCqVSvXt
0DfGlTU1NUCwadOmhYSE5OXlJSYm0r347rvvMsALcmVRURHuAsrV1tYO2fPq
8LwgG2e4lZM8Br2+8cYbOKbfEHsZO/nZZwFOnD17LkgQpFtaWu7EE+DN3Ny8
6OhpoMtly5ZJGuzbB0GRoaGhyMXMmTM/+OADycKdO3ds52kUbmxpaZO06eBK
lUqlUqlUKpVK9a3UN8aVJSUlIMqlS5dalgUuW7hwITAT/PXee8OdRV/Qa5mf
n8++pvX19UNPd2SV/rQjIgG6gkPxuLKyMvd56dba1eWlX3Lp0uW8xEliEd+n
nz7A04CceOhbb73lTurq1asRJ1LS1NQ05JodCDpy5AgiDA4OBZYOuSb50d6w
KpVKpVKpVCqV6tunb4wr79y509DQIF7FzMzM4OBgwBq40lmV4/lUOEKFhYVh
ti5duoSA3EZIIqGD8pNPPuGMOseOHWMAGwGHlwKBcnL2xMTEgivLyytIlPRm
MubNm7cCLUNDQ0+fPo1omQUwpoymHDEyFFHfvXuXoz7j4xPFo6r+SpVKpVKp
VCqVSvWt1Dc5b49bGRkZ4bakH+zQi7ks8/PzeSO4csi1MsgTl6QfLP+8d+8e
p/o5dOiQOyqEYsDFi5dycGV3d69z4+dhTpyossddhhcUFAw5/Hv79m2AKuLM
zs52T3VLPXz4MCoqJjw8Etv9+58+O3fQi8vt4hSPp6yfMvT0RLuKriqVSqVS
qVQq1bdAYuFzihi348wd4MshxsuQcVwJuMNdADqOrxxyBkI+e6NM3/rb3/42
IiICtxw/fpzeRpQ//ZJDtmsyLS3Dnsw1iquNSDSMtqGhKTQ0kNTXXnttyKm7
y5cvkyvz8vLc6ZcszJ49F2iJG99++90Rq3OOV+IkdWdNpg9ykjo4NJnalUql
UqlUKpVKpfoqeu56GTIT6bPrKk6sTOTKqKhAr1TEsHPn7n378nNz83bvfm3n
zp379++3LEtCErKAYB9//DFuAQaWlpaK+4/dU0mXAEBwJfacw8ftrIQ6OrqA
h8DO9evXCzlWVVVx0p7y8nL3EyXxy5at4IQ/PT19X6WgpHvwswe8Ktkcetpp
q1KpVCqVSqVSqQyV2+B/8OCBGxCeuEBg8viVjOPKAwcOBAUFAejs9SKjQkLC
goJCYmPjo6OjQ0JCKisrh+xMvfHGG2+99dbdu3ex7+zsjIyMRHjc++abb+IM
9m+88eZ7772PR4Elp04NBgMiNnmKTOmDg64urz1YMmLFihXCdIcOHcLjcBKA
OeTCOtlnZa1i39rOTs/QV/AkPnHN9jPCa+meAnfEgUqlUqlUKpVKpTJU0jXR
7VEamtx9FI3jysLCQkAigC4pKWnBgkWZmQuxpaVlpKfPX7RoSXNzC4q5pOQo
gA6oGBkZjS0qKoaIh2MgJEc+4mpMTCyw8f79T3EJxwgji48IVyI24cqsrCyp
2eLiYnAl0n/ixAlZvsSdi5UrV/OhHo9v6OlhkuPViGVK6uvrf/WrX/3zP//z
v/7rv/7DP/zDv/zLv+CYe+j/qFQqlUqlUqlUKmP1s5/9DLb9P/7jP8LU/7d/
+7d/+qd/+sUvfrFhwwZ6LUesqDh51pswjisPHDgQGhoaFRXFeXsePPjchcde
rEDCAwcKwI/2KMzooCDQX2RISMC9ib29Ykhg3RB7Kp5Ihg8NDccG0gRjDj3T
D7az02OPvozYtGmTpLC8vDzUHnV55MiR56Y5K2sVu9cODNz9KgXFlkO0/Oyz
z956662/+qu/+uu//mskZv369X/7t3/7wx/+8JVXXvnTP/1THPz4xz/+oUql
UqlUKpVKpTJWP/jBD/7kT/7kL2x9//vf5xnsCwsLR7gvJ5WM40qUZ3R0dHBw
8MWLF4ecqXU4WFLue+ONN69evX75ckNt7cWGhqYLF+oIkmvWrL1+/ebFi0DS
K/X1lzs6unjXzJmp7FL7ySe/c8fDaJuarnE+2Pz8fEnG+fPn7Y64Efv27XOn
X3o7p6fPp7/y/fc/HJHBLyG5sbq6GvD405/+FHmora3FwY9+9CPiJA7Y8FQq
lUqlUqlUKpWh+slPfoI9oBLm/Z//+Z/D1P/Lv/xLoGVsbOxXx4qXJ+O48uDB
g7yRXDnk0N8Iude1fOed99gVtrj4sDturlGCbe7cNHuFyvC+vgG5JKqqOmW7
OIddk1RjYyPOgCs3b9489MwIx8HBwbi4BIAq+9a+SL7GEL9LPHz4EDGcPn0a
zexv/uZvwJUogb/7u79Dk2N7Q8Ob6JdApVKpVCqVSqVSfSV9//vfh4UPkHzl
lVdg5OOAziNypczhM9nQ8pvkSuCR5D4jIzM4OBTY9cEHH7EvK6dmdXseOcjR
fQb7goIi+hYvX24Ysv2VzkDIp4avSk9jnP/ggw+ionBLSFlZ2dDQiBUhA/sV
K1bGxMSGhUWcPn3GHQ0fvW5dNodq8om8xe/vQRpwMjY2fkRsuOvOndcjbc2Z
M2foqw2udEu48qc//Wl9fX1dXd3MmTNTUlJmzZo1Y8YMHKSmpqaoJqWSkpJQ
O1wiB5U1ffp01NpEJ0o1qvhCodZQTfj1iIiIQJXxpGoSilXD1yrC1gxbE50u
1fOVnJyMf7ySbaGa8A9lcHBwTExMQkICapD/rqXY1SrHqkmoadOmwbJiNfHf
Na2yySzUDuwQGCEwRfCvG/7E64Zam+h0qUYVKog/kn//938vmIn3TqBg6LvN
lUMOeXHJSEAZCPGtt97mJboOh0bxP4ry8w9wjOSlS1fcgWVhUJklVUjz3r17
oaGhYWFh4nC0h7iyw2rgz9rai/ZKIlHLl2cNOfzLS++//2FSUjIQEvz46acP
5Bbs8fOJu5CLjo4unpQ1MQ8fPhJiD+msqKhwrwPyFeXmygsXLjQ1NfX09Aw5
E0Y9cZYgUU1OoQ10d3f39vZ++umnPDPZfg1UzwrvVH9/P34kP/7444lOi+qL
hbcMv4p40fBP20SnRfWiwlvmt/XZZ5/xjNte0t/JSSv8c4Za++STTyY6IaoX
Fd61u3fvouI++ugjtRgnuaSCYOT/x3/8xyuvvEKXpXIlJQ7HIRvKFi1awq6n
7777W3sqo6cCgNS2bduRnb2xt7eft3McJYIVFR0KDg6NiYm9cKFOInfWnRwu
W5gWXEqSgkEYHh4eFRV1+PBhV4fVz/dIAz2SUVExly83uPvQ7tqVA0DE+R07
dg053Wt5FYQbFhaBbfHipUBOmUGov/8OwnPdk7ffflsGXX4dZfg5VzY0NJw7
dw4W79Az8w+rJqfQLL221OI1SLR4UWv4GdFXbPILb5nPlny9UU1C8VVyf27l
Wzbim5u+cZNc3d3dlmW5fxu/RoNH9TKEf9F6eno8Hg+4UmtqkksmbMH+3//9
3zncEnvlSuq9994/ffrMiRNVZ86cq66uSU5OAZGBK48dK8Of2G7cuCWdWlet
WgPqBOvl5uaNiOfgwUJwJVhvxYqV5eUVuP3IkWM4KC0tLSoqOn78eEdHx4hC
/s1vfsNeqRUVFXTqOaMghz8FAAm3bNlGSMRzCwuLr1+/2dDQtHx5FlLIVUgG
Bu5KeMqyurlkCcIsWLDo/PlaZAEpiY2Nt5E5dNOmTQz5dbks3Vx50Z5+aGBg
gJcQOQdgqianHtm9uvGvML/JyyK2E50u1ah65Kw21Nvbi3+I8VM5ODg40YlS
PV9Dzlzr/A6A+nrw4IH766JqUon/bLHKeExCuX///hP732jWnf5ITnL19fXh
dbt37x5/LaU2JzpdqueLFQS7ETb/xx9/rHbIJJf8TuKfs1/+8pc//vGPv//9
7//oRz9SrqSqq6uBWjExw448HMfGxoaFheGYZ4KCggCAHIg6b948jpHJyckZ
sguNFh2Oi4uLw8PDcS/2uAV73I59mC0c4Bb2hnVzXHt7+61btzhHEHuNyg8g
l31BOaxYsSIqCjAbPXXqVKSTq5ngz8TERI/Hw5C495Et3tvQ0ICQeC77q8u9
nM+HCaZz6mtByycurqytra2rq7tz5w4vSfch1WSW1+tFWxqx9pBqckp+q2Hu
qpd58uuJ82m3q6sL9SVzGqgmoZ41hPQtM1GwHkf4K1WTWawm2I141z766CN2
7ZvoRKnGEqkBFfeLX/yCU3S+8sorypUUEAzwBRIErwWcglFRQDAckMLoTyT3
oYgKCgp4BndJqXLf2NhIfMNdnJE11Bb/RGzu1UDIgKN1E6XhIUSGgz179sye
PRux8RFz587dsGEDXsChZyhARnG2trYCSMGeuAt0DOBdsGBBSUkJLkmXHgb+
ev2VKBmg5d27d93R6k/EZBaqj/1g1eI1S7R479+/P9EJUX2x8Bvo8XhQX/qp
bTJrxL+G+G0koShXmiX2wJHxlU9c/cFUk1Csmv7+fvxI3rt3b6KTo/piiVX/
85///C/+4i9+8pOf6PhKt56LZvx35InTkYnBIPxS4ZLc8ux3Fbodh1yI98TV
DQNGhRS1OJTl37IRfTb4SygR4nXr6ur69a9/LWGkRxzkNi+lFwEQ8vXXX0cx
IhKhSHeN88+vWPturqyrq6uvr8dDJVNKK5NZbCrdttyNUzVpJX1R+vr62A9W
v9tMZknPSbxi7Aerb5kRemL3ObdsPZcrtR4nrWR8pf42GiHhSvaD5Umtu0kr
+elDHYErf/SjH/3gBz8AXSpXUiPYze2FdH/gcnf2lpDuq8/C2tAz1ElHIS15
Ut6I8EOu6nDXiCChzC7rHi8gwdyJH3F1RP2O+Cr7Fd/fZ/vB9vb2jvYs1WQT
ah//BONdu3//vv6SmyLO4kvbaaLTovpi4TcclYV/1HTensks+adfzozhr5xs
VpNK1NPTg4rjqNghx2TS+prkYj/Y999/X+2QyS/Bjf/8z/985ZVXYP/rOiOq
r1FPnp63B8Lvw+RsV6pnhTriN3ntoWeQUGuwnfALqXPpT37RX0lC0f4bZum5
/kr9d22SS38bTRRnW/rwww8nOiGqL5ZY+L/4xS9+6Ei5UvV1SbnSaClXmijl
SoOkXGmulCtNlP42mijlSoOkXKl6qVKuNFrKlSZKudIgKVeaK+VKE6W/jSZK
udIgKVeqXqqUK42WcqWJUq40SMqV5kq50kTpb6OJUq40SMqVqpcq5UqjpVxp
opQrDZJypblSrjRR+ttoopQrDZJypeqlSrnSaClXmijlSoOkXGmulCtNlP42
mijlSoOkXKl6qVKuNFrKlSZKudIgKVeaK+VKE6W/jSZKudIgKVeqXqqUK42W
cqWJUq40SN8arnz61/yxs7n//LZJudJE6W+jiVKu/Ib0hD/lz/xiOyefBLah
sX/jlCtVL1XKlUZLudJEKVcaJIO58snnG3aPxCQJGB/IyGePH31KU+TBw/tD
Q4MTnNqvrGfXY+/q8vr9PZ98MsyV8g+artw+mdXb2+/z+T/+GG1yuKZQcWqM
TFqxavr773i9FmtN6+tlaLhE8UY8ejz0ZDDwi22fejj42LbXHw8NfvZk6MEg
Tji/9qNGpVypeplSrjRaypUmSrnSIBnPlY+FKx8Po2Xghx2mx2eDAZwc1uMv
+MJtpIAnltV9//6n/FP+QdN/2Sazenr6UGv37gV+G/ULwOQX62hg4C5eN9Sa
VtlL0iPxSQaOBvkl8In7fOAk0DLAleqvVE2glCuNlnKliVKuNEgmc+Vjt7/S
3T8KOXr0OPCLMTgY+MD92aBtnDxxelEZutnpf/Lo8ZNHj3lseX3eLs/vPrnP
M48HHzGkBNBtEm5+n4WK+/D9D4bcNaX1NYk3VFN/b5/P40WtPQLWPNb6+rpL
+IlDko/sX7nAi4FfuqHBJ0MPsOHkQ/yB/+FX/eFw+Y/xL4NypeplSrnSaClX
mijlSoNkLFc+ts2QYT+kY6AE9OjR8E87dg8fBSyTTx4EjJNBe3v0bdk/fDzU
0/eex3rr/qeBY56Z8FTp/gv3/p53/L3vfvDRxKdE9y+4B9f03/nA1/02ak3f
spdSwjYxfsY+sI+H/+T+vr3ngMtHg58GuPKLup8oV6peqpQrjZZypYlSrjRI
hnPl4NN/Ou7Lx0MPH9hGy+Oh1q57F64MVJ7trar7dWXd21W1bxu6r7zwmxO1
v8Fx1cV3sK+48Nb+o569h9vLz7yB83J1wtOp+7H3+Ue68o95jlXfRT2erHvH
XbMTnjbdP7s/dfFd1M7BUt++I52oNX3XXtL+ROBdeKf6wtvVF96qqvvfyot4
Qe5U1t8pv3S35tqv33gn4Mm0t4c2jI7VHVm5UvVSpVxptJQrTZRypUH6tnCl
M88DoNIekPPE/gz+8WdDqfNzk+ftmZFZmJheHJ9++Nu0xcwpxBY7rzgu7dCE
J0a3F9xQX9PmFqHKEucfwZ84wJaQUTLhCdPtuRvqC7XDWuMZra+XsJXEpZfE
px2dPrdk+rzDiemF8RkHEjMOxM0/EJFeELew4OSF7gePAlw5GHBpPtLxlaoJ
lHKl0VKuNFHKlQbJcK6Ur9bkysecxifQL/bx0P3Phn73aCh5Xu602fsyXq1c
sqFyycYKc7elm06MOLN8SxW2Z8/rNpk3VNmyzZWoNVbc4g3HsWklTtptUXY5
aofvGipuiV1lWl9f+7Y0++Sy7JMr1lWvWI+DyqUbKpZlVyzZUJ2y8mRY6oFj
Vd4H9u/9o4euib9HkXKl6qVKudJoKVeaKOVKg2QsVw49s0LloMzk82gw4K9E
Zt67P5SUfiAurai66cNb/t+1+D/4Fmyt3R9iu2293957D/u2no/k/ISnTbcv
3Jp9v8UeFYc9647Huk3ODXWECuLWYr9lWl8vq6h9H7V7P8bWYn0U2Hyf3LQG
l+1sjJlfUnqqe9DpCDu8jW6/K1eqXqqUK42WcqWJUq40SOZy5fBEPZ+vo02u
HJ7SYdDmyvcfDCWk74/LKK5per/desdjDeimm2666TbJtr6u7m5sHn9vl7+v
wz/Q3n233f/Gbf9Hy3dfis44dPSkd5BLkHD1ysfKlaoJk3Kl0VKuNFHKlQbp
W8KVgSOHK20/5qA9i6DNlXk2V77XZb3h91m66aabbrpNqs2yvJa/3dfd7vN3
+fxej98KYKa/r8X/7vLdF6PmHyo55XnwRFa31H6wqomUcqXRUq40UcqVBulb
xJWPHa4ctBeufBLgyofgyty4jMKaq++AKy2VSqVSTUZ58Z/P6vZZvdg8/sDW
0v3Ost2XIjIPHar2fDr8S//Q3tyD65/5p0G5UvUypVxptJQrTZRypUH6tnHl
kHDlI2TmgwdDiel74jMKzzQpV6pUKtUkle247LZ8vdj89mZZ3e3Wb5aDK+cf
Bld+Nuyl/PTJ0O+eBHqjKFeqJkbKlUZLudJEKVcaJNO58qkuUc5AyycurkxK
y01MLz7b+F6X703YLbrppptuuk2yzerxWb1eq8fb3evt7vdgs/o9Xp/3jVU7
L8WkHz560jPIfrCPPwWEDSlXqiZOypVGS7nSRClXGiRjufIxV8ceyZVPeOnx
4NCTEVzp8b1pfxXv1r3uda973U+ePbkysHm7ewJcaQ14vAOeLnDlmh2XYtKO
HT3pfcTBlYGFRrgpV6omRsqVRku50kQpVxokc7nSNi0GxWXp+jX/nCs/+mwo
eV5eUtrh8w2BeXt8fnsIj+51r3vd634S7QObJ7B1+yxiprfX14Uf7ZU7G6PS
yw+f6n7AUQ6Phkc/jCHlStVLlXKl0VKuNFHKlQbJZK4cnrrhGa4MHA9z5adD
yXP3J6UVn294h1z55TbLkmPrmc1r/0R9yZhf3maNIqbZ2T+7WS+8f/FtvOF1
+3o3LX9ztxd/H7/J/de/2XPABjZP4N8iy295caLDenPFzqao9Apw5WfD/WC/
cDpY5UrVy5VypdFSrjRRypUGyViufMq2eGaUZcD6IFcmzTuQmF54tuk3Xdb/
joZaz5PXnvq+iwf2TPg2kVndHv/wZk9d+Hk/LvnqPhk2J1Xd7FfW6x0+CJz0
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
IuVK5UqDpFxptJQrTZRypUFSrvyuSda/oOuEBu2qVatomcP+BAbSfKUlCXOx
oaEJljNsUc6NI+YlzWwYrosXLwVsyggs2pZbtmwjCQJVxMdBO/bQoRJY+7RI
z5w5x/lPBL6IDEQqulHwJ4iDvQ0ZgPPetLd34lJ29kYObwSLMX6ZcZTdXzms
DIHBZZwNlf4jwUaUwLp160BAQDBwJXv0yVViuLDM6tWvsgfvwYOFAuB4SlbW
Kg5MW7hwsfQetJwFE+mKFUcPEaap6Rq7OMLCJ2HdvNnMmXkQvrq6hmyFwAgJ
rreXDgyFzT/G+pWsUD6joKAgJiaGk6ukpMyqq6u/c+d1WaIU1QQWZt/d2Nh4
8QvTj0zHsQyt9dlLt7ADMz10wGcWLwNwwhaU1a1bt7jSBM40NDRw1lC0rcrK
SiSJi37aKe3mBK0yAhHgz7KS3s6WM3kUDuivxLZy5WqknFPK0Bs4Z848el1R
/kBLIhLbLYCLHmoW5hjpl+8GYCvp/o0zXMQEkZN8xWVJakOl4+rUqcFohHhx
Tp6sBgCeP18L8JdPLnTTI+87duxYZau1tVU8lawvZIOT3sj6mLt3v0YnLHlZ
ug1w0CgTg0JgKfFdw1swd24ap1NmF2IkA5GwOV250sjvMHgdCI9oSyUlR+mV
Jj9u2LCJ8L527Xqfs0zJkSPH0CyZZY6S5vk1a9byKw2i4iI18o6rv3K8Uq40
SMqVRku50kQpVxok5crvoGSOU3JTb2/vuXPnuAgIR+Slp8+HhblvXz5oEbDG
3n2cgAXcISMHsYfFy+5/2K5fvym2NIzMTZu2cCzbqlVr9u7dt337zry8/evW
Zc+blw4DmHdx6lRECGwcMaxPQEYCyPhKmsE0qrEHcdD1iTgBX8XFhxsbr166
dAUWPtKPM7Cf6ZHhBCaIhP02WRrk67Vr13JmywsXLpDLWDjSWVG6vObk7CGY
gFILC4vxLBjeGRmZ5Bo8i5kSlKanlUTsphJ2nWWyeQvyAtseqML+w2Ci117b
ixLGE5OSkgmzAEDUwhjzwaJcuDY9XWMrV64EcUUGFChwFP62bTtAxKgLABpP
Ii/8XICSLy+voDOLPVEJMvLFACm8ceMW0sBJUEExKO3a2otglpMnT7722muz
Z8/Gk/h0lNvAwMC2bdtQsMHBwSCZnJycqqqqa9euob2h0JYvz+IkPz5nPlJg
jnilpQGwRyhaF+FxxYqVMgcRPzuwezM7uCJhaG9IFVovJ6jBLfQn8imjpf/0
6TMoZ0QFbG9tbSfmI7+oZdZRf/8dGTbLHuBcH4ePZldnSQNvwUsEcufnBbxl
ALwgvGMhIVzGtMcW+8eyyck3AZQPO6+i2QBswcJIG/Y7duxCkwZF4hhFBJrj
C4IssGFjQxXv33/w1KnT2NMZjRSiTJBsTqaETC1btoIJRlIBsBUVlYcOlaDh
cf4flEB9/WV+RSHOI+Srr65DZhESMaNtJCenMHl4YmlpufTOlbHA45JypXKl
QVKuNFrKlSZKudIgKVd+N+VeYoPuyytXrsyfPx92LyxLLunOFepFKSkpMHeB
LUQGy57KpqKiAubslClTEBi8IOvCt7W1bd++nTfCeEVsXMUjNDSUHSNxvHDh
QgQDeiABZWWAr4Byc3MlkdIHFQ9CAEQiATjnJBLDCV2PHj0aFxeHNCB+GJCk
GFkEASfb20EK1vTp05EM/Ol1uvnSy4b4169fz/i5zojluCnp0mUa8CAcI5sJ
CQmIh08htSFOJCDSttSXLFnC/o2WDe9MOQLn5+fLKgx0VDU2NuJ2JHLFihWS
ZU42i6iYntjYWE65mZiYuHnzZh7jxjFqVvo5cwApnhsfHx9qMwMrF9HyAOnH
MSod+MnRf8eOHUNInN+zZ4/lUCpBlTEja4cOHWKfYcSA5PEYGWS02CMwywpq
bW1dtGhRTEwMnx5iwyH/xB5/7t69m9EicGVlJTvu5uXlkbksB+1R7Ix8+fLl
4t3r6OhAAMAs4kGhoYniXqSEtWyv2BKWnJzMMbOMaoz0Y4+iwL2SfhwgckSF
kLgdj0NzZdnSLS7zwfJTA13w/MrB7wC42tzcAgJFbGyTiKqmpgZ/sg27x5xi
zyZ94MABNmbu2Ujo9mV7Zgbx+nTbSwEhnvLycp5ERuikZvvBmaysLFlfEuE7
bOHt41UWF8Njj9cHtcDO4dCNGzcQG4Px6Ry0y7zgPKoPZYJS5So88qsyLilX
KlcaJOVKo6VcaaKUKw2ScuV3Tex9N6IbHs/A2szJycnIyKDFyD2sysWLF4No
gGbkFARjR0cgw+3bt+2xmWGpqamcuUUecfz4cRjtNEFpwcI2TkpKmjFjxrp1
6/DvsuUstojwsIpDbBUWFuIkHV7EOv6YgBxpk4M4yGV4lqQcUV2+fBnpxBNJ
N0BdJAwHOHny5Enmfc6cOUgMztOXx9stm1K3bt3K+K9evSrLu1s2TpIrSUlM
D7AuMzMTkTPvoDb8iQQAD5FN7LtsMX5kDTEjVfv372ecXlvIBVgJNIpcA+ss
BwnJ+Onp6bgLqYU9D5MYAQARwA3CMhI5RhUjnXSByaxECL9ly5a0tDSWD56I
SAJdIWNiAB1nz54lNkJVVVXIER5aVFSEJ0ohWA4yIE6wDyIEPiM25BcshjjJ
Msg78su7iDwsXtQa6p18hMBEcjSGHTt2oF0xZjyltLSUMCVlhZOs4ps3b6Ic
iMCWQ/1sBiBK3LV69WqUJ/Z8CgoWT1mwYAEKE2kmUnXaS7SOkf5ly5ZVVFQI
HCH9eB0QD2JjDNKVl8MtFyxYRBf/zp2729s7Ozq6rl+/efr0mf37D3LYL0cQ
9/b242Vhg8SDmpubEY/bTSmz+vDR1dXV4TasEnX5BjFfpHLWIN4+0ihbDuoO
qeWHCOQLYVDj4D7p1C0ueFZKdnY2qFmiTUhIQPbPnTsHI5lkHZj1uqvryJEj
S5cuZfngtWItoM2jrhsaGliqfItliKiuMzJeKVcaJOVKo6VcaaKUKw2ScuV3
TdLJkwc0aAkg4jHBwfXr1/FPJ8xvOlbw72aXPdiS4Tn3CHED9AE7mXBHbyZB
gGcYOYlMAA1YCuNcRpbxuW22YKMyJUQS3ssJYW7cuIGrPElnHCcgpcMRtyBa
XGpqaoJZXldXB/oToJDBpLdu3eLsMZAsI4JjxNzS0oI/6QIbMbURj3GAR+B2
mvFIbU1NzYULF7heCXMB/MGfTL/MwQL7X6Jl71D62hB5uy0mkuXDQuPttbW1
MN1ZekwS8AThpRPvsyLNMYwkQ3KBh6J8gFqwhbAn2rDMLYc48AiSAjIl85Ra
jt/QcnoOE4iQX2ApygGxyVcFmZFGcoQ/ESeeXl9fj8BgcNwoT2eEBCv8iUtE
Y4QnpLBdIWGIClljabBCGYxiGaKdoFLOnDnDUiIMMgtM1XPTj3KWJUpZVmx7
rCByFomSUw8h4vPna9nPlkM12ReUg4IBmAcPFnJi1aysVfb6HXnsDLB582Y6
Q6V8hJHlw4LMncsi4qPRbPhaSWVJh2d+7sAxvf8oXrQcftng1x4BPYRhk+Ab
hKt4I1BWQHIiPFsLXxx5W/k1CXUH6kRg3MK3kgXLAmGpypzA4/pRUq5UrjRI
ypVGS7nSRClXGiTlyu+a3J08iYeWwwK0YGG901Xhd4kWr7ifaHmKFSp+FiEp
y1n/UYaM8RJjoJVOjrBcXku/s/6dPJF2Po1hy7ZdGYAWrETrfgRvkdwJSlhO
719mAce06km+BA0SlvCmkK/M5COlxMwK7rlnARK/nsQjybYcZ6VlMw4vSUak
263Y50ykkI546MbgSp9rclGEdDOp0LqbmmVdThYyH8enuztqum8hDpPr2W+T
jxA0dndhlRhYhm6S8jvz7vqHe5Z2ClJJcwLUML9MJ8lOSlLKwd0apUkwYVLL
0lHzuemXemGSBPFYDvShg9rEk45deXmFeCQ5GtS9cGRpaTkHJm/Zss1e+3Va
VFTU9OnT8X6xgiT9fqcrrEyoK01IGgY97GwzbL1+pwu35Xi6mTt+dZEsyGcZ
8bbLeXlH2Ah5iY2NJx2Cttw1IrUp7Mn43Y1k3D9KypXKleZIudJoKVeaKOVK
g6RcqVKpVOMVfjPPnz/PTtcJCQlVVVUcw0uSPX78OE6y029FRcX+/fsZEsFk
7O2X4K9vq5QrlSsNknKl0VKuNFHKlQZJuVKlUqnGKzoN09LS3JPYpKSkzJ07
NzExkRNVASTXrFmDX1ecwdXNmzfTKex25k50PiaFlCuVKw2ScqXRUq40UcqV
Bkm5UqVSqcYrGa67du1aoiXnU+UcyDhISkrKycnhDE5lZWWlpaUtLS0cqyiT
Ak10JiaLlCuVKw2ScqXRUq40UcqVBkm5UqVSqcYrmeWGkykBG/fv3w+QzM3N
PXXqVF1dHYeL+p35WrlODYlS5tsZY5zsd0rKlcqVBkm50mgpV5oo5UqDpFyp
UqlU4xUn0pGlSDmzjYBkpy1ncQ8fJ8KS2Yndc2FNdD4mhZQrlSsNknKl0VKu
NFHKlQZJuVKlUqnGK0IlJ5uVCZBlFl/Yme5JgznbKidN5S1cEET9lZRypXKl
QVKuNFrKlSZKudIgKVeqVCrVlxCHWMpSO1wO0nKWepElV55dVYTz9sjqOSrl
SuVKg6RcabSUK02UcqVBUq5UqVSq8Uq8kIDE/v5+6fIKihwYGOjo6BB/Jd2U
snAq54Plmo+yYuZ3XMqVypUGSbnSaClXmijlSoOkXKlSqVSqCZRypXKlQVKu
NFrKlSZKudIgKVeqVCqVagKlXKlcaZCUK42WcqWJUq40SMqVKpVKpZpAKVcq
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
D7lSdTpbTJkmk5OTaQQvLS1V83zBqg7L3I80w8TtUX7mqampuEFUYPPmT4nt
fOQYizgmJiYwMBCPbm5urt2rnLcg3rB6SbhSuFIjCVdqLeFKHSVcqZGEK99C
KvoocO+3v/0tAPCXv/zl/zeE8NW//Mu/YP+v//qvCxcu5HTCYca9HNhjqIwx
+f/8z//8x3/8R3p6+jAoysE8kISGzoyMDFzyT5b+r0/g33/+53+OjY1lVBaH
bVESXEXTUkBAUHl5JcGKSEheUBxHF8TJk6OIEvQmzc8/DiLD4H/v3n3KwqjA
kGQEIKKdDkiFUmiE4nQ57IuKSuiqygSpqTvpSUtD2P37HdXVNTRlLl26XFWP
Jkscoz7MHPiJfOrrG7h6SFRUNKuB2yVXIg39YAlHyoOX1lhiDjIhWZO77etd
sp3ZEfh48eJFXkvC4p53xJmPuFPeDm2vqPmZMwU4gzRbtmwl8LINeacqDnCz
b0ETtiRgnFF6sOFyOutyfiVavri41LKHtjBUDu7kLZ5nTh1FBfAUgfuwX7Bg
AUuZOXP2jRs3WVUVIvjgwWz6wTKiDsFZTTvFPj4+njFvr169qmCTTymfumH8
YFU+u3btYjOi11iB27fB+B2WodxcRyY8PBxouW3bNk5WVX8OApXaSbhSuFIj
CVdqLeFKHSVcqZGEK39oUuueqDCzGORbQ/RgDOBpbVT2KVIPBvONjXe4jmFk
5BS1qCVnKQJAMP7n4J8ESsMWM9m5czdNk9jPn78QybKyDgFM5s2bT0S6eLEY
KY8ePUbeBJ/Sw1aZRK9cucaiwZXkRLIMKQPgxgu3bt2uZk3yI6c6oj4M0QOQ
QeZ0xMWWm3uUBIocUlIWkPhmzZrD4EW0MKrpnPbWIOOAwQmSIK9Tp86cPHn6
7Nlz2BcUFJ44cQoIefr02XPnzl+/Xo9K8lp8ZFXXr9+oZqEqMxyrqmaPMugu
6karLjgOrYePBw5kHT6ck5CQRGMrqBwVxrWoOSmM1liF9moWp8MyBXLxGiDk
rVu3fOtUtvDnBRr6UIdVq9bw1sDmly7VqqryANniBoG0aLHly1eyx9UjQUfo
KVOmIgekoUsza8jfBIjtc+bEEsnRuR0dnUjA1ua908s6O/sImotuwxbVtigf
VzRZZmYml25Zv369CkKlZsWO6V+Y6I0lXClcqZGEK7WWcKWOEq7USMKVPzQp
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
XvayH0/71pbme47me3dam5raGrE3ubL53u3mb1ZsuxyWmH/wVGM33/Buw3Aa
w6OlcKVoVCVcqbWEK3WUcKVG0pcrPeYv1271wbfnsMPd4zZMe2WvMSVuW3Ti
/ou1j+40f9FiDWNkk0022WQbP1vb3dZ7d+639HHlXcsn9l7T3W9Wbq+NSD6e
XXCny2N48HZ3We944UrR2Em4UmsJV+oo4UqNpC9XKpfXPnntlS7cVLfT5MrH
vUbknO3Tkw9duPR1U+uXLW2tsskmm2yyjautreXeg7sdD+62t7U6WgCXrQ6c
aW9ub3Z8s2JrdURS7pFzt7sMw+nyWO4oTv83f38JV4pGVcKVWku4UkcJV2ok
bbnSPSxXGk6P0e02HvcYU+P3TEs8cr76m1vNv29yNMsmm2yyyTautubmlvuN
bfebWhzNjXdbbjc333HcbWm909Z056sV28rDEg8dKWwwudJ8xfda23BoKVwp
GlUJV2ot4UodJVypkd4rrvSeNwcfLo/x0mlxZVz6lLgjxbXPbju+bG65K5ts
sskm27ja8L9P293WlmbHndbGpnu3mgCU3vmVX61KLQtPzswuuNFl+cBaPxma
m3ClaKwkXKm1hCt1lHClRtKWK43BuNJ7xuX2cuVTp8mVUxOOnK9+dqv5u9uO
L5ocX8he9rKXvezHz97cmr/E/lZrZ0NbR0Pr57dacObhrbvPlm+rnDzvSPbZ
hpeGyZNuc5KlR/xgRWMo4UqtJVypo4QrNZLOXDlQJldC4EqMQLpcxguXERO/
d3pi9o7MpkMn7h062XL4RIvsZS972ct+XO0PnWjDlnWqOev0HewPnWzOPd58
+Hh73MrKyQkncwvaXzgNpxWxx/2qFSyFK0WjKuFKrSVcqaOEKzXS+8eVHo/L
nITjNrrcxnOnMTMxNToOaHlwavzB6Phs2WSTTTbZxt+WE5VwODLxYGRiJvbR
CZkxcZkxsdlRCScjYvOOnWt/2WvFg+Vaxe7hRu/ClaJRlXCl1hKu1FHClRpJ
Y670+La+f7nIiNPpdrmAlh7TXpl78uqitYeWbTyxeD22U1pvSzacXrTu5NKN
ZxZ+cmL55oL4ZYfnrT6KbdmmsziJb7EhGY/HvLayDbqlrMmPXXKInYWeQoei
N3Ew5hWTbdBt/tpjK7acS16Vl7giBz2F/sKfm/x9jey2yNwKFmw4s2DDqfkb
T2BbtOHY8k+wnVi47uyqbRea27tdHqOn12UF7ekyjG6ZXykaKwlXai3hSh0l
XKmR3iOudCuuVCZL3M9zpzkKwYP4QvPtuafv+KnLXEKl8f7Lmy1Pv+nyfsvt
mds/sWzjarvV9ryh9dnDp8YTp/cMelP6azxv6CD+rf3+O2+vSX+N+Pbctz01
jCfWvttjbjjzdbc5r8F6yQMqX7pcj7G3XvVD/M8gXCkaTQlXai3hSh0lXKmR
3kuudHvMG3F7jJc95ucea4jitMIJ6rsxDCJgmR9x4Gj74lbT/eddfQnUXrZx
u6HXmls/f/zMpXpKumycb/hba2v/w92Wz548d495Zd77jW/sHvP/JtPxlce9
vYbHZfAN73F3W1ZLsVeKxkbClVpLuFJHCVdqpPeIKw0vV5rjD7fH7eR5fOhy
mfu+q3Tee3gnbrPj7re1o9e6XnTzW/N/tHFQQ9kPv0ev4c/t2ZPnLpdrPNRH
9sPv+RfX2fEZ/kd7+viZ0+n0As04qNv7szcPrFCv1gxK7wnrH8Kmeew2g7I5
nT3DL15pphWuFI2mhCu1lnCljhKu1Ejac6X/odvjMg2XLnP44fZYb3mn2+Ux
+sYq78fe7TEczffuNre8fNE7Huoj+9fctzju37nrePa0y+3xDaHd5so446Fu
sh9qf6/twa3bTU8ev0CvcaGL8VCr92Zviv4mLsPoC87j/QHN+wsMEpsTHMyz
Fl0OKeFK0ahKuFJrCVfqKOFKjfTecaXl/4oPTgxF3G6X6S7lcvW6PE6PL5mm
m9NlErPHuj8cYN/saHW0tD1/YRIKN4/Rby/bONza7rWz19QZduiYV0y2QTd2
zf32B3ebW1SvSX+N7OZ9ibt9LMmT3n/w6u4x3G5Pb4/JmMarh+7ClaJRlXCl
1hKu1FHClRpJY65UoxDD3Tc4MTjss1ylzIGKyzfp0j2865Re4n9e6LLW1lYM
SMa6OqI3EN+NT58+xd+dDELGv9BN2GPciF777rvv+FE0suI72+M79s6vND85
XWaInm7D4/R+xlfdr+gC4UrRqEq4UmsJV+oo4UqN9P5xpdupQvhw/pqb0y1N
HyqdN7fb6fbdBW/q7t2m5uY7L18+tzdF3yKeso3L7d69Vofj7vPnT1VPSZeN
54298+BBO3rt8eNvecat//tkXG1uw+W0NrcFkN3WZn3s9ZhLinQbrh6+4m12
zCElXCkaVQlXai3hSh0lXKmRdObKoeXvYvV+iu9GP3ul/L82ziXvRh11//59
vCQfP3481hV5b+Wx2SttL2/bz2Wv/WITrhSNqoQrtZZwpY4SrtRI7ydX/jAk
XKmj5N2oo4QrNZJwpWhUJVyptYQrdZRwpUYSrtRXwpU6St6NOkq4UiMJV4pG
VcKVWku4UkcJV2ok4Up9JVypo+TdqKOEKzWScKVoVCVcqbWEK3WUcKVGEq7U
V8KVOkrejTpKuFIjCVeKRlXClVpLuFJHCVdqJOFKfSVcqaPk3aijhCs1knCl
aFQlXKm1hCt1lHClRhKu1FfClTpK3o06SrhSIwlXikZVwpVaS7hSRwlXaiTh
Sn0lXKmj5N2oo4QrNZJwpWhUJVyptYQrdZRwpUYSrtRXwpU6St6NOkq4UiMJ
V4pGVcKVWku4UkcJV2ok4Up9JVypo+TdqKOEKzWScKVoVCVcqbWEK3WUcKVG
Eq7UV8KVOkrejTpKuFIjCVeKRlXClVpLuFJHCVdqJOFKfSVcqaPk3aijhCs1
knClaFQlXKm1hCt1lHClRhKu1FfClTpK3o06SrhSIwlXikZVwpVaS7hSRwlX
aiThSn0lXKmj5N2oo4QrNZJwpWhUJVyptYQrdZRwpUYSrtRXwpU6St6NOkq4
UiMJV4pGVcKVWku4UkcJV2ok4Up9JVypo+TdqKOEKzWScKVoVGXnyvLSivLS
ss6OB4bHZRhuj8flwd7cjL4nzPvBbW2iMZZwpY4SrtRIwpX6SrhSR8m7UUcJ
V2ok4UrRqGoAV1aAKz0mVzo9Rq9w5TiXcKWOEq7USMKV+kq4UkfJu1FHCVdq
JOFK0ajKxpX/p6y0CtuDB59ZT5TbbXKl09q8aDm+njORcKWeEq7USMKV+kq4
UkfJu1FHCVdqJOFK0ahqKK70eLnSbTdZ9rNaisaBhCt1lHClRhKu1FfClTpK
3o06SrhSIwlXikZVdj/Y0rIKbB2dD9yGZbA0XP1SDthEYy7hSh0lXKmRhCv1
lXCljpJ3o44SrtRIwpWiUZXiyr/7xd+XlpcUV5R0dLZ7uXLAY6WI0mX0Z07R
GEm4UkcJV2ok4Up9JVypo+TdqKOEKzWScKVoVGXjyr8trbhYXHGxo/MeLZUe
ty88j7vPPGlxpdtlbWNZb5El4UodJVypkYQr9ZVwpY6Sd6OOEq7USMKVolGV
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
eWwiZnAKWQiYJy+C/SVH4zemRq3bs1ifEpmcG5VUGpZQHJFQGKXPi0lIi1u9
c/3GgpySvn4TOmcU+paw2PgpVL20nV9KKH5iITZzsdLND3Yo/ouUa6McpXCl
jCR3rgT4mklR/DVcXBCXFaIcWylcKWspXClHKVx5NUV+QXijHMvZsJFwkJXP
e4N9DInxDhWy5y9urEhqDF9vUIhJJElVkDOpBQxd6j9UzhwsBKcbwaEssPMd
8ytJbcv/VHaPT2HojaXBc8qC51QEzDoUeMNB7bTDmqkNusnNOm+U+Ufj2qHD
ZTTVTl1q506Nc4efU4evS4favV3j0eHvdVjjXhM4oWLBzIz5s3ffeXv2A3cd
Slx29r2XuLTtoL0e9J5BeDt8AUVoWvtRjRVU3MQCOCkCCPQhOsWKIOnwJ3pg
OXtOtDNUje4AKUVLkniWtbOTXsMSr40iURKclELlj/UzZ0eUI22CsBNWjiJc
yXD2fsvCiGYZ21k1ceASB+q6wVtbGpet3RWxZk9sck5UYl54fF60vjA6Pne5
IW9ZfEr8ut3b97afvsSbvO0yBqMTTY/kSka4XzFW51e5NspRClfKSLLmSnIx
t1qt0h5KL+zoTqzgl3KtfYpxIoUrZS2FK+UohSuvji5nhhvdNofdAoXEJhJ4
4qMRGVw7EsejwTk7aRRv4mSs3S1NxxobATxfVguqJzLcj8IzL51C9JeVcnTz
SwfXPrT//+bvu+eOfXfelLtwdsW8GbUBnkc0zkatc6ePqttHddRP1aVWdWic
mjQujRqPZo2X0W9ip+/kdvXkFt2ket2kGt2E6gBk0CwJmloUOid3wS2F92ob
Vv6ld1MS2Ps+qMsEF7vBwBkwdB4MXUBOs4wJpfnkeZAgplhjwoKMVIKxEsWY
clby6TgUfjckZA3ivWtRFCdek8SiCoYyYjGzjwqU2EWv/Z8Hcm2EExLpk1f+
uybOUqT+sVJb57f5iRxpRb6Mx+mIcSsNipS+znDYps2B88Mgtej4Y/9Kj9Xv
iE1MjzbkRRvyYxLzI9ekLUvKjF6Tsly/772txsaj6MSbhSqoKKMPPJM0hXmV
TzsMxwlfI0fhSkXfRgpXykiy5krYsaNHj549e/bYsWPHjx/v7u7u6uqCf8In
j2HBJ0+fPn3y5En4fH9//1h3fDxK4UpZS+FKOUrhyh9ElyNKYeZOC4GK9iYb
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
Dqbnffvxo+gkIs3no+hHlsKVspbClXKUwpUy0rXDlRTvFcrR/PScEfJwCjN5
ZL9kMVKhmbvVVteTwzlSUTydlbPgqDqK5ito0ggEaAaRGMs7i7JWCliwic9s
AYP9YADXNOk5AopSwMf/Ort+RX3k3Tl33p4XclNR8GxImpVB02sCpxwKwJVN
/N1a/V1bNKpmtapN59wR4NamdWv2c23ydWlTu8Nm1Hh0aL1bdROO+E88EDSt
IHTW3vlz9v9RXRD3p8NPP3r+q/fBwRJwthsMnEe7Hh4EpiFb9UwGf3pWyBlj
R5csPjyw37SZpRkKBaI2tx1u6Tw0QF2kRXslsX9y4GoFVxKJNS5jY2NVWAQt
oR588EFycRbxc6zEAZv3NPqTY2yu1CS5K7olweEFXC0FH9A+BlS2gcdeK1yS
uGdJYkZ4Un6YPjfOkB/16L5V+l3vfnaw7QQg5UjwpmiRFrGZknAljceecJYU
rrwepXCljCRrroTL6enpGRkZ58+fB5Jqwg5xBwxhTkU/jKShlOKfZrO5vb0d
npotW7Z89dVXX3755Xvvvbd79+6cnBzIleTm6pjfYlX0X6VwpRylcKWMdI1w
Je7KaE0s5TCikic3Sm0O4qBIMULjxFKDoiHJrlgEjUpn0pDpINn1A+tFYDkH
zGeA6RQYPAGqC827v+h4eX3xqkX7/xCYuvC2gpDZFQFT6rReLf7eRp1XhxoV
yoQg2a7xaNO4krImLX6qFo1TM/KbdW3VuDdrPJv9J9QHT6wI9CoNnVT0y+kZ
oRNyfjm9epH/sbXLTO/+E+TsAu114NIxZEIdvgioIWRjhYzJsnyuIpavoHGi
w1iQk/v51m1btu7Y8sn/Z+9M4Ksosv2PgDKyhSygzjj+35t5b3TGBUcddUYd
38x78978fX9nRsl2k9ywowjZA7gvMKi4goqyCCSB7BAgISvZgBA2ZQ0hewhb
2EPWm7t01/90n3srlb7JJULivQX1+/Sn07fTXV3dXV1d3z6nTsVnpqQXZOce
3v+9qb2FoF8tsY5pgqF++qvNgW0YXIZCMm7cOMqVt956K8yfeuqpM2fOsA6x
NFos+TEj+Ugszdks3ZrCY/2vOtKl+qdT9Z1tl0h2yZnwdzMCw9L8w/P8I4v8
Iwt0Edn+s5NfenV94paGpk4lRCyOb2npgn5JdUy2fglgGFZiCVQjUTfyKMGV
HIl3rgTt37+/oKAASh1RP9lRWoGFy5cvw79yc3NPnTrltOze0MKyQd96uACY
n5+fD0SZmJgYFxcXGxsLaAk/4+PjYU1JSQlhCpWrlS4hVoIreZTgSo7kKlyp
IcdudjobRtL/WuiYDrZ97WgUvSItXS61NJBs90N02xI7zSGHmhQbYkeLYlhs
PkvO1pPDO8mGbzs+nlfz8gu7/u/DOY/cUfjouNLfjdv58Jid40d/98joQ+N/
cuThYUfH36rYNB8YWnP/4IZfDzn1myG1vxpU/xslNFClOlWo8WbLxw/Z9dsx
hY/9NOuxuzf/4Rc5Lz61L0p/avn77VnxpGa/Ml5nC+DtJbV/6CVy6cyuTSmb
16xJXRObEBsfvzYpeVViWmxqYkxi8trEAyV7CQYJsl2RTiUabb9xJbGxIZJj
XV3dAw88MMimIUOGwPznP//5rl27iNrsoYCpeS8PuLo5FffElehOZutxaVG7
9OI2wPHAgmcvkcT041PnbvYLz/CLzvObs9UvMlMXnhEcvini7Yzdh1owiI9R
/Xgh4wXpXm6VwUxli81s3DNQi7qRRwmu5Ei8c+X27dv1en1gYOCSJUuIXf0J
OOnt7e3n5zd37lyDweCc7N7Q0nAl/Lx48WJSUhLg5Nq1axNUAU4CVAJdwsKa
NWvgv2VlZbi9c4OiC11Vgit5lOBKjuQqXEm6mR6twVJU1rNYxxsxETrJ6C2L
UMAMsWEzTlr9HrVjRFJylGiQnF5HkFRSMBJLmzJIhbGTtBtJm4G0tZOWK4rf
bOt5cvqYVJx2Yul730fqt7749KZnfpH7h7uKH/cAWjz00KiqB4bX/vondfcN
qbp3UPVvBtWNH1r70JCaXw86ft/gU78Zeua+oXX3An6OOvTomIOPuH3/8Ki9
D4/c9dvRpY+673jyjq2/vyvrmX+pmP3i6Q9CycblZPeWutjP9i7/qHD5ktyY
bzetXZUauyYtbl3itzEJ65KT4tenrdtwYM8RgxKryBpxFgmnv24LO4AIlhCY
BwQE3HbbbYMYDRs2bOXKlYRptjmHK9kPEex6m0usxRrvqcMCLC4bFFswY8W2
SKThIlkS971faJxubrr/nNy/vZKhiyoIisqeGLnhw+W7Ks8qbrFGZrQXa+lB
c6ZqLjcr3WCNvbkii7qRRwmu5Ei8c2VkZOSECROmTJnS2NjI+mFifwTQ+vXr
gToBLbOzs52c7xtUbPEwmUwFBQXAj+j7CnQJRAkLME9OTkarZUxMDKxH12Uh
F5fgSh4luJIjuSBXUuJTI6JIav81k4oDpq5emFaGZEyZZtsoG5YurmQnizUd
TErqASopUVowVdiy09pD09KFqxLCi0UdPbPjImk+Q87XkdrvSUGitPrD41HB
e//xVMlT95U8dnfJo3fu/K3nrkfcSx8esW/87YcfGlH94Ii6e39y/N+GNdx3
e8X9Q8ofHFz5wGBl6MzfKDbNul8PAvasevDW8oeH73pwxI7HvIr+41/Snrpn
3VP3JD//2OZp/0gPn1SwMLpk6cI9q5dmLf9y/brY1atjUmKS42MSa083qlwp
q4EeVL/YfhW8WyVVuAyo+P7776Ox8tZbb0W32MGDB8+YMYP9zEvfzgNfgUvM
lwWJliUqdFulXyosClq2qWGizMRoIe1m1Qyp7AqACOS4p9I09+Mc37Ak/Wt5
PpE5fhFbfUKy9ZGZL72RtrHoZJMa2ddssjoeq5NF+dyhJo6dLgVX3kgSXMmR
uObKkydPent7BwUFJSUlEaZ/H5vh9vZ2qGkDAgKgEnZajm9oUZsjXPaGhgbA
xtTU1DVr1gA8pqSkIGACaVKHWFzOy8tztXIlZC/BlTxKcCVHchWu7MGXtQsw
7cyOmp6VhAFL7F/ZZZfsSqirX2U3e1a3Y1IjlOotKRGDJHcohkuZ8agkqrEK
0MFiIqZOJeqOoZV0qFN7K2lrJi2XyJkGsru4KW5Z3fuvlk5/cdN/PrDpD/cU
/OHu4vFjvn/YreZRj6P3KgOXVD0wqPrBQTUPKJOClr++pf7eW+ruG9Lwm5/U
/Oa22vFKWNrvfz207LExB57w2PY7962/G5P/hzvTn/r5hv/7242z/LNjFieu
W5m0JiZ5beLmjPROyUiRqj+9YLsbHNlCkpub6+7uPmzYMNrXEkjz2WefbWxs
pHv9WE5BUreb27VSkq2FwSR3lQr0hu20WNqUoV7sXKwh43CSUHmlbz81/fVk
n5DkoOg8/8gCmIKisgNDk+cvLjhap5gkZbWPJVtijWZTh9mgjnfTs0TdyKME
V3Ikrrly3759kyZN8vf3P3ToEP4LPUZgTmtUyPynn34K+PnKK684M9M3qNgS
AvP8/HyARzRQAj/CAlon0RUWzZfYyxKW4T4S1ytdQqwEV/IowZUcyVW4UlFP
cVC7eTBqJ4ZBER9MNlNUp4XGg+2yXkldy90Blmh/4cbWvpaKnVS2qBOipTVD
Si9GOBrCiEn5r4z+p0idxk4l1mtrE7l8hlyoJweLyfplTZ9GH5r6XO6f7st/
6u6SJ71KHxtR+sjwPb/9yfe/vf3QI8MrHh5R/eBwIMrjv7m15l8HnbpvyJkH
bmu4d9CJ+4dU/mpQ/cO3lv16UOVDQ7576PbcR8flTvyfvJUfJCeuSIqLS16X
BO+3c+dPq+FiJLwW/fViox6tNBoPi4pQbB588EE2Qiws3H333bRRRFT75o9S
tOw8YK030WSbugYJVf5nQcO3aoRV11pwNBtZHTWVKGZM2OLkZbIy5WhASLwu
MnNCWE5QVNHEqPyA2WnBoXEbcuuvGKzux8pk6VNjQtSNPEpwJUfimiuh5vT1
9fXz84Oqlda99l0JPvnkk4CAgMmTJzsjsze42LIBy4mq0EAJgAnwmJycDCy5
evVqxMm1qgA2ExISRDAl15fgSh4luJIjuQ5XdpkXCWM3tA/mYxs9UO76Rw94
2AWJDJxa7FaqKCixadpC/djMWmpMVutOiiy0ax1uY7YwrMJmVzIpBk2YzJ2K
BbP9shKEp/UCaVO7Z1YdsKTHX1j6/v6IidkTnl7/zC8yHv9p0WNjd/12zP77
f1I5fkTdQ8PK/30Q4GTN/YMrfz2ofvxtdQ8Orbh3UP0DQyt+67btiZ9tm/FC
xjeL4hNiktelxK1SOnocrTiE47TIamCa/m02YTlhe03iV3T42dzc/OKLLyJR
Dh06FBcANjXRD5wntgypokVCGbpGuVbUFG5WjJAmi2RQb7Tq3CopHwkOVlgi
P8wLmJv5j1mbAC11oUWTooqDIzKi/plz9BRpsih0aVTI0tz1BaSXGyDqRh4l
uJIjcc2V586d0+v1Op0OIMV+M8w21B4vv/yyv7//66+//qPn9AYX7cpK1JcX
LKBdEvtUYtCeOFXo/kp9YnH56NGjhIjQPS4twZU8SnAlR3IRrpStDq6M/2b3
3o4armTHtbyK5dH2Qxuch0Kl3JUaExu2ix6RK23WOnUbGQhComZTs4wpd7li
0tBANhMsscbSkdXoLiaT0jevvYM0N5HmS+TyaVJ7iBSub/1mfv284N0vPpn7
+7uVMU2euKv0Ea/dv/XY84jnd+NHH7j/1mMPDat7cMT+X4/Ke/z/fD9vRnbM
F7EJa+JiE5ITNsSuiTt86IACs5JJ7pVp+kc06D3bCeWdd97B7pY0jA/tj8kO
QeISsn0xwEWj1DX+qdo7EkdGldgSCPh5yUJWZ9RNe2Ozf1h6UNS2F2cV+IXm
B0bmBIbHJ+bWnjUoxk3VTa1bJ9/uxVJJrroaWo9H2bpxoO+X0PVLcCVH4por
ocqcOnV6QEDQpElT8vLyCVGHMaLViEyam1s//vhTHx8/2GblylXOzPQNLTpq
Mx1YBPkRGROhElbiz5iYmKSkJFjYsmVLcXFxfn5+QUEBzLdt24YLhw4dumr7
Shmem/lse+TIEdi3sBdt3boVEs/JyYHl/fv3E6LthGufODv4FyQOueotcUy/
qKgIMnDgwIE+fiKmftqHDx+GxOE6OEgfEodDlJWV0Vw5HpIV8w8bwMnC7nDi
cPoOTgFyfvDgQdpWwUYIffZ75ErIANwmujvMHaQPibOhJIitOWQ/whod2BSu
OV5SLCEwx2VcSY+7Y8cOes1J95oKzkITF5EedN++fVjYIDXMOaYJK/EnHg7+
S33JNGOtaobKZU/ku+++c3AfcQ4HysvLoyMl9Sbq1Y9nAbcAriSUhN7SxxPB
s8jMzIRKsqWlxUH6WEjoKcCVxKLiIH34b25urlr3dhVFx+nj1duzZw8Wcgfl
BC87DRbNXuHeZFGF1xzvqYN6AK48XBOsW/rY9ay9vR0fokLbY+jg+tAbSgse
LZD27ouwDDnZu3cvXHPIM9SHa9aswZuLR6FFHX5u374dv8Kx6bMJwhr2sSVq
L7ydO3fiNaFlj55IgU34fMEDTqgF0HbXlDXqSIEyMpvZQtvf8Arevbu0t+uw
bdsOKCQFygNUBInX1dVZ86ZpvXeza3bV5wZj5+69ewqU/BYzU7dyiLc7v7Dg
WGUFWi0ttkeQ6dynlXLNDZ379uwt2JpfUlhYmpe3JzdvtzLP3Zeb/V1u5uGs
9GNb0mo3J9Unrzn25Yd1ny3IC34h/f/9MeXp8Rl/+Pei33vtGD/s0MNee357
d9rjvzrywWtb1ny2NnlVXOLaNTHr1sevr9hfrphJ1Y59MnNQWlYdF7YfKvvS
m56ePnLkSLRX6vV6ut7+ZWFfhJwopiCwdvBuW8B/242KUfLoSXn+0iL/0MSA
OTl+UQU+4QVB0YUBIRvfXFRc1QCIarN+Ywgp1WysGkUtRtnUKRmAWKtrjlUc
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
hoxRR3JRmndqDFmzTAwygUKwanN5UPS6gOgNvlHZurklPhFbA6M3vPNFfsVZ
dYBLDD+l4mNdVXVF+bG2to6uqFFCLi/BlRyJa64kqr2S/RcaJV0svzesaHOX
7eKBrRFoYu3YsQND9MTGxqakpMTExABsQtsJGja4sYYm2ATJ1ZoK7L59+eJK
M8maDHoT/pd+4O1L+df0oiIOecG+HXhVWuwNwXoT22mxj11pEJ3s3aXsuZLl
NSrHIEA7Z2m2pIezD7iqyYl9CFzNx3a2DUwNN5pzYRtg9gWM/ULC5opNhz0i
C+A0A1f9HuLAEuRA9hfEXuwGyA6O48Fqnjs42aseQvOwO848jWdLXSgdJ44F
Q2KiyDrey75/GXH43BHmEmF5vmqh1bTYWQNQb/npsRJjc2Vf3cGaavWzA+ke
xEZzdHq+jqFScwU0JirSvcSyD6Z9J2L2/mospA5uPc3MVe+gRrItqq1j9Rhe
rI/pd1uwQoXNXCXbBkyRCHaONHdY0OsSOMbQ0nmgdF/m+o0xa1bFxK2JT4hN
Tlq7aUPSzu1bW9suysS0/8j39/3m393HjPYa4+7l5uk2aszI4SPQogrz//3f
/83Pz+/fppTmWrH1m+ZGs/1wMYSy5oLwIEl1a1WqE4vZFvnfNigqPMzwZO6v
6Zj99vrgqPS/z9yif3WnX3SeT2ja9Nc3F33f1oGDzSj9M831ldVV5cfa264Q
ZiBUji7EzSnBlRyJd66UlSDShDVcsqSJrx1cI+L29LvYgqFplOJya2trU1NT
amrqU0899cgjjxSoA0PU1dWxrzZNn7W+cFyP4EkZ0F4a24rGi6xH2bdOca/e
xKbfF2k6v9CF3vKvuSZ9H4/Mvsuhg/yzZ+HYXqlp2mnih2hkfzEp9GluBEUz
mal5NK0guXv7VrZzCGQT1PQtsm9QaYL80NtBz1fu3jOO2NWKml7Gji8ym7h8
tUKoKecsjzg4BJYWNLxCVdmXry4alOgtcXtKumrist0bpC+Zp9vLDqsCzY3u
+yHY3R3fgh7vkeP0SffHgdg9LGwhl20EDVxJTXu9nSP7k01Z861JZupSDZyy
qdkztf1ll3sv6g6ug/2WjmUf/404rA/tr4zjctLzBgqQyMqEY2bK1sl6CJl0
DdyJ/pNGpJfOSxfPHz9ed+Z0Q/Plc7UVZdUVRzqMLRZiMljaDca2tWtWP/bQ
Q+M8lD6btDcxduyFn88+++ymTZv6fmX6IvvyzBYz+lXHvhijWwh6B/EgKMpG
HJMU7w9MJmsvJ+UOWdRbdK6FfLRsz9Q5GT6z032i8n2jCwIic4LCkmM2HLzc
rg51apbqqoArjyJXEsGVnEhwJUeiLw5OuRJ0+fKV1atj3n773ZkzZ02f/tKU
KdNwPm3ajKlTp8Py5MlTYeGbb5Y7N9s3p6DwZGZmQqH613/9Vxx97Pjx465Z
roTsJffuByvksoK7hv6T7NjfQq4ppD90wx6IoC5CPYslR/V7g4qXktk6MQMa
UiOm1GUgw5V1RytqyivaOtrNKqBaLCbVP9O0YeP6J5/5/cjRo9g+y9hJHF6F
jz76qIOA5FflZbmnL3V9keajxKxZswYPHjxkyJAFCxawnw5c9r1MAdDSbcRJ
uFcGWTLiPbJIpM1Icoobp0YlBkTm6aK3TQjNDIrKCg7f9OaigoaLyreBY7W1
VTXHWlraZFsSapxYEX/DpSW4kiPxzpUVFVUzZryMw4sEBuphjgNWwhx+whwX
9PqJb731jrMzfjNKcCXXElzJowRXciTBlc4Rg4rESiuAk2ajMgGlKHSpRUt0
iKJcaSF1ZTU1R2s6jZKZbmayANvAvgZizi8s+Otf/0oDHLERqzw8PPbv309U
jmNd3Hv0z9f0s0ZdA1qyu5eXlw9SdcsttwwdOpQdBaYvdnynSO5hQnOySeFK
SXFXVhxdJdLeQSrrSdi7OUFR2QERmfo5Bbrw/IlROVPnpZSUtR+svbT/WN3F
pg7Y32y0yJJZxIN1fQmu5Ei8cyXQIg5Y6ePjBwgZHDwJBxkB2Jw2bQZMiJZv
v/3u9u0lzs74zSjBlVxLcCWPElzJkQRXOkVo9jJ3mwNImukkW0HD1unS2r/P
ZF0vWbmyury2rc1iJU3bsBZGtbufRaWz77//3t/fn44mjOO8uLu7r1q1StMr
FqGSdULWvCI1XWuv4axpd1oobLeoArQErmxtbdUgrUu+nTW3Q7KSvizBhNmV
mc6yTZ3k4+W7g8PT9FH53qG5/5idpYveGhC5aXF82Z4Kw8UOvFfKPSUWI01N
yDUluJIjcc2V589fnDJl2osveoeGhh85oowxZzAYATB9ff1bW5WOKu3thrlz
XwXMjI6eC/9ydsZvRgmu5FqCK3mU4EqOJLjSKZJVnDTaoNLSzf7FTnQQCiBN
gMpOlURUq5hEqsurKo/VXGntpBZMZTLJRjVlmWHD8vLy6dOnox8sjneDYZpo
6KQecmjHleT6BithwxqApk2bBlw5ePDgt956iw1i3PfO+z+ubLfG6pZsi7PU
deEls2pJVn9bpE7ZbFFCxWbtuBIYmhQYnRU4b5tubumE0IKAiMxXPymsvUDa
ZdxBosNiCrmsBFdyJK65sqKiyt8/ICAgaPfuvUStaZqamoODJ8F0+nQjbgzs
+corswE2U1M3ODXXN6kEV3ItwZU8SnAlRxJc6Sx1i9bS5VspWScbUcpdXS/R
S9asWjaVlUcrK8qqKlrMnQb4r6T21YRWiMJukoqo2uDGjY2N//znP19++eXt
27drwgJr3obsT/sgvdfz6pTVoXAwhVOnTkFFQdezybre29nq8qp4u6pQT8ec
lNQhRJSvBLLJIpu7OFFSer3Ce6vshDTr3Y1B0Vu8Qwr8I0t9wwsCwjbNfDPx
SIOlE78EGNG5Wch1JbiSI3HNlYCTAJXAjFeutNARKnW6QIBNypWgpUu/CQzU
//Of7zspvze1BFdyLcGVPEpwJUcSXOlksR32aI9Lqy0Mx6GQLDZ3WdukcCVM
R6vKYbrS0WJWtlT+IwOiSOgAa2ZjShObFysb/5waEDWjF/UWrocuX5vJ0n4g
JDpyDTtkjwv2rLRJIhrnZAzcI5lkG/5LxGSxmCSzBbdVKF+N43u6lSz8Zqcu
dGNQZEHwnB3+odnTXs2eFB6bXtRgIMRgYsI0CbmkBFdyJK65cv/+g8CVQUHB
J0+epv+dPTsUVu7atcdsxkqSpKSs1+snTpkyzXlZvnkluJJrCa7kUYIrOZLg
SuepyyjZ41ATmigxXdtg/z5Zqj5WBlOnoVWydEoWU5elrGsIDO0gPsTOl5Ud
/YrYcaXZbKal4vrHnaRDM+O4YJoXsat6wFrVSzxYyWqxlC3dxw2x9ocFzMQh
SK6YSUpOtT40LjA0PTiiOCi0WB+2dWrUxq/j91/sJJ3CYunaElzJkbjmyuPH
T/j7BwQG6nfv3ot5hBr6zTff1ukCP/zwI7r9a6+9AZuFhUU4Lcc3sQRXci3B
lTxKcCVHElzpPDFcqaqniKMMcdJtbR6zNeXlNcfKTB3tVr9ZNXiMbINUOpS2
ZJP1KMzrT7YNkNrj2xBADx7huro6LBiaoSp/8Nn2Mv4sAiab+HW62g6QWKhU
e8WiszFCpdV7WbZIuI1RNklyp4qWSrhdNCe3mcm+8o6XopMnhWZODCuZGLEz
MCxHH5k6f1lBbZMVLWX2YN1uP5HpEbvU241wWZsvrxJcyZG45kqo/V5++eXA
wMBFixYRWyW5ZcsWWOPv7//RRx8B0bz11lu+vr5BQUELFixwdsZvRgmu5FqC
K3mU4EqOJLiSG9nRZuWxisqKckN7B2vrvM7XGg3jA4UhOzv7zjvvHD169KOP
Prp69WqDwYD/0gwywmLmtQ1t2aNYt1gopWjN7O3QP5r3rB3tdV/L/LKLH0vQ
cFmy9+Kcd9KnRWQGheYFRRX5ROS9GLF52rvpe2qkdnUDo0nFR0OnNagTkisN
FywbbSer0Cp1we0+mYmWQIWuS4IrORLXXAnLcXFxfn5+Op0OSh3+FwqeXq8H
rgSWBKKcNGlScHCwt7f3nj17nJrrm1SCK7mW4EoeJbiSIwmu5FdYN0KDhF15
PU6qdF8klyeffNLT09PDwwPQcuTIkQ888MDnn39Om9YsyiH09bsjKx6CVv6s
aRX4F3+6uPdst3FJ1MXyyvN7DjR9vGznpKi0gIhMv6gCv3nbJ0RkT341bdP2
sy0WYsbNLRJps6GlYiG1mInJTIyyGpPWYpIYruw2pKaNKwVa9qcEV3Ik3rmy
vb09Kipq+vTppaWlNLeHDx+eMmVKYGCgj48PoCXMAT+dneubVIIruZbgSh4l
uJIjCa7kV/3LlcQGbtRk+fjjj7u5uQFXuru748CXQJf33HPP22+/feHCBTwQ
xTrYt3/LDzsuCfbHpD9ZlqRjYvbjoftF3Wyath8wq6g9eaT6bGMr2Vh0Mih8
rX9I2sQ5xQERRX4hObqQlJVJh5sMxOrQjEFlTQohqlBpsigdZztpL9peJBE7
F2uh65TgSo7EO1dqOgLQevXcuXPFxcVr1qxJT0+Hmp/0q3+IUN8luJJrCa7k
UYIrOZLgSn41EFxJ+zyiH+xdd90FUAk4iXMcAdPLy+uOO+4IDw8/efIk6U55
/d7OgZp/6tSpcMRnnnnmyJEjxHaCbFl1TZNlb1xZWVt3oOzYZYPcLJMDtST0
jY1Bs9L0ofmBESW6sLzJ0evf+TT9zGXF3GjopB1v4QyBn3H0Uqmrm60m/a41
kqDL/pXgSo7ENVdCFbps2bJVq1ZB9UsYJw1N1DW2y7zQjyzBlVxLcCWPElzJ
kQRX8qt+50oUG2Dn7Nmzb7zxxt133w1cOXbs2NGjR8PLFOiSLrz00kuAe7AL
9r7s37eqyWSKjY0dZBMcMTc3lzCtLPTddWWu7KI921J1bVVldfkVw5UOmcCd
u9hO3v+keOLMNH14UUDENv+wjOCo9WHvrj/SILerY5R0WiR1WEwlEJAsqwOy
mNXos+wB2IBO3STQsn8kuJIjcc2Vhw8fnjRpUlBQ0GeffYaf6XocaxhtmsJe
6RQJruRagit5lOBKjiS4kl/1L1eiQynLaGi+hHlzc/OHH354zz33wJsUiHLE
iBHjxo3D1ho6yvr5+UFO+reRgyfy7rvvUq4cMmTILbfcsnLlSswtHI4OXNKP
x+0vMR0emVWE1NRWVFUfvdJ6Xo3Dowxe2dpKYhIqgkPSgiK3+szaoo/O00Vs
Do5Kytx9tsWKlgRHz5QtUhcg9hg4WIuWkm3YTVdEb44kuJIjcc2VJSUl/v7+
3t7eaK/ElzLM2fqZdlUQcooEV3ItwZU8SnAlRxJcya8Gwl4J7RZNkFXqiAUH
AqYbP348vE9HjRoFgOnu7g4LaLgE1dfX9+9bFQpkTU0NcCsQ5eDBgxEtYf7q
q68SPvoWUabrIl+oG8vKDncYWiRZHb3FonaetJAt205NiU4IitjiMzsnYE6J
f3SBX0RaTOaJZkkJEms24TAkSnBYrQ3UEVrS8D6CK69Lgis5EtdcWVVV5efn
FxAQ8Pnnn2v4EV/Q7IC/rnYWN4kEV3ItwZU8SnAlRxJcya/6nStpAaCBI3CO
BAcrsSUTFxf35JNPuqtyc3NDqyUsL168+NpPxk4UG7/77rs77rgDcBLQ8pZb
bkHb5YQJEzAzrk2XlCu70LKmpq6iokqtGyVZMtvQT7FL7qvoDH0nQwkSG7nt
byFFE1/f4zN742dr9l5oV8gQgbGzswP+WmTJlr5t6h0tbQNfCl27BFdyJK65
Eqq1Dz74IDAwEOiSRnyleUZphgAW+pEluJJrCa7kUYIrOZLgSn41QP0r+6is
rCxotnmoQsbEzo+OxfqsOhh9EptPxObxdfr06fHjx1OH2FtvvRXmzz777IUL
Fxy3rJz5lu82wohk4ztSVV1bfqy6tc1oy5lZZUqTRf1TdZa89XmBb8hmXWTJ
hFnbgiJ3TozIffOT4sYW1WopKwNY2g5ghVaL1IkLksXUI1oKrrx+Ca7kSFxz
JSy3tLS8/fbbgJZBQUELFiyASr6xsbGhoQGqwTM2wc+TJ0+KAukUCa7kWoIr
eZTgSo4kuJJfOZcrUQUFBdD+AcRbunTpVTemb14KktTRC/EQ5qzrF2stbWpq
+p//+R+2ryXMf/rTn5aVlRHmuz17+k7+mK/lO6s/alVNdfmxSitXWsFT6UNp
ljpNsrJ0ro0sXLp7cmR2UESxX8h231mFU+flR8xPq2wkV4wqQJqUHdWzQ7Q0
KZNsJLJJCehjh5bYzdN5F+JGkOBKjsQ1V8LCtGnT9Hp9cHCwt7c3LAQEBPj6
+vr5+UFNi8vAm/AT/vXBBx84O+M3owRXci3BlTxKcCVHElzJr5zLlez4lX18
pVJ/WmIXeoIaKNllGlqf/mvWrFnUFXbo0KGwPHz48JiYGNI9Aj97IKdJtsVo
lSjfKeBYVVteXnGktU1xZ4XTYsL7SGZJMUYazMqAInGpZVPCNwSH53nPyg6I
LgyI2DLznc2HG0i7ReP3Khkt7ZLcaUVLwEw2SKzgyn6S4EqOxDVXnjt3DrAR
ENLf3x/IEeYIkj4+PrAMXImACcgJa+bPn+/sjN+MElzJtQRX8ijBlRxJcCW/
cgV7JQ7z0ceD2g8IYm9S1BRCyoZ4mpDC559/PnjwYIBK7HEJ89tuuy08PJwm
6CrDjlC46+I7s8qVh8srD7a2t1j5z4aWCJX4w2yCn2RL/snJ4YkTozN9I3L8
Iwu8QzZNm5O84/tmk4VYzEogWQzHozKpyWRuVw2XZm1fS8GV/SHBlRyJa640
GAwrVqz46KOPPvnkk0WLFkF1BwswX7JkyaeffvrZZ5/Bv2AOa7766iugG2dn
/GaU4EquJbiSRwmu5EiCK/mV07mSPRaOX+lASIhYk6NJUWNVpJU8lEM2PIWG
E+FnamoqvNPRaoloCfOXX35ZY+W039cJ6oZ4kDFTdU3ZsYqDbe1NGK7HipZW
QiTqSCLKD9msYOPe8ivT58XrQjcERhUERBTowzOnRKSkZtcaZGKUrfGADEqX
SwUtiWIPNQmuHAgJruRIXHMlsdVdNIf04xtbm8F/xfvaWRJcybUEV/IowZUc
SXAlv3IuV1JwY22Ojrs0Ykl79NFH3d3ddTrdzp07WWdaYnN5paRJ2072yR48
ePD+++/HjpbY13Lo0KGEca91+qCW3WKyMj9qoGqsONze1oRjSqKNklotu6yc
aoCedpmUnSBh72Xow7cEhOcHhBXqI3ImR69flniw1UI6JYUkzeoIJCaLsSvw
rIjb098SXMmReOdKomYPqzKcO702E2IluJJrCa7kUYIrOZLgSn7lXK6k41oS
W49Ix4eWVD3//PNeXl7wRr799ts9PT3/8pe/bN68mX0j00KoCelD19AIPxjJ
h45red999/X4Yd8pkhXWU4am7MZ0qk9sXWV9Rfkxg8KVarwdGwbCzGi2nrLJ
aFCDvypBYuFynDhP5szPDQ7L9A/N00UV+0Tk6eds/nT5tqZ2xWppMCNXKkSp
xoa150p0mBVN02uX4EqOxDVXsqMGYz1m/1XN3pQp9GNKcCXXElzJowRXciTB
lfzK6X6wbIHp43Efe+wxwEl4I7u7u2N7DxaeeOKJ1NTU9vZ2+mrWuMjSmDxs
bB/cYOHChfByf/jhh3ft2sUeqC+oO3BiuJJhOitXHq8orzS0XrFxpRkBUJJg
S0lSAr1inhWbJVyJTrMCj+eayaKv9+nD031Ds3yjinzCM4PD4ud/lnPighLk
p92ooKXR3Gk7Vg8mS1tXz+6uud0uj0Q0K4RsElzJkbjmSsIMH7x///5XX311
7ty5bAOY5lwYMZ0lwZVcS3AljxJcyZEEV/Irp3PlNSg+Pn7kyJGAlqNGjRo7
dizMcfhLWHjwwQeXL1/e2trKwiNtYpHr+zhPrZyEodQBlQ3aJI2hsKaqFurG
9rYWwrIeu2W3/piKa6vBrDi5Xuwg3yQc0IXE+YdvCorOC4rO9569/tWP8o8c
V0YnMSpdKy0mxcRpkohBDQ9rUnprojFUoqnZkJMGFLIeCBHYzsYqpEpwJUfi
nSupiouLdTqdn5/f+fPnie2Dm8BJp0twJdcSXMmjBFdyJMGV/IovrqRUuGPH
DmgsAU6OHj3a3SbgSi8vL0DOX/7yl5988smlS5fsd7zOU9NYPJ2lXupGqYdQ
rjKaLDuUmEYWM7wCmyWSkFkzfW5KQFi6LnqHd1i+LnTj7Dc3HK5V/osdLc0K
WnYaTW1oCVWsn90oVeqCSkkDlWaLMiFaCnWT4EqOxDVX4pc0jGxWUFCAY46c
O3eOdP8g5lx/jJtcgiu5luBKHiW4kiMJruRXfHElipaxw4cPT58+HejSzc0N
ABOtljgHurzzzjvnzJlz/vx5Oj7m9Xyop2RKRyHRjJ75Y8ohV9q6hcp0Lqmj
UpossmSUFbtks4nklFycHJniH5LvH7HDPzxnytyMyZFJeaVXOrGzJmOF7DQZ
TMRoka0Bgrr8XqnJ0sabsnWStL6xQqoEV3IkrrmSMA6uwJV+fn7+/v5nzpzR
ZNjV8n9TSXAl1xJcyaMEV3IkwZX8ijuupCEpsKRBVk+ePBkeHv6zn/0MHWJH
jBjh6ekJpDl27FgvLy94azc0NBAmDs81oKXmde/0kD4/jCtVq6XFbLQG9pEU
f9dOmew7RqZEp+uj8nURub4hGUGhWdMiN27a0mDsVG2WFmXHTpNRNT4qwGiy
GG2rbVFnidZYKbNmStctRM6R4EqOxDVXst0n8/PzA1Q1NjbSHgH4cUx4wzpR
giu5luBKHiW4kiMJruRXnHIlHVuEtpQuXbq0YMGCf/mXfwG6xHg+o21atGiR
ZvcfKjRW4hsEl00mkxNbZb1xpQ3utIZF2WTG36ZOsyzBKQAwEoOFlDWQWW9t
CJ6TExBREBCSp5uZNTU869u1VSajYrI0W0e3lC2yWY3ngy6yXWhpI0uJnXAV
4yIrZJXgSo7ENVfSShJqSAAWnU7n6+vL9gvQdD93TnZvbgmu5FqCK3mU4EqO
JLiSX/HFlQ6aQNhRCKqLJUuW/OpXv8KOlm5ubp6envHx8TioJbGNVPJDj8uG
/XGi+ytV73WjRN1QuzmjwpJJlgzGrjA7qu3SQEhjO5nzQXZwREZg6NbAkCJ9
2I5JoZkfLdl5xaBG8lHsmzK1TFq6LJl0suKkLVaP7R8WwZVaCa7kSFxzJbHV
h0SN2xMUFETtley/4KfTXS9uWgmu5FqCK3mU4EqOJLiSX/HFlSgKicSWVeoc
iwutra2xsbFPPfUU0OWsWbMMBgNufD2NKNz39OnTq1atKi0tde7bxHHdKDMM
aEVCCxNmx2yWTO04QImFmDtk0mQg739ZMCkqWx9d4hdS7Bea5xeeHv1R7vGL
ClfCrp1G7E9qIRpctXrAdidZTahYIZsEV3IkrrkSar+YmJg4Ve+99x5A5YQJ
E1asWAEr161bF6Nq7dq1UJUlJCRs377d2Rm/GSW4kmsJruRRgis5kuBKfsUd
V7KRXXvkRI05UmNevB6nr6qqKgDVwYMHDxo0aMmSJdeczvWr17rRRn2ydexL
c1dcVtVkSSwYlAeuCbwN4aZ3SLLSa9Igka/XHfWbvSFobvELEfkTorfq5qaH
v7fhUJXBqEbk6c6SZtvUNcSJXUgf9UCuW46cIMGVHIlrrtRdTb6+vnq9HuP5
AHj2e05cJ8ysi2TDXoIruZbgSh4luJIjCa7kV9xxZX8J+ZS2f+w7HGH8WLo9
/Fy0aBEQ5dChQ2H+0EMPOSPXVvVcN8pdnCdbodKkzs3dHGJt4VvV4Smt6Afn
2WokqVvrdfM2vDgn2zc633/OVv+w9Jmvp+053AyPdKdE1Gthtpg71B2N6mQm
FjPtZsmYMiUGPIWsElzJkW5IrkSQDAwMpHOgy/nz5zs74wMrrMn7a6ip/pLg
Sq4luJJHCa7kSIIr+dXNyZWaUsp2n7RfSU2c69atGzJkyCBVf/7zn9mNf2Rd
hStVcpTVMShVtDRpRpPEfpHKkmR1loV/w992QrK+a9a/usE3bHNAdKFPWF5Q
VFbw7FVbS88YFNOmYu1UrJeSCpUWlSvlruEyGa40o5+t4EpWgis5EtdcWdCL
AF5gXlRUlJ+fDwswh2Xsj3lji4Z3Iy5z1wRXci3BlTxKcCVHElzJr25OrkRR
kyXMGxsbX3755Weeeeb111+H9j+x4SQ7OgkoNDTUw8Pj8ccfh9LuvIz3kSvR
XoloKbHBdrq6XloUOkT4M6mLBpkcqLTMenOLz8xNurA8fVShPjovMDQ5IaO2
TQ0PK3UF8VGNlZJk6TRS51vbZJYFV9pJcCVH4porHWyDndPpt7J+j9uDiaMf
CEtzTpGm14PreOcSwZWcS3AljxJcyZEEV/Krm5Yr8XVAXV7DwsLgFe/u7j5q
1Khx48bNmjWrrKxMto31hrtgOcefdMEp6iNXyl2usN1C69CwrlYINGNAV5NJ
idOjGCVrz5C5CwsnRmb5h+b6hxXBPDg87ZPlpU0dSk9Mi6xsqh5O7upH2Q0t
rUcXXMlKcCVHulG50p71+vcsWHZzBY6TbSI9nbsTJbiSawmu5FGCKzmS4Ep+
ddNyJQ0hiz+ffvppHPUS5GGTj4/P3r17iV1jyYlEieoDV2qGldRuiFwJRGnb
0myROlUfVzMQptFELjSTtz8tCQzf7B+W6Ts7Wx9eNDkye8GS4tNXSCvwp2zF
Usmi2jll+wA+trEshWwSXMmRblSuHFB30B7TdLrJckA5+poluJJrCa7kUYIr
OZLgSn51c3IlgiGWVSy9X3311ciRI0ePHg10CUR5++23wxx+urm5Pffcc1u3
bqX7oueYcy+Rg/Erew7Qyv7u7rNqshjVyYD7ShblLQmYaJZJk5F8tvrApKgN
U+blTXglLzC8SB+2IfqfmWUnSLOJdMrEqOK1uotJ6WvZ26GFVAmu5Eg3KldS
sd6w/SW2TzpN3LlXiR4danvMUh+/CsqMBihjgiv5leBKHiW4kiMJruRXNydX
UrHdixITEx9//HEvLy+ASpjDGx+4cuzYsTD39PT8wx/+sGnTJjpqiUtyZVcU
1i6yk212TFnFRSXSTrdtbLviRmajuVP1iSWtnUp3yzYziU2rCI5M1EVm+oTl
Bkbl6kI3vPJm2p5jFji2Mrpl16glJjVZLcAKUQmu5Eg3JFfau4MOBDcBuHWo
crpfBz211tbWU6dO/aBHj0Jlv9M3TV9wJb8SXMmjBFdyJMGV/Oqm5UraxCJq
QwiBERY2btz4l7/8BS2VHh4eMKfOscOHDwfwXLFihdNfJY65UqbMKDvgSgUt
raNZqv9V3HslBSpNQJeS0iJURihRg8RmbDszac66gMg0//CcoOjCoLDNkyLi
04tPG9RULDIT/ZWBSm0Z6oJNidg76N4EHCq4kiPdkFzZX6K9y9mui/iv5ubm
ZcuW+fj4+PsHrF4d4/gK4V5Y95pMSoIlJaUvv/zKlCnTpk6dDvNp02ZMnjx1
4sTJsAA/X3rppYyMDNL9yrPLtPM7ziEzcXFx8+bNo0OrREREfP31101NTdhQ
odmmCIxrLl68GB4eHhAQ4OvrO3369BMnTvR4uOuR4EquJbiSRwmu5EiCK/nV
TcuVjlVcXPz8889jj8tRo0ahfywsjx07dsSIEb///e/Pnj3rOIUeryE7jBrp
zrY/SH3xg+2em25M18tmEiU+s2ShEX4AGo0y2V92PuS1NROjM/1CC/WRO3Sz
cyaGblyzvrLZrFgtzZJqrFT3UcycMu6L0XskK9haaN9PWNmpBqo1W2j2mJ6h
N6oEV3IkwZV9Ef0uhwu7du0CFNTpdEFBQYGB+mXLVlgsfb1EkABczoSEJB8f
P50OEFDv6+sPEyzjT5h7e3snJiZiSFvSva8o7dRAbDHZLl++HBUVBTgJeOjn
56fX61944YVJkyYB88J6IEfcl22x0Mr5iy++gM1gRzgR2BeIjx5IcKUQEVzJ
pwRXciTBlfxKcCUrdIuF1gUufPfdd9CS9PT0xL6WsDBs2DA3NzdYWLBggeOr
VFJSEhwc/NZbb0ENBltCgnR7bL1Ql9pr0MDUjVrklBAP1fYeTNUNhpC3Nk2K
zn3xpSx95M7giMLg8E3//LKwsVV1iKVpAFqaJFtIWJOMzrFarjTR0U8U3Ryu
s4IrOZLgyr4LKrfm5uYPP/zQ19cXCBCIDNAyOHjS8uUrHXMljYFGr+TKlasA
5gAhFy78YPXqmNjYtTDBwqpVa2Bat27dkSNHNClg7UqYehvU0tISHh6uVzVz
5syVK1cWFRVt2rRp8uTJgapCQ0MNBgNNh37cgwZMVVUVnALU3pRJ4cmlg6f0
V+AjwZVcS3AljxJcyZEEV/IrwZUa0U/WuAANFWhmQBNl3LhxI0aM8FQFmPnB
Bx84SKSsrOy2224bpOoXv/jF/v37SS9X9dpC3w80V9rMEDJaHk1mhSuBBhub
yXuLc6dEpweG5gVEbPMNyQ2K2BT5z/TK08RgHdpSsU5KZnpGzCiW3bHRjiMl
a/fMG1eCKzmS4ErHojyIdcW0adOAv4DCZs+e/cUXXwBXenv7rljxrbqNo3Tk
7mM5AVdOnAjopy8oKEImxY9a9KBIjjR4GuvsQV1bARh37NgBVOjt7T19+vRL
ly7RY9XX10+ZMgWyCth48OBBTXMFszFv3jzYF4A0KipKp9pKa2pq7MMQCa68
mSW4kkcJruRIgiv5leDKHmVWRa+DyWQ6e/bs66+/ftdddwFXPvHEE47pYOnS
pYMHD0auHKIqLi6OdP8+zw6L+UOz9+PYK5VxLW0mS7OFdJoV8LvcQb6M2Rsc
sT4outAvotA7NDcgMn3qnLW7y1tbTMQkdRGj0YCRfEy0y6eFsmR3AyU6zVpu
9HFJBFdyJMGVDkTrRuQ7qIh8fHwmTZqUmJgIDYCdO3fqFAUuX77SYLhKe4DB
NGW+enWMn5/O19e/pKQU1yPPUbrESLO0HyXtSqmJ9Tp//nzVZhq8b98+9tsd
ZDghIQFNosuWrSC2fp044hKQbF5e/oQJPnr9xHXrEhYv/gIzA0+u/b0WXHkz
S3AljxJcyZEEV/IrwZUasRHyUWwLCoo3lPOr9os8cuTILaqAKwEwcWHmzJnY
EYk2fmiwoB+ayYHmSqBedQ7Ptdquk7t40GhRIvmk5FX7hqz1i8z2j9qui94W
PCc3ICQ+NbeuAzaQmMQwWJDClXD5YJIslCuZDpUWWyChG7vYCa7kSIIrHYh1
XsWKsaCg4OTJk1gllpaWent7T5w4+euvlxGlzuzVD4ElPqxNgeawT2Vx8XZg
PVtPyq7tNSloAgdhgo2NjWg81ev1bEAe3AYeQ29v38BA/dSp0xEq6SFaW9th
Jfxr1qyQtraOTz/9HAh00qQpsIt95gVX3swSXMmjBFdyJMGV/EpwJSvaPYd+
D8c1bHtG7kPkeQDG5OTkUaNGDRkyBKASTZaAlr/73e/OnDlDmICK1xaKf6C5
0mIxqWipCMqChKF3JGIxKVcD3qOthJQc65zy2oa/v7IR0PLFkMKAyPyJkRs+
Wr79kkFBS9jLZJBVcpTUyLKwJ0zmLq5EtFTD0VrUIUsEVwq5jgRXOhb9RKa5
CLBmx44dwHT+/gHffLO87wli3J7Y2LV+fjqYCguL2VpWcxy2EkaWpLGDYPnQ
oUPBwcGAlgsXLqToShegSp88eSqgKwAs5Uqs5ZYvXwnZDgoKRmvpkiVfwmY+
Pn6svVLE7REigiv5lOBKjiS4kl8JrmTl4MTxX3Rw7auiJWxw+PDhe++9F02W
6BN76623enl5QbuLbnNt+RzIulGym+y2kInBQqDEHGskcz/K9w3Z7B9Zqpuz
Z0JIzqQ5W6L/mV11inRYVCuAzAbqMVuwC2aXE6zVSxbWC3ulkEtJcOVVpfkK
R5e/++47f39/oDO0Vzq4SPTDHb2Sq1atQSfV7dtLcA3dHRd6+6xH7wiooKAA
Q+7ExsbaZw/mISFhcAjI4alTZ2jidXXHYSdY/957C/BYn3++BNYEBupramoY
u2r/uOsLruRagit5lOBKjiS4kl8JrtSI/QxOP4Brtrnq9aERX5csWfKrX/1q
6NChlC7RLXbx4sWu178ShXF7zNRwiWutnm/qstWGK5MOiTS2kw+W7/MPy/AJ
L/KL3OEfWRQQlj7rjbTdR1rhvxaZQqS525gjNt7EwD7qv25wqCSCK7mS4Mpr
1s6dO4HpaAfGvgsuZ0xMHOwIaBkdPXfp0m8ghS+++Gr58pUwffXV1/b+qNQP
Fu2VWGNv2bIFR6tMSkqimxHmfr322htAi8CMNTV1imeFarV8/fU3/fx0EydO
rq9vIGq/S7RXwpbwimSPeG2XxT7n9lxJ+o9bhQZax1RBi5cWQiGXFf0IVlVV
BY9za2urc/MjdFUhV5arsneMEXIpaeIbwC2DuhEaJJShqJyZS86FF/PDDz/0
9PQcPny4u7v7qFGjbr/9duBKgErETF9f3/b2dmLXUKFxaPEn639FmxzQeoQm
VktLC+n/Jq69vbJrXEurFyuDh5BLOIc1m4/pwpKC5+yYMLtYF54fEJkeFJGQ
mFXbZFIdXGXrXpJimSSSGiDWop4ftOkkuROtlj2PvHkDqaGhoays7PLly87O
iNDVRR+oZ555xl2Vm5ub4Mq+6Pq5EojP19cfDZewgJ6xev3EjIwMNA/RfgT2
t8BkMsXHx0+YMEGn08H2uJJ1MoENFixYqNozgw4dOoLHLSraBoeAw3377Wqa
1IcffgRQCevhyWXj0PaLWK4sKioqLi7WULOrlS4hVlCKgFBqamqovVLcL9cX
VBp1dXXV1dXYdhJyTbFh1uARg/slvAI4EjxlVaqElbnfBdf2+eefh2YDNEe9
vLywXQoaNmwY+sTCwv333w+1HGG6c+K+tP1Dx7ik7Rn8Jo+tR2r56tdP3H3g
SplZLStRdwAtC75vnhS5acqr2wIi81+cneUflTVxTtpnq0qV7pZEifYjMaFi
SZcdUzk5IhslU7vqFnvDoiU8YsePH4casrm5GdeIdojLCvvi4bP25z//2cPD
A55cmAuu7Iv6hStDQ8Nff/3N6Oi5MM2b91pERBRM3333HW5pMBigSrSoMqpi
B6+MiYlRM6BLS0vDNZoK9u233w0KCgauPHDgkNksNTe3Tps2A8P1tLYq3/pM
JkjW/PXXy6gfLFErYU1H++u5SixXFhQUbN26dffu3SdVnThxAucNQq6q+vr6
o0ePlpeXwxscfp46dQrWODtTQr0Knia8U2j/qq2tFc+XywoeJXig4H5Bkwkt
X3C/YNnZ+RJyJHigjquCl9fhw4fhrsEdxHcZ3UbcxOsUXMCoqCggSk9PzxEj
RiBX4nz06NEjR47EgLF33nlnaWkpXPlTquiNgDm+qtiWBl2A1mNZWRldg5th
tfmDdOK4MvWu+u5Tw/GGkw3HTzccP3Pi+MkTDbWnGmpgghSOHz9bd7Jj294L
IW+kTJ6bGRBd6B297cXQnODIzaGvry/d39JwxlRTfwYyefrUifq6GqUENpys
P36qrl45cVh5sra2scFxZjgWvtSwhoQ2Kt4v8Yi5rOB+nT59GkrmmTNnnn32
WWj8wzMruLKPun6uhCknJ882sEi3bYDs4uLigoODARv9/PzQ3xWHm0QbhG0k
EeDBwHXr1ml8bxAM3313PtAicOXx4yfgn+vWKSOPAELm5m4lTI/Ojz/+VK+f
CP+qrq4m3b/7Xb/hUmOvBLTctm1bRUUF3L4jR47AHJYrhVxScHeqqqqgVKBT
Jd4pcb9cWXB3jh49CngCC3jv4CY6O1NCPQsfJbhfcKdgAZpMleL5cnnhOwsE
bV1s6EKLF+8gvXe0thS6BuH1hOZBSEjIz3/+c0BLAElgTGiaQkMC3WJh4bbb
bhs8ePCXX34Jt+DQoUNY41Xa6kBMBCpA+AnLmDL26YCVsAzpQz2JXwZgGe7m
D81nVYUy9a5j3afqyvLaimP1FcdqIEcVlYcqKw9UVxypPlZeX1VXcaz2yLGT
pQfPzfswSxex0TeqyCdye0B4/pTorJfnJCduLiurvHikvLa84lhF1dGKqmOV
1XDk2qPlVZBaXWVt7bHqSuXHNV1ulxfcQbjF6BtQqRYP8XC5suAG4QMIy888
8wx6HYj+lX3U9XPlpElTiou3Y4RYhDnbXPkTGxvr7e2N5Ojr6wtzYExASxol
ABhNDUjrv3q14tSK3jg0sjfctaioOUCL3t6+589fPHv2/AsvTAgKCn7rrXfo
/cTDLVr0Maz38fGDqpV1zcIF6kxybdLYK7dv337w4MHLly83NTVduHCBLgi5
oC5dunTu3DmozOFZO3PmDPy8qMrZ+RLqWXhrLqmCih3u2tmzZ8X9clnBrcGb
df78eXwLw1MGVaKz8yXUq7AChHuEjxUyS2NjI/4X7uMF22ModD3Ch6K5uRmu
8KJFi+655x6ASiBKAExoSwBjDh8+/I477hgxYsTTTz+dlpZ25coVvPiw4wXb
LYCX1wW1jQGPFYBnSUnJvn37oFbEZ+306dOwC+wILRCYw88fmsmL57umPmzc
dPlsx8VzbZCv85dOnL184vylU7AM+145f7np/OVLF66cPd9Rf54sTz0UGLEh
MKrAN6QA0FIftnlKZEJMyv4zl8mZS+3nmprOXGg8d+HspctXmi63XjjbBFPz
xVZIH87+h54CL4IbCu0QuHFwm0QjxMWFDyPeo//8z//0UCX6V/ZR/eIHu23b
DrqSoUvlT319fX5+fmFh4VZV2dnZWVlZUDFiBBXYAOpJHx8f4M3333+fdL9N
yJUTJ0729fUPDp4Ea7KyctB2CWuAIgE2YYJ/TZjgAythS7Wzp29QUFBYWBjt
/H79t57lSjgL4Mrq6mq0roogFa4vk8mEX3fxa4a4Xy4ueoPwiy6GthBycUFN
i74BBoPB2XkR6qugbkRjZWdnp2u2lPgV/ZqNlxTqsRUrVjz00EPQQB09ejQ6
xKIdBNYAZj7//PNtbW3YcKLdXWHflpYWaHKsWrUqPj4+NTV1rap169bl5eVB
oxc304Tz/QFiOjz2aWOLOikjg3SYSSeOR6kIcm2yqP0vlfg7bYTk722e/mq6
LiLXL6JQF5YXBGgZlfzRsqJzrcrwlzikiIWGi5X6nAduBXf2+PHjUEmKiAFc
iI0HSz3YBVf2Rf3iB4v2SjRZosxmiXQPaMYOIEKdVKHyBPCEDPj5+c2YMYNt
kOD9qqurQ3SNjIyGnfLy8vEnsCT2psRgQbCAIYNU6lRso1OmTMF0rm3QYbuT
7RYPdtu2bZBt4nqFSshe7AgIUMB6G/tGyHVEn1l0GWptbRUPmsuKjfKN3pXQ
nBb3y5Ul2waJxjmtG0XF2O+i3XBo6EJQYmLi008/Dc0JNF8iXaJz7Icffsju
DhufOHEiOTn522+/Xb9+fVxcXExMDPyMjY1NSEgAzNy4cSMNAnON33Nku8nx
xgiACkDCiZmNKiF2BfMhJsliUD62A1q2k6rTZNb8rIB5uT4RW/XztgeEbw0M
2fjawuzqU6TdpJohFBI1KTF8oIUoS0apH1prLiu4m8iVV65cEe0QjvTss8+O
ViX8YPuofuHKoqJt9OqqNQouWKsIOuolG9CMPlZQGc6cOROdY48ePUpfdrjx
unXrMGhPcnIq/Dx37kJKynqY4CdMqakb0tI2JSYmb96cER4eicORrFy5Eurt
Xbt2saNtXiddavxg8/PzNVzpaqVLiBXcHewvLyJVciE63gF2iRVfd11Z9PUK
dw27nGtipgm5pijpYOfl9vZ2TaQ78VK7HtEmB9vaoQswz83Nfe655zAeCM6B
K+fNm8cSR2NjY7wqaqOEOdAlrME5YCa0TK6rhvxBXEmsUEljw5oZrlQLDECi
0TqOiKzEgD3dTuYv2+MXtsEvLNs/rCgwomDKnOxp0Yl7DrV3mJVmJLYYZWuC
Ei5o82b9K9kmNjPcCCpG7M6MXOns7AhdXfgU/+lPf/L09Bw1ahQ8oYIrWVH3
VM3PkpJSdCv99tvVuJK9UHBVDx06tGTJkk8++QSeCM0YwatXrw5QVVhY2P1Y
XRWjJrirbaU1BVy9enUMHQfTYDDif2F+4sQpan88c+YMYepqmgdMGR5YyKS/
Oh5JbW0t+qay45Vcp3ocv9I1y5WQveAeYQwKwZUcCe7aQI79LdSfYr0CxIgV
fAnrRo0jpXivDZDQORZhExZ27doFzRtosnp4eNx1111Q3dFx2eA52rJly7pe
BFyZnJwMXAl0WVpaSvrJNesHqScYpaOPWLewmEm7kaRkVE0MT9BFZvpFFcDk
G7ElOCI5dmN5u0QsyIoSbi4ZVd9aa+pG65iWFpMy7KVqHjUZVc9bK91aOENL
aJ1CJUlHhxFyZbF+sGNsElxJZf0ihAMFmaXdu/du2ZKVmZkN05dfLsWhJ19/
/U1YCRNAExR+altcsGABRnNdtWoVNh5oUB1YAxzn6+sL20BFl5SUlKAqMTEx
WdXhw4dpHuzthtaaRCZVVTVBQcHAthMnTn7jjbcgV3v27Fu/Pg1+wnqgRaBa
Zi+px1GbFy9ejFxZp44GpTnudUpwJdcSXMmjBFdyJMGV/Epw5Y8sGvOBDrQN
zYnNmzefPXuWbgMtpfr6eoDH3riSWjCBK6Gt1dLS4oq3TPWblc3EKJPCfZf1
UfEBczO9w/P8Iou8Z6fPeD1z4ReFlzoUfMR2ocVishBTp6R60hptfTlVeLRx
JUxSF1dKgiuFBkqCK/sok0l5XqdPfwkgToWwIBXcFD9YHx8/vX6in5/ij7p0
6VLcHmq8qKgob2/vwMDAZcuWacKrQrUGvIm9I2Gu1+vRnTXApm+++QZHqyTd
iZLaK0GdnUpSO3fuQrTEaDwYqAdSgp8ff/wx7s4OF4LDleI9xcx8/vnncGjI
SU1NDTWSUvzsx/ErBVdyJ8GVPEpwJUcSXMmvBFf+mGK9uShgwhpsxrD+Xdu2
bQNm7I0rsX8l0iXgJ232uKDgDA1mYiCk5jwJfSc1OCJDiRAbXTJhZqY+fEvE
e5kVZ0ib2YqW6gWR0I1W6XmprgXelIlZnah5VLI54fLkci+4kiMJrnQg9G7F
QDqoV16ZDbwWGKgHigSCA7qECWPgqKQZtGLFCuwOCfUb1GAAlcCMxcXFhBkB
hKh9M2E9XGcEOpwDWuIglaCYmBjSPUqA6qFK2Inq0KEjb7/9LuAkTNSECtUn
7E4bKtTrFX+ybrFfffVVoKrTp0/bc+V1X0PBlRxLcCWPElzJkQRX8ivBlT+m
aHOIxn+gsfHZ2PKwQXZ2dm9QCUpMTIR5bGwsMubBgweJM1xhHUtmOmAaZWKQ
yCUD+WTZ7snhmwPDiwIjSgMjSoLCs2e8mlJ6pLXFqKKlyo0Wk9l6fZQos2Yb
SLKC/3aqk+BKoQGR4Mq+iNIWG5qM7VQO6zUxrokKca2trZBbiyo2QdzYQfQ/
tj8mrTNxjoeggbjpoaHlX1NTA5cFDqo5HHsgNjQEJgIJtre3Qz41rZp+QUvB
lVxLcCWPElzJkQRX8ivBlT+meuzFQ5gLjjxlMBiysrIc+MECUaKxEvsflZaW
uuDbTe6yKSrhXhVglMmVDpKwpVIftsE/rMA/YmdA1E6fmemTIpJTcqpbVaul
RR2DxBaoB5p6Jsn2WzVVYpIm2yS4UmhAJLjSsajLKLEFo2Z9SqnYC8V6a2gu
HeIeddug/9V4dGjMlDQn+C+aAbYRQjGTbon7anZnQ/H0tsyelODKm1yCK3mU
4EqOJLiSXwmudKLs22Z0fX5+Pvag7FHoBIsBfGJiYuAO9pd3Vj9KVi2VnRaM
4CrJFtXfjJB2QkqOmCbP3agLy9OFbZ8YvTMgNDM4KmXhVwXnrijerkYJO1ZK
Rku7lRy1XMmfEywRXMmVBFdeVcBxlAGxda2hMNZrlFo27W2CpBdSYyGU/a99
S55mgzVWsp6rdBu6JUuyPQ5WYm9IZavr65fgSq4luJJHCa7kSIIr+ZXgyh9T
9Hs7bTKxX8vRnQy3garPAVcmJSWtWbMG5jgQCXZTckFZZLVTpG3US2jBmWQJ
XsOtEqm9QF79cGtQSLo+PN8vNM87NHfi3Nyw9zKOnlDA0xq2B5p2Mh3IhKaq
dsAUcXuEBlKCK/sotnckvSD2cXUI4y7Lsh7p3qVRY6nUiP0vVpVy96Fg8adm
jSY1mRn4ifTUs5L0jrS9ZewaJLiSawmu5FGCKzmS4Ep+JbjyRxbb9OptzFBY
APpwELcnLi4uMTERNgC6/PLLL6FxMm3atLruwfBdQ1Zro6yOYYfjiqjBXRW6
PN9KPl2xKzA0efKrhd5hxT7hRbrIzKmvpW797my7ao9Ugvh0ylZ+lDElYv0j
uFJoICW4UmhAJbiSawmu5FGCKzmS4Ep+JbjSRUS5koa5+P777+NUAT+yAWDp
CCMAlbD+j3/8o5eX18iRI8eNG/faa69dunRJ01vTqXfTOqIl9WOlYGhRe1O2
yyQxs0IfmRgQmTchvPDF8Fz/qJwpczfHbKy6YiZWnzZz16iYkm2oS+6gkgiu
5EqCK4UGVIIruZbgSh4luJIjCa7kV4IrXUFs5x0KmCaTqaioKCkpKSYmBm2U
OFolxvMBuoTlwMBAIMpRo0Z5enp6eHhAK+VnP/vZF198QcPMkl5CT/xIsrm/
0lFCrGypcKLS+dIgmdsJ2XnU8PJbWf7hWX5RBYFzd/iEZAeGrV/0dfGlTmJS
Y/YoCCoR7KEpSbY0eCukgis5kuBKoQGV4EquJbiSRwmu5EiCK/mV4ErXEesi
S9GytLSUWipjY2PRORbnGRkZ//jHPzxUeXl5Ubp0c3MbP358QkICDf7vvFOi
S+qIk9R/VTGkmizmDgsxt1lIk5lUniXR7+cERmZ5z8oOiCgIjMjTh24JfWtL
5UnSISGQmojZgiNampUOmIozLV/FVHAlRxJcKTSgElzJtQRX8ijBlRxJcCW/
ElzpCqIesGwICxpc4uLFi/v27UtPT09JSUlLS4PWCDRC4HGDuhG2yc3Nfeqp
p0aMGOHu7g5ECWg5WhUseHt7E6fezW7hdhSutMXbsRjVUUIAFM0WNUpPO9Cl
iXy2+tCk6IzAsCxd2Fb/kOJJkfkz5qUW7DvbqcaVVYYeUWNsWARXCg2wBFcK
DagEV3ItwZU8SnAlRxJcya8EV7qUWLS0l9lsxsD4UDeWlZW1trYSm5trbGzs
vffe6+XlBUQJbRUPDw/gSsDMoqKiHyvvPaib76s1Mqwy7qQkG9GPFcFSUp1d
TRJpl8j6nOOTQlODw/P0kTv8wwoCwjYFhsWuXn+gVbZG8jGaFKNlp4wDXfIk
wZUcSXCl0IBKcCXXElzJowRXciTBlfxKcKWLiB15RLaJdrqEBTYefpWqlpYW
XIP/gpu4YMECaKXcfvvtwJUImNu2bXO+vZL2qVTj+hOl06RkMJuMksxQp9li
NlpUw+Wew+aX5m4MjszWRWz1i9gaNCdnyrxN878sPHWFdOLQlRZlR0BSZ53X
tUlwJUcSXCk0oBJcybUEV/IowZUcSXAlvxJc6SKCB4cNsEOJEpiRNjbokG1Q
N5aXl2vuGu4OjZOoqCgvLy93d/fJkyfDxhRIf3RJSIHUXol/LbbJAHxI1Niw
nQbgSqUHpawYMTtlZXTLOR9k+oVt8I/a7hOx0y9yh2/I5vD5W8oaFLRU95KU
XYjzQhL9cAmu5EiCK4UGVIIruZbgSh4luJIjCa7kV4IrXU3saCOUNDVsCIRy
9OhRtFfScclhIScn59ChQ/Dz0qVLJ0+edPZ9tHq9Wt1VkSvlLq7sGoxS6Xdp
UrjSYoATAmKEV/XZDvJ57AG/0HS/yG0TwnYEvrrbLzx9+mup+XvOGWUbs1rj
zdrUNZaJdWCSboObOFuCKzmS4EqhAZXgSq4luJJHCa7kSIIr+ZXgSh5VU1MD
dw0JBdnTZDI9+eSTQ4YMGTRoELR+sdrEzpgUTqntkqIo9bYl3aPREsZgij/Z
XWhq7M9eJNmbFHtgvS4ShARxTBFikUlLJ9lceFYfmewTmfVidKHfazv85uYG
hCXErq9s7VAtlsoQJgZrgup+xGghFkkJ6qN6yVKG7TEnP7IEV3IkwZVCAyrB
lVxLcCWPElzJkQRX8ivBlTwKuBLqxvb2dmLjvqysLCDKIapg4ZFHHoH6k9ie
TRBlTGr6tB/gkiVQomIpNZ7iv+i+mBoe3UGgoR8k1UVWsiAAmi2KqVMiVzrI
3grztDc2+EZveT4s+4WIPP2crYEhqR99tetCsxJI1tpdU2VLS4dJjRVrUge5
lORuhlHBlUI/QIIrhQZUgiu5luBKHiW4kiMJruRXgit5VFVVFdy1lpYWBD0g
u7y8vBEjRgxSdeutt8J83LhxsJICIGFgkBVdie9HfH7ZAoA2TbqSUiRs2V9E
aT0QkYzEaCZm/IEgiJF8qs6RVz/KCY5K10Vk66PyA2AesSl8fvrRk6RdjRNr
7bep2lQx0qyKk7AgdY8a5EwJruRIgiuFBlSCK7mW4EoeJbiSIwmu5FeCK3lU
XV0d3DWsG+nNmjFjxpAhQ2655RaASpzDzwULFtCxS1gMxGV8Wjdt2jRp0qRP
P/20qamJ2KyWZlW4MfWVpWK9YfsrLhC1V0pIgBjqR5YtkmKXvNRBPluxd2JY
ii4kPSg63zssKyAqY8rcpG0H2lqNxGSxkqNZMnVKRjVaELGaPmXqY+tktBRc
yZEEVwoNqARXci3BlTxKcCVHElzJrwRX8iioGKF6RAyknqgwX7p0KbVXUv39
739nR7pE71Z6i0tKSsaOHTtq1Cg3N7ef//znixcvZgc0ITY7Jl0DRQXq5AF6
zCVrzFhJko0y0KQyzKVJjepDjJ3EKJENWfWTIhJ1kVv85xb9I3yrfs7WgJCk
+E11napl0yxZ0GhpVDpYSt2GOBFcKfRDJLhSaEAluJJrCa7kUYIrOZLgSn4l
uJJH4TgjBoNBsx4ew127dt111120oyVi5r/9278dPXqUdI/kg3f5vffec1fl
4eHhpurhhx+Oj4+nHTNxy7NnzxYXFyckJMTFxcXGxsIGeXl50BCCBHEklH4p
M7ItxKusdJrsVIYckTqJ2aQE8ZGUWLJtJlJaZpz2WtqLYZt1c7e/MHurPip/
YljKB18VXu6wdrdsNRrNqt2zK96s4EqhHyjBlUIDKsGVXEtwJY8SXMmRBFfy
K8GVPArqRuBEqBvZ+K4oi8XS2Nj4+9//nnrDokaPHp2SkkJsVkjagCktLYW2
jaen57D/z96ZQEdR5fsflTn/J0IyCaAzc2bGc+bNe2+2c2Y5895xtnOc5Z2Z
cd7oKGRPh7CoyJoEEBR3ZnRQx41NdsIWVjECAcK+g4CCLCqrLIIiIZAQk/R2
/7+uX/pyU93pdJZK9y98P8amurq66nbdql/dT91b9/6//9fVgpYkzaTiNBV1
eOW7du2aM2fOPIuioiJSS56YNWvWunXr6OBhA23pYeOva70akMJAy1b68wSk
0Mczlc8T6PP1mleduKSGv7g2dciS7OEbsodtzCpY6SpYnP/c2598EXgY06u0
P3r8Zq1lrA9qeKUg4JXAUeCVooFXSgReKQh4pVzglRI5efLkkSNHuHUrV0Ha
HoGk03DQoEE333wzqyVNsF2OGjWKvNIsvdC33nrrre9+97taKrkI3aVLF3rb
s2fPVatWsUjOnTu3sLBw/vz5NEFz6JVkk94WFxfTOlvNK2tZAD1uVVvjd5vD
XPp9lkQrVeFRn1ersVO2Zw1dlFVQkpG/Kmv4qsyhbz886q13D1XXBp7K5G+Q
V9ZbQ2yBVwoCXgkcBV4pGnilROCVgoBXygVeKZGGYqNuucqWN3PmzM6dO+ta
y5st/vSnP5nZzScvKepLL730jW98gysrCS5I//nPfy4qKiJ/pNe5DbN+/XoV
brySpsENVoMeyE9Keq7PuF7nyAJardTCko8zBk7v89i6lEGrMwq2uIZtyB2y
7J3Sz2t8ym09cVnrr/EGJq93hGse281MZ3OBVwoCXgkcBV4pGnilROCVgoBX
ygVeKZHIsdHs/XXPnj3f+c53zMctSTMXL16ss5jb0LJhnT9/fsSIEdyNDxV4
br/99okTJ3I1JcF1lGGhFX7++eempjXnEPIrs8Gq1/ir75U+PZhItV/tPlLT
K2++K78kdejGnoM3Zw1Z37dg5Ztz937pV1/6WEsDtZa1njBXf63hbQO8UhDw
SuAo8ErRwCslAq8UBLxSLvBKiTQUG9kl6WTUT1zSdFlZ2R/+8AeWSrbLKVOm
KHV9YEqd+/z1/fv3Z2ZmJicn/+pXv1qwYMGcOXPIHOfNm0fTDXnlzJkz9+3b
p4wjp3m+xp3BWn8e689n+yz45wt08UNLeNS1WnXiUzXosaU5BauyRmxJK9ic
MrQ0O/+d0S+t+6JK1fgDvcjqFQZs1OhiyOybqA2AVwoCXgkcBV4pGnilROCV
goBXygVeKZEIsVHnnR6tkicef/zxjh073nTTTT/4wQ8uXbqkjF5hbZ7F09u2
bcvLyyOdJGfkprCzZs1qyCvp0zVr1pibM8fKjBJ/sO2rV3m8gZar/Oerb5Ta
K+sGpqS0f1mrPruqnnplo6ugOG14aUrBhpS89a6ClQXPLDt80lcbVMpq75f+
+l7ZxsArBQGvBI4CrxQNvFIi8EpBwCvlAq+USKP1lfzWHLCSPjp79uzatWu5
KpPHKNEPY3LnP7wGnfu7d+8uLCwkqSS75C56GvJKWmbZsmVmGppxCIV4ZY31
57k+UIitW1eyRHfdnBqvqvKpifN3pQ+dlz6sJH3YpqyCTZmD3xk06p1t+67R
T/1SdwjEX43FEQ6vFAS8EjgKvFI08EqJwCsFAa+UC7xSIlHGRspHcwgS3XOs
UmGqNc2P6CymM3r//v3kkqyWCxYsmDFjRoSue6iMZA6L2Tz8wacpueWquv7n
u15xafploCmsz+exakgtC12++XzusMUZeSUPDFqTNnhT1tDVDz761qLVpyqV
qnArsw617Ssu4ZWCgFcCR4FXigZeKRF4pSDglXKBV0okcjtYcklbDnoC9lVX
Naln8uAgqv7zmOYX6YyeGxxShFvDNiSVtMzevXtVy4+coDH6+U/xWCFccem+
/mldfz4+tz/wMKbPX2tVa3r9PlXjVnsO1gx8fHlWweqM4dtTh21NHVKSU7D0
X1N2fkmfeoxNBb2yzY52eKUg4JXAUeCVooFXSgReKQh4pVzglRKJ3A5WGTlo
NnANfaBShTyGqQs23HSW277yKw9hGRb66OzZsyrYu6xq1vOVdQ9O+oKVk36u
u2zIK31Wc1l65ZpNN/fkQ1/0+tTJC2rY30vT85enFqxNyS/NHl6aU1D8zCvr
L1Wqas/1PmZ1v0DBFfv8dZvXFaLB1LQG8EpBwCuBo8ArRQOvlAi8UhDwSrnA
KyXSirHR7BCVJZTfsiHu3bt30aJFs2fPJrXUHcPy45YETbByrl69Wj/LqVoy
LqR+fDLoj4bZ+UIXNJ+21A1l/ZaLfl6pXpqyOXNIYXre22n5a9OHbcksKB0w
etnhM6rKetyy2ldrDUFCafW6/T6Poj+PO/BcZ6DqM6CqgVUHxii53jOtP8yG
gx3Y+vyN6Se8UhDwSuAo8ErRwCslAq8UBLxSLvBKibR6bLTVWjJca1lSUsIK
Sa/cFLawsJD76pltQeLJrmRWiSqj7rKNuF7DGKiyJBu85lVTF+7tO3KJ69E1
GY/u+NvgtZnDSnqPWLBub9k1qxufWr+bFiSv9NZ1GeSrCczxBlbis3mlsYlw
XmlVmzYCvFIQ8ErgKPBK0cArJQKvFAS8Ui7wSom0emzUOc5iSGcxdxjL02vW
rFm4cCEp5PTp03XFJXnlzJkzV6xYcfHiRdNG3W53mxll+FpLazCRQDc+/kDV
ZPGmz115C9KGFGc9uj59REAtc4cXz377RLXV1DawsKql9Hs9dUOXeIM9AnF3
QA1vrK4WNVwawgOvFAS8EjgKvFI08EqJwCsFAa+UC7xSIq0YG70WPM1SSQrZ
tWvXTp06PfHEE/oj2tzy5csXLVrEvfSQWi5dunT//v36yKHvhn1s01FCnI5d
L9B/rNcbUMtaUku/evcj9fDIRZlDFt8/ZEXmiC0pA0seHL5y4oy9V6uCNZG8
iuBznT4/19V6w2yjvlTCK9sr8ErgKPBK0cArJQKvFAS8Ui7wSom0bmxknWQT
pNevfe1rHSxuueWWAwcOKKPzn8uXL3/22Wfnzp0rLy9XxsCX5gOVzX+4sukE
H2y0e6XfV8sJ4Wctq33q0y/UEy+uyR5e2nPohuyCDVmDV2YPefvJFzdeqlDV
PLClR3lrle7Txx/oFChk6ExjK9aKPY0+U2kCrxQEvBI4CrxSNPBKicArBQGv
lAu8UiKtFRvNxyHZK6urq8kob7agiY0bN6r6T0qGHhvc8w99neNA2Ec1HcPm
laquvjIw8oibG7Z6PZT+wBOXF6+ov0/Yl1OwKmPwiuy8Na5hG3KGleQ9s/zo
WVXrDdZXBr3So2rdqrauXawvVCrZKxvvq8cEXikIeCVwFHilaOCVEoFXCgJe
KRd4pURaKzZyRusaRnrrdrufeOIJrq/81a9+ZY5xqZ2RF9Pf0i1gTam0NYt1
jOv9xAbt0qqv9NDx7Pa5q5TfE+jq1R9QTK9fVXvVtKLDOflLsoavun/gygeG
rsx8dFXuyKXbPqi9UsVSSb/BbXXX41G6vtJ4ptJf78/QzSgawsIrBQGvBI4C
rxQNvFIi8EpBwCvlAq+USKu3gzXVkqb37du3evVqW/c7ZrUmQ3Y5e/bs733v
ez/5yU9WrVrFM7nisq0OIV/d8CL2pyzr1DJQcen38BOXgf88yuNTyzdddA1f
lD58ZfpjG+4dsipt+GpX3oKVGy58WV3Xo6yfl7++UvNpynoPVMIr2yvwSuAo
8ErRwCslAq8UBLxSLvBKicQwNrI28sSZM2eoXJSQkJCUlESlo6qqKnNJxx+0
DKicr64X1wY6hlVc7cijUvLoIb5AZz47Dl/r98zb9w97u8fwtSn5azMGr+g7
7K0Jc96t9HBPPgF59PqUXoNf1VViWuNd+v3BPmONrdpH2AwFXikIeCVwFHil
aOCVEoFXCgJeKRd4pUTiJDZu27aNjDI5OZnUkgpIBw4csDWsdRb2Sp/PGEoy
pA7xulpyu1af8nhpNgnwh5fUoBdKMgreSc8rzS7YkJ23Kid/8Zg31n9+NbBo
tcd6sDLwQzxeX401iqXb7a026yvrS2WwVrRh4JWCgFcCR4FXigZeKRF4pSDg
lXKBV0okhrGRO4D1eDw0cerUqW7dulHRiNSyU6dOCxcu1Iu1hVoGHn60e2Ww
3516jVL9dT3HKm/AKVWNN9DAl+LU55Xq729szcl7O7tgfdqQ0qyhq7OHvDXs
76UfnVfVXM0Z6BhW1bhJJz2+wDuP9ZhmaENYeGV7A14JHAVeKRp4pUTglYKA
V8oFXimR+ImN3bt3T0xMJLuk13/+85/KOHgcP4rMQUCCklfPK61/Qudzb64+
j5cSeKVKTS36kHQyK39dxtC1OcM3uvJLeg1bsPtIbbXlnrX+OsH0Kl917ZcN
eKWCV7Yz4JXAUeCVooFXSgReKQh4pVzglRKJVWzkA8Pj8fApT6933333rbfe
SlJJBaR+/fqp+r3LOpyaenLXUF86pley+5kPZno8qtanitdd7DV0ad/Htt37
YHHuyNKcgqU5BUUrtl6uUqrKa9mlUpXVNV4/D1jpC91YNGOOwCsFAa8EjgKv
FA28UiLwSkHAK+UCr5RIbPvtUcYRkp6efscdd3CpmxxTP1/ZRodQiNnVkzt/
GLX01nXn4wsoJQ9w6VfVfrV1vzd32NJ+j5Vm57/Tc9CSXo+WZuctnrHoEHnl
NUstPXWbCtZL2r2y0e5g4ZWSgFcCR4FXigZeKRF4pSDglXKBV0okhrFRD2dJ
r+PHj09MTOzUqVNycnJSUtK///u/84FkjkXSNnDTVv/1Lnp8IUNP8nLewLAj
Hndg8WCL2Fqv+tIX6MnnyDk1/B/FrmFLs4eXpuZvSh2yOnfw7JcnrCv/MlBr
qb3SWzeCiQde2Y6BVwJHgVeKBl4pEXilIOCVcoFXSiRWsVELIx0h58+fv+mm
m0gqE4NQGemLL75QweOnjXqFNR6ZtHulrbVqYILHtaz71OsJfM1bN85lQC1P
l6vnxm1OH7Ios6A0u2B97+GrXYPmjf7nymPnFZUeqgO/3meNWsJeae+KtoHR
RurGvjxx4hi8UgrwSuAo8ErRwCslAq8UBLxSLvBKicQqNprPTp44cYK88uab
byajTEhI6Nq1K73Onz+fF+BuY5XRJlY3oHXs6PIZf5zK0GXC9K7DrWfJEqvc
AXksu6amzXuvz5BZvfOXpQzZkJq/KT3v7fwxxe9+VFljtaStG9Ey8I3gSJas
lAE3tQbKNDsU8vPy9NWaEyc/olJ/+ZUK+3OgIP6AVwJHgVeKBl4pEXilIOCV
coFXSiTmsZEF87777iOvTLKgAhK9du7ced68ebp7H16MYwJ5ZcyPqwZ61yH1
raX55Ixf1iq3T1XVquKVR/vlzc3I25A9am/K0DXZBUt65U1b9+6ndJ58yQ1g
/XUtab1u/Rt916XVb/PKQBVnnVdevXK9u1oQr8ArgaPAK0UDr5QIvFIQ8Eq5
wCslEtvxKz2B4R/rpocOHdqlSxcqHXWxuPXWW8k0aWbYOEDHlf5uTKjnlddr
DdkrPbV+N/cZS2+u1agtuyv7j1qR8shb2cPWZOStyBm2InfY4tnFx69Z3cN6
vNocfdZjm4Eegeo3vK3blp5jPV/5IdrBigBeCRwFXikaeKVE4JWCgFfKBV4p
kdjGRrPwQyf+z372s65du/IQluSVX7H4zW9+c/78eWVVUxJ88eU2sTFUS8sr
r78x6xO9vmq/JYt1T2n6VY1PHT6p8p58p/ew4qyhJSmDVmfkr80Z9s6LU/aU
1QTUMjBMSW3gQUtuExvwSr9eK63Abb2aXnnKer7y8vXHP0G8Aq8EjgKvFA28
UiLwSkHAK+UCr5RIDJ+v1F33+CxoIjc3t0uXLtwIlopJHSxuuummb37zmzt2
7NDf1U9cxpDrMue3e6X1CKTb66/l4UjoH7cv0OT1XJka/cKanLy304eu7zFo
Q9aILVlDVzw+dtMnFwNqqc8Tj6dWr9VaAymq23oNvPVbT2KeOH7644+PXS2/
Aq+Mf+CVwFHglaKBV0oEXikIeKVc4JUSiXls5Gcn+ZHJ559/PjExMTk5mezy
tttu69ixI3nlLbfcQq+33nrrm2++qYJHlMciVmlWDXqlz+8L9Kvj8wcGEPEp
d7W3hn3Q4w/I4+cV6pVp+/qMWOUq2NzjkXVZBVtceSsLnis5fNZ/zW8ZaW3g
sUqPtzq4Yp838FV69V33SmV4pa2jWhB/wCuBo8ArRQOvlAi8UhDwSrnAKyUS
w9ioe+PRLFmyJCkpiccZ6dq1a4f6kGA+9NBDZKBslLE9tOqZXP0qS2tUSrbL
Gj9boT9ghVXuQDevFW41Z9nHvYYsdA1Z5yrYnlWwIWXI266ChduOuPlxy2Cn
PTXWn88fsoVgO1jyygrts/DKuAVeCRwFXikaeKVE4JWCgFfKBV4pkRi2g9WD
hnCDWHotLy//3ve+17lz527dumVkZBQXF5NjclNYer355pvpderUqSrYi2wM
j66GvDLwgGRg6JAa7rjVGjHE4ws0ZL1e51jrVxt2lPUfVpwxcGVa/rqMERvT
R6xJGTp74fqPrtWNP6Isqfzyepewfv63bmxNq98e8spr170SxCvwSuAo8ErR
wCslAq8UBLxSLvBKicRbbDx9+vQLL7wwadIkusjSwUOh4Pvf//7NFqyWAwcO
dHLkyuipP7ql7a+uzpHHCvFxc1ZvcI7fG+iZ5/3DtUNGv52Zvyolb/39BSsz
Ri53DV/0xpz3rlQHuunx+axHNQM9xAb6iA0aq7tunJETx8grr5RfMxID4hR4
JXAUeKVo4JUSgVcKAl4pF3ilROIzNuomsnT8VFVVpaamslQSJSUlvIzu9idG
RPTKeoIZePUob6Cq0Ver/B76edzN69FPVd7fV7keLUkdtvKBocvThq7MyXv7
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
62u3ftzSvJrznDiIPD5/QCHdir3SUkt661U1HuWp9auPj5cfPlJRdll9WaOq
/Qo9wsYz8ErgKPBK0cArJQKvFAS8Ui7wSonEYWykCLB+/fouXbpwfSVx8ODB
1t0EV02aNZJmw1eeH9OhSTz+QO3kNeX3aK/0Ko9HuSu818giT5+5cPCDoxXl
AfGs9fm98Mo4Bl4JHAVeKRp4pUTglYKAV8oFXimROIyNdMycOXOGdLJr165U
WKKJxYsXt+4mKMicPHny3nvv/elPfzpt2jT2Rw4+Zuc/rdv+tkkJ9Aeepgw0
fA2opZ+9Unmsrnvo7/jJY0cOH6y4XBb4VLm9vmpLPkE8Aq8EjgKvFA28UiLw
SkHAK+UCr5RIvMVG3bPr1772NW4Em5CQ8NJLL7XW+nVvsT//+c87dOhw0003
dezYMTMzk67p+litrq7midjVV/oCjWD5L+iVynri8ktvoHfYo6c+/vDogaqq
MuWtthbzwCvjFnglcBR4pWjglRKBVwoCXikXeKVE4jY2/s///A8ZJQ818vDD
D7fimlktb7755ltuuYXUkl9//OMfHz9+nBeIhyJZUCUtfNefslQBh/Qe+/TE
wROHyiq+CMyl+bU+NISNW+CVwFHglaKBV0oEXikIeKVc4JUSic/Y6PV6MzMz
u3bt2rlz527duv32t79txZXzMZmVlUU62bFjxw5B7rjjjpKSEl4mtp3BqqBX
+vWUz6qt5Act/Z7jZ4+///GBy1WXrcpd7jo2tukFDQKvBI4CrxQNvFIi8EpB
wCvlAq+USHzGRgoCTz31VGJiIkklvd555508X/euo5uzNhX+Oq2fwktOTg63
g+UGsfz64osv8iOWtnEt9RxzyMu247pnBjh+8thHRz8sv3r5+kcgXoFXAkeB
V4oGXikReKUg4JVygVdKJN5io7a2adOmJScn33bbbeSVd9xxR1lZGS+gxwdR
LTi6WEtpPePHj9dqSdx88800/be//Y13iF6/OcxlPHDixAkKkleuXIl1QkDj
wCuBo8ArRQOvlAi8UhDwSrnAKyUSh7GRqwt37txJUklGmZSU1Llz5127dvF8
TfOqLOmA1HrIE7Sh7t27s1SyXX7lK1/54Q9/ePLkSdqirdYypoOPXAdeKQh4
JXAUeKVo4JUSgVcKAl4pF3ilROItNmp9+/TTT5OTkzt16sRDjSxdupTn6yOq
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
5EL+5s2b09LSUlNTp02bptdsNqAdMiSP1JW2cv78Z1wv+frr4/j5ysOHP9y7
97333z9QXn6Vf47OZNvvbSHwStHAKyUCrxQEvFIu8EqJiIiNJ0+eTExMJKOk
127dui1ZsoTnx3D8ymZQVlb23//932yUHTt25An6UcXFxeZi0fwoeKUg4JXR
UP+GUuCVXGz79p0ZGVkuVy9+gLFJa9P1lSNHPjZu3AQy00mTJk2YMGGiBcW9
0Pb2tgcwSR6XL1/OQ5MUFRWp+ucm3/wZPfrJXr16p6VlHD9+kueTV/LYIvTK
jXhTUtLoJ4wZ849jx06YT47bqmibDbxSNPBKicArBQGvlAu8UiJxGBvN548Y
Hmqka9eunTt3pteXX35ZXKmJk1pdXf3II4/Y1PKmm2569tlnbR3GRgZeKQh4
ZbPZvn271Rdr1ptvTuE5tlasDe09mjNjxoysrKy0NHI6F01kWvCgkzTxzjvv
8Bq4mKEfe7RZ3uzZs3nYSlo+NHn0rb///Xn6nFK4b9/7PJOSao2VmUku2aNH
SnZ2Dn1KrzRNEwsWLDB/RavsJZtXbtq06dSpU8oIJrLuv91QcAYdOnSIS7wS
uzq/0dBn08cWcVV2AjbMe4Z0OaP8glfGORwDdZu9I0eOUGykkrPtKhZlURnE
BDIUyrWrV68qK6fi9rr205/+lLvuSUxMJDXjmYLKS7oATGmeMmXKV77ylQ5B
ePree++9ePGisn5UhFzgs+n06dMUJCsqKnimoP1wA6Kj3+9+97ukpCTu1hhe
GQ2hXmlrO6qPfD0Cpv501qxZJJVkhRQu8vLyhg0b9uijj44YMWL48OH5+fn7
9u3jxaiYUVNTw7dDadpsK0vTJKc8yMiyZcu47au+3vHbp59+NjU1nVJ4+HDd
vvrss4vvvruX3p44cerkyU9oeuHCxbm5ffr06WctmXHgwAGdfl5JK/bbs27d
uo0bN9K1mH4R/S7+dZTmahCXUDaRmBw9evTYsWN0FdYzY5sqEAHOnaqqKsoy
yriysjI6xWKdKBAeOrkoBuqzjLhy5UqsEwUapDYIX5QrKyvpLKOiCJV1+bzT
sRFBMp7hWmYyGl0OIeKwHNKzZ8/u3bt37tyZiuW///3vq60jUNChRQVITjC9
0lsqMH/961/vUJ/vfOc7e/bsoWUi7H8q8VKEPH78OJX5P//8c7q6cZa14U8B
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
NlppePny5cLCwpEjR+bm5vbo0cPlcuXl5Y0fP54S2VBvrhcuXJg8eTKlITs7
Oy0tjXI8PT192LBhu3btMqspW9gIVsErhQOvlAi8UhDwSrnAKyWC2CgReKUg
4JURMEff8BtDimzZsuWhhx4iIyMXy8pyTZ48tUn6RWuaNWt2RkYW/aWlZWRm
ZtNKaFUZGTSdmZqaStOLFi0yn7W0+R2/ZWe8evUqGSV9hb/LnmglLGvYsBEX
L17i3OMV8OvKlat69epNG6UE0PesrWfSNH197NixyqrEVMZwKi3Zh/BK0cAr
JQKvFAS8Ui7wSokgNkoEXikIeGWjcI0hq9ylS5deeOGFlJQUsjZyN8vgMidN
mkwfRq+W2iuzs3PGjPnHlCnTpk+fOWvWrOnTp0+ZMqXQ4tChQyHf8ptPPvJE
ZWVlQUEB+SCl5OGHH543b96mTZuKior69OnjcrlIWgcNGsIJ83rrvrJr17us
k/Q3atTjCxYseu+9/Xv3vrdo0ZInnnhizpw5PPiI3gT67bmRgVdKBF4pCHil
XOCVEkFslAi8UhDwyshwcZr3AF30H3zwwSyLAQMGvPbaa+RuqanpkydPbdI6
tVeS2W3YsMmY7+cqSO6sVcud7uRHhfTGs3nz5szMzIyMjIEDB5aXl+tWr+fO
ncvJycnMzKa/ffveJ1O01uO9erXS5epFvklK++abU6wVkq76tTvytpSR6fDK
Gxl4pUTglYKAV8oFXikRxEaJwCsFAa+MAP9wLlGT0NFFnyQuOzt77ty5NHPb
tm3p6ekpKWmTJk1u4mrrvJJWtnHjZlUnd3XCqBu+2nrRMfvS0R89+eSTlj9m
7t69W9Xv9HXhwoWUNu2PzLx5Rb169Sa1fPnlV1SgJa3PzFubupppaDbwStHA
KyUCrxQEvFIu8EqJIDZKBF4pCHhlNGjXW7Nmzfnz53nmli1bSOiyslwzZxaS
oOmGpo0S6pUq2NqWN2S2d6XyvN7/tgceL1686HK5HnjggdzcXC6Q6C5elRU8
KW38p7c7YMAg2iht+uTJT/RMjX6SlNagsx71lTcy8EqJwCsFAa+UC7xSIoiN
EoFXCgJeGQHdEpXdyqxSpDk7duywesvJHjduQpNWq70yNTV906Yt9FY7qd5c
2I56VP2hQ/bs2ZORkUFqOXbsWFvFIq+HjJI2kZ2dU1VVTeZ76dJlSm9aWsbo
0U/S53oLPM2ZbNaKNjpoZnQ/Fl4pGHilROCVgoBXygVeKRHERonAKwUBr4yM
VjzTMVm4tm3blpOT06NHCj9fyc8wRoPZb8+GDZuC/bX6bCpHZQw95IdtIEsu
5G/evDktLS01NXXatGnBNfvNxqtDh+aTRfbq1fvs2U/p7e7de7j31wkTJqnA
YJdX33tv/65d727fvvOzzy7q9OvKSqaFdgmvFA28UiLwSkHAK+UCr5QIYqNE
4JWCgFdGg7kH9EOI27dvt6oLe02c+GbzxhlJTU0fOfKxceMmkJlOmjRpwoQJ
Ey0o7uknJW2NYPUEyePy5ct5aJKioiJVv4Mdbgr7zDPPcRc9H310lN6uWFHC
nQU99tjop556hj7i4UV45oMPPrxly5ZWz3F4pWjglRKBVwoCXikXeKVEEBsl
Aq8UBLyy2ZBXWn2xZumOcWytWBvaezRjxoxZWVmBcUBIS2nC6rg1kwedpIl3
3nmH18DFDK7KDG2YOnv2bB62kpYPTR5967nn/k7Jo/V/8MEhWt+SJW/xiJm8
xfvuu79Xr970lvSWkmE975m5YMECM8HN7rfH7EGI/Dc5OZm8ctOmTRs3bjx6
9Ki55ng7uoAJHYFHLcyOkUHcoke2pbIT5VplZWWsUwQiodufUGYdP37cZigg
3jC7tqOz7GMLt9tN0+YjJIiT8QydayQpV69eNWe2ylM/wCEoTp45c4bK/OyV
OL/iGbNS7O67705KSkpMTDS9kge8UHF20sWtV5rDPiqjAlGPgKk/nTVrNlcX
PvLIwLy8gmHDRjz66KMjRowYPnx4fn7+vn37eDEq1VORgwsbNG22laXpGTNm
8CAjy5YtY03To4TwW/JK2gql8P33D9Db+fMXsGampKT9/e/P79y5+9y58xUV
1/bv/+Cxx0Zbj16m5eTkXLp0ib6uL53N2zlsxLQSWkNJSQkdVHfeeee6devW
r18/c+bMOXPmUOJpYtasWTQ9C8QllEf0OnHixEmTJs2woLeFhYWxThdokGnT
pvHEm2++Sbk2ffp0zjUQn1AGURikPKLMmjx5Mk/HOlGgQSh3KABOnTp19uzZ
c+fOHT9+/JQpUzgTZyE2CoGyjK9olInTLGYFL3YgDqHza5aVaxMmTKBpyjXE
yXiGcofziOLhK6+88otf/CIhIYEUgGzFVmnV8n5BW5G49UomtOWq+RHvRboo
cb3h+vUb+SNTQnlJumyR5XFLV7JBnsjOzq6oqOAli4qKevfunZqaSkuGbohe
n376WX6K8+OPj9HbwsI5PKLlnDnzgosFBrW0NqoGDx5K6ye1XLt2rZn+Zt9S
0PuhuLi4c+fOX/va1yipGzZs2LJly5o1azZv3rxp0ybaFsnmBhCvbLSgnFq/
fj1lFk3TRKwTBcLD9234hKLzC5kV53DurLfYZIH8imfohOJXPsV4Qucaf7oh
mKExTCeIjHmirbPgy1xsUwUaggoe9Lp161YqOuoLHM8EcUhpaSnlDpVAuHj/
f//3f926dUtMTOzbt68Kac8ZP1WWceuVWsS0UumKPw19SDuVFI+rDrk/WFW/
Zp+7BiLZT0lJIZ0kl6QJ3VCWR9KkxSj7yNRogRkzZphbp41yxuXnDyOLdLl6
lZWVq4CHLiTHJJ8lr6St1dS49a2C2lrPkiVv0fp79eo1bdo0XpWtA5/o0T0O
cTpXr16dlJSUkJCQnJz8yCOPDBkyZMCAAfT68MMP9+/fPz8/fyCISzinCJqm
jKPXwYMH8wSIQ/i0GjRokM4yOr8oy2KdLtAgnF98TiG/4hzKID6zdB5R3vEr
TwBxcMbpyxyIQ+h049yhzKIISachgmQ8w+eUzqaf/exnX/3qV7t06fLggw9y
A0jb+BpxQtx6pYYHItFv2RO1o9EnM2cWpqdnpqamb968VX/F9q0zZ85s3LiR
pIz1f82aNTSxbds2vRglgJSTTPOll15S9bOJG8T26tXbev4y2+0ObH/t2vX8
duLEN/WS1dV1PUWsWbOWvJJEdebMmZz7LWzErg+e8vLyO++8k7yS7JLUslOn
Tt26daOJxMREmtO5c+evgriEWy8kWyRZcJbFOl2gQfhBBj7RONc4E0F8kmhh
5hfnIIhDOPTxCcUZRxcy/ijRIJZJBFFAJ1rXrl2/GsxKnHRxDpcVKbPo1SyN
xDpdIDycNXSKJVhQCb979+40MX/+fFtNZfw0glXx7ZVa7vSjjoZOXt+H5JX0
xZSUtC1btlkf1Rs4kh+i5FWFdkWrN0R7IC0tjWSwd+/epgny67Fjx7iv17y8
Aq7APHjwcI8eKVlZrieffNpaQz1tfOuttzOsOlTuXTbsRqPEbDXNv+Ldd9/t
27fvX//61/+z+Mtf/nLPPff8zYLe3gviEs6a++67jybus6Bco9dYpws0iD6b
eILOLzrXYpoiEAnKHYqKdE7R671WfvEEiEModzgY/jXIvcEc/L8gOvuQj3GL
zkF9gWNinS4QHh0hCToH77VOulgnCkTi/vvv/9Of/kTnV0pKyh//+Mfs7OxJ
kybpysqGpCa2xLlXmvuNm5Lq3m+0dZJXcgvVDRs2sd/Rt2pra7WNmugRMxmz
KplkLdPiwIED/Kne9Pz582kTZJFLly5jySsrK+/VqzfL5oULnytjzE1Kw/PP
/5Ob3W7dupVWzilp9ugSpudqx7SNwkmfhv29IH7gWwS6RXS8NV0AYeEzK/TG
FIhbPBaxTgWIBN/sNbt7NXs+tJ1oOO/iFvMOvz8Izr64xaya4QJJXNVzARvm
qaR7GeW3ZoE/3iJk3Hql7Wgn1xs/fvzYsWNPnz7N+1MXy6dPn2n1v5pBXslz
wvZSrpfXNYBmNShl3+zZs1NTU7OyskaNGlVZWam/eOzYsdzcXGvokOzz5z/T
SXr00VH8XOfkyVN1YulSuWfPPmuky+ycnJyysjKez4dHM1RCD3aglL3zn9Dr
LzsLiENsGWe+gvjEFkyQWXFO2PgZ60SB8NgucCrkim+7CMY6vSA8ZjaZxZtY
pws0CIKkIGwKwDPN6jZ90sXV/YG290qu16PX7dt3rlq1ZuXKVStWlEyYMIms
jXTs2WfHLFtWXFKyet26dSdOnNDfevrpp9PT00nWZsyYYdulNIc+ou8+9dQz
c+bMW7p02YIFi4qKFurXDz44ZNs65wDnkW4l+9FHH/EjlmSXo0ePXrlyJcls
UVFRv379UgOkv/baG9a36lq9rl27ntyRkt2zZ+q4cRPo55BRzpxZSKZpPXqZ
uWTJElZXXaUYV1kPAAAAAAAAAK1C23slqRXbVU5OLrcj5fE7UlLSaIL0jUyN
vIxUcdy4cSrYcnX48OEZGRk9e/acOHGirf539uzZ1qORmbQS+uM+fLhTHV75
tGkzSCf1fRotlbaE0ZydO3fSVlJSUngsEh6OhN66XK5XXnnNdFKGZtKGOP2k
kzRhpTyQkpdfftmstuZGsKEbBQAAAAAAAADptJlX8vCO+iFEepuXV5CWluFy
9SKjpD/SMZpmTSNHI6GbPn26ruSdMWNG3759s7Oz+YlFnsmCSXN69eplM0qW
Sp6YPn1mcHkvbbe21hNMw/WmbvpBy/379z///PM5OeSJWVxD+vjjjxcVFelq
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
YSswNKp45j0l/V0Kj5QLOlN4AX+4qnCaScmjAtWHH35MYTX4qFGTL2rwyhbi
N7r44Dk7duwYNGhQampqVlZWRUWFedhEU2X5wgsv9O7dOzc398EHH6QJeqXp
Pn369O3bl6ZpzZFtxXwcjLa8Z8++sWNfeuih/hkZGT179uzXr9+YMWM2bdrU
qDotW1acnZ3Ts2cqvc6YMaNJjaslsnfv3v79+2dnZ6elpXFgj2wW/mDXbbxb
nn/+ecojyi/OKaKPBecarTmaNPDmSCrffffdF198kfI6JSUlPT2d1vDss89u
3LjR3DpP0KV59uzZlK3p6ZkZGVm0MH3l0Ucf3b17t2oX5dvI7Nr17oABgyjX
MjMzL1++HGFJbRzK6MOHcy0sDz300MCBA221kBH2J320a9eul19++ZFHHuFc
ePjhh59++mmda+YFgq62lGtDhgyhJel4o0BB6R89evQHH3zQKrslDjFFj3YU
R0jKOLocN/VuFeVaTk4OnRQuVy/r9HqYXvmM4whp5lpDK+HsoGISZURBQQF9
l7LM5XINHTr0zTffpAzSy5j3/1sl/SLQe27Pnj10JPMhyt7dJChw0dd79epF
WdOnT7/evSnDHqYJgqIlnWK64j6au+L+YJUl7fOdO3fS6UahNd2CcvCZZ56h
mZGvj3R1Hjt2LH2LLoh06tFh89xzz23YsKGpvyve0IUQ/u20H2jf0m6hXOOD
WdeMqMaKsvQpnWKUO3Ra9epl/ds3UAjR17UBAwY0upKGaPb+p2Nv6tSpVIah
AsmUKdOasel4w6yQUtZ1f9++fZRrvGciX85CV0U7dvDgwRwYucSYa0EnGp28
dFVasWJF8xJJxwyVjijXOA5Q8ijXqBi5efNmvgFu1lryNInM/PnzKUhmWNBx
SIWTp5565v33D6imWJIIqKylIyQVHaOpStCvdJ7SucD5FZbS0lKzuWM0iqer
ISh0UzGSDgDKAkobnclUIKHCvy7/8PI6+86cOVNYWEi5RvlFZ1lWlis1NX3E
iJFcmGxSU2p4ZStCAZyudFTY4Hyk3Pniiy9UU4r3lZWVfJXkr+sJijOZFlSY
iXwympXgq1atoWODzujMzECSKGFUdqKVUPFp0aJFyrgY2VZy9uzZtLQMuqZY
28+mH2UGQNGYP5ZPKAoF9AMpLOj9TPkYzS/V14WKigr6Fn2X1sD3E2gPp1rw
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
wEFFAjnCP2iNI1rN5ZXcbSlYeD7QhSPShFg43oDA8+fP2Qhzbh6f1tXxLLPY
dU5OHlICWyKZ/Kn0RYsWubgFZZ9IpYvtb3OC63y/jX17PFCi6M5IvkRrjZdE
UcSKFSu4iGb//v1OtUXQlx4Q44AA34LWuE0oeSWhPfU8cgK9Elpd3awFY6H1
J06chE5hSXrb83KMzgPKJxgKzcsvO/HkfwtduXihvbHDho3ghg+//da8tczC
K7mLZhjhpyE+aZylUnAPFrRm4JXyiqa9/fvn0uTgoGg4atFgZ546dYpbdy5c
uNBzUemZySwFM2fOCtYYdYJxIqdzNgXGK1uOcFTt0yADrI4v8Fe60Gqi3ufP
n78oBMrA3LlzN23a9Nn+jt8C+wiOuujE3tapSbD4PX/+Ys+eGeh/Z8wolrGy
ixcvo8VGcf3xx58Y1a+/PuARNtOmTZOsNUMurRhCIrRVw0MHIHlorSkmvTaf
OLWA+/9AU1DZvHnzcI3fRrZh8QoGtMaZmcJqtV/y0qVL/Mr06dO1BQu+uXfv
3i1bti1ZUgqjC0pE0923b/b1699CpZaBcRlVC/PeEGDQoCEUmuy+8tkIeUFe
yWVBUNPixYsXLFhAleGXE7qSvSuDEkgPl5mgmkgwGaFFENQ1TsCbNm1GsqzV
B2dfcgK87NjADsWz4lIaOhdsIVFfmsvLXr16RSlBXCjw8+ejuqGdLEFriXrH
hUK68npK5CMwd47o/vzzRu04EJ4yYcKk9u3T0Pr997+31NOvkP7WiaiTTjKB
J8ES5hhBfPHiVcLXPeiGUc6SQJMIZYERgPFBX6hi3HVH3voQnvpEwa5bt86b
rsO/ePoVdCe1TKf2zJlzoB5BnzVDBvBxkZ6eCasPL5Ls6EcutkT6Gq27qVOn
pm6N024v5zjg1v3L/JUc3uSuTQsXLsa/n376CS0k2kZUsWidgqJRH7kdun4k
UuQWgkhPE+WvC6H8VlWd4gSqxYuXNCtHrRPiy9NDkQUFg7sE+6aK58tbPREF
1bF06VIu8RsyZAg6MrSH+IXK0CqWlJTcusV27FNU6F+4Vp1zzqMDqriDYkCr
RrsyheBcuHCJkz8LC6eIjjTbqv+0Q1esYtKXgfA8jCPlqphnS8sYMv6EEcIZ
YpwH+1mVCYRXDh06dG4AMR2hNW8LVg4IvH37NvB+dOGGnKJSEX5GRi+2kBxf
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
RzIYDAbD14LxSoPBYDAkxOPHj0G1yIDAccCJnj178cWxXb16FVEhnuXLl7cG
P5FOw/nz5wcMGAASXVVV5Z0hojfMkVdu374NyUAs4JV61x0JpqezrlixgsR8
4sSJS5cuxZ9Tpkwh08FNOiWzs7MvXLjg4k9jmTZtWv/+/UF13717J0lttWxI
80romlleuXKlnv/8r+nd2+s1Pz8fBQ/piQZrDUXRYDAYvg0YrzQYDAYD3Toy
mZNcYO3atbDGu3Tphn9paZ06duy8a9ceWuua/nhrCb1VhGLhX7lypW3btiBT
ixcvdvGuQF7LmZL6JAidHh3MW4rorZcUJqiPL9REw9smVK49Cil/0ocoUkK/
iYyQV35WtsuWLSM3P3bsmL5fU1NTUVFBvgN22adPH73uz8WfiJEwnToXHkXy
lm3qSDwF6aiSzWiVay1e7ULlHaoGNy9evEi+DF6ZcMeejyF0/Dr9XlEMXmGS
EmQwIXSAAQMGkOcmzIj+orda1iU528V7pJ3UOiOteVWswWAwfHUYrzQYDIbv
HEL99C9s5tzcXFjjPXtmHDtW2blz127deowcOZqveNMyYVcLO4BlLgc4anZw
9epVzh0F19AsRtvt2qqvra11EaZDA16opSYmiEcfHaKDuZAY6qMlvHMkk3E0
jzrxfnV1NaewNotXHjhwQJi4pAr9b2ZmZpcAS5cuje4XJAxI5nDq1PJmIhYW
x4t17jg71yUip4xfi1H2bvLi1PvcRpn+lStXONe3pKSEwahZKSdebHrzWBYh
LXwExHsUTF3dJ502jiivRHr0uyJM7/AX0nm+TlFIvdC5ljtS8vV6Uo+8GwwG
w/cA45UGg8HwncPzc9EYvn79elpap/T0zOLi2bCXMzN7d+rUpUOHjo8ePRHC
qOlhTU1NaWnp8OHDMzIy0tLS+vfvv2TJkocPH+LR7t27p06dike437FjR9DV
CRMmTA5QWVnp4h1ke/fuLSoqysrKAhEYPHjwtGnTjh8/7iUSFHXIkCHjxo1D
/OjCRowY0alTp549e86YMUPb869evSovL58yZUqvXr0Q26BBg5AMkDvJtWQW
kfzwww9I4cmTJ53yvgEvXrxAvvCJ7t27I1UzZ86EZG7evEmq2CxeeeTIEbmp
GV9FRQVYGBg3gj1+/FgyixcLCgqQZi/CM2fOLF68GGLs1q0b5ImMQ2JMuUfV
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
7AMP9w==
        "], {{0, 871.}, {1224., 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> ColorProfileData[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIj
UNAApJaBycDRxcmVCagqN6+kKMjdSSEiMkqB/QIDBwM3gzCDMYN1YnJxgWNA
gA9IdV5+XioDBvh2jQFkIMNlXZBZmPJ4AVdyQVEJkP4DxEYpqcXJDAyMBkB2
dnlJAVCccQ6QLZKUDWZvALGLQoKcgewjQDZfOoR9BcROgrCfgNhFQE8A2V9A
6tPBbCYOsDkQtgyIXZJaAbKXwTm/oLIoMz2jRMHIwMBAwTElPylVIbiyuCQ1
t1jBMy85v6ggvyixJDUFqBbiPjAQhCgEhZiGoaWlhSaJ/iYIQPEAYX0OBIcv
o9gZhBgCJJcWlUGZjEzGhPkIM+ZIMDD4L2VgYPmDEDPpZWBYoMPAwD8VIaZm
yMAgoM/AsG8OAIg4XPo=
          "], "RGB", "XYZ"], Interleaving -> True, 
        MetaInformation -> <|
         "Exif" -> <|
           "ExifTag" -> 26, "PixelXDimension" -> 1224, "PixelYDimension" -> 
            871|>|>],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{1224., 871.},
      PlotRange->{{0, 1224.}, {0, 871.}}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{
      "FrontEndTokenExecute", "[", "\"\<DeleteGeneratedCells\>\"", "]"}], " ",
       ";"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"discard", "=", 
      RowBox[{"ChoiceDialog", "[", 
       RowBox[{"\"\<Do You Want To Discard Previous Output?\>\"", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Yes", "\[Rule]", "True"}], ",", 
          RowBox[{"No", "\[Rule]", "False"}]}], "}"}], ",", 
        RowBox[{"WindowMargins", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"Automatic", ",", "Automatic"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"Automatic", ",", "Automatic"}], "}"}]}], "}"}]}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"discard", ",", "\[IndentingNewLine]", 
       RowBox[{
       "FrontEndTokenExecute", "[", "\"\<DeleteGeneratedCells\>\"", "]"}]}], 
      "]"}], ";"}], "\n", "*)"}], "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{"firsttime", ",", 
      RowBox[{"(*", "  ", 
       RowBox[{"first", " ", "time"}], " ", "*)"}], 
      RowBox[{
       RowBox[{
       "Speak", "[", 
        "\"\<Welcome! This is Ess, Ess, A, H. A program to make simulations \
of billions of years of the history of asteroids in the main belt. Make a \
choice to start!\>\"", "]"}], ";", "\n", "\[IndentingNewLine]", 
       RowBox[{"opentest", "=", "True"}], ";", " ", 
       RowBox[{"(*", " ", 
        RowBox[{
        "flag", " ", "for", " ", "close", " ", "source", " ", "code"}], " ", 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"pic1", "=", 
        RowBox[{"Import", "[", 
         RowBox[{
          RowBox[{"filename", "=", 
           RowBox[{"FileNameJoin", "[", 
            RowBox[{"{", 
             RowBox[{
             "dir", ",", "\"\<Info Files\>\"", ",", 
              "\"\<Appendix O.  GeneralOutline.pdf\>\""}], "}"}], "]"}]}], 
          ",", "\"\<PageGraphics\>\""}], "]"}]}], ";", "\n", 
       RowBox[{"pic2", "=", 
        RowBox[{"Import", "[", 
         RowBox[{
          RowBox[{"filename", "=", 
           RowBox[{"FileNameJoin", "[", 
            RowBox[{"{", 
             RowBox[{
             "dir", ",", "\"\<Info Files\>\"", ",", 
              "\"\<Appendix F.pdf\>\""}], "}"}], "]"}]}], ",", 
          "\"\<PageGraphics\>\""}], "]"}]}], ";", "\n", 
       RowBox[{"pic3", "=", 
        RowBox[{"Import", "[", 
         RowBox[{
          RowBox[{"filename", "=", 
           RowBox[{"FileNameJoin", "[", 
            RowBox[{"{", 
             RowBox[{
             "dir", ",", "\"\<Info Files\>\"", ",", 
              "\"\<Appendix L.pdf\>\""}], "}"}], "]"}]}], ",", 
          "\"\<PageGraphics\>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"piccrater", "=", 
        RowBox[{"Import", "[", 
         RowBox[{
          RowBox[{"filename", "=", 
           RowBox[{"FileNameJoin", "[", 
            RowBox[{"{", 
             RowBox[{
             "dir", ",", "\"\<Data\>\"", ",", "\"\<lunarcrater.png\>\""}], 
             "}"}], "]"}]}], ",", "\"\<PNG\>\""}], "]"}]}]}]}], "\n", "]"}], 
    ";"}], "\n", "\[IndentingNewLine]", 
   RowBox[{"Overlay", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"image", ",", "\[IndentingNewLine]", "\n", 
       RowBox[{"Column", "[", 
        RowBox[{"{", "\n", 
         RowBox[{
          RowBox[{"PopupWindow", "[", 
           RowBox[{
            RowBox[{"Button", "[", 
             RowBox[{"Style", "[", 
              RowBox[{
              "\"\<\!\(\*StyleBox[\"SSAH\",FontSlant->\"Italic\"]\) General \
Outline\>\"", ",", "Blue"}], "]"}], "]"}], ",", "pic1", ",", 
            RowBox[{"WindowSize", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"700", ",", "800"}], "}"}]}], ",", 
            RowBox[{"WindowElements", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{
              "\"\<VerticalScrollBar\>\"", ",", 
               "\"\<HorizontalScrollBar\>\""}], "}"}]}]}], "]"}], ",", 
          RowBox[{"PopupWindow", "[", 
           RowBox[{
            RowBox[{"Button", "[", 
             RowBox[{"Style", "[", 
              RowBox[{
              "\"\<\!\(\*StyleBox[\"SSAH\",FontSlant->\"Italic\"]\) Function \
List\>\"", ",", "Blue"}], "]"}], "]"}], ",", "pic2", ",", 
            RowBox[{"WindowSize", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"700", ",", "800"}], "}"}]}], ",", 
            RowBox[{"WindowElements", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{
              "\"\<VerticalScrollBar\>\"", ",", 
               "\"\<HorizontalScrollBar\>\""}], "}"}]}]}], "]"}], ",", "\n", 
          RowBox[{"PopupWindow", "[", 
           RowBox[{
            RowBox[{"Button", "[", 
             RowBox[{"Style", "[", 
              RowBox[{
              "\"\<\!\(\*StyleBox[\"SSAH\",FontSlant->\"Italic\"]\) \
Calculation Logic\>\"", ",", "Blue"}], "]"}], "]"}], ",", "pic3", ",", 
            RowBox[{"WindowSize", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"700", ",", "800"}], "}"}]}], ",", 
            RowBox[{"WindowElements", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{
              "\"\<VerticalScrollBar\>\"", ",", 
               "\"\<HorizontalScrollBar\>\""}], "}"}]}]}], "]"}], ",", "\n", 
          RowBox[{"Button", "[", 
           RowBox[{
            RowBox[{"Style", "[", 
             RowBox[{"\"\<Hide/Show Source Code\>\"", ",", "12"}], "]"}], ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"opentest", "\[Equal]", "True"}], ",", 
              RowBox[{"CloseAllInputCells", "[", "]"}], ",", 
              RowBox[{"OpenAllInputCells", "[", "]"}]}], "]"}]}], "\n", "]"}],
           ",", "\n", 
          RowBox[{"Button", "[", 
           RowBox[{
            RowBox[{"Style", "[", 
             RowBox[{"\"\<Open Sample Input File\>\"", ",", "16"}], "]"}], 
            ",", 
            RowBox[{
             RowBox[{"NotebookFind", "[", 
              RowBox[{
               RowBox[{"EvaluationNotebook", "[", "]"}], ",", " ", 
               "\"\<topend\>\"", ",", " ", "All", ",", " ", "CellTags"}], 
              "]"}], ";", "\n", 
             RowBox[{"SelectionEvaluate", "[", 
              RowBox[{"EvaluationNotebook", "[", "]"}], "]"}]}]}], "]"}]}], 
         "}"}], "]"}]}], "\n", "\n", "}"}], "\n", ",", "All", ",", "2", ",", 
     RowBox[{"Alignment", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", ".9"}], ",", 
        RowBox[{"-", ".3"}]}], "}"}]}]}], "]"}], 
   RowBox[{"(*", 
    RowBox[{"G", ":", " ", 
     RowBox[{
     "Create", " ", "the", " ", "image", " ", "and", " ", "overlay", " ", 
      "text", " ", "and", " ", "sets", " ", 
      RowBox[{"link", ".", " ", "Calls"}], " ", "the", " ", "topend", " ", 
      "cell"}]}], "*)"}], "\[IndentingNewLine]"}]}]], "Input",
 CellOpen->True,
 InitializationCell->True,
 CellChangeTimes->{{3.887853944896675*^9, 3.88785394602999*^9}, {
  3.889620232457363*^9, 3.889620248648985*^9}, {3.889620611639035*^9, 
  3.889620625940007*^9}, {3.8896211925568857`*^9, 3.889621220138796*^9}},
 FontFamily->"Arial",
 FontSize->14,
 FontWeight->"Regular",
 FontColor->GrayLevel[0.5],
 Background->GrayLevel[0],
 CellTags->"startstart",
 CellLabel->"In[71]:=",ExpressionUUID->"5242e803-8edc-4c6d-ac15-6d3f529ace22"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "all", " ", "the", " ", "functions", " ", "in", " ", "alphabetical", " ", 
    "order"}], " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", "Eliminate"}]}]}]}], " ", "entire", " ", "pulverized", 
     " ", "targets", " ", "and", " ", "its", " ", 
     RowBox[{
      RowBox[{"impactors", " ", "--"}], "--"}]}], "-"}], "  ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"addtopopchange", "[", 
     RowBox[{"binnum_", ",", "binnumt_"}], "]"}], ":=", " ", 
    RowBox[{"(*", " ", 
     RowBox[{"pulverized", " ", "target", " ", "or", " ", 
      RowBox[{"impactor", ".", "  ", "for"}], " ", "impactor", " ", "scale", 
      " ", "by", " ", "the", " ", "target", " ", "numbers"}], " ", "*)"}], 
    "\n", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"popchange", "[", 
        RowBox[{"[", "binnum", "]"}], "]"}], "=", 
       RowBox[{
        RowBox[{"popchange", "[", 
         RowBox[{"[", "binnum", "]"}], "]"}], "-", 
        RowBox[{"1", "*", 
         RowBox[{
          RowBox[{"diffdistr", "[", 
           RowBox[{"[", "binnumt", "]"}], "]"}], "/", 
          RowBox[{"ntopick", "[", 
           RowBox[{"[", "binnumt", "]"}], "]"}]}]}]}]}], ";"}], ")"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", "End"}]}]}]}]}]}]}]}]}], " ", "of", " ", 
      "addtopopchange", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"function", "--"}], "--"}], "--"}], "--"}], "--"}], 
          "--"}], "--"}], "--"}], "--"}]}], "-", 
     RowBox[{"--", 
      RowBox[{"--", "-"}]}]}], "*)"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"-", "a"}]}]}], " ", "function", " ", "to", " ", "get", " ", 
     "pd", " ", "number", " ", "and", " ", "bin", " ", "from", " ", "its", 
     " ", 
     RowBox[{
      RowBox[{"diameter", " ", "--"}], "--"}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"astnum", "[", "dia_", "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Ceiling", "[", 
        RowBox[{"nfun", "[", "dia", "]"}], "]"}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"FirstPosition", "[", 
          RowBox[{
           RowBox[{"cumdistr", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
           RowBox[{"x_", "/;", 
            RowBox[{"x", "<", "dia"}]}]}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}], "-", "1"}]}], "}"}], ")"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
     "if", " ", "it", " ", "is", " ", "below", " ", "the", " ", "bin", " ", 
      "descriptions"}], ",", " ", 
     RowBox[{
     "i", " ", "set", " ", "the", " ", "bin", " ", "number", " ", "to", " ", 
      "numcum"}], ",", " ", "\n", "    ", 
     RowBox[{
     "which", " ", "is", " ", "one", " ", "more", " ", "than", " ", "the", 
      " ", "number", " ", "of", " ", "bins"}]}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", 
               RowBox[{"--", "end"}]}]}]}]}]}]}]}]}]}], " ", "of", " ", 
      "astnum", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{"function", "--"}], "--"}], "--"}], "--"}], 
                 "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
          "--"}], "--"}], "--"}], "--"}]}], "-"}], "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"-", "Load"}]}]}]}], " ", "the", " ", "properties", " ", 
      "for", " ", "a", " ", "given", " ", "asteroid", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"type", "--"}], "--"}], "--"}]}], "-", 
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", "--"}]}]}]}]}]}]}]}], "*)"}], "\[IndentingNewLine]", 
   
   RowBox[{
    RowBox[{"asttypestuff", "[", "name_", "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"name", "\[Equal]", "\"\<S-Type\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"mu", "=", "0.55"}], ";", "\[IndentingNewLine]", 
        RowBox[{"dens", "=", 
         RowBox[{"2.5", " ", 
          RowBox[{"10", "^", "12"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"dens", "=", 
           RowBox[{"3.", " ", 
            RowBox[{"10", "^", "12"}]}]}], ";"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"Y0", "=", 
         RowBox[{"1.5", " ", 
          RowBox[{"10", "^", "10"}]}]}], ";", " ", 
        RowBox[{"(*", 
         RowBox[{
         "our", " ", "granite", " ", "size", " ", "effects", " ", "test", " ",
           "had", " ", "this", " ", "value"}], "*)"}], "\[IndentingNewLine]", 
        "\t", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"Y0", "=", 
           RowBox[{"3", " ", 
            RowBox[{"10", "^", "10"}]}]}], ";"}], "*)"}], "  ", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
           RowBox[{"kg", "/", "km"}], "/", 
           RowBox[{"sec", "^", "2"}]}], ";"}], "*)"}], 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
           RowBox[{"dynes", "/", 
            RowBox[{"cm", "^", "2"}]}], " ", "*", "100"}], " ", "\[Rule]", 
          " ", 
          RowBox[{
           RowBox[{"kg", "/", 
            RowBox[{"(", 
             RowBox[{"km", " ", 
              RowBox[{"sec", "^", "2"}]}], ")"}]}], "->", "kPa"}]}], " ", 
         "*)"}], "\n", "\t", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"Y0", "=", 
           RowBox[{"0.7", " ", 
            RowBox[{"10", "^", "10"}]}]}], ";"}], "*)"}], 
        RowBox[{"(*", " ", 
         RowBox[{"best", " ", "for", " ", "gaspra"}], "*)"}], "\n", " ", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
           RowBox[{"kg", "/", "km"}], "/", 
           RowBox[{"sec", "^", "2"}]}], ";"}], "*)"}], 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
           RowBox[{"dynes", "/", 
            RowBox[{"cm", "^", "2"}]}], " ", "*", "100"}], " ", "\[Rule]", 
          " ", 
          RowBox[{"kg", "/", 
           RowBox[{"(", 
            RowBox[{"km", " ", 
             RowBox[{"sec", "^", "2"}]}], ")"}]}]}], " ", "*)"}], 
        "\[IndentingNewLine]", "\t", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"Y0", "=", 
           RowBox[{"1.5", " ", 
            RowBox[{"10", "^", "11"}]}]}], ";"}], "*)"}], " ", 
        RowBox[{"(*", 
         RowBox[{"for", " ", "eros"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"d0strength", "=", 
         RowBox[{"1", " ", 
          RowBox[{"10", "^", 
           RowBox[{"-", "4"}]}]}]}], ";", 
        RowBox[{"(*", "km", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"nsize", "=", "4"}], ";", " ", 
        RowBox[{"(*", " ", 
         RowBox[{
         "strength", " ", "decreases", " ", "with", " ", "size", " ", "as", 
          " ", 
          RowBox[{"1", "/", "nsize"}]}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"nsizespall", "=", "2"}], ";"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"nsizespall", "=", "2"}], ";", "  ", 
        RowBox[{"(*", 
         RowBox[{
         "our", " ", "granite", " ", "size", " ", "effects", " ", "test", " ",
           "had", " ", "this", " ", "value"}], "*)"}], "\[IndentingNewLine]", 
        
        RowBox[{"k2s", "=", "0.3"}], ";", " ", 
        RowBox[{"(*", " ", 
         RowBox[{"ejecta", " ", "scaling", " ", "for", " ", "vstar"}], "*)"}],
         "\[IndentingNewLine]", 
        RowBox[{"k2g", "=", "0.3"}], ";", "\[IndentingNewLine]", 
        RowBox[{"k1", "=", "0.05"}], ";", "  ", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"for", " ", "cratering"}], ",", " ", 
          RowBox[{"quite", " ", "arbitrary"}]}], " ", "*)"}], "\n", "       ", 
        RowBox[{"k2", "=", "1."}], ";", " ", 
        RowBox[{"(*", " ", 
         RowBox[{"the", " ", "cratering", " ", "constant"}], " ", "*)"}], 
        "\n", "       ", 
        RowBox[{"kr", "=", "1.1"}], ";", "\[IndentingNewLine]", 
        RowBox[{"qconst1", "=", 
         RowBox[{"10", "^", 
          RowBox[{"-", "3"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"qconst2", "=", "1."}], ";", "\[IndentingNewLine]", 
        RowBox[{"ke", "=", "0.06"}], ";", "  ", 
        RowBox[{"(*", " ", 
         RowBox[{"not", " ", "used", " ", "now"}], " ", "*)"}], "\n", 
        RowBox[{"(*", " ", 
         RowBox[{"spall", " ", "stuff"}], " ", "*)"}], "\n", "\t", 
        RowBox[{"kv", "=", "0.08"}], ";", "\n", "\t", 
        RowBox[{"kt", "=", "0.0"}], ";", "\n", "\t", 
        RowBox[{"mfac", "=", "2."}], ";", "\n", "\t", 
        RowBox[{"KS", "=", "12.5"}], ";"}], " ", 
       RowBox[{"(*", 
        RowBox[{"Polanskey", " ", "value"}], " ", "*)"}], "\n", ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"otherwise", " ", "-", "C", "-", "Type"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"mu", "=", "0.41"}], ";", "\[IndentingNewLine]", 
        RowBox[{"dens", "=", 
         RowBox[{"1.5", " ", 
          RowBox[{"10", "^", "12"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Y0", "=", 
         RowBox[{"1.5", " ", 
          RowBox[{"10", "^", "8"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"d0strength", "=", 
         RowBox[{"10", "^", 
          RowBox[{"-", "4"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"nsize", "=", "4"}], ";", " ", 
        RowBox[{"(*", " ", 
         RowBox[{"almost", " ", "no", " ", "size", " ", "dependence"}], " ", 
         "*)"}], "\[IndentingNewLine]", " ", 
        RowBox[{"nsizespall", "=", "2"}], ";", "\[IndentingNewLine]", 
        RowBox[{"k2g", "=", "0.3"}], ";", " ", 
        RowBox[{"(*", " ", 
         RowBox[{"ejecta", " ", "scaling", " ", "for", " ", "vstar"}], "*)"}],
         "\[IndentingNewLine]", 
        RowBox[{"k2s", "=", "0.3"}], ";", "\[IndentingNewLine]", 
        RowBox[{"k1", "=", "0.15"}], ";", "  ", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"for", " ", "cratering"}], ",", " ", 
          RowBox[{"quite", " ", "arbitrary"}]}], " ", "*)"}], "\n", "       ", 
        RowBox[{"k2", "=", "1."}], ";", "\n", "       ", 
        RowBox[{"kr", "=", "1.2"}], ";", "\[IndentingNewLine]", 
        RowBox[{"qconst1", "=", 
         RowBox[{"2", " ", 
          RowBox[{"10", "^", 
           RowBox[{"-", "3"}]}]}]}], ";", "  ", 
        RowBox[{"(*", " ", 
         RowBox[{"direct", " ", "from", " ", "Qstar", " ", "paper"}], " ", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"qconst2", "=", "0.5"}], ";", "\n", 
        RowBox[{"ke", "=", "0.02"}], 
        RowBox[{"(*", " ", 
         RowBox[{"not", " ", "used", " ", "now"}], " ", "*)"}], ";"}]}], 
      "]"}], "\[IndentingNewLine]", ")"}]}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "    ", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", "end"}]}]}]}]}]}]}], " ", "of", " ", "asttypestuff",
       " ", 
      RowBox[{
       RowBox[{
        RowBox[{"function", "--"}], "--"}], "--"}]}], "-", 
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", 
               RowBox[{"--", 
                RowBox[{"--", 
                 RowBox[{"--", 
                  RowBox[{"--", 
                   RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", "--"}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}], 
    "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", "barscale"}]}]}]}]}]}]}], " ", 
      RowBox[{
       RowBox[{
        RowBox[{"function", "--"}], "--"}], "--"}]}], "-", 
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", 
               RowBox[{"--", 
                RowBox[{"--", 
                 RowBox[{"--", 
                  RowBox[{"--", 
                   RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", "--"}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"barscalef", "[", "]"}], ":=", " ", 
    RowBox[{"(*", " ", 
     RowBox[{
     "assumes", " ", "units", " ", "of", " ", "dimensions", " ", "are", " ", 
      "km"}], "*)"}], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"bar", "=", 
       RowBox[{"Graphics", "[", 
        RowBox[{"{", 
         RowBox[{"Green", ",", 
          RowBox[{"Thickness", "[", ".005", "]"}], ",", 
          RowBox[{"Line", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"1", ",", "1.2"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", ".8"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "1"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"2", ",", "1"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"2", ",", "1.2"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"2", ",", "1"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"11", ",", "1"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"11", ",", "1.2"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"11", ",", "0.8"}], "}"}]}], "}"}], "]"}]}], "}"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"label1", "=", 
       RowBox[{"Graphics", "[", 
        RowBox[{"{", 
         RowBox[{"Green", ",", 
          RowBox[{"Text", "[", 
           RowBox[{
            RowBox[{"Style", "[", 
             RowBox[{"\"\<1 km \>\"", ",", "12"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"1.5", ",", "1.2"}], "}"}]}], "]"}]}], "}"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"label2", "=", 
       RowBox[{"Graphics", "[", 
        RowBox[{"{", 
         RowBox[{"Green", ",", 
          RowBox[{"Text", "[", 
           RowBox[{
            RowBox[{"Style", "[", 
             RowBox[{"\"\<10 km \>\"", ",", "12"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"10", ",", "0.8"}], "}"}]}], "]"}]}], "}"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"Show", "[", 
       RowBox[{"bar", ",", "label1", ",", "label2"}], "]"}]}], ")"}]}], 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", "end"}]}]}]}]}]}]}], " ", "of", " ", "barscale", 
      " ", 
      RowBox[{
       RowBox[{
        RowBox[{"function", "--"}], "--"}], "--"}]}], "-", 
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", 
               RowBox[{"--", 
                RowBox[{"--", 
                 RowBox[{"--", 
                  RowBox[{"--", 
                   RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", "--"}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}], 
    "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"-", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"bumpfun", "--"}], "--"}], "--"}], "--"}], "--"}],
                     "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
                    "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
                  "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
            "--"}]}]}]}]}]}]}], "-"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"bumpfun", "[", 
     RowBox[{"n1_", ",", "n2_", ",", "n3_", ",", "fac_"}], "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{"multlist", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"n1", "<", "n", "<", "n2"}], ",", 
          RowBox[{"1", "+", 
           RowBox[{"fac", " ", 
            RowBox[{"Sin", "[", 
             RowBox[{"Pi", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"n", "-", "n1"}], ")"}], "/", 
               RowBox[{"(", 
                RowBox[{"n2", "-", "n1"}], ")"}]}]}], "]"}]}]}], ",", "1"}], 
         "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"n", ",", "n3"}], "}"}]}], "]"}]}], ")"}]}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"-", "end"}]}]}]}]}], " ", 
      RowBox[{"of", " ", "--"}], 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"bumpfun", "--"}], "--"}], "--"}], "--"}], "--"}],
                     "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
                    "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
             "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}]}], "-"}], 
    "*)"}], "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", "the"}]}]}], " ", "crater", " ", "sizes", " ", "from", 
      " ", "crater", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"scaling", "--"}], "--"}], "--"}]}], "-", 
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", 
               RowBox[{"-", "\n", "cratr"}]}]}]}]}]}]}]}]}]}], " ", "size", 
      " ", "not", " ", "related", " ", "to", " ", "escaping", " ", 
      RowBox[{
       RowBox[{"mass", " ", "--"}], "--"}]}], "-"}], "*)"}], 
   "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{"calccrater", "[", 
     RowBox[{"di_", ",", "dtarg_", ",", "vel_", ",", "type_"}], "]"}], " ", ":=",
     " ", "\n", "  ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"type", "=", 
       RowBox[{
       "3", " ", "when", " ", "getting", " ", "largest", " ", "expected", " ",
         "craters", " ", "without", " ", "disruption"}]}], ",", "\n", "   ", 
      RowBox[{"type", "=", 
       RowBox[{"2", " ", "for", " ", "all", " ", "real", " ", "craters"}]}], 
      ",", " ", "\n", 
      RowBox[{"type", "=", 
       RowBox[{
       "1", " ", "when", " ", "getting", " ", "largest", " ", "epected", " ", 
        "crater", " ", "at", " ", "various", " ", "probabilities"}]}]}], " ", 
     "*)"}], "\n", "    ", 
    RowBox[{"(*", " ", 
     RowBox[{
     "the", " ", "velocity", " ", "is", " ", "the", " ", "normal", " ", 
      "component"}], " ", "*)"}], "\n", "    ", 
    RowBox[{"(", "\n", "\t", 
     RowBox[{
      RowBox[{"kv", "=", "0.08"}], ";", "\n", "\t", 
      RowBox[{"kt", "=", "0.05"}], ";", "\n", "\t", 
      RowBox[{"mfac", "=", "2.0"}], ";", "\n", "        ", 
      RowBox[{"KS", "=", "12.5"}], ";", "\n", 
      RowBox[{"(*", " ", 
       RowBox[{"reset", " ", "parametersfor", " ", "each", " ", "asteroid"}], 
       " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"Which", "[", 
       RowBox[{
        RowBox[{"newname", "==", "\"\<Eros\>\""}], ",", "\n", "\t", 
        RowBox[{
         RowBox[{"Y0", "=", 
          RowBox[{"1.5", " ", 
           RowBox[{"10", "^", "11"}]}]}], ";", "\n", "\t", 
         RowBox[{"dens", "=", 
          RowBox[{"2.67", " ", 
           RowBox[{"10", "^", "12"}]}]}]}], ",", "\t", "\n", 
        RowBox[{"newname", "==", "\"\<Gaspra\>\""}], ",", "\n", "\t", 
        RowBox[{
         RowBox[{"Y0", "=", 
          RowBox[{"0.7", " ", 
           RowBox[{"10", "^", "10"}]}]}], ";", "\n", "\t", 
         RowBox[{"dens", "=", 
          RowBox[{"2.7", " ", 
           RowBox[{"10", "^", "12"}]}]}]}], ",", "\n", 
        RowBox[{"newname", "==", "\"\<Ida\>\""}], ",", "\n", "\t", 
        RowBox[{
         RowBox[{"Y0", "=", 
          RowBox[{"0.7", " ", 
           RowBox[{"10", "^", "10"}]}]}], ";", "\n", "\t", 
         RowBox[{"dens", "=", 
          RowBox[{"2.7", " ", 
           RowBox[{"10", "^", "12"}]}]}]}], ",", "\n", 
        RowBox[{"newname", "==", "\"\<Ceres\>\""}], ",", "\n", "\t", 
        RowBox[{
         RowBox[{"Y0", "=", 
          RowBox[{".5", " ", 
           RowBox[{"10", "^", "10"}]}]}], ";", "\n", "\t", 
         RowBox[{"dens", "=", 
          RowBox[{"2.16", " ", 
           RowBox[{"10", "^", "12"}]}]}], ";", "\n", "\t", 
         RowBox[{"mu", "=", "0.6"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\n", "\t", 
      RowBox[{"rt", "=", 
       RowBox[{"dtarg", "/", "2"}]}], ";", "\n", "\t", 
      RowBox[{"ai", "=", 
       RowBox[{"di", "/", "2"}]}], ";", "\n", "      ", 
      RowBox[{"grav", "=", 
       RowBox[{"2", " ", 
        RowBox[{"Pi", "/", "3"}], "  ", "6.67", " ", 
        RowBox[{"10", "^", 
         RowBox[{"-", "20"}]}], " ", "dens", " ", "dtarg"}]}], ";", "   ", 
      RowBox[{
       StyleBox["(*", "Output"], 
       RowBox[{
        RowBox[{
         StyleBox[
          RowBox[{"mks", " ", "units"}], "Output"], 
         StyleBox[" ", "Output"], 
         StyleBox["\[Rule]", "Output"], " ", "km"}], ",", " ", "kg", ",", 
        "s"}], "*)"}], "\n", "      ", 
      RowBox[{"mass", "=", 
       RowBox[{
        RowBox[{"Pi", "/", "6"}], " ", "densi", " ", 
        RowBox[{"di", "^", "3"}]}]}], ";", "\n", "\n", "    ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"strength", " ", "regime", " ", "uses", " ", "size"}], "-", 
         RowBox[{"depend", " ", 
          RowBox[{
           RowBox[{"strength", " ", "~", " ", "1"}], "/", "nsize"}]}]}], ",", 
        " ", 
        RowBox[{"see", " ", "file", " ", 
         RowBox[{"CraterScaling", ".", "nb"}]}]}], " ", "*)"}], "\n", "    ", 
      
      RowBox[{"piv", "=", 
       RowBox[{"pivf", "[", 
        RowBox[{"di", ",", "nsize"}], "]"}]}], ";", "\n", "    ", 
      RowBox[{"volc", "=", 
       RowBox[{"piv", " ", 
        RowBox[{"mass", "/", "dens"}]}]}], ";", "\n", "    ", 
      RowBox[{"massc", "=", 
       RowBox[{"volc", " ", "dens"}]}], ";", "\n", "    ", 
      RowBox[{"dc", "=", 
       RowBox[{"2", " ", "kr", " ", 
        RowBox[{"volc", "^", 
         RowBox[{"(", 
          RowBox[{"1", "/", "3"}], ")"}]}]}]}], ";", 
      RowBox[{"(*", 
       RowBox[{"bowl", ",", " ", 
        RowBox[{"redone", " ", "for", " ", "spall", " ", "below"}]}], "*)"}], 
      "\n", "    ", 
      RowBox[{"dcrim", "=", 
       RowBox[{"1.3", " ", "dc"}]}], ";", "\n", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"type", "\[Equal]", "1"}], ",", 
        RowBox[{
         RowBox[{"AppendTo", "[", 
          RowBox[{"dcrimdias", ",", 
           RowBox[{"{", 
            RowBox[{"impacttime", ",", "dtarg", ",", "dcrim", ",", "di"}], 
            "}"}]}], "]"}], ";"}]}], " ", "]"}], ";", "\n", "    ", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"type", "\[Equal]", "3"}], ",", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"dcrimdias2", ",", 
            RowBox[{"{", 
             RowBox[{"dtarg", ",", 
              RowBox[{"dcrim", "/", "dtarg"}]}], "}"}]}], "]"}]}], " ", "]"}],
         ";"}], "*)"}], "\n", 
      RowBox[{"(*", " ", "limits", " ", "*)"}], "\n", "\n", " ", 
      RowBox[{"dspstar", "=", 
       RowBox[{"d0strength", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"kv", "^", "2"}], " ", 
           RowBox[{"Y0", "/", 
            RowBox[{"(", 
             RowBox[{
             "2", " ", "mfac", " ", "grav", " ", "dens", " ", "kt", "  ", 
              "d0strength"}], ")"}]}]}], " ", ")"}], "^", 
         RowBox[{"(", 
          RowBox[{"nsizespall", "/", 
           RowBox[{"(", 
            RowBox[{"nsizespall", "+", "1"}], ")"}]}], ")"}]}]}]}], ";", "\n",
       " ", 
      RowBox[{"dccomlim", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"81", "/", 
           RowBox[{"(", 
            RowBox[{"2", "*", "Pi"}], ")"}]}], ")"}], "^", 
         RowBox[{"(", 
          RowBox[{"1", "/", 
           RowBox[{"(", 
            RowBox[{"1", " ", "+", " ", 
             RowBox[{"1", "/", "nsize"}]}], ")"}]}], ")"}]}], "*", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"Y0", "/", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"1", "/", "d0strength"}], ")"}], "^", 
              RowBox[{"nsize", "^", 
               RowBox[{"(", 
                RowBox[{"-", "1"}], ")"}]}]}], "*", 
             RowBox[{"(", 
              RowBox[{"dtarg", "*", "Grav", "*", 
               RowBox[{"dens", "^", "2"}]}], ")"}]}], ")"}]}], ")"}], "^", 
         RowBox[{"(", 
          RowBox[{"1", "/", 
           RowBox[{"(", 
            RowBox[{"1", " ", "+", " ", 
             RowBox[{"1", "/", "nsize"}]}], ")"}]}], ")"}]}]}]}], ";", "\n", 
      RowBox[{"dcs", "=", 
       RowBox[{"KS", " ", "ai", " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"ai", "/", "d0strength"}], ")"}], "^", 
         RowBox[{"(", 
          RowBox[{"mu", "/", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"2", " ", "nsizespall"}], " ", "-", "mu"}], ")"}]}], 
          ")"}]}], 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"Y0", "/", 
           RowBox[{"(", 
            RowBox[{"dens", " ", 
             RowBox[{"vel", "^", "2"}]}], ")"}]}], ")"}], "^", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "mu"}], "/", "2"}], ")"}]}]}]}], ";", "  ", "\n", 
      "\n", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"dcs", "<", "dspstar"}], ",", "\n", "\t", 
        RowBox[{"(*", " ", 
         RowBox[{"spall", " ", "crater", " ", "diameter"}], " ", "*)"}], "\n",
         "  ", 
        RowBox[{
         RowBox[{"AppendTo", "[", 
          RowBox[{"spalldias", ",", 
           RowBox[{"{", 
            RowBox[{"impacttime", ",", "dtarg", ",", "dcs", ",", "di"}], 
            "}"}]}], "]"}], ";", "\n", "  ", 
         RowBox[{"dforlarge", "=", "dcs"}]}], ",", " ", "\n", "\n", 
        RowBox[{"(*", 
         RowBox[{"maybe", " ", 
          RowBox[{"complex", "?"}]}], " ", "*)"}], "\n", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"dcrim", ">", "dccomlim"}], ",", "\n", "   ", 
          RowBox[{
           RowBox[{"dcomplexrim", "=", 
            RowBox[{"1.33", " ", 
             RowBox[{"dc", "^", "1.086"}], " ", 
             RowBox[{"dccomlim", "^", 
              RowBox[{"-", ".086"}]}]}]}], ";", " ", "\n", "   ", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"complexdias", ",", 
             RowBox[{"{", 
              RowBox[{
              "impacttime", ",", "dtarg", ",", "dcomplexrim", ",", "di"}], 
              "}"}]}], "]"}], ";", "\n", "  ", 
           RowBox[{"dforlarge", "=", "dcomplexrim"}]}], ",", " ", "\n", 
          RowBox[{"(*", " ", 
           RowBox[{"not", " ", "spall", " ", "nor", " ", "complex"}], " ", 
           "*)"}], "\n", " ", "\n", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"type", "!=", "1"}], ",", 
            RowBox[{
             RowBox[{"AppendTo", "[", 
              RowBox[{"dcrimdias", ",", 
               RowBox[{"{", 
                RowBox[{"impacttime", ",", "dtarg", ",", "dcrim", ",", "di"}],
                 "}"}]}], "]"}], ";", "\n", "  ", 
             RowBox[{"dforlarge", "=", "dcrimdias"}]}]}], " ", "]"}]}], 
         "]"}]}], "]"}], ";"}], "\n", " ", "\n", "  ", ")"}]}], "    ", "\n", 
   
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", "end"}]}]}]}]}]}]}]}], " ", "of", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"calccrater", "--"}], "--"}], "--"}], "--"}], 
                    "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
                "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
         "--"}], "--"}], "--"}]}], "-"}], "*)"}], "\[IndentingNewLine]", "\n",
    "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"calcnasteroids", "[", "]"}], "--"}], "--"}], 
                "--"}]}]}]}]}]}]}]}]}]}], "get", " ", "the", " ", "test", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"asteroids", "--"}], "--"}], "--"}]}], "-", 
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", "--"}]}]}]}]}]}]}], "*)"}], "\n", 
   RowBox[{
    RowBox[{"calcnasteroids", "[", "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Negative", "[", "testratio", "]"}], ",", 
        RowBox[{
         RowBox[{"nasteroids", "=", 
          RowBox[{"-", "testratio"}]}], ";", 
         RowBox[{"Do", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"bin", "=", 
             RowBox[{"RandomInteger", "[", 
              RowBox[{"{", 
               RowBox[{"binfirst", ",", "binlast"}], "}"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"++", 
             RowBox[{"ntopick", "[", 
              RowBox[{"[", "bin", "]"}], "]"}]}]}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "nasteroids"}], "}"}]}], "]"}]}], ",", "\n", 
        " ", 
        RowBox[{"(*", " ", "otherwise", " ", "*)"}], "   ", 
        RowBox[{
         RowBox[{"Do", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"ntopick", "[", 
              RowBox[{"[", "ibin", "]"}], "]"}], "=", 
             RowBox[{"Ceiling", "[", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"ibin", "<=", "binlast1"}], ",", 
                RowBox[{"testratio", " ", 
                 RowBox[{"diffdistr0", "[", 
                  RowBox[{"[", 
                   RowBox[{"ibin", ",", "2"}], "]"}], "]"}]}], ",", 
                RowBox[{"testratio", " ", 
                 RowBox[{"diffdistr0", "[", 
                  RowBox[{"[", 
                   RowBox[{"binlast1", ",", "2"}], "]"}], "]"}]}]}], "]"}], 
              RowBox[{"(*", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"binfirst", "/", "ibin"}], ")"}], "^", "3"}], "*)"}],
               "]"}]}], ";"}], " ", "\n", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{
             "last", " ", "factor", " ", "designed", " ", "to", " ", "pick", 
              " ", "less", " ", "small", " ", "ones", " ", "to", " ", 
              "better", " ", "compare", " ", "to", " ", "the", " ", "data"}], 
             ",", " ", "\n", "    ", 
             RowBox[{
             "it", " ", "is", " ", "quite", " ", "arbitrary", "  ", "maybe", 
              " ", "it", " ", "deserves", " ", "its", " ", "own", " ", 
              "input", " ", "box"}]}], " ", "*)"}], "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{"if", " ", "exact"}], ",", " ", 
             RowBox[{
             "it", " ", "picks", " ", "testratio", " ", "times", " ", "all", 
              " ", "in", " ", "enclosing", " ", "bin", " ", "for", " ", 
              "that", " ", "diamter"}]}], "*)"}], "\n", ",", 
           RowBox[{"{", 
            RowBox[{"ibin", ",", "binfirst", ",", "binlast"}], "}"}]}], "]"}],
          ";", "\[IndentingNewLine]", 
         RowBox[{"nasteroids", "=", 
          RowBox[{"Total", "[", "ntopick", "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\n", "nasteroids"}], ")"}]}], "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"-", "end"}]}]}]}]}]}]}], " ", "of", " ", 
      "calcnasteroids", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"function", "--"}], "--"}], "--"}], "--"}], "--"}], 
       "--"}]}], "-", 
     RowBox[{"-", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", 
               RowBox[{"--", 
                RowBox[{"--", 
                 RowBox[{"--", "--"}]}]}]}]}]}]}]}]}]}]}]}]}]}], "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", "calculate"}]}]}], " ", "the", " ", "spin", " ", 
      "increment"}], ",", " ", 
     RowBox[{"check", " ", "for", " ", 
      RowBox[{"wobble", "/", "tumbling"}]}], ",", " ", 
     RowBox[{
     "new", " ", "inertia", " ", "set", " ", "for", " ", "reduced", " ", 
      "size"}]}], "*)"}], "      ", "\[IndentingNewLine]", "  ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"and", " ", "if"}], ",", " ", 
     RowBox[{
      RowBox[{"a", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"cdevent", "--"}], "--"}], "--"}]}], "-", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", 
               RowBox[{"--", 
                RowBox[{"--", 
                 RowBox[{"--", 
                  RowBox[{"--", "--"}]}]}]}]}]}]}]}]}]}]}]}]}]}]}], "*)"}], 
   "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"I", " ", "did", " ", "redo", " ", "this"}], ",", " ", 
     RowBox[{
     "and", " ", "just", " ", "let", " ", "all", " ", "targets", " ", "be", 
      " ", "wobblers", " ", "and", " ", "track", " ", "wobbling", " ", "down",
       " ", "to", " ", 
      RowBox[{"zero", ".", " ", "then"}], " ", "plot", " ", "only", " ", 
      "those", " ", "wobbling", " ", "above", " ", "some", " ", "threshhold", 
      " ", 
      RowBox[{"value", ".", "  ", "i"}], " ", "do", " ", "not", " ", "need", 
      " ", "the", " ", "tumblers", " ", 
      RowBox[{"array", "."}]}]}], "  ", "*)"}], "\[IndentingNewLine]", "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"calcomega", "[", "iflag_", "]"}], ":=", " ", 
    RowBox[{"(*", " ", 
     RowBox[{"sti", "\.00ll", " ", "has", " ", "old", " ", "d"}], " ", "*)"}],
     "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"iflag", "\[Rule]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "1", ",", "2"}], "}"}], "  ", "relax", " ", 
        "only"}]}], ",", " ", 
      RowBox[{"also", " ", "calc", " ", "impact"}], ",", " ", 
      RowBox[{"close", " ", "last", " ", "time", " ", 
       RowBox[{"(", 
        RowBox[{"same", " ", "as", " ", "0"}], " ", ")"}]}]}], "*)"}], "\n", 
    RowBox[{"(", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "first", " ", "calculate", "  ", "new", " ", "lateral", " ", 
        "components"}], ",", " ", 
       RowBox[{
       "then", " ", "the", " ", "relaxation", " ", "of", " ", "tumblers"}], 
       ",", " ", 
       RowBox[{
        RowBox[{
         RowBox[{
         "and", " ", "add", " ", "the", " ", "new", " ", "increment", " ", 
          "from", " ", "the", " ", "impact"}], ".."}], "  ", "trelax", " ", 
        "is", " ", "set", " ", "for", " ", "this", " ", "impact", " ", "and", 
        " ", "target"}]}], "*)"}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"old", " ", "ones"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"omegx", ",", "omegy", ",", "omegz"}], "}"}], "=", "omeg"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"omegnet", "=", 
       RowBox[{
        RowBox[{"Sign", "[", "omegz", "]"}], " ", 
        RowBox[{"Norm", "[", "omeg", "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"wobble", "=", 
       RowBox[{"ArcTan", "[", 
        RowBox[{
         RowBox[{"Sqrt", "[", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"omegx", "^", "2"}], "+", 
            RowBox[{"omegy", "^", "2"}]}], ")"}], "]"}], "/", 
         RowBox[{"Abs", "[", "omegz", "]"}]}], "]"}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"last", " ", "wobble"}], ",", " ", 
        RowBox[{"in", " ", "radians"}], ","}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "let", " ", "1", " ", "degree", " ", "be", " ", "zero", " ", 
         "wobble"}], ",", " ", 
        RowBox[{
        "and", " ", "adjust", " ", "relax", " ", "time", " ", "to", " ", "1", 
         "\:02da"}]}], " ", "*)"}], "\[IndentingNewLine]", "\n", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Im", "[", "wobble", "]"}], ">", "0"}], ",", 
        RowBox[{
         RowBox[{"Print", "[", "\"\<here 1, wobble not real \>\"", "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\n", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"wobble", "<", 
         RowBox[{"1", "Degree"}]}], ",", 
        RowBox[{"wobble", "=", "0"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "get", " ", "new", " ", "random", " ", "lateral", " ", "compoments", 
        " ", "with", " ", "same", " ", "lateral", " ", "magnitude"}], " ", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"angle", "=", 
       RowBox[{"RandomReal", "[", 
        RowBox[{"{", 
         RowBox[{"0", ",", 
          RowBox[{"2", "Pi"}]}], "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"oomeg", "=", 
       RowBox[{"Sqrt", "[", 
        RowBox[{
         RowBox[{"omegx", "^", "2"}], "+", 
         RowBox[{"omegy", "^", "2"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"omegx", "=", 
       RowBox[{"oomeg", " ", 
        RowBox[{"Cos", "[", "angle", "]"}]}]}], ";", "  ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"Couldn", "'"}], "t", " ", "understand", " ", 
        RowBox[{"why", ":", " ", "Gaurav"}]}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"omegy", "=", 
       RowBox[{"oomeg", " ", 
        RowBox[{"Sin", "[", "angle", "]"}]}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
          "get", " ", "decay", " ", "since", " ", "last", " ", "hit"}], 
          ".."}], " ", "it", " ", "may", " ", "have", " ", "decayed", " ", 
         "to", " ", "the", " ", "PA", " ", 
         RowBox[{"spin", ".", "  ", "\[IndentingNewLine]", "If"}], " ", 
         "so"}], ",", " ", 
        RowBox[{
        "add", " ", "a", " ", "plot", " ", "point", " ", "at", " ", "PA", " ", 
         RowBox[{"values", ".", "  ", "if"}], " ", "it", " ", "was", " ", 
         "zero"}], ",", " ", 
        RowBox[{"it", " ", "still", " ", "is", " ", "zero"}]}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{"\"\<in calco, wobble,tsince,trelax= \>\"", ",", 
          RowBox[{"{", 
           RowBox[{"wobble", ",", 
            RowBox[{"impacttime", "-", "tlasthit"}], ",", "trelax"}], "}"}]}],
          "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{
         "\"\< old values \
{impactor,iast,wobble,trelax,tlasthit,trelax+tlasthit,impacttime} \>\"", ",", 
          
          RowBox[{"{", 
           RowBox[{
           "ii", ",", "iast", ",", "wobble", ",", "trelax", ",", "tlasthit", 
            ",", 
            RowBox[{"trelax", "+", "tlasthit"}], ",", "impacttime"}], "}"}]}],
          "]"}], ";"}], "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
      
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"wobble", ">", 
         RowBox[{"1", " ", "Degree"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"trelax", "+", "tlasthit"}], "<", "impacttime"}], ")"}], 
          ",", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"relaxing", " ", "to"}], " ", "<", 
             RowBox[{"1", "\:02da", " ", 
              RowBox[{"(", "zero", ")"}], " ", "since", " ", "last", " ", 
              "hit"}]}], ",", " ", 
            RowBox[{"add", " ", "previous", " ", "time", " ", "point"}]}], 
           " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Print", "[", "\"\< relaxing to zero.. \>\"", "]"}], ";", 
            
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\< {impactor,iast,wobble,trelax,tlasthit,,trelax+tlasthit,\
impacttime} \>\"", ",", 
              RowBox[{"{", 
               RowBox[{
               "ii", ",", "iast", ",", "wobble", ",", "trelax", ",", 
                "tlasthit", ",", 
                RowBox[{"trelax", "+", "tlasthit"}], ",", "impacttime"}], 
               "}"}]}], "]"}], ";"}], "\[IndentingNewLine]", "*)"}], 
          RowBox[{
           RowBox[{"omeg", "=", 
            RowBox[{"{", 
             RowBox[{"0", ",", "0", ",", 
              RowBox[{
               RowBox[{"Sign", "[", "omegz", "]"}], 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Sqrt", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"jinertia", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "^", "2"}], 
                    RowBox[{"omegz", "^", "2"}]}], "+", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"jinertia", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "^", "2"}], 
                    RowBox[{"omegx", "^", "2"}]}], "+", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"jinertia", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "^", "2"}], 
                    RowBox[{"omegy", "^", "2"}]}]}], "]"}], "/", 
                 RowBox[{"jinertia", "[", 
                  RowBox[{"[", "3", "]"}], "]"}]}], ")"}]}]}], "}"}]}], ";", 
           " ", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{"Burns", " ", "and", " ", "Safranov"}], ",", " ", 
             RowBox[{
             "constant", " ", "angular", " ", "momentum", " ", 
              "magnitude"}]}], " ", "*)"}], "\[IndentingNewLine]", 
           RowBox[{"omegnet", "=", 
            RowBox[{
             RowBox[{"Sign", "[", 
              RowBox[{"omeg", "[", 
               RowBox[{"[", "3", "]"}], "]"}], "]"}], " ", 
             RowBox[{"Norm", "[", "omeg", "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"omegvals", "[", 
             RowBox[{"[", "iast", "]"}], "]"}], "=", "omeg"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"wobble", "=", "0"}], ";", "\[IndentingNewLine]", " ", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"plothis", ">", "0"}], "&&", 
              RowBox[{"d", ">", "0"}]}], ",", "\[IndentingNewLine]", " ", 
             RowBox[{
              RowBox[{"AppendTo", "[", 
               RowBox[{
                RowBox[{"histplotpts", "[", 
                 RowBox[{"[", "plothis", "]"}], "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"trelax", "+", "tlasthit"}], ",", "d", ",", 
                  "omegnet", ",", "0"}], "}"}]}], "]"}], ";", 
              "\[IndentingNewLine]", "   ", 
              RowBox[{"AppendTo", "[", 
               RowBox[{
                RowBox[{"histplotpts", "[", 
                 RowBox[{"[", "plothis", "]"}], "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"impacttime", ",", "d", ",", "omegnet", ",", "0"}], 
                 "}"}]}], "]"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{
            "or", " ", "did", " ", "not", " ", "relax", " ", "to", " ", 
             "zero"}], ",", " ", 
            RowBox[{"so", " ", "get", " ", "relaxation", " ", "changes"}]}], 
           " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<calling wobblecalcf,omeg, \
wobble,trelax,impacttime-tlasthit= \>\"", ",", 
              RowBox[{"{", 
               RowBox[{"omeg", ",", "wobble", ",", "trelax", ",", 
                RowBox[{"impacttime", "-", "tlasthit"}]}], "}"}]}], "]"}], 
            ";"}], "*)"}], "   ", "\[IndentingNewLine]", " ", 
          RowBox[{
           RowBox[{"wobblecalcf", "[", "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"plothis", ">", "0"}], "&&", 
              RowBox[{"d", ">", "0"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{"AppendTo", "[", 
              RowBox[{
               RowBox[{"histplotpts", "[", 
                RowBox[{"[", "plothis", "]"}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{
                "impacttime", ",", "d", ",", "omegnet", ",", "wobble"}], 
                "}"}]}], "]"}]}], "]"}]}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"wobble", "<", 
          RowBox[{"1", "\:02da"}]}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"plothis", ">", "0"}], "&&", 
           RowBox[{"d", ">", "0"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"AppendTo", "[", 
           RowBox[{
            RowBox[{"histplotpts", "[", 
             RowBox[{"[", "plothis", "]"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"impacttime", ",", "d", ",", "omegnet", ",", "0"}], 
             "}"}]}], "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
      " ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"new", " ", "relaxed", " ", "omega"}], ",", " ", "wobble", 
        ",", " ", "omegnet"}], " ", "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "now", " ", "the", " ", "changes", " ", "from", " ", "the", " ", "new",
         " ", "impact"}], " ", "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"iflag", "\[Equal]", "1"}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{
          "not", " ", "the", " ", "last", " ", "point", " ", "at", " ", "the",
            " ", "end", " ", "time"}], ",", " ", 
          RowBox[{"add", " ", "impact", " ", "increments"}]}], " ", "*)"}], 
        " ", 
        RowBox[{"(*", " ", 
         RowBox[{
         "but", " ", "what", " ", "should", " ", "i", " ", "do", " ", "in", 
          " ", "the", " ", "last", " ", 
          RowBox[{"time", "?"}]}], "*)"}], "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"zeta", "=", " ", 
           RowBox[{"zetaf", "[", 
            RowBox[{"phival", ",", "d", ",", "asttype"}], "]"}]}], ";", "  ", 
          
          RowBox[{"(*", " ", 
           RowBox[{
           "uses", " ", "the", " ", "old", " ", "d", " ", "if", " ", "it", 
            " ", "depends", " ", "on", " ", "d"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"now", " ", "add", " ", "impact", " ", "increment"}], ",",
             " ", 
            RowBox[{
             RowBox[{"account", " ", "for", " ", "a", " ", "non"}], "-", 
             RowBox[{"spherical", " ", "target"}]}]}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"delamomentum", "=", 
           RowBox[{"r", " ", "mass", " ", "vel", " ", 
            RowBox[{"Sin", "[", "phival", "]"}], "zeta", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"-", 
                 RowBox[{"Sin", "[", "thetaval", "]"}]}], 
                RowBox[{"Cos", "[", "Thetaval", "]"}], 
                RowBox[{"Cos", "[", "Phival", "]"}]}], "-", 
               RowBox[{
                RowBox[{"Cos", "[", "thetaval", "]"}], 
                RowBox[{"Sin", "[", "Thetaval", "]"}]}]}], ",", 
              RowBox[{
               RowBox[{
                RowBox[{"-", 
                 RowBox[{"Sin", "[", "thetaval", "]"}]}], 
                RowBox[{"Sin", "[", "Thetaval", "]"}], 
                RowBox[{"Cos", "[", "Phival", "]"}]}], "+", 
               RowBox[{
                RowBox[{"Cos", "[", "thetaval", "]"}], 
                RowBox[{"Cos", "[", "Thetaval", "]"}]}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Sin", "[", "thetaval", "]"}], 
               RowBox[{"Sin", "[", "Phival", "]"}]}]}], "}"}]}]}], ";", "\n", 
          "\[IndentingNewLine]", 
          RowBox[{"delomeg", "=", 
           RowBox[{"delamomentum", "/", "jinertia"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "uses", " ", "old", " ", "inertia", " ", "of", " ", "ellipsoidal", 
            " ", "in", " ", "principal", " ", "axes"}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "should", " ", "i", " ", "use", " ", "previous", " ", "d", " ", 
            "inertia", " ", "or", " ", "decreased", " ", 
            RowBox[{"one", "?"}]}], "*)"}], "\n", 
          RowBox[{"(*", " ", 
           RowBox[{"i", " ", "now", " ", "use", " ", "new", " ", "inertia"}], 
           " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"omeg", "=", 
           RowBox[{"omeg", "+", "delomeg"}]}], ";", "  ", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "that", " ", "is", " ", "the", " ", "increment", " ", "from", " ", 
            "the", " ", "imapct"}], " ", "*)"}], "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"delomegdrain", "=", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"qratio", "<", ".5"}], ",", 
             RowBox[{"drainfac", " ", 
              RowBox[{"omegdrainf", "[", "]"}]}], ",", 
             RowBox[{"{", 
              RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "]"}]}], ";", " ", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"3", " ", "components"}], ",", "  ", 
            RowBox[{
            "parallel", " ", "to", " ", "omeg", " ", "negative", " ", "in", 
             " ", "function"}]}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"now", " ", "the", " ", "splash"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"xx", "=", 
           RowBox[{"0.5", "/", 
            RowBox[{"Log", "[", "pulvlim", "]"}]}]}], ";", "\n", "\t", 
          RowBox[{"dnew", "=", 
           RowBox[{"d", 
            StyleBox[
             RowBox[{
              RowBox[{"(", 
               RowBox[{".5", "-", 
                RowBox[{"xx", " ", 
                 RowBox[{"Log", "[", "qratio", "]"}]}]}], ")"}], "^", 
              RowBox[{"(", 
               RowBox[{"1", "/", "3"}], ")"}]}], "Code"]}]}], ";"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"delomegsplash", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"qratio", ">", ".5"}], ",", 
            RowBox[{
             RowBox[{"-", "omeg"}], " ", "splashfac", 
             RowBox[{"(", 
              RowBox[{"1", "-", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"dnew", "/", "d"}], ")"}], "^", "3"}]}], ")"}]}], 
            ",", 
            RowBox[{"{", 
             RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "]"}]}], ";", " ", 
         RowBox[{"(*", " ", 
          RowBox[{"same", " ", "here"}], " ", "*)"}], 
         RowBox[{"(*", " ", 
          RowBox[{"Cellino", " ", "et", " ", 
           RowBox[{"al", ".", " ", "proportional"}], " ", "to", " ", 
           RowBox[{"deltaM", "/", "M"}]}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"delomegds", "=", 
          RowBox[{"delomegdrain", "+", "delomegsplash"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"delomeg", "=", 
          RowBox[{"delomeg", "+", "delomegds"}]}], ";", "\n", "        ", 
         "\[IndentingNewLine]", 
         RowBox[{"omeg", "=", 
          RowBox[{"omeg", "+", "delomeg"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"omegnet", "=", 
          RowBox[{
           RowBox[{"Sign", "[", 
            RowBox[{"omeg", "[", 
             RowBox[{"[", "3", "]"}], "]"}], "]"}], " ", 
           RowBox[{"Norm", "[", "omeg", "]"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"omegx", ",", "omegy", ",", "omegz"}], "}"}], "=", 
          "omeg"}], ";", "\[IndentingNewLine]", 
         RowBox[{"omegzz", "=", 
          RowBox[{
           RowBox[{"Sign", "[", "omegz", "]"}], " ", 
           RowBox[{"Max", "[", 
            RowBox[{
             RowBox[{"Abs", "[", "omegz", "]"}], ",", 
             RowBox[{"10", "^", 
              RowBox[{"-", "9"}]}]}], "]"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"wobble", "=", 
          RowBox[{"ArcTan", "[", 
           RowBox[{
            RowBox[{"Sqrt", "[", 
             RowBox[{
              RowBox[{"omegx", "^", "2"}], "+", 
              RowBox[{"omegy", "^", "2"}]}], "]"}], "/", 
            RowBox[{"Abs", "[", "omegzz", "]"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Im", "[", "wobble", "]"}], ">", "0"}], ",", 
           RowBox[{
            RowBox[{"Print", "[", "\"\<here 2, wobble not real \>\"", "]"}], 
            ";", 
            RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\n", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"wobble", "<", 
            RowBox[{"1", " ", "Degree"}]}], ",", 
           RowBox[{"wobble", "=", "0"}]}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"spin", " ", "now", " ", "determined"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"lastimptime", "[", 
           RowBox[{"[", "iast", "]"}], "]"}], "=", "impacttime"}]}]}], " ", 
       "]"}]}], "\[IndentingNewLine]", " ", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "end", " ", "of", " ", "omega", " ", "update", " ", "end", " ", "of", 
       " ", "last", " ", "time"}], "*)"}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", ")"}]}], "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"-", "end"}]}]}]}]}]}]}]}], " ", "of", " ", "calcomeg", 
      " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"function", "--"}], "--"}], "--"}], "--"}], 
                    "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
              "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
       "--"}]}], "-"}], "*)"}], "\n", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"now", " ", "this", " ", "is", " ", "random"}], " ", "*)"}], 
   "\[IndentingNewLine]", " ", 
   RowBox[{
    RowBox[{"combinedspinlimf", "[", 
     RowBox[{"d_", ",", "dcenter_", ",", "gravlimhere_", ",", "spinflg_"}], 
     "]"}], ":=", 
    RowBox[{"(", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"Print", "[", 
        RowBox[{"\"\<in combinedspinlim \>\"", ",", 
         RowBox[{"{", 
          RowBox[{"d", ",", "dcenter", ",", "spinupratio", ",", "spinflg"}], 
          "}"}]}], "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"omeglimstrength", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"d", ">", "0"}], ",", 
         RowBox[{"Min", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"2", 
             RowBox[{"Sqrt", "[", 
              RowBox[{"2.25", " ", 
               RowBox[{
                RowBox[{"10", "^", "7"}], "/", "2.5"}]}], "]"}], 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"10", "^", "5"}], 
                RowBox[{"d", "/", "2"}]}], ")"}], "^", 
              RowBox[{"-", 
               RowBox[{"(", 
                RowBox[{"5", "/", "4"}], ")"}]}]}]}], ")"}], ",", "Y0"}], 
          "]"}], ",", "Y0"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"omeglimstrength", "=", " ", 
         RowBox[{"10", "^", "4"}]}], ";"}], "*)"}], " ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"a", " ", "non"}], "-", "factor"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"currentspinlim", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"d", ">", 
          RowBox[{"2", "dcenter"}]}], ",", "gravlimhere", ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"d", "<", 
            RowBox[{"dcenter", "/", "3.5"}]}], ",", "omeglimstrength", ",", 
           RowBox[{"If", "[", 
            RowBox[{"spinflg", ",", "omeglimstrength", ",", "gravlimhere"}], 
            "]"}]}], "]"}]}], "]"}]}]}], ")"}]}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"currentspinlim", "=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"d", ">", "dforgravlimnow"}], ",", "gravlimit", ",", 
       "omeglimstrength"}], "]"}]}], "*)"}], 
   RowBox[{"(*", 
    RowBox[{"koverrho", "=", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"gravlimit", "^", "2"}], ")"}], "/", "4"}], " ", 
      RowBox[{
       RowBox[{"(", "  ", 
        RowBox[{"diaforgravlim", " ", 
         RowBox[{
          RowBox[{"10", "^", "5"}], "/", "2"}]}], ")"}], "^", 
       RowBox[{"(", 
        RowBox[{"5", "/", "2"}], ")"}]}]}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Max", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"omeglimstrength", " ", "strengthfac"}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", "strengthfac"}], ")"}], " ", "gravlimit"}]}], ",", 
      "gravlimit"}], "]"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", "end"}]}]}]}]}]}], " ", "of", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"combinedspinlimf", " ", "--"}], "--"}], "--"}], 
                   "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
            "--"}], "--"}], "--"}], "--"}], "--"}], "--"}]}], "-", 
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", "-"}]}]}]}]}], "*)"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"-", "make"}]}]}]}]}]}], " ", "the", " ", "crater", " ", 
     "scaling", " ", "plot", " ", "if", " ", "all", " ", "targets", " ", 
     "are", " ", "the", " ", "same", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"size", "--"}], "--"}], "--"}], 
     RowBox[{"--", "-"}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"craterscalingplotf", "[", "]"}], ":=", 
    RowBox[{"(", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"asttypestuff", "[", "\"\<C-Type\>\"", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"colors", "=", 
       RowBox[{"RandomColor", "[", "7", "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"plotc", "=", 
       RowBox[{"Show", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"LogLogPlot", "[", 
            RowBox[{
             RowBox[{"pivpi2f", "[", 
              RowBox[{"pi2", ",", "3.9", ",", 
               RowBox[{"10", "^", "ii"}], ",", "4"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"pi2", ",", 
               RowBox[{"10", "^", 
                RowBox[{"-", "10"}]}], ",", 
               RowBox[{"10", "^", 
                RowBox[{"-", "2"}]}]}], "}"}], ",", 
             RowBox[{"Frame", "\[Rule]", "True"}], ",", 
             RowBox[{"FrameLabel", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
               "\"\<Pi2=g a/U^2\>\"", ",", 
                "\"\<Piv=rho V/mass-impactor\>\""}], "}"}]}], ",", 
             RowBox[{"LabelStyle", "\[Rule]", "24"}], ",", " ", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"colors", "[", 
               RowBox[{"[", "ii", "]"}], "]"}]}]}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"ii", ",", 
             RowBox[{"-", "2"}], ",", "3"}], "}"}]}], "]"}], ",", 
         RowBox[{"Graphics", "[", 
          RowBox[{"Text", "[", 
           RowBox[{
            RowBox[{"Framed", "[", 
             RowBox[{"Style", "[", 
              RowBox[{
              "\"\<Curves from botom to top are for\\r target diameters of \
{0.01, 0.1, 1, 10, 100, 1000} km \>\"", ",", "12"}], "]"}], "]"}], ",", 
            RowBox[{"Scaled", "[", 
             RowBox[{"{", 
              RowBox[{".3", ",", ".5"}], "}"}], "]"}]}], "]"}], "]"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "Full"}], ",", 
         RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"asttypestuff", "[", "\"\<S-Type\>\"", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"plots", "=", 
       RowBox[{"Show", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"LogLogPlot", "[", 
            RowBox[{
             RowBox[{"pivpi2f", "[", 
              RowBox[{"pi2", ",", "3.9", ",", 
               RowBox[{"10", "^", "ii"}], ",", "4"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"pi2", ",", 
               RowBox[{"10", "^", 
                RowBox[{"-", "10"}]}], ",", 
               RowBox[{"10", "^", 
                RowBox[{"-", "2"}]}]}], "}"}], ",", 
             RowBox[{"Frame", "\[Rule]", "True"}], ",", 
             RowBox[{"FrameLabel", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
               "\"\<Pi2=g a/U^2\>\"", ",", 
                "\"\<Piv=rho V/mass-impactor\>\""}], "}"}]}], ",", 
             RowBox[{"LabelStyle", "\[Rule]", "24"}], ",", " ", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"Dashed", ",", 
                RowBox[{"colors", "[", 
                 RowBox[{"[", "ii", "]"}], "]"}]}], "}"}]}]}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"ii", ",", 
             RowBox[{"-", "2"}], ",", "3"}], "}"}]}], "]"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "Full"}], ",", 
         RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"craterscaling", "=", 
       RowBox[{"Show", "[", 
        RowBox[{"plotc", ",", "plots", ",", 
         RowBox[{"Graphics", "[", 
          RowBox[{"Text", "[", 
           RowBox[{
            RowBox[{"Framed", "[", 
             RowBox[{"Style", "[", 
              RowBox[{
              "\"\<The crater volume scaled to the impactor mass m\\r as a \
function of the impactor diameter. \\rDashed->S-Type, Solid->C-Type.  \\rThe \
values on the left are the strength regime, \\rthe deceasing on the right is \
a consequence of increasing gravity forces\>\"", ",", "12"}], "]"}], "]"}], 
            ",", 
            RowBox[{"Scaled", "[", 
             RowBox[{"{", 
              RowBox[{".5", ",", ".2"}], "}"}], "]"}], ",", 
            RowBox[{"Background", "\[Rule]", "LightGray"}]}], "]"}], "]"}]}], 
        "]"}]}]}], ")"}]}], "\n", "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", 
               RowBox[{"--", 
                RowBox[{"--", 
                 RowBox[{"--", 
                  RowBox[{"--", 
                   RowBox[{"--", "end"}]}]}]}]}]}]}]}]}]}]}]}]}]}], " ", "of",
       " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"craterscalingplotf", "--"}], "--"}], "--"}], 
                "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
         "--"}], "--"}], "--"}]}], "-"}], "*)"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"(*", " ", 
     RowBox[{
     "bin", " ", "data", " ", "in", " ", "multiples", " ", "of", " ", 
      "ratio"}], "*)"}], "\n", 
    RowBox[{
     RowBox[{"databinned", "[", 
      RowBox[{"list_", ",", "ratio_"}], "]"}], "=", "\n", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"biggy", "=", 
        RowBox[{"1.00001", 
         RowBox[{"list", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}]}], ";", "\n", 
       RowBox[{"nnum", "=", 
        RowBox[{
         RowBox[{"-", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Log", "[", 
             RowBox[{"Min", "[", "list", "]"}], "]"}], "-", 
            RowBox[{"Log", "[", "biggy", "]"}]}], ")"}]}], "/", 
         RowBox[{"Log", "[", "ratio", "]"}]}]}], ";", "\n", 
       RowBox[{"cumnums", "=", 
        RowBox[{"Accumulate", "[", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{"Select", "[", 
             RowBox[{"list", ",", 
              RowBox[{
               RowBox[{
                RowBox[{"biggy", "/", 
                 RowBox[{"(", 
                  RowBox[{"ratio", "^", 
                   RowBox[{"(", 
                    RowBox[{"i", "-", "1"}], ")"}]}], ")"}]}], ">", "#", ">", 
                
                RowBox[{"biggy", "/", 
                 RowBox[{"(", 
                  RowBox[{"ratio", "^", "i"}], ")"}]}]}], " ", "&"}]}], "]"}],
             "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "nnum"}], "}"}]}], "]"}], "]"}]}], ";", "\n", 
       RowBox[{"binpts", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Mean", "[", 
             RowBox[{"Select", "[", 
              RowBox[{"test", ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"biggy", "/", 
                  RowBox[{"(", 
                   RowBox[{"ratio", "^", 
                    RowBox[{"(", 
                    RowBox[{"i", "-", "1"}], ")"}]}], ")"}]}], ">", "#", ">", 
                 
                 RowBox[{"biggy", "/", 
                  RowBox[{"ratio", "^", "i"}]}]}], " ", "&"}]}], "]"}], "]"}],
             ",", 
            RowBox[{"cumnums", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "1", ",", "nnum"}], "}"}]}], "]"}]}]}], ")"}]}], 
    "\[IndentingNewLine]", "*)"}], "\n", "\n", "\n", "\n", "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", 
               RowBox[{"--", "find"}]}]}]}]}]}]}]}]}]}]}], " ", "binnumber", 
     " ", "for", " ", "ast", " ", "number", " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"n", "--"}], "--"}], "--"}], "--"}]}], "*)"}], " ", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", 
               RowBox[{"--", "the"}]}]}]}]}]}]}]}]}]}], " ", "bin", " ", 
      "number", " ", "n", " ", "has", " ", "the", " ", "n"}], "+", 
     RowBox[{"1", " ", "and", " ", "nth", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"boundaries", "--"}], "--"}], "--"}], "--"}]}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"dbinf", "[", "n_", "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"FirstPosition", "[", 
        RowBox[{
         RowBox[{"cumdistr", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "2"}], "]"}], "]"}], ",", 
         RowBox[{"_", "?", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"#", ">", "n"}], "&"}], ")"}]}]}], "]"}], "-", "1"}], 
      ")"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", "End"}]}]}]}]}]}]}]}], " ", "of", " ", "dbin", " ", 
     
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"function", "--"}], "--"}], "--"}], "--"}], 
                    "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
                "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
         "--"}], "--"}], "--"}], "--"}]}], "*)"}], "\[IndentingNewLine]", 
   "\n", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"-", "Several"}]}]}]}]}]}]}]}], " ", "depletion", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"models", " ", "--"}], "--"}], "--"}], "--"}], 
                   "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
            "--"}], "--"}], "--"}], "--"}], "--"}], "--"}]}], "-"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"depletion", "[", "x_", "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{"Piecewise", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"0.003", " ", 
           RowBox[{"x", "^", 
            RowBox[{"(", 
             RowBox[{"-", "1"}], ")"}]}]}], ",", 
          RowBox[{"3", "<", "x", "\[LessEqual]", "20"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"0.0014", " ", 
           RowBox[{"x", "^", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "2.2"}], "/", "7"}], ")"}]}]}], ",", 
          RowBox[{"0.25", "<", "x", "<=", "3"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"0.00114", " ", 
            RowBox[{"x", "^", 
             RowBox[{"-", "0.5"}]}]}], "-", 
           RowBox[{"8.75", " ", 
            RowBox[{"10", "^", 
             RowBox[{"-", "5"}]}]}]}], ",", 
          RowBox[{"0.02", "<", "x", "<=", "0.25"}]}], "}"}], ",", "\n", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"0.05756", " ", 
            RowBox[{"Sqrt", "[", "x", "]"}]}], "-", "0.000141"}], ",", 
          RowBox[{"0.004", "<", "x", "<=", "0.02"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"9.7768", " ", 
            RowBox[{"10", "^", 
             RowBox[{"-", "5"}]}], " ", 
            RowBox[{"x", "^", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", "2"}], "/", "3"}], ")"}]}]}], "-", "0.00038"}], 
          ",", 
          RowBox[{"0.0001", "<", "x", "<=", "0.004"}]}], "}"}]}], "}"}], 
      "]"}], ")"}]}], "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"depletion3", "[", "x_", "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Piecewise", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"0.00114", " ", 
             RowBox[{"x", "^", 
              RowBox[{"-", "0.5"}]}]}], "-", 
            RowBox[{"8.75", " ", 
             RowBox[{"10", "^", 
              RowBox[{"-", "5"}]}]}]}], ",", 
           RowBox[{"0.02", "<", "x", "\[LessEqual]", "20"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"0.05756", " ", 
             RowBox[{"Sqrt", "[", "x", "]"}]}], "-", "0.000141"}], ",", "\n", 
           
           RowBox[{"0.004", "<", "x", "<=", "0.02"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"9.7768", " ", 
             RowBox[{"10", "^", 
              RowBox[{"-", "5"}]}], " ", 
             RowBox[{"x", "^", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"-", "2"}], "/", "3"}], ")"}]}]}], "-", "0.00038"}], 
           ",", 
           RowBox[{"0.0001", "<", "x", "<=", "0.004"}]}], "}"}]}], "}"}], 
       "]"}], ";"}], ")"}]}], "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{"depletionbottke", "[", "x_", "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{"Piecewise", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{".0003", ",", 
          RowBox[{"0.001", "<", "x", "\[LessEqual]", "1"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{".0003", "-", 
           RowBox[{"2.44", " ", 
            RowBox[{"10", "^", 
             RowBox[{"-", "5"}]}], 
            RowBox[{"(", 
             RowBox[{"x", "-", "1"}], ")"}]}]}], ",", 
          RowBox[{"1", "<", "x", "\[LessEqual]", "10"}]}], "}"}], ",", "\n", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{".00008", "-", 
           RowBox[{"8", " ", 
            RowBox[{"10", "^", 
             RowBox[{"-", "6"}]}], 
            RowBox[{"(", 
             RowBox[{"x", "-", "10"}], ")"}]}]}], ",", 
          RowBox[{"10", "<", "x", "\[LessEqual]", "20"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", 
          RowBox[{"20", "<", "x", "\[LessEqual]", "1000"}]}], "}"}]}], "}"}], 
      "]"}], ")"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"depletionbottke2", "[", "x_", "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{"Piecewise", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{".0003", ",", 
          RowBox[{"0.001", "<", "x", "\[LessEqual]", "1"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{".0003", "-", 
           RowBox[{"2.44", " ", 
            RowBox[{"10", "^", 
             RowBox[{"-", "5"}]}], 
            RowBox[{"(", 
             RowBox[{"x", "-", "1"}], ")"}]}]}], ",", 
          RowBox[{"1", "<", "x", "\[LessEqual]", "10"}]}], "}"}], ",", "\n", 
        RowBox[{"{", 
         RowBox[{"0", ",", 
          RowBox[{"10", "<", "x", "\[LessEqual]", "1000"}]}], "}"}]}], "}"}], 
      "]"}], ")"}]}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", "End"}]}]}]}]}]}]}]}], " ", "of", " ", "depletion", 
     " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"function", "--"}], "--"}], "--"}], "--"}], 
                    "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
                "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
         "--"}], "--"}], "--"}], "--"}]}], "*)"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", " ", "dfac"}]}]}]}]}]}]}]}], " ", 
      RowBox[{"function", "--"}], "not", " ", "now", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"used", "--"}], "--"}], "--"}]}], "-", 
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", 
               RowBox[{"--", 
                RowBox[{"--", 
                 RowBox[{"--", 
                  RowBox[{"--", 
                   RowBox[{"--", 
                    RowBox[{"--", "--"}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dfacf", "[", "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"dfac", "=", " ", 
       RowBox[{"Max", "[", 
        RowBox[{"1", ",", 
         RowBox[{"Log", "[", 
          RowBox[{"10", ",", 
           RowBox[{"10", 
            RowBox[{"d", "^", "1.5"}]}]}], "]"}]}], "]"}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"first", " ", "guess"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"xvals", "=", 
       RowBox[{"Log", "[", 
        RowBox[{"{", 
         RowBox[{
         ".001", ",", "5.", ",", "8.", ",", "30.", ",", "50.", ",", "100.", 
          ",", "1000"}], "}"}], "]"}]}], ";", 
      RowBox[{"(*", " ", 
       RowBox[{"pts", " ", "for", " ", "tweaking"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"dfacvals", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"dfac", "/.", 
          RowBox[{"d", "\[Rule]", 
           RowBox[{"E", "^", 
            RowBox[{"xvals", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}]}]}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "7"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"yvals", "=", 
       RowBox[{"Log", "[", 
        RowBox[{"{", 
         RowBox[{
         "1.", ",", "1.", ",", "1.5", ",", "1.45", ",", ".5", ",", "1.", ",", 
          "1."}], "}"}], "]"}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"additional", " ", "corrrection"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"yvals", "=", 
       RowBox[{
        RowBox[{"Log", "[", "dfacvals", "]"}], "+", " ", "yvals"}]}], ";", 
      " ", 
      RowBox[{"(*", " ", 
       RowBox[{"add", " ", "in", " ", "log", " ", "space"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"funcpts", "=", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{"xvals", ",", "yvals"}], "}"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"dfac", "=", 
       RowBox[{"Interpolation", "[", 
        RowBox[{
         RowBox[{"E", "^", "funcpts"}], ",", 
         RowBox[{"InterpolationOrder", "\[Rule]", "1"}]}], "]"}]}], ";"}], 
     "\[IndentingNewLine]", ")"}]}], "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", "End"}]}]}]}]}]}]}]}], " ", "of", " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"dfacfunction", "--"}], "--"}], "--"}], "--"}], 
                    "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
                "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
         "--"}], "--"}], "--"}], "--"}]}], "*)"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", "Find"}]}]}]}], " ", "a", " ", "power", " ", "law", " ",
      "fit", " ", "to", " ", "the", " ", "first", " ", "num", " ", "points", 
     " ", "in", " ", "a", " ", "distribution", " ", "formatted", " ", "as", 
     " ", "a", " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"list", "--"}], "--"}], "--"}], "--"}], "--"}], 
                    "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
                  "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
           "--"}], "--"}], "--"}], "--"}], "--"}], "--"}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"distfitf", "[", 
     RowBox[{"dist_", ",", "num_"}], "]"}], ":=", "\n", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"fit", "=", 
       RowBox[{"FindFit", "[", 
        RowBox[{
         RowBox[{"Part", "[", 
          RowBox[{"dist", ",", 
           RowBox[{"1", ";;", "num"}]}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"cdd", " ", 
           RowBox[{"x", "^", 
            RowBox[{"-", "alp"}]}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"alp", ",", "2.2"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"cdd", ",", 
             RowBox[{"2", " ", 
              RowBox[{"10", "^", "6"}]}]}], "}"}]}], "}"}], ",", "x"}], 
        "]"}]}], ";", "\n", 
      RowBox[{"alphax", "=", 
       RowBox[{"alp", "/.", 
        RowBox[{"fit", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"alpha", " ", "is", " ", "a", " ", "positive", " ", "number"}],
        " ", "*)"}], "\n", 
      RowBox[{"cdx", "=", 
       RowBox[{"cdd", "/.", 
        RowBox[{"fit", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}]}]}], ")"}]}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", "End"}]}]}]}]}]}]}]}], " ", "of", " ", "distfitf",
        " ", "function"}], "==="}], "=", 
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", 
               RowBox[{"--", 
                RowBox[{"--", 
                 RowBox[{"--", 
                  RowBox[{"--", 
                   RowBox[{"--", "-"}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}], "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", " ", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", " ", "eroded"}]}]}]}]}]}]}]}]}], " ", "to", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"zero", " ", "--"}], "--"}], "--"}], "--"}], 
                    "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
             "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}]}], "-"}], 
    "*)"}], "\n", 
   RowBox[{
    RowBox[{"erodedtozerof", "[", "]"}], ":=", 
    RowBox[{"(", "  ", 
     RowBox[{"(*", " ", 
      RowBox[{"two", " ", "cases", 
       RowBox[{"??", 
        RowBox[{",", " ", 
         RowBox[{"replaced", " ", "or", " ", "not"}]}]}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"bornagain", ",", 
       RowBox[{"(*", 
        RowBox[{"need", " ", "to", " ", "reset", " ", "stuff"}], "*)"}], " ", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"d", "=", "d0"}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"dlist", "[", 
          RowBox[{"[", "iast", "]"}], "]"}], "=", "d0"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"now", " ", "reset", " ", "spin"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"omegvals", "[", 
          RowBox[{"[", "iast", "]"}], "]"}], "=", 
         RowBox[{"resetomegf", "[", "d", "]"}]}], ";", " ", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{
          "3", " ", "components", " ", "for", " ", "each", " ", "target"}], 
          ",", " ", 
          RowBox[{"not", " ", "wobbling"}]}], " ", "*)"}], 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"omeg", "=", 
         RowBox[{"omegvals", "[", 
          RowBox[{"[", "iast", "]"}], "]"}]}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"omegnet", "=", 
         RowBox[{
          RowBox[{"Sign", "[", 
           RowBox[{"omeg", "[", 
            RowBox[{"[", "3", "]"}], "]"}], "]"}], " ", 
          RowBox[{"Norm", "[", "omeg", "]"}]}]}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"omegzz", "=", 
         RowBox[{
          RowBox[{"Sign", "[", "omegz", "]"}], " ", 
          RowBox[{"Max", "[", 
           RowBox[{
            RowBox[{"Abs", "[", 
             RowBox[{"omeg", "[", 
              RowBox[{"[", "3", "]"}], "]"}], "]"}], ",", 
            RowBox[{"10", "^", 
             RowBox[{"-", "9"}]}]}], "]"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"wobble", "=", 
         RowBox[{"ArcTan", "[", 
          RowBox[{
           RowBox[{"Sqrt", "[", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"omeg", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "^", "2"}], "+", 
              RowBox[{
               RowBox[{"omeg", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "^", "2"}]}], ")"}], "]"}], 
           "/", 
           RowBox[{"Abs", "[", "omegzz", "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"take", " ", "it", " ", "off", " ", "binary", " ", "list"}], 
         " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "Print", "[", "\"\<in eroded to zero, take off binary list\>\"", 
           "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"binaries", "=", 
         RowBox[{"Complement", "[", 
          RowBox[{"binaries", ",", 
           RowBox[{"Select", "[", 
            RowBox[{"binaries", ",", 
             RowBox[{
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", "iast"}], " ", 
              "&"}]}], "]"}]}], "]"}]}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
         "note", " ", "that", " ", "now", " ", "these", " ", "are", " ", 
          "candidates", " ", "for", " ", "binaries"}], ",", " ", 
         RowBox[{"maybe", " ", "not", " ", "actual"}]}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"otherwise", "..."}], " ", "will", " ", "kick", " ", "out", 
         " ", "for", " ", "small", " ", "diameter"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"d", "=", "0."}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"dlist", "[", 
          RowBox[{"[", "iast", "]"}], "]"}], "=", "0."}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", " ", ")"}]}], 
   "\[IndentingNewLine]", " ", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", "eroded"}]}]}]}]}]}]}]}]}], " ", "to", " ", 
      "near", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"zero", " ", "--"}], "--"}], "--"}], "--"}], 
                    "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
             "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}]}], "-"}], 
    "*)"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"-", "the"}]}]}], " ", "function", " ", "to", " ", "get", " ", 
     "the", " ", "fragment", " ", "sizes", " ", "and", " ", "numbers", " ", 
     "and", " ", 
     RowBox[{"bins", ".", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", "--"}]}]}]}]}]}], "*)"}], "\n", 
   RowBox[{
    RowBox[{"fragments", "[", "qratio_", "]"}], ":=", "\[IndentingNewLine]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"dlast", "=", "d"}], ";", 
      RowBox[{"(*", " ", 
       RowBox[{"it", " ", "is", " ", "changed", " ", "below"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "now", " ", "this", " ", "does", " ", "not", " ", "get", " ", "the", 
         " ", "largest"}], ",", " ", 
        RowBox[{"only", " ", "the", " ", "fragments"}], ",", " ", 
        RowBox[{
        "so", " ", "it", " ", "is", " ", "only", " ", "used", " ", "when", 
         " ", "allowing", " ", "variable", " ", 
         RowBox[{"population", "."}]}]}], " ", "*)"}], "\n", "\n", 
      RowBox[{"binnumtnew", "=", 
       RowBox[{
        RowBox[{"astnum", "[", "d", "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], ";", "\n", "   ", 
      RowBox[{"diaf2", "=", 
       RowBox[{"d", "*", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"0.1", " ", 
           RowBox[{"qratio", "^", ".9"}]}], ")"}], "^", 
         RowBox[{"(", 
          RowBox[{"1", "/", "3"}], ")"}]}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"diaf3", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"(", "0.4", ")"}], "^", 
         RowBox[{"(", 
          RowBox[{"1", "/", "3"}], ")"}]}], " ", "diaf2"}]}], ";", "\n", 
      RowBox[{"firstthree", "=", 
       RowBox[{"{", 
        RowBox[{"d", ",", "diaf2", ",", "diaf3"}], "}"}]}], ";", "\n", 
      RowBox[{"first3bins", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"astnum", "[", 
           RowBox[{"firstthree", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "]"}], "[", 
          RowBox[{"[", "2", "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "3"}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"bin3", "=", 
       RowBox[{"first3bins", "[", 
        RowBox[{"[", "3", "]"}], "]"}]}], ";", "\n", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"target", " ", "diminished"}], ",", " ", 
        RowBox[{
         RowBox[{"reduce", " ", "cum", " ", "dist", " ", "from", " ", "bin"}],
          "+", 
         RowBox[{"1", " ", "of", " ", "target", " ", "to", " ", "end"}]}]}], 
       "*)"}], "\n", 
      RowBox[{"firstset", "=", 
       RowBox[{"Table", "[", 
        RowBox[{"0", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{"numcum", "-", "1"}]}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"subtract", "=", "firstset"}], ";", " ", 
      RowBox[{"(*", 
       RowBox[{"another", " ", "zero", " ", "set"}], "  ", "*)"}], "\n", 
      RowBox[{
       RowBox[{"subtract", "[", 
        RowBox[{"[", "binnumt", "]"}], "]"}], "=", "1"}], ";", " ", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"dump", " ", "target"}], ",", " ", 
        RowBox[{
        "now", " ", "included", " ", "in", " ", "largest", " ", "frag"}]}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"subtract", "[", 
        RowBox[{"[", "binnumi", "]"}], "]"}], "=", "1"}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"dump", " ", "impactor"}], "*)"}], "\n", "\n", 
      RowBox[{"ntodo", "=", "3"}], ";", "\n", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"first3bins", "[", 
          RowBox[{"[", "3", "]"}], "]"}], ">", 
         RowBox[{"numcum", "-", "1"}]}], ",", 
        RowBox[{"ntodo", "=", "2"}]}], "]"}], ";", "\n", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"first3bins", "[", 
          RowBox[{"[", "2", "]"}], "]"}], ">", 
         RowBox[{"numcum", "-", "1"}]}], ",", 
        RowBox[{"ntodo", "=", "1"}]}], "]"}], ";", "\n", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"first3bins", "[", 
          RowBox[{"[", "1", "]"}], "]"}], ">", 
         RowBox[{"numcum", "-", "1"}]}], ",", 
        RowBox[{
         RowBox[{"ntodo", "=", "0"}], ";"}]}], "]"}], ";", "\n", "\n", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"firstset", "[", 
          RowBox[{"[", 
           RowBox[{"first3bins", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "]"}], "]"}], "=", "1"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "ntodo"}], "}"}]}], "]"}], ";", "  ", 
      RowBox[{"(*", 
       RowBox[{"will", " ", "need", " ", "to", " ", "accumulate"}], "*)"}], 
      "\n", "\n", 
      RowBox[{"(*", 
       RowBox[{
       "now", " ", "the", " ", "rest", " ", "of", " ", "the", " ", "frag", 
        " ", "addditions"}], " ", "*)"}], "\n", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{
         "\"\<is there a problem here?\>\"", ",", "diaf3", ",", " ", 
          "\"\<qratio= \>\"", ",", "qratio"}], "]"}], ";"}], "*)"}], "\n", 
      "\n", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"ntodo", "==", "3"}], ",", "\n", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"boundaries", "=", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"cumdistr", "[", 
              RowBox[{"[", 
               RowBox[{"i", ",", "1"}], "]"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", "bin3", ",", "numcum"}], "}"}]}], "]"}]}], 
          ";", "\n", 
          RowBox[{
           RowBox[{"boundaries", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "=", "diaf3"}], ";", "\n", 
          RowBox[{"(*", " ", 
           RowBox[{
           "these", " ", "are", " ", "the", " ", "frag", " ", "numbers", " ", 
            "in", " ", "each", " ", "bin"}], "*)"}], "\n", 
          RowBox[{"alp2", "=", 
           StyleBox[
            RowBox[{
             RowBox[{"(", 
              RowBox[{"5.4058586727114`*^15", "-", 
               RowBox[{"7.22418332833735`*^15", " ", 
                SuperscriptBox["qratio", 
                 RowBox[{"59", "/", "510"}]]}], "+", 
               RowBox[{"3.612091664168675`*^15", " ", 
                SuperscriptBox["qratio", 
                 RowBox[{"9", "/", "10"}]]}]}], ")"}], "/", "\n", " ", 
             RowBox[{"(", 
              RowBox[{"5.4058586727114`*^15", "-", 
               RowBox[{"4.784668666890982`*^15", " ", 
                SuperscriptBox["qratio", 
                 RowBox[{"59", "/", "510"}]]}], "+", 
               RowBox[{"2.392334333445491`*^15", " ", 
                SuperscriptBox["qratio", 
                 RowBox[{"9", "/", "10"}]]}]}], ")"}]}], "Input"]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<alp2= \>\"", ",", "alp2"}], "]"}], ";"}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"rm", "=", ".08"}], ";", "\[IndentingNewLine]", 
          RowBox[{"kk", "=", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"3", 
              RowBox[{"rm", "^", 
               RowBox[{"(", 
                RowBox[{"(", 
                 RowBox[{"alp2", "-", 
                  RowBox[{"5", "/", "4"}]}], ")"}], ")"}]}]}], ")"}], "^", 
            RowBox[{"(", 
             RowBox[{"1", "/", "3"}], ")"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
           "this", " ", "new", " ", "alp2", " ", "is", " ", "based", " ", 
            "on", " ", "exactly", " ", "100", "%", " ", "mass", " ", "in", 
            " ", "the", " ", "fragments", " ", "all", " ", "the", " ", "way", 
            " ", "to", " ", "zero", " ", 
            RowBox[{"mass", ".", "  ", "see"}], " ", "the", " ", "file", " ", 
            
            RowBox[{"fragmasstry8", ".", "nb"}]}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"fragnumbers", "=", 
           RowBox[{"PadLeft", "[", 
            RowBox[{
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"nnfrags", "[", 
                 RowBox[{"boundaries", "[", 
                  RowBox[{"[", 
                   RowBox[{"i", "+", "1"}], "]"}], "]"}], "]"}], "-", 
                RowBox[{"nnfrags", "[", 
                 RowBox[{"boundaries", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "]"}]}], ",", 
               RowBox[{"{", 
                RowBox[{"i", ",", "1", ",", 
                 RowBox[{"numcum", "-", "bin3"}]}], "}"}]}], "]"}], ",", 
             RowBox[{"numcum", "-", "1"}]}], "]"}]}], ";"}], ")"}], "\n", ",",
         "\n", 
        RowBox[{"fragnumbers", "=", 
         RowBox[{"ConstantArray", "[", 
          RowBox[{"0", ",", 
           RowBox[{"numcum", "-", "1"}]}], "]"}]}], ",", 
        RowBox[{"Print", "[", 
         RowBox[{"\"\<ntodo= \>\"", ",", "ntodo"}], "]"}]}], "]"}], ";", "\n", 
      RowBox[{"(*", " ", 
       RowBox[{
       "these", " ", "are", " ", "the", " ", "numbers", " ", "from", " ", 
        "the", " ", "frag", " ", "distribution", " ", "going", " ", "into", 
        " ", "the", " ", "bins", " ", "of", " ", "the", " ", "population", 
        " ", "distribution"}], " ", "*)"}], "\n", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{
         "\"\<d= \>\"", ",", "d", ",", "\"\<\\r boundaries \>\"", ",", 
          "boundaries", ",", "\"\<\\r fragments for this hit \>\"", ",", 
          "fragnumbers"}], "]"}], ";"}], "*)"}], "\n", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{"\"\<old popchange= \>\"", ",", "popchange"}], "]"}], ";"}], 
       "*)"}], "\n", 
      RowBox[{
       RowBox[{"popchange", "[", 
        RowBox[{"[", "binnumt0", "]"}], "]"}], "=", 
       RowBox[{
        RowBox[{"popchange", "[", 
         RowBox[{"[", "binnumt0", "]"}], "]"}], "+", 
        RowBox[{"(", 
         RowBox[{"fragnumbers", "+", "firstset", "-", "subtract"}], ")"}]}]}],
       ";", " ", "\n", 
      RowBox[{"(*", " ", 
       RowBox[{
       "this", " ", "accumulates", " ", "over", " ", "the", " ", "asteroid", 
        " ", "hits", " ", "in", " ", "each", " ", "time", " ", "step"}], " ", 
       "*)"}], "\n", 
      RowBox[{"fragdistr0", "=", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"diffdistr0", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
          RowBox[{"Accumulate", "[", "fragnumbers", "]"}]}], "}"}], "]"}]}], 
      ";", "\n", 
      RowBox[{"newmass", "=", 
       RowBox[{
        RowBox[{"Total", "[", 
         RowBox[{"firstthree", "^", "3"}], "]"}], "+", 
        RowBox[{"Total", "[", 
         RowBox[{"massindist", "[", "fragdistr0", "]"}], "]"}]}]}], ";", "\n", 
      RowBox[{"mlost", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"dlast", "^", "3"}], "-", "newmass"}], ")"}], "/", 
        RowBox[{"dlast", "^", "3"}]}]}], ";"}], "\[IndentingNewLine]", "\n", 
     ")"}]}], "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"-", "End"}]}]}]}]}]}]}]}]}], " ", "of", " ", 
      "Fragments", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"function", "--"}], "--"}], "--"}], "--"}], 
                   "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
            "--"}], "--"}], "--"}], "--"}], "--"}], "--"}]}], "-"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"-", "given"}]}], " ", "distr"}], ",", " ", 
     RowBox[{
      RowBox[{
      "find", " ", "the", " ", "diameter", " ", "for", " ", "a", " ", "given",
        " ", "numer", " ", "by", " ", "interolation", " ", "assuming", " ", 
       "a", " ", "power"}], "-", 
      RowBox[{"law", " ", "--"}]}]}], "*)"}], "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{"getdiaf", "[", "num_", "]"}], ":=", 
    RowBox[{"(", "\n", 
     RowBox[{
      RowBox[{"pos1", "=", 
       RowBox[{"FirstPosition", "[", 
        RowBox[{
         RowBox[{"cumdistr", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "2"}], "]"}], "]"}], ",", 
         RowBox[{"_", "?", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"#", ">", "num"}], "&"}], ")"}]}]}], "]"}]}], ";", "\n", 
      RowBox[{"pair2", "=", 
       RowBox[{
        RowBox[{"cumdistr", "[", 
         RowBox[{"[", "pos1", "]"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], ";", "\n", 
      RowBox[{"pair1", "=", 
       RowBox[{
        RowBox[{"cumdistr", "[", 
         RowBox[{"[", 
          RowBox[{"pos1", "-", "1"}], "]"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], ";", "\n", 
      RowBox[{"alpnow", "=", 
       RowBox[{
        RowBox[{"-", 
         RowBox[{"Log", "[", 
          RowBox[{
           RowBox[{"pair1", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "/", 
           RowBox[{"pair2", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], "/", 
        RowBox[{"Log", "[", 
         RowBox[{
          RowBox[{"pair1", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "/", 
          RowBox[{"pair2", "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}]}], ";", "\n", 
      RowBox[{"di", "=", 
       RowBox[{
        RowBox[{"pair1", "[", 
         RowBox[{"[", "1", "]"}], "]"}], 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"num", "/", 
           RowBox[{"pair1", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], ")"}], "^", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "/", "alpnow"}], ")"}]}]}]}]}], ")"}]}], "\n", 
   
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"-", "End"}]}]}]}]}]}]}]}]}], " ", "of", " ", "getdiaf",
       " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"function", "--"}], "--"}], "--"}], "--"}], 
                   "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
            "--"}], "--"}], "--"}], "--"}], "--"}], "--"}]}], "-"}], "*)"}], 
   "\n", "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"Attributes", "[", "getdiaf", "]"}], "=", 
     RowBox[{"{", "Listable", "}"}]}], ";"}], "\n", "\[IndentingNewLine]", 
   "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"-", "Histograms"}]}]}]}], " ", "of", " ", "the", " ", "spin",
      " ", "nomalized", " ", "to", " ", "their", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"average", "--"}], "--"}], "--"}], "not", " ", 
     RowBox[{"used", "?", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", "--"}]}]}]}]}]}]}], "*)"}], "\n", 
   RowBox[{
    RowBox[{"histogramofnormalizedf", "[", 
     RowBox[{"list_", ",", "num_"}], "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"meanarray", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"meaninrangef", "[", 
          RowBox[{"list", ",", 
           RowBox[{"list", "[", 
            RowBox[{"[", 
             RowBox[{"i", ",", "1"}], "]"}], "]"}]}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{"Length", "[", "list", "]"}]}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"normalizedpts", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"list", "[", 
           RowBox[{"[", 
            RowBox[{"i", ",", "2"}], "]"}], "]"}], "/", 
          RowBox[{"meanarray", "[", 
           RowBox[{"[", "i", "]"}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{"Length", "[", "list", "]"}]}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Histogram", "[", 
       RowBox[{"normalizedpts", ",", "num"}], "]"}]}], ")"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"-", "end"}]}]}]}]}]}]}], " ", "of", " ", 
     "histogramofnormalizedf", " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"function", "--"}], "--"}], "--"}], "--"}], "--"}], 
             "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}]}],
     "*)"}], "\n", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"-", "histograms"}]}]}]}], " ", "of", " ", "the", " ", "spin",
      " ", "around", " ", "a", " ", 
     RowBox[{
      RowBox[{"diameter", " ", "--"}], "--"}], "often", " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"used", "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
      "--"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"histogramf", "[", 
     RowBox[{
     "list_", ",", "d1_", ",", "d2_", ",", "minval_", ",", "type_", ",", 
      "nn_", ",", "name_"}], "]"}], ":=", "\[IndentingNewLine]", 
    RowBox[{"(", " ", 
     RowBox[{"(*", " ", 
      RowBox[{
      "the", " ", "spin", "  ", "comes", " ", "in", " ", "and", " ", "goes", 
       " ", "out", " ", "with", " ", "same", " ", "units"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"group", "=", 
       RowBox[{
        RowBox[{"Select", "[", 
         RowBox[{"list", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"d1", "<=", 
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "<=", "d2"}], ")"}], "&&", 
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}], ">", "minval"}]}], "&"}]}], 
         "]"}], "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "2"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"meangroup", "=", 
       RowBox[{"Mean", "[", "group", "]"}]}], ";", "\n", "     ", 
      RowBox[{"mediangroup", "=", 
       RowBox[{"Median", "[", "group", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"maxgroup", "=", 
       RowBox[{"Max", "[", "group", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"mingroup", "=", 
       RowBox[{"Min", "[", "group", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"num", "=", 
       RowBox[{"Length", "[", "group", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{"{", 
          RowBox[{"group", ",", "num", ",", "d1", ",", "d2"}], "}"}], "]"}], 
        ";"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"histo", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"type", "\[Equal]", "\"\<Log\>\""}], ",", 
         RowBox[{"Histogram", "[", 
          RowBox[{"group", ",", 
           RowBox[{"{", 
            RowBox[{"\"\<Log\>\"", ",", "nn"}], "}"}], ",", 
           RowBox[{"ImageSize", "\[Rule]", "500"}], ",", 
           RowBox[{"Frame", "\[Rule]", "True"}], ",", 
           RowBox[{"FrameLabel", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"\"\<Spin, cycles/day\>\"", ",", "\"\<Number\>\""}], 
             "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", "24"}], ",", 
           RowBox[{"PlotRange", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{".01", ",", "12"}], "}"}], ",", "Automatic"}], 
             "}"}]}]}], "]"}], ",", 
         RowBox[{"Histogram", "[", 
          RowBox[{"group", ",", "nn", ",", "type", ",", 
           RowBox[{"ImageSize", "\[Rule]", "500"}], ",", 
           RowBox[{"Frame", "\[Rule]", "True"}], ",", 
           RowBox[{"FrameLabel", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"\"\<Spin, cycles/day\>\"", ",", "\"\<Number\>\""}], 
             "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", "24"}], ",", 
           RowBox[{"PlotRange", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"0", ",", "12"}], "}"}], ",", "Automatic"}], "}"}]}]}],
           "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"maxheight", "=", 
       RowBox[{"Max", "[", 
        RowBox[{
         RowBox[{"HistogramList", "[", 
          RowBox[{"group", ",", "nn", ",", "type"}], "]"}], "[", 
         RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"line", "=", 
       RowBox[{"ListPlot", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"meangroup", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"meangroup", ",", 
             RowBox[{"1.2", "maxheight"}]}], "}"}]}], "}"}], ",", 
         RowBox[{"Joined", "\[Rule]", "True"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"Thick", ",", "Black"}], "}"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Show", "[", 
       RowBox[{"histo", ",", "line", ",", 
        RowBox[{"Graphics", "[", 
         RowBox[{"Text", "[", 
          RowBox[{
           RowBox[{"Framed", "[", 
            RowBox[{"StringForm", "[", 
             RowBox[{
             "\"\<This is the  distribution for the `5` \\n of `6` asteroids \
from  `1`  to `2` km diameter.  \\nThe mean is `3`  , The median is `4`\>\"", 
              ",", "d1", ",", "d2", ",", 
              RowBox[{"N", "[", 
               RowBox[{"meangroup", ",", "3"}], "]"}], ",", 
              RowBox[{"N", "[", "mediangroup", "]"}], ",", "name", ",", "num",
               ",", "type"}], "]"}], "]"}], ",", 
           RowBox[{"Scaled", "[", 
            RowBox[{"{", 
             RowBox[{".95", ",", ".9"}], "}"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}], ",", 
           RowBox[{"Background", "\[Rule]", "White"}], ",", 
           RowBox[{"BaseStyle", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"16", ",", 
              RowBox[{"FontFamily", "\[Rule]", "\"\<Times\>\""}]}], "}"}]}]}],
           "]"}], "]"}], ",", 
        RowBox[{"ImageSize", "\[Rule]", "Full"}], ",", "\[IndentingNewLine]", 
        
        RowBox[{"Frame", "\[Rule]", "True"}], ",", 
        RowBox[{"FrameTicksStyle", "\[Rule]", "20"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], ")"}]}], 
   "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"-", "End"}]}]}]}]}]}]}], " ", "of", " ", "histogramf", 
     " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"function", "--"}], "--"}], "--"}], "--"}], 
                   "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
            "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}]}], "*)"}], 
   "\n", " ", "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"-", "End"}]}]}]}]}]}]}], " ", "of", " ", "histogramf", 
     " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"function", "--"}], "--"}], "--"}], "--"}], 
                   "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
            "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"-", "set"}]}]}]}]}]}]}]}]}], " ", "initial", " ", 
      "values", " ", "for", " ", "spins", "  ", "really", " ", 
      RowBox[{"irrevelant", "?", " ", "yes"}]}], ",", " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"for", " ", "large", " ", "ones"}], ".."}], "--"}], "--"}], 
      "\[IndentingNewLine]", "but", " ", "not", " ", "too", " ", "much", " ", 
      
      RowBox[{"wobble", "?", 
       RowBox[{"--", "-"}]}]}]}], "*)"}], "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{"initialspins", "[", "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"spinrange", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "6"}], ",", 
         RowBox[{"-", "5"}]}], "}"}]}], ";", 
      RowBox[{"(*", " ", 
       RowBox[{
       "these", " ", "are", " ", ".013", " ", "to", " ", "0.14", " ", 
        RowBox[{"cycles", "/", "day"}]}], " ", "*)"}], "\n", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "these", " ", "have", " ", "little", " ", "affect", " ", "for", " ", 
         "small", " ", "ones"}], ",", " ", 
        RowBox[{"but", " ", "definite", " ", "effect", " ", "for", " ", 
         RowBox[{"those", " ", "~", "100"}], "km"}]}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"Table", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"RandomChoice", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"-", ".01"}], ",", "0.01"}], "}"}], "]"}], 
             RowBox[{"10", "^", 
              RowBox[{"RandomReal", "[", "spinrange", "]"}]}]}], ")"}], ",", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"RandomChoice", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"-", "0.01"}], ",", "0.01"}], "}"}], "]"}], 
             RowBox[{"10", "^", 
              RowBox[{"RandomReal", "[", "spinrange", "]"}]}]}], ")"}], ",", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"RandomChoice", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"-", "1."}], ",", "1."}], "}"}], "]"}], 
             RowBox[{"10", "^", 
              RowBox[{"RandomReal", "[", "spinrange", "]"}]}]}], ")"}]}], 
          "}"}], ",", 
         RowBox[{"{", "nasteroids", "}"}]}], "]"}], "*)"}], 
      RowBox[{"(*", 
       RowBox[{"Changed", " ", "by", " ", "Gaurav"}], "*)"}], "\n", 
      RowBox[{"Table", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "0", ",", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"RandomChoice", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"-", "1."}], ",", "1."}], "}"}], "]"}], 
            RowBox[{"10", "^", 
             RowBox[{"RandomReal", "[", "spinrange", "]"}]}]}], ")"}]}], 
         "}"}], ",", 
        RowBox[{"{", "nasteroids", "}"}]}], "]"}]}], "\[IndentingNewLine]", 
     ")"}]}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"-", "end"}]}]}]}]}]}]}]}]}], " ", "of", " ", "initial",
       " ", "values", " ", "for", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"spins", " ", "--"}], "--"}], "--"}]}], "-"}], "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"-", "escaping"}]}]}]}]}]}], " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"mass", "--"}], "--"}], "--"}], "--"}], "--"}], 
                    "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
                   "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
            "--"}], "--"}], "--"}], "--"}], "--"}], "--"}]}], "-"}], "*)"}], 
   "\[IndentingNewLine]", "   ", 
   RowBox[{
    RowBox[{"massescf", "[", "]"}], ":=", " ", 
    RowBox[{"(*", " ", 
     RowBox[{
     "this", " ", "ignores", " ", "the", " ", "effect", " ", "of", " ", 
      "spin", " ", "on", " ", "escaping", " ", "mass"}], " ", "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Un", "=", 
       RowBox[{"vel", " ", 
        RowBox[{"Cos", "[", "phival", "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"the", " ", "equation", " ", 
         RowBox[{"(", "35", ")"}], " ", "of", " ", "\"\<collision spins\>\"", 
         " ", "works", " ", "for", " ", "either", " ", "strength", " ", "or", 
         " ", "gravity", " ", "regimes", " ", "and", " ", "is", " ", 
         "independent", " ", "of", " ", "gravity", " ", 
         RowBox[{"and", "/", "or"}], " ", "strength"}], ",", " ", 
        RowBox[{"but", " ", "needs", " ", "vstar", " ", "limit"}]}], " ", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"massc", "=", 
       RowBox[{
        RowBox[{"pivf", "[", 
         RowBox[{"diameter", ",", "nsize"}], "]"}], " ", "mass"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"mstar", "=", 
       RowBox[{"0.6", " ", "massc"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"massesc", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"vesc", ">", "vstar"}], ",", 
         RowBox[{"mstar", "  ", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"vesc", "/", "vstar"}], ")"}], "^", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"-", "3"}], "mu"}], ")"}]}]}], ",", "mstar"}], "]"}]}]}],
      ")"}]}], "\[IndentingNewLine]", "  ", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", "end"}]}]}]}]}]}]}], " ", "of", " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"massescf", "--"}], "--"}], "--"}], "--"}], 
                    "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
                 "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
          "--"}], "--"}], "--"}], "--"}], "--"}]}], "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", 
               RowBox[{"-", "calculate"}]}]}]}]}]}], " ", "the", " ", "mass", 
          " ", "content", " ", "of", " ", "a", " ", "population", " ", 
          RowBox[{
           RowBox[{"distribution", "--"}], "--"}], "used", " ", "only", " ", 
          "when", " ", "calculating", " ", "mass", " ", "blance"}], "..."}], 
        "--"}], "--"}], "--"}], "-"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"massindist", "[", "dist_", "]"}], ":=", "\n", 
    RowBox[{"(*", " ", 
     RowBox[{"strip", " ", "first", " ", "zeroes"}], " ", "*)"}], "\n", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Max", "[", 
          RowBox[{"dist", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}], ">", "0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"posfirst", "=", 
           RowBox[{
            RowBox[{
             RowBox[{"Position", "[", 
              RowBox[{
               RowBox[{"dist", "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "2"}], "]"}], "]"}], ",", 
               RowBox[{"_", "?", "Positive"}]}], "]"}], "[", 
             RowBox[{"[", "1", "]"}], "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"distnow", "=", 
           RowBox[{"Drop", "[", 
            RowBox[{"dist", ",", 
             RowBox[{"posfirst", "-", "1"}]}], "]"}]}], ";", "\n", 
          RowBox[{"ndist", "=", 
           RowBox[{"Length", "[", "distnow", "]"}]}], ";", "\n", 
          RowBox[{"slopes", "=", 
           RowBox[{"-", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Log", "[", 
                RowBox[{
                 RowBox[{"distnow", "[", 
                  RowBox[{"[", 
                   RowBox[{"i", ",", "2"}], "]"}], "]"}], "/", 
                 RowBox[{"distnow", "[", 
                  RowBox[{"[", 
                   RowBox[{
                    RowBox[{"i", "+", "1"}], ",", "2"}], "]"}], "]"}]}], 
                "]"}], "/", 
               RowBox[{"Log", "[", 
                RowBox[{
                 RowBox[{"distnow", "[", 
                  RowBox[{"[", 
                   RowBox[{"i", ",", "1"}], "]"}], "]"}], "/", 
                 RowBox[{"distnow", "[", 
                  RowBox[{"[", 
                   RowBox[{
                    RowBox[{"i", "+", "1"}], ",", "1"}], "]"}], "]"}]}], 
                "]"}]}], ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", "1", ",", 
                RowBox[{"ndist", "-", "1"}]}], "}"}]}], "]"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"d2vals", "=", 
           RowBox[{"Drop", "[", 
            RowBox[{
             RowBox[{"distnow", "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
             RowBox[{"-", "1"}]}], "]"}]}], ";", "\n", 
          RowBox[{"d1vals", "=", 
           RowBox[{"Drop", "[", 
            RowBox[{
             RowBox[{"distnow", "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", "1"}], "]"}]}], 
          ";", "\n", 
          RowBox[{"n2vals", "=", 
           RowBox[{"Drop", "[", 
            RowBox[{
             RowBox[{"distnow", "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", "2"}], "]"}], "]"}], ",", 
             RowBox[{"-", "1"}]}], "]"}]}], ";", "\n", 
          RowBox[{"massvals", "=", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"slopes", "/", 
              RowBox[{"(", 
               RowBox[{"3", "-", "slopes"}], ")"}]}], ")"}], " ", "n2vals", 
            RowBox[{"(", 
             RowBox[{"d2vals", "^", "3"}], ")"}], 
            RowBox[{"(", 
             RowBox[{"1", "-", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"d1vals", "/", "d2vals"}], ")"}], "^", 
               RowBox[{"(", 
                RowBox[{"3", "-", "slopes"}], ")"}]}]}], ")"}]}]}]}], ")"}], 
        "\[IndentingNewLine]", ",", 
        RowBox[{"massvals", "=", 
         RowBox[{"ConstantArray", "[", 
          RowBox[{"0", ",", 
           RowBox[{"Length", "[", "dist", "]"}]}], "]"}]}]}], "\n", "]"}], 
      ";"}], ")"}]}], "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"-", "End"}]}]}]}]}]}]}]}]}], " ", "of", " ", 
      "massindist", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"function", "--"}], "--"}], "--"}], "--"}], 
                  "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
           "--"}], "--"}], "--"}], "--"}], "--"}]}], "-"}], "*)"}], 
   "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"-", 
         RowBox[{"(*", " ", 
          RowBox[{
          "the", " ", "largest", " ", "expected", " ", "at", " ", "various", 
           " ", "probabilities"}], " ", "*)"}], 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", "for"}]}]}]}]}]}]}], " ", "crater", " ", "count", 
     " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"plots", "--"}], "--"}], "--"}], "--"}], "--"}], 
     RowBox[{"--", "--"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"maxexpectedcraterf", "[", "facvals_", "]"}], ":=", 
    RowBox[{"(", "\n", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "since", " ", "the", " ", "populations", " ", "might", " ", "vary", 
        " ", "in", " ", "time"}], ",", " ", 
       RowBox[{
       "i", " ", "use", " ", "here", " ", "the", " ", "average", " ", "of", 
        " ", "the", " ", "original", " ", "and", " ", "the", " ", "present", 
        " ", "ones"}]}], " ", "*)"}], "\n", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"distfitf", "[", 
        RowBox[{"cumdistr", ",", "20"}], "]"}], ";", " ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"sets", " ", "alpha0"}], ",", " ", 
         RowBox[{
         "cd", " ", "of", " ", "the", " ", "new", " ", "distribution"}]}], 
        " ", "*)"}], "\n", 
       RowBox[{"alpha1", "=", "alphax"}], ";", "\n", 
       RowBox[{"cd1", "=", "cdx"}], ";", "\n", 
       RowBox[{"cd", "=", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"cd0", "+", "cd1"}], ")"}], "/", "2"}]}], ";", "\n", 
       RowBox[{"alpha", "=", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"alpha0", "+", "alpha1"}], ")"}], "/", "2"}]}], ";"}], 
      "*)"}], "\n", "\n", 
     RowBox[{
      RowBox[{"dl", "=", 
       RowBox[{"fac", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"probi", " ", "cd0", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"dt", "/", "2"}], ")"}], "^", "2"}], " ", "tmax"}], 
          ")"}], "^", 
         RowBox[{"(", 
          RowBox[{"1", "/", "alpha0"}], ")"}]}]}]}], ";", "\n", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"dl", "=", 
         RowBox[{"fac", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"probi", " ", "cd", " ", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"dt", "/", "2"}], ")"}], "^", "2"}], " ", "tmax"}], 
            ")"}], "^", 
           RowBox[{"(", 
            RowBox[{"1", "/", "alpha"}], ")"}]}]}]}], ";"}], "*)"}], " ", 
      RowBox[{"(*", " ", 
       RowBox[{"largest", " ", "expected", " ", "impactors"}], " ", "*)"}], 
      "\n", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "but", " ", "the", " ", "population", " ", "changes", " ", "in", " ", 
         "time"}], ".."}], "*)"}], "\n", 
      RowBox[{"massvals", "=", 
       RowBox[{
        RowBox[{"Pi", "/", "6"}], " ", "densi", " ", 
        RowBox[{"dlvals", "^", "3"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"vel", "=", "velave"}], ";", "\[IndentingNewLine]", 
      RowBox[{"phival", "=", 
       RowBox[{"45", "Degree"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"velbar", "=", 
       RowBox[{"vel", " ", 
        RowBox[{"Cos", "[", "phival", "]"}]}]}], " ", ";", "\n", 
      RowBox[{"calccrater", "[", 
       RowBox[{"dl", ",", "dt", ",", "velbar", ",", "3"}], "]"}], ";", "\n", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{"\"\<here2, dcrim= \>\"", ",", "dcrim"}], "]"}], ";"}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"dcrimvals2", "=", 
       RowBox[{"dcrim", "/.", 
        RowBox[{"fac", "\[Rule]", "facvals"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"plotbowllimits", "=", 
       RowBox[{"LogLogPlot", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"(", 
           RowBox[{"dcrimvals2", "/", "dt"}], ")"}], ")"}], ",", 
         RowBox[{"{", 
          RowBox[{"dt", ",", "10", ",", "300"}], "}"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", "Pink", "}"}]}]}], "]"}]}], ";", "\n", "\n", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "the", " ", "call", " ", "to", " ", "calccrater", " ", "returns", " ",
          "dccomlim"}], ",", " ", 
        RowBox[{"but", " ", "not", " ", "dcomplexrim"}], ",", " ", 
        RowBox[{"so", " ", "just", " ", "calculate", " ", "it"}]}], " ", 
       "*)"}], "\n", 
      RowBox[{"dcomprimvals", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1.33", " ", 
          RowBox[{"dc", "^", "1.086"}], " ", 
          RowBox[{"dccomlim", "^", 
           RowBox[{"-", ".086"}]}]}], ")"}], "/.", 
        RowBox[{"fac", "\[Rule]", "facvals"}]}]}], ";", " ", "\n", 
      RowBox[{"plotcomplexlimits", "=", 
       RowBox[{"LogLogPlot", "[", 
        RowBox[{
         RowBox[{"dcomprimvals", "/", "dt"}], ",", 
         RowBox[{"{", 
          RowBox[{"dt", ",", "250", ",", "1500"}], "}"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"Pink", ",", "Dashed"}], "}"}]}]}], "]"}]}], ";"}], 
     ")"}]}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"-", "End"}]}]}]}]}]}]}]}]}], " ", "of", " ", 
      "maxexpectedcraterf", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"function", "--"}], "--"}], "--"}], "--"}], "--"}], 
             "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}]}], "-"}], 
    "*)"}], "\n", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"huh", "?"}], "..."}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"maxcraterinbinsf", "[", "nwanted_", "]"}], ":=", "\n", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"ratio", "=", 
       RowBox[{"Table", "[", 
        RowBox[{"0", ",", "20"}], "]"}]}], ";", "\n", 
      RowBox[{"plotpts13", "=", "ratio"}], ";", "\n", 
      RowBox[{"plots", "=", 
       RowBox[{"Table", "[", 
        RowBox[{"0", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{"Length", "[", "nwanted", "]"}]}], "}"}]}], "]"}]}], ";", 
      "\n", "\n", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "since", " ", "the", " ", "populations", " ", "vary", " ", "in", " ", 
         "time"}], ",", " ", 
        RowBox[{
        "i", " ", "use", " ", "here", " ", "the", " ", "average", " ", "of", 
         " ", "the", " ", "original", " ", "and", " ", "the", " ", "present", 
         " ", "ones"}]}], " ", "*)"}], "\n", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"distfitf", "[", 
         RowBox[{"cumdistr", ",", "20"}], "]"}], ";", " ", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"sets", " ", "alpha"}], ",", " ", 
          RowBox[{
          "cd", " ", "of", " ", "the", " ", "new", " ", "distribution"}]}], 
         " ", "*)"}], "\n", 
        RowBox[{"alpha1", "=", "alphax"}], ";"}], "*)"}], "\n", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"cd1", "=", "cdx"}], ";", "\n", 
        RowBox[{"cd", "=", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"cd0", "+", "cd1"}], ")"}], "/", "2"}]}], ";", "\n", 
        RowBox[{"alpha", "=", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"alpha0", "+", "alpha1"}], ")"}], "/", "2"}]}], ";"}], 
       "*)"}], "\n", 
      RowBox[{"cd", "=", "cd0"}], ";", "\n", 
      RowBox[{"alpha", "=", "alpha0"}], ";", "\n", 
      RowBox[{"Do", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"d1vals", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"bindias", "[", 
             RowBox[{"[", "i", "]"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "20"}], "}"}]}], "]"}]}], ";", "\n", 
         RowBox[{"dlargestvals", "=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"probi", " ", "cd", " ", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"d1vals", "/", "2"}], ")"}], "^", "2"}], " ", "tmax"}],
             ")"}], "^", 
           RowBox[{"(", 
            RowBox[{"1", "/", "alpha"}], ")"}]}]}], ";", "\n", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{
            "but", " ", "the", " ", "population", " ", "changes", " ", "in", 
             " ", "time"}], ".."}], "but", " ", "not", " ", "much", " ", "at",
            " ", "top", " ", 
           RowBox[{"end", "!"}]}], " ", "*)"}], "\n", 
         RowBox[{"numbers", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"diffdistr0", "[", 
             RowBox[{"[", 
              RowBox[{"i", ",", "2"}], "]"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "20"}], "}"}]}], "]"}]}], ";", "\n", " ", 
         RowBox[{"p1vals", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"Min", "[", 
             RowBox[{".5", ",", 
              RowBox[{
               RowBox[{"nwanted", "[", 
                RowBox[{"[", "j", "]"}], "]"}], "/", 
               RowBox[{"numbers", "[", 
                RowBox[{"[", "i", "]"}], "]"}]}]}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "20"}], "}"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"betavals", "=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"-", 
             RowBox[{"Log", "[", 
              RowBox[{"1", "-", "p1vals"}], "]"}]}], ")"}], "^", 
           RowBox[{"-", 
            RowBox[{"(", 
             RowBox[{"1", "/", "alpha0"}], ")"}]}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Do", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"calccrater", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"dlargestvals", "[", 
                RowBox[{"[", "i", "]"}], "]"}], " ", 
               RowBox[{"betavals", "[", 
                RowBox[{"[", "i", "]"}], "]"}]}], ",", 
              RowBox[{"bindias", "[", 
               RowBox[{"[", "i", "]"}], "]"}], ",", 
              RowBox[{"vel", " ", 
               RowBox[{"Cos", "[", 
                RowBox[{"45", "Degree"}], "]"}]}], ",", "3"}], "]"}], " ", 
            ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"ratio", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "=", 
             RowBox[{"dforlarge", "/", 
              RowBox[{"(", 
               RowBox[{"bindias", "[", 
                RowBox[{"[", "i", "]"}], "]"}], ")"}]}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"plotpts13", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "=", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"p1vals", "[", 
                 RowBox[{"[", 
                  RowBox[{"i", "+", "1"}], "]"}], "]"}], "<", ".5"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"bindias", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], ",", 
                 RowBox[{"ratio", "[", 
                  RowBox[{"[", "i", "]"}], "]"}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"bindias", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], ",", "0"}], "}"}]}], 
              "]"}]}]}], "\[IndentingNewLine]", ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "19"}], "}"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"plots", "[", 
           RowBox[{"[", "j", "]"}], "]"}], "=", 
          RowBox[{"ListLogLogPlot", "[", 
           RowBox[{"plotpts13", ",", 
            RowBox[{"PlotStyle", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"Dashed", ",", "Red"}], "}"}]}], ",", 
            RowBox[{"Joined", "\[Rule]", "True"}], ",", 
            RowBox[{"PlotMarkers", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"Automatic", ",", "7"}], "}"}]}], ",", "\n", 
            RowBox[{"PlotRange", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{".1", ",", "2"}], "}"}]}]}], "]"}]}], ";"}], 
        "\[IndentingNewLine]", ",", 
        RowBox[{"{", 
         RowBox[{"j", ",", 
          RowBox[{"Length", "[", "nwanted", "]"}]}], "}"}]}], "]"}], ";", 
      "\n", 
      RowBox[{"plotforbiggies", "=", 
       RowBox[{"Show", "[", "plots", "]"}]}], ";"}], ")"}]}], 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"-", "end"}]}]}], " ", "of", " ", "maxcraterinbinsf", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"function", " ", "--"}], "--"}], "--"}], "--"}], 
                    "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
             "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}]}], "-"}], 
    "*)"}], "\n", "\n", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"-", "find"}]}]}]}]}]}], " ", "mean", " ", "in", " ", "a", 
     " ", "box", " ", "around", " ", "diameter", " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"d", "--"}], "--"}], "--"}], "--"}], "--"}], "--"}],
              "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
      "--"}]}], "  ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"meaninrangef", "[", 
     RowBox[{"list_", ",", "d_"}], "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{"Mean", "[", 
      RowBox[{
       RowBox[{"Select", "[", 
        RowBox[{"list", ",", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"1", "/", "1.1"}], " ", "d"}], "<", 
           RowBox[{"#", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "<", 
           RowBox[{"1.1", " ", "d"}]}], "&"}]}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}], ")"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", "end"}]}]}]}]}]}]}]}]}]}], " ", "of", " ", 
     "meaninrangef", " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"function", "--"}], "--"}], "--"}], "--"}], "--"}], 
              "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
      "--"}]}], "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", "a"}]}]}], " ", "function", " ", "to", " ", "get", " ", 
      "the", " ", "diameter", " ", "for", " ", "any", " ", "number", " ", 
      "in", " ", "the", " ", 
      RowBox[{
       RowBox[{"distribution", " ", "--"}], "--"}]}], "-"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"nfun", "[", "dd_", "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Interpolation", "[", "cumdistr", "]"}], "[", "dd", "]"}], 
     ")"}]}], 
   RowBox[{"(*", " ", 
    RowBox[{
    "creates", " ", "a", " ", "interpolation", " ", "function", " ", "to", "  ",
      "to", " ", "get", " ", "the", " ", "number", " ", "for", " ", "any", 
     " ", "diameter", " ", 
     RowBox[{"dastnum", "[", "]"}], " ", "uses", " ", "it"}], "*)"}], 
   "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"-", "find"}]}]}]}]}]}]}]}]}]}], " ", "n", " ", "from", 
     " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"diameter", "--"}], "--"}], "--"}], "--"}], 
                   "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
            "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"nnfrags", "[", "dia_", "]"}], ":=", "\n", 
    RowBox[{"(*", 
     RowBox[{"(", 
      RowBox[{"1", "/", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"1", "/", 
          RowBox[{"(", 
           RowBox[{"3", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"dia", "/", "diaf3"}], ")"}], "^", 
             RowBox[{"-", 
              RowBox[{"(", 
               RowBox[{"15", "/", "4"}], ")"}]}]}]}], ")"}]}], "+", 
         RowBox[{"1", "/", 
          RowBox[{"(", 
           RowBox[{"kk", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"dia", "/", "diaf3"}], ")"}], "^", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", "3"}], " ", "alp2"}], ")"}]}]}], ")"}]}]}], 
        ")"}]}]}], "*)"}], "\n", 
    RowBox[{"(", 
     RowBox[{"Round", "[", 
      RowBox[{"(", 
       RowBox[{"Min", "[", 
        RowBox[{
         RowBox[{"3", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"dia", "/", "diaf3"}], ")"}], "^", 
           RowBox[{"-", 
            RowBox[{"(", 
             RowBox[{"15", "/", "4"}], ")"}]}]}]}], ",", 
         RowBox[{"kk", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"dia", "/", "diaf3"}], ")"}], "^", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"-", "3"}], " ", "alp2"}], ")"}]}]}]}], "]"}], " ", 
       ")"}], "]"}], ")"}]}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"-", "End"}]}]}]}]}]}]}]}]}], " ", "of", " ", "nnfrags",
       " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"function", "--"}], "--"}], "--"}], "--"}], 
                   "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
            "--"}], "--"}], "--"}], "--"}], "--"}], "--"}]}], "-"}], "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", 
               RowBox[{"--", 
                RowBox[{"--", 
                 RowBox[{"--", 
                  RowBox[{"-", "multiptf"}]}]}]}]}]}]}]}]}], " ", 
          "function"}], "-", " ", 
         RowBox[{
         "piecewise", " ", "linearfunction", " ", "in", " ", "log", " ", 
          "space"}], "-", 
         RowBox[{"now", " ", "not", " ", "used"}]}], "..."}], "--"}], "--"}], 
     "--"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"multiptf", "[", 
     RowBox[{"x_", ",", "list_"}], "]"}], ":=", "\[IndentingNewLine]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"nl", "=", 
       RowBox[{"Length", "[", "list", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"seg", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"nl", "-", "1"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"xvals", "=", 
       RowBox[{"list", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"yvals", "=", 
       RowBox[{"list", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "2"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{"{", 
          RowBox[{"xvals", ",", "yvals"}], "}"}], "]"}], ";"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"x1", ",", "x2", ",", "y1", ",", "y2"}], "}"}], "=", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"xvals", "[", 
             RowBox[{"[", "ii", "]"}], "]"}], ",", 
            RowBox[{"xvals", "[", 
             RowBox[{"[", 
              RowBox[{"ii", "+", "1"}], "]"}], "]"}], ",", 
            RowBox[{"yvals", "[", 
             RowBox[{"[", "ii", "]"}], "]"}], ",", 
            RowBox[{"yvals", "[", 
             RowBox[{"[", 
              RowBox[{"ii", "+", "1"}], "]"}], "]"}]}], "}"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"exp", "=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Log", "[", 
             RowBox[{"y2", "/", "y1"}], "]"}], ")"}], "/", 
           RowBox[{"Log", "[", 
            RowBox[{"x2", "/", "x1"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
         
         RowBox[{
          RowBox[{"seg", "[", 
           RowBox[{"[", "ii", "]"}], "]"}], "=", 
          RowBox[{"y1", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"x", "/", "x1"}], ")"}], "^", "exp"}]}]}], ";"}], 
        "\[IndentingNewLine]", ",", 
        RowBox[{"{", 
         RowBox[{"ii", ",", 
          RowBox[{"nl", "-", "1"}]}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"function", "=", 
       RowBox[{"Piecewise", "[", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"seg", "[", 
             RowBox[{"[", "ii", "]"}], "]"}], ",", 
            RowBox[{
             RowBox[{"xvals", "[", 
              RowBox[{"[", "ii", "]"}], "]"}], "<", "x", "<", 
             RowBox[{"xvals", "[", 
              RowBox[{"[", 
               RowBox[{"ii", "+", "1"}], "]"}], "]"}]}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"ii", ",", 
            RowBox[{"nl", "-", "1"}]}], "}"}]}], "]"}], "]"}]}]}], ")"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"-", "End"}]}]}]}]}]}]}]}]}], " ", "of", " ", 
      "multiptf", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"function", "--"}], "--"}], "--"}], "--"}], 
                   "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
            "--"}], "--"}], "--"}], "--"}], "--"}], "--"}]}], "-"}], "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", "The"}]}]}]}]}]}], " ", "drain", " ", "effect", " ", 
     "on", " ", "spin", " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"increment", "--"}], "--"}], "--"}], "--"}], 
                "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
         "--"}], "--"}], "--"}], "--"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"omegdrainf", "[", "]"}], ":=", " ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
      "I", " ", "assume", " ", "the", " ", "following", " ", "are", " ", 
       "set", " ", "before", " ", "this", " ", 
       RowBox[{"call", " ", ":", " ", "dens"}]}], ",", "densi", ",", "omegs", 
      ",", "diameter", ",", " ", "mass", ",", "piv", ",", "r", ",", "mu", ",",
       "omeg", ",", "  ", ",", "k2s", ",", 
      RowBox[{
       RowBox[{
        RowBox[{
        "k2g", "\[IndentingNewLine]", "this", " ", "is", " ", "the", " ", 
         "D"}], "&"}], "B", " ", "formulation", " ", "for", " ", "a", " ", 
       "single", " ", "hit"}]}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Y", "=", 
       RowBox[{"Y0", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"d0strength", "/", 
           RowBox[{"(", 
            RowBox[{"2", "r"}], ")"}]}], ")"}], "^", 
         RowBox[{"(", 
          RowBox[{"1", "/", "nsize"}], ")"}]}]}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"rc", "=", 
       RowBox[{"vstar", "/", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Sqrt", "[", "2", "]"}], "omegs"}], ")"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"massc", "=", 
       RowBox[{"piv", " ", "mass"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"masseject", "=", 
       RowBox[{"0.6", " ", "massc"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"ra", "=", 
       RowBox[{"rc", " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"masseject", "/", "mass"}], ")"}], "^", 
         RowBox[{"(", 
          RowBox[{"1", "/", 
           RowBox[{"(", 
            RowBox[{"3", " ", "mu"}], ")"}]}], ")"}]}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"delomegdrain", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "5"}], "/", "12"}], " ", "3", " ", "mu", " ", "omeg", 
        RowBox[{"(", 
         RowBox[{"mass", "/", "Mkg"}], ")"}], 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"r", "/", "ra"}], ")"}], "^", 
         RowBox[{"-", 
          RowBox[{"(", 
           RowBox[{"3", "mu"}], ")"}]}]}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"drain", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"r", ">", "rc"}], ",", "delomegdrain", ",", "0"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{"{", 
          RowBox[{"vstar", ",", "r", ",", "rc", ",", "ra", ",", "drain"}], 
          "}"}], "]"}], ";"}], "*)"}], "\[IndentingNewLine]", "drain"}], 
     "\[IndentingNewLine]", ")"}]}], "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", "end"}]}]}]}]}]}], " ", "of", " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"omegdrainf", "--"}], "--"}], "--"}], "--"}], 
                    "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
                  "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
           "--"}], "--"}], "--"}], "--"}], "--"}], "--"}]}], "*)"}], "\n", 
   "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{
    "Primary", " ", "Function", " ", "for", " ", "calculating", " ", "Yorp"}],
     "*)"}], "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Yorp", "[", "]"}], ":=", 
    RowBox[{"(", "\n", "\n", 
     RowBox[{
      RowBox[{
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{"impacttime", ">", 
          RowBox[{"time0", "+", "10"}]}], ",", " ", "\n", 
         RowBox[{
          RowBox[{
          "SetDirectory", "[", 
           "\"\</Users/kumargaurav/Documents/OrbFit/tests/gaurav\>\"", "]"}], 
          ";", "\n", 
          RowBox[{"RunProcess", "[", "\"\<make\>\"", "]"}], ";", "\n", 
          RowBox[{"yark", "=", 
           RowBox[{"Import", "[", 
            RowBox[{
            "\"\</Users/kumargaurav/Documents/OrbFit/tests/gaurav/yarkovsky.\
in\>\"", ",", "\"\<Table\>\""}], "]"}]}], ";", "\n", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FailureQ", "[", "yark", "]"}], ",", 
            RowBox[{
             RowBox[{
             "Print", "[", 
              "\"\<Failed in importing the data from yarkovsky.in\>\"", "]"}],
              ";", " ", 
             RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\n", 
          RowBox[{
           RowBox[{"yark", "[", 
            RowBox[{"[", 
             RowBox[{"1", ",", "7"}], "]"}], "]"}], "=", 
           RowBox[{"2", "*", " ", 
            RowBox[{"Pi", "/", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"omeg", "[", 
                RowBox[{"[", "3", "]"}], "]"}], "*", "3600"}], ")"}]}]}]}], 
          ";", "\n", 
          RowBox[{
           RowBox[{"yark", "[", 
            RowBox[{"[", 
             RowBox[{"1", ",", "6"}], "]"}], "]"}], "=", "obliq"}], ";", "\n", 
          RowBox[{"resultExport", "=", 
           RowBox[{"Export", "[", 
            RowBox[{
            "\"\</Users/kumargaurav/Documents/OrbFit/tests/gaurav/yarkovsky.\
in\>\"", ",", "yark", ",", "\"\<Table\>\"", ",", 
             RowBox[{"\"\<FieldSeparators\>\"", "->", "\"\<    \>\""}]}], 
            "]"}]}], ";", "\n", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FailureQ", "[", "resultExport", "]"}], ",", 
            RowBox[{
             RowBox[{
             "Print", "[", "\"\<Failed in exporting the yarkovsky.in\>\"", 
              "]"}], ";", " ", 
             RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\n", 
          RowBox[{"exitcode", "=", 
           RowBox[{"RunProcess", "[", 
            RowBox[{"\"\<./orbit9.x\>\"", ",", "\"\<ExitCode\>\""}], "]"}]}], 
          ";", "\n", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FailureQ", "[", "exitcode", "]"}], ",", 
            RowBox[{
             RowBox[{"Print", "[", "\"\<Failed in running orbit9\>\"", "]"}], 
             ";", " ", 
             RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\n", 
          RowBox[{"omegOrb", "=", 
           RowBox[{"Import", "[", 
            RowBox[{
            "\"\</Users/kumargaurav/Documents/OrbFit/tests/gaurav/clo0.yorp\>\
\"", ",", "\"\<Table\>\""}], "]"}]}], ";", "\n", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FailureQ", "[", "omegOrb", "]"}], ",", 
            RowBox[{
             RowBox[{
             "Print", "[", "\"\<Failed in importing the data from orbit9\>\"",
               "]"}], ";", " ", 
             RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\n", 
          RowBox[{
           RowBox[{"omeg", "[", 
            RowBox[{"[", "3", "]"}], "]"}], "=", 
           RowBox[{"2", "*", 
            RowBox[{"Pi", "/", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"omegOrb", "[", 
                RowBox[{"[", 
                 RowBox[{
                  RowBox[{"Min", "[", 
                   RowBox[{
                    RowBox[{"Round", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"impacttime", "-", "time0"}], ")"}], "/", "100"}],
                     "]"}], ",", "1000"}], "]"}], ",", "2"}], "]"}], "]"}], 
               "*", "3600"}], ")"}]}]}]}], ";", "\n", 
          RowBox[{"obliq", "=", " ", 
           RowBox[{"omegOrb", "[", 
            RowBox[{"[", 
             RowBox[{
              RowBox[{"Min", "[", 
               RowBox[{
                RowBox[{"Round", "[", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"impacttime", "-", "time0"}], ")"}], "/", "100"}], 
                 "]"}], ",", "1000"}], "]"}], ",", "3"}], "]"}], "]"}]}], ";",
           " ", "\n", 
          RowBox[{
          "SetDirectory", "[", 
           "\"\</Users/kumargaurav/Documents/Asteroids\>\"", "]"}], ";", "\n", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"omeg", "[", 
              RowBox[{"[", "3", "]"}], "]"}], ">", 
             RowBox[{"0.90", "*", "omegaLimit"}]}], ",", 
            RowBox[{
             RowBox[{
             "Print", "[", "\"\<Too fast spinning causing landslides\>\"", 
              "]"}], ";", " ", 
             RowBox[{"Landslides", "[", "]"}], ";"}]}], "]"}], ";", " ", "\n", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"omeg", "[", 
              RowBox[{"[", "3", "]"}], "]"}], "]"}], ";"}], "*)"}], "\n", 
          RowBox[{"time0", "=", 
           RowBox[{"time0", "+", 
            RowBox[{"10", "^", "5"}]}]}], ";", "\n", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"impacttime", "<", "time0"}], ",", 
            RowBox[{"time0", "=", "impacttime"}]}], "]"}], ";", "\n", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"myomega", ",", 
            RowBox[{"{", 
             RowBox[{"time0", ",", 
              RowBox[{"omeg", "[", 
               RowBox[{"[", "3", "]"}], "]"}]}], "}"}]}], "]"}], ";"}]}], 
        "]"}], "\n", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<Omega after the yorp effect\>\"", ",", " ", 
         RowBox[{"omeg", "[", 
          RowBox[{"[", "3", "]"}], "]"}]}], "]"}]}], ";"}], "\n", ")"}]}], 
   "\n", "\n", "\n", "\n", "\n", "\n", 
   StyleBox[
    RowBox[{"(*", " ", 
     RowBox[{
     "Primary", " ", "Function", " ", "for", " ", "calculating", " ", 
      "landslides"}], " ", "*)"}],
    FontSize->16], "\n", "\n", 
   RowBox[{
    RowBox[{"Landslides", "[", "]"}], ":=", " ", 
    RowBox[{"(", "\n", "\n", 
     RowBox[{
      RowBox[{"d", "=", 
       RowBox[{"d", "/", 
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{
           RowBox[{
            RowBox[{"parameters", "[", 
             RowBox[{"[", 
              RowBox[{
               RowBox[{"Position", "[", 
                RowBox[{"parameters", ",", "\"\<uni_h\>\""}], "]"}], "[", 
               RowBox[{"[", 
                RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "]"}], "[", 
            RowBox[{"[", "2", "]"}], "]"}], "*", "epsilon"}]}], ")"}]}]}], 
      ";", "\n", 
      RowBox[{
       RowBox[{
        RowBox[{"parameters", "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{"Position", "[", 
            RowBox[{"parameters", ",", "\"\<omega\>\""}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}], "=", 
       RowBox[{
        RowBox[{"omeg", "[", 
         RowBox[{"[", "3", "]"}], "]"}], "/", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"G", "*", 
           RowBox[{"4", "/", "3"}], "*", " ", "Pi", "*", 
           RowBox[{"dens", "/", 
            RowBox[{"10", "^", "9"}]}]}], ")"}], "^", "0.5"}]}]}], ";", "\n", 
      
      RowBox[{
       RowBox[{
        RowBox[{"parameters", "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{"Position", "[", 
            RowBox[{"parameters", ",", "\"\<slides\>\""}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}], "=", 
       RowBox[{"IntegerPart", "[", "slides", "]"}]}], ";", "\n", 
      RowBox[{
       RowBox[{
        RowBox[{"parameters", "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{"Position", "[", 
            RowBox[{"parameters", ",", "\"\<dia\>\""}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}], "=", "d"}], ";", "\n", 
      RowBox[{"resultExport", "=", 
       RowBox[{"Export", "[", 
        RowBox[{
        "\"\<~/Documents/Asteroids/parameters\>\"", ",", "parameters", ",", 
         "\"\<Table\>\"", ",", 
         RowBox[{"\"\<FieldSeparators\>\"", "->", "\"\<    \>\""}]}], "]"}]}],
       ";", "\n", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"FailureQ", "[", "resultExport", "]"}], ",", 
        RowBox[{
         RowBox[{"Print", "[", "\"\<Failed in exporting the data\>\"", "]"}], 
         ";", " ", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\n", "\n", 
      RowBox[{"exitcode", "=", 
       RowBox[{"RunProcess", "[", 
        RowBox[{"\"\<./gaurav\>\"", ",", "\"\<ExitCode\>\""}], "]"}]}], ";", 
      "\n", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"IntegerPart", "[", "exitcode", "]"}], "!=", "0"}], ",", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<Aborting due to error in running the executable gaurav\>\"", 
          "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}], ",", 
        RowBox[{"Print", "[", 
         RowBox[{"\"\< Ran successfully slide \>\"", ",", "slides"}], "]"}]}],
        "]"}], ";", "\n", "\n", 
      RowBox[{"pythonResult", "=", 
       RowBox[{"ExternalEvaluate", "[", 
        RowBox[{"\"\<Python\>\"", ",", 
         RowBox[{"File", "[", "\"\<fit.py\>\"", "]"}]}], "]"}]}], ";", "\n", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"FailureQ", "[", "pythonResult", "]"}], ",", 
        RowBox[{
         RowBox[{"Print", "[", "\"\<Failed in python\>\"", "]"}], ";", " ", 
         RowBox[{"Abort", "[", "]"}]}], ",", 
        RowBox[{"Print", "[", "\"\<successfully fit the circle\>\"", "]"}]}], 
       "]"}], ";", "\n", "\n", 
      RowBox[{"slides", "=", 
       RowBox[{"slides", "+", "1"}]}], ";", "\n", 
      RowBox[{"parameters", "=", 
       RowBox[{
       "Import", "[", 
        "\"\</Users/kumargaurav/Documents/Asteroids/parameters\>\"", "]"}]}], 
      ";", "\n", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"FailureQ", "[", "parameters", "]"}], ",", 
        RowBox[{
         RowBox[{"Print", "[", "\"\<Failed in importing the data\>\"", "]"}], 
         ";", " ", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\n", "\n", 
      RowBox[{
       RowBox[{"omeg", "[", 
        RowBox[{"[", "3", "]"}], "]"}], "=", 
       RowBox[{
        RowBox[{
         RowBox[{"parameters", "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{"Position", "[", 
             RowBox[{"parameters", ",", "\"\<omega\>\""}], "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "]"}], "[", 
         RowBox[{"[", "2", "]"}], "]"}], "*", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"G", "*", 
           RowBox[{"4", "/", "3"}], "*", " ", "Pi", "*", 
           RowBox[{"dens", "/", 
            RowBox[{"10", "^", "9"}]}]}], ")"}], "^", "0.5"}]}]}], ";", "\n", 
      
      RowBox[{"d", "=", 
       RowBox[{"d", "*", 
        RowBox[{
         RowBox[{"parameters", "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{"Position", "[", 
             RowBox[{"parameters", ",", "\"\<radius\>\""}], "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "]"}], "[", 
         RowBox[{"[", "2", "]"}], "]"}]}]}], ";", "\n", "\n", 
      RowBox[{"Print", "[", "d", "]"}], ";", "\n", 
      RowBox[{"r", "=", 
       RowBox[{"d", "/", "2"}]}], ";", "\n", 
      RowBox[{
       RowBox[{"jinertia", "[", 
        RowBox[{"[", "3", "]"}], "]"}], "=", 
       RowBox[{
        RowBox[{
         RowBox[{"parameters", "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{"Position", "[", 
             RowBox[{"parameters", ",", "\"\<jinertia\>\""}], "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "]"}], "[", 
         RowBox[{"[", "2", "]"}], "]"}], "*", 
        RowBox[{"r", "^", "5"}], "*", "dens"}]}], ";", "\n", 
      RowBox[{
       RowBox[{"jinertia", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "=", 
       RowBox[{
        RowBox[{"jinertia", "[", 
         RowBox[{"[", "2", "]"}], "]"}], "=", 
        RowBox[{
         RowBox[{
          RowBox[{"parameters", "[", 
           RowBox[{"[", 
            RowBox[{
             RowBox[{"Position", "[", 
              RowBox[{"parameters", ",", "\"\<jinertia1\>\""}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "]"}], "[", 
          RowBox[{"[", "2", "]"}], "]"}], "*", 
         RowBox[{"r", "^", "5"}], "*", "dens"}]}]}], ";", " ", "\n", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"myomega", ",", 
        RowBox[{"{", 
         RowBox[{"time0", ",", 
          RowBox[{"omeg", "[", 
           RowBox[{"[", "3", "]"}], "]"}]}], "}"}]}], "]"}], ";"}], "\n", 
     ")"}]}], "\n", "\n", 
   RowBox[{"(*", 
    RowBox[{"--", 
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", 
               RowBox[{"--", 
                RowBox[{"--", 
                 RowBox[{"--", 
                  RowBox[{"--", 
                   RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{
                    "--", "--"}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]\
}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]\
}], "*)"}], "\n", "\n", 
   StyleBox[
    RowBox[{"(*", 
     RowBox[{
      RowBox[{
       RowBox[{"--", "the"}], " ", "primary", " ", "calculation", " ", "of", 
       " ", "the", " ", "outcome", " ", "of", " ", "a", " ", "single", " ", 
       "impactor", " ", "hitting", " ", "a", " ", "given", " ", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"target", "--"}], "--"}], "--"}], "--"}], "--"}], 
                    "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
                    "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
                    "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
             "--"}], "--"}], "--"}], "--"}], "--"}], "--"}]}], "-"}], "*)"}],
    Background->GrayLevel[0]], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "there", " ", "are", " ", "both", " ", "mass", " ", "losses", " ", "and",
       " ", "increments", " ", "of", " ", 
      RowBox[{"spin", ".", "  ", "If"}], " ", "I", " ", "call", " ", 
      "caclomeg", " ", "first"}], ",", " ", 
     RowBox[{
     "then", " ", "the", " ", "spin", " ", "increment", " ", "uses", " ", 
      "the", " ", "original", " ", "angular", " ", "inertia"}], ",", " ", 
     RowBox[{
     "but", " ", "if", " ", "I", " ", "get", " ", "the", " ", "erosion", " ", 
      "first"}], ",", " ", 
     RowBox[{
     "then", " ", "the", " ", "spin", " ", "increment", " ", "uses", " ", 
      "the", " ", "new", " ", 
      RowBox[{"inertia", ".", "  ", "I"}], " ", "call", " ", "calcomeg", " ", 
      "first"}]}], " ", "*)"}], "\[IndentingNewLine]", "\n", "\n", 
   RowBox[{
    RowBox[{"outcomesf", "[", "]"}], ":=", 
    RowBox[{"(", "\n", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "this", " ", "is", " ", "the", " ", "guts", " ", "of", " ", "the", " ",
         "calculation"}], ",", " ", 
       RowBox[{
       "and", " ", "does", " ", "the", " ", "explicit", " ", "and", " ", 
        "implict", " ", "impacts"}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"it", " ", "calculates", " ", "new", " ", "d"}], ",", " ", 
       RowBox[{
       "omega", " ", "which", " ", "are", " ", "loaded", " ", "into", " ", 
        "dlist", " ", "and", " ", "omegvals", " ", "after", " ", "return"}]}],
       " ", "*)"}], "\n", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"deltadratio", "=", "0"}], ";", "\[IndentingNewLine]", 
      RowBox[{"delomega", "=", "0"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Which", "[", "\[IndentingNewLine]", 
       RowBox[{
        StyleBox[
         RowBox[{"qratio", ">", "pulvlim"}],
         FontColor->RGBColor[1, 0, 0]], ",", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"broken", " ", "all", " ", "to", " ", "hell"}], ",", " ", 
          RowBox[{"cannot", " ", "track", " ", "fragments"}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"(", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{"\"\<in pulv part,qratio= \>\"", ",", "qratio"}], "]"}], 
           ";"}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{"update", ",", 
            RowBox[{"addtopopchange", "[", 
             RowBox[{"binnumt", ",", "binnumt0"}], "]"}]}], "]"}], ";", " ", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"target", " ", "kaput"}], ",", " ", 
            RowBox[{
            "put", " ", "one", " ", "exemplar", " ", "target", " ", "times", 
             " ", "a", " ", "factor", " ", "in", " ", "popchange"}]}], " ", 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"pulvevent", ",", 
            RowBox[{"{", 
             RowBox[{"iast", ",", "d", ",", 
              RowBox[{
               RowBox[{"Sign", "[", 
                RowBox[{"omeg", "[", 
                 RowBox[{"[", "3", "]"}], "]"}], "]"}], " ", 
               RowBox[{"Norm", "[", "omeg", "]"}]}], ",", "impacttime"}], 
             "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<adding to pulvevent \>\"", ",", 
              RowBox[{"{", 
               RowBox[{
               "qratio", ",", "pulvlim", ",", "iast", ",", "d", ",", 
                "impacttime"}], "}"}]}], "]"}], ";"}], "*)"}], 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"cross", " ", "over", " ", "half", " ", "mass"}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"tsince", "=", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"MemberQ", "[", 
                RowBox[{
                 RowBox[{"halfmevent", "[", 
                  RowBox[{"[", 
                   RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", "iast"}], 
                "]"}], ",", 
               RowBox[{"impacttime", "-", 
                RowBox[{"halfmevent", "[", 
                 RowBox[{"[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"halfmevent", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", "iast"}], 
                    "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", "3"}], "]"}], 
                 "]"}]}], ",", "impacttime"}], "]"}]}], ";", "  ", 
            RowBox[{"wrong", "??"}]}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"!", 
             RowBox[{"MemberQ", "[", 
              RowBox[{
               RowBox[{"halfmevent", "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", "iast"}], 
              "]"}]}], ",", 
            RowBox[{"AppendTo", "[", 
             RowBox[{"halfmevent", ",", 
              RowBox[{"{", 
               RowBox[{"iast", ",", "dlast", ",", "impacttime"}], "}"}]}], 
             "]"}]}], "]"}], ";", " ", 
          RowBox[{"(*", " ", 
           RowBox[{
           "now", " ", "half", " ", "mass", " ", "includes", " ", "pulvevent",
             " ", "that", " ", "are", " ", "not", " ", "already"}], " ", 
           "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"plothis", ">", "0"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"AppendTo", "[", 
              RowBox[{"pulvplotpts", ",", 
               RowBox[{"{", 
                RowBox[{"impacttime", ",", 
                 RowBox[{
                  RowBox[{"Sign", "[", 
                   RowBox[{"omeg", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "]"}], " ", 
                  RowBox[{"Norm", "[", "omeg", "]"}]}], ",", "d", ",", "d0"}],
                 "}"}]}], "]"}], ";"}]}], " ", 
           RowBox[{"(*", " ", 
            RowBox[{"d", " ", "at", " ", "time", " ", "of", " ", "pulv"}], 
            " ", "*)"}], "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{"AppendTo", "[", 
             RowBox[{
              RowBox[{"histplotpts", "[", 
               RowBox[{"[", "plothis", "]"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"impacttime", ",", 
                RowBox[{
                 RowBox[{"Sign", "[", 
                  RowBox[{"omeg", "[", 
                   RowBox[{"[", "3", "]"}], "]"}], "]"}], " ", 
                 RowBox[{"Norm", "[", "omeg", "]"}]}], ",", "0", ",", "d0"}], 
               "}"}]}], "]"}], "*)"}], "]"}], ";", " ", 
          RowBox[{"(*", " ", 
           RowBox[{"d", " ", "at", " ", "time", " ", "of", " ", "pulv"}], " ",
            "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"d", "=", "0"}], ";", " ", 
          RowBox[{"(*", " ", 
           RowBox[{"new", " ", "d"}], " ", "*)"}], "\n", "\t", 
          RowBox[{
           RowBox[{"dlist", "[", 
            RowBox[{"[", "iast", "]"}], "]"}], "=", "0"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"gone", ",", " ", 
            RowBox[{
            "so", " ", "take", " ", "off", " ", "binary", " ", "and", " ", 
             "tumbler", " ", "list", " ", "whether", " ", "or", " ", "not", 
             " ", "it", " ", "is", " ", "replaced", "\"\<\>"}]}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"binaries", "=", 
           RowBox[{"Complement", "[", 
            RowBox[{"binaries", ",", 
             RowBox[{"Select", "[", 
              RowBox[{"binaries", ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"#", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", "iast"}], " ", 
                "&"}]}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"omeg", "=", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"10", "^", 
              RowBox[{"-", "9"}]}]}], "}"}]}], ";", " ", 
          RowBox[{"(*", " ", 
           RowBox[{"for", " ", "plotting"}], " ", "*)"}], 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"bornagain", ",", "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
             "need", " ", "to", " ", "reset", " ", "diameter", " ", "to", " ",
               "the", " ", "original", "  ", "and", " ", "take", " ", "off", 
              " ", "binary", " ", "and", " ", "tumble", " ", "list", " ", 
              "and", " ", "redo", " ", "u"}], "*)"}], " ", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{"Print", "[", 
               RowBox[{"\"\<pulved, jinertia= \>\"", ",", "jinertia"}], "]"}],
               ";"}], "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"d", "=", "d0"}], ";", " ", "\[IndentingNewLine]", 
             RowBox[{"Mkg", "=", 
              RowBox[{
               RowBox[{"Pi", "/", "6"}], " ", "dens", " ", 
               RowBox[{"d", "^", "3"}]}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"jinertia", "=", 
              RowBox[{
               RowBox[{"Mkg", "/", "5"}], 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"d", "/", "2"}], ")"}], "^", "2"}], 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"ashape", " ", "beta"}], ")"}], "^", 
                RowBox[{"-", 
                 RowBox[{"(", 
                  RowBox[{"2", "/", "3"}], ")"}]}]}], 
               RowBox[{"{", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{"ashape", "^", "2"}], "+", 
                  RowBox[{"beta", "^", "2"}]}], ",", 
                 RowBox[{"1", "+", 
                  RowBox[{"ashape", "^", "2"}]}], ",", 
                 RowBox[{"1", "+", 
                  RowBox[{"beta", "^", "2"}]}]}], "  ", "}"}]}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<qratio>pulv,jinertia= \>\"", ",", "jinertia"}], 
                "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"omeg", "=", 
              RowBox[{"resetomegf", "[", "d", "]"}]}]}]}], "]"}]}], ")"}], 
        ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "end", " ", "of", " ", "pulverized", " ", "and", " ", "maybe", " ", 
          "reborn"}], " ", "*)"}], "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        StyleBox[
         RowBox[{"qratio", "<", "0.5"}],
         FontColor->RGBColor[1, 0, 0]], 
        StyleBox[",",
         FontColor->RGBColor[1, 0, 0]], 
        StyleBox[
         RowBox[{"(*", " ", 
          RowBox[{"cratering", ",", " ", 
           RowBox[{
           "accounts", " ", "for", " ", "escaping", " ", "only", " ", "using",
             " ", "vstar"}], ",", "vesc"}], " ", "*)"}],
         FontColor->RGBColor[1, 0, 0]], 
        StyleBox["\[IndentingNewLine]",
         FontColor->RGBColor[1, 0, 0]], 
        StyleBox[
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
           "uses", " ", "escape", " ", "mass", " ", "from", " ", "cratering", 
            " ", "only"}], ",", " ", 
           RowBox[{
           "but", " ", "really", " ", "these", " ", "are", " ", 
            "ignorable"}]}], " ", "*)"}], "Input"], 
        StyleBox["\[IndentingNewLine]", "Input"], 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{"craters", ",", "\[IndentingNewLine]", 
            RowBox[{"calccrater", "[", 
             RowBox[{"diameter", ",", "d", ",", 
              RowBox[{"vel", " ", 
               RowBox[{"Cos", "[", "phival", "]"}]}], " ", ",", "2"}], 
             "]"}]}], 
           RowBox[{"(*", " ", 
            RowBox[{"uses", " ", "old", " ", "d"}], " ", "*)"}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"erosion", ",", "\[IndentingNewLine]", 
            StyleBox[
             RowBox[{"(*", " ", 
              RowBox[{
               RowBox[{
               "i", " ", "assume", " ", "fragments", " ", "too", " ", "small",
                 " ", "to", " ", "track"}], ",", " ", 
               RowBox[{
               "but", " ", "they", " ", "could", " ", "be", " ", "added", " ",
                 "to", " ", "fragments"}]}], " ", "*)"}], "Input"], 
            StyleBox["\[IndentingNewLine]", "Input"], 
            StyleBox["\t\t", "Input"], 
            StyleBox[
             RowBox[{"(*", 
              RowBox[{
               RowBox[{"deltadratio", "=", 
                RowBox[{"1", "-", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"massc", "[", "]"}], "/", "Mkg"}]}], ")"}], "^", 
                   ".333"}], ")"}]}]}], ";"}], "*)"}], "Input"], 
            StyleBox["\[IndentingNewLine]", "Input"], 
            StyleBox[
             RowBox[{"(*", " ", 
              RowBox[{
               RowBox[{
               "i", " ", "now", " ", "account", " ", "for", " ", "the", " ", 
                "impactor", " ", "mass"}], ",", " ", 
               RowBox[{
               "but", " ", "it", " ", "only", " ", "matters", " ", "for", " ",
                 "the", " ", "very", " ", "larg", " ", "targets"}]}], " ", 
              "*)"}], "Input"], 
            StyleBox["\n", "Input"], 
            StyleBox["\n", "Input"], 
            StyleBox["\n", "Input"], "\t", 
            StyleBox[
             RowBox[{"deltadratio", "=", 
              RowBox[{"1", "-", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"1", "-", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"massescf", "[", "]"}], "-", 
                    RowBox[{
                    RowBox[{"Pi", "/", "6"}], " ", "densi", " ", 
                    RowBox[{"diameter", "^", "3"}]}]}], ")"}], "/", "Mkg"}]}],
                   ")"}], "^", 
                 RowBox[{"(", 
                  RowBox[{"1", "/", "3"}], ")"}]}], ")"}]}]}], "Input"], 
            StyleBox[",", "Input"], 
            StyleBox["\[IndentingNewLine]", "Input"], 
            StyleBox[
             RowBox[{"(*", " ", 
              RowBox[{
               RowBox[{
               "uses", " ", "escape", " ", "mass", " ", "from", " ", 
                "cratering", " ", "only"}], ",", " ", 
               RowBox[{
               "but", " ", "really", " ", "these", " ", "are", " ", 
                "ignorable"}]}], " ", "*)"}], "Input"], 
            StyleBox["\[IndentingNewLine]", "Input"], 
            StyleBox[
             RowBox[{"(*", " ", 
              RowBox[{"or", " ", "no", " ", "erosion"}], " ", "*)"}], "Input"], 
            StyleBox["\[IndentingNewLine]", "Input"], 
            StyleBox[
             RowBox[{
              RowBox[{"deltadratio", "=", "0"}], " ", ";"}], "Input"]}], 
           StyleBox[" ", "Input"], 
           StyleBox[
            RowBox[{"(*", " ", 
             RowBox[{"ignore", " ", "erosion"}], " ", "*)"}], "Input"], 
           StyleBox["\[IndentingNewLine]", "Input"], " ", "]"}], ";", " ", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"ninbin", "\[Equal]", "1"}], ",", 
            RowBox[{"(*", " ", 
             RowBox[{"explicit", " ", "flag"}], " ", "*)"}], 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"calcomega", "[", "1", "]"}], ";", 
             RowBox[{"(*", " ", 
              RowBox[{
               RowBox[{"gets", " ", "new", " ", "spin"}], ",", " ", 
               RowBox[{"uses", " ", "old", " ", "inertia"}]}], " ", "*)"}], 
             "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"d", "=", 
              RowBox[{"d", 
               RowBox[{"(", 
                RowBox[{"1", "-", "deltadratio"}], ")"}]}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"r", "=", 
              RowBox[{"d", "/", "2"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"Mkg", "=", 
              RowBox[{
               RowBox[{"Pi", "/", "6"}], " ", "dens", " ", 
               RowBox[{"d", "^", "3"}]}]}], ";"}], " ", 
            RowBox[{"(*", " ", 
             RowBox[{"new", " ", "target", " ", "mass"}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{"jinertia", "=", 
              RowBox[{
               RowBox[{"Mkg", "/", "5"}], 
               RowBox[{"r", "^", "2"}], 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"ashape", " ", "beta"}], ")"}], "^", 
                RowBox[{"-", 
                 RowBox[{"(", 
                  RowBox[{"2", "/", "3"}], ")"}]}]}], 
               RowBox[{"{", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{"ashape", "^", "2"}], "+", 
                  RowBox[{"beta", "^", "2"}]}], ",", 
                 RowBox[{"1", "+", 
                  RowBox[{"ashape", "^", "2"}]}], ",", 
                 RowBox[{"1", "+", 
                  RowBox[{"beta", "^", "2"}]}]}], "  ", "}"}]}]}], " ", 
             "*)"}], "                                           ", 
            RowBox[{"(*", " ", 
             RowBox[{"Commented", " ", 
              RowBox[{"by", " ", ":", "G"}]}], " ", "*)"}], 
            "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{"else", " ", "implicit", " ", "cases"}], " ", "*)"}], 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{"no", " ", "new", " ", "omega"}], ",", " ", 
              RowBox[{"or", " ", "fragments"}], ",", " ", 
              RowBox[{"all", " ", "assumed", " ", "very", " ", "small"}]}], 
             " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{"Print", "[", 
               RowBox[{
               "\"\<implicit only for this impact time, time, omeg= \>\"", 
                ",", 
                RowBox[{"{", 
                 RowBox[{"impacttime", ",", "omeg"}], "}"}]}], "]"}], ";"}], 
             "*)"}], "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"INPLICIT", ".."}], "VERY", " ", "SMALL", " ", 
               "CHANGES", " ", "IN", " ", "D"}], ",", " ", 
              RowBox[{"NONE", " ", "IN", " ", "SPIN"}], ",", " ", 
              RowBox[{"DO", " ", "NOT", " ", "PLOT"}]}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "but", " ", "i", " ", "need", " ", "relaxation", " ", "of", " ", 
              "wobble"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"calcomega", "[", "0", "]"}], ";", " ", 
             RowBox[{"(*", " ", 
              RowBox[{"relaxation", " ", "only"}], " ", "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{"d", "=", 
              RowBox[{"d", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"1", "-", "deltadratio"}], ")"}], "^", 
                "ninbin"}]}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"dlast", "/", "d0"}], ">", ".7937"}], ")"}], "&&", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"d", "/", "d0"}], "<", ".7937"}], ")"}]}], ")"}], ",",
             "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"AppendTo", "[", 
              RowBox[{"halfmevent", ",", 
               RowBox[{"{", 
                RowBox[{"iast", ",", "dlast", ",", "impacttime"}], "}"}]}], 
              "]"}], ";", "\[IndentingNewLine]", " ", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"erodedhmevent", ",", 
               RowBox[{"{", 
                RowBox[{
                "iast", ",", "impacttime", ",", "qratio", ",", "dlast", ",", 
                 "d", ",", "d0"}], "}"}]}], "]"}]}]}], "\[IndentingNewLine]", 
           
           RowBox[{"(*", 
            RowBox[{
             RowBox[{"tsince", "=", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"MemberQ", "[", 
                 RowBox[{
                  RowBox[{"erodedhmevent", "[", 
                   RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", "iast"}], 
                 "]"}], ",", 
                RowBox[{"time", "-", 
                 RowBox[{"erodedhmevent", "[", 
                  RowBox[{"[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"erodedhmevent", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", "iast"}], 
                    "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", "2"}], "]"}], 
                  "]"}]}], ",", "impacttime"}], "]"}]}], ";"}], "*)"}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"d", "/", "d0"}], "<", ".001"}], ",", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{"tsince", "=", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"MemberQ", "[", 
                  RowBox[{
                   RowBox[{"erodedtozero", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", "iast"}], 
                  "]"}], ",", 
                 RowBox[{"impacttime", "-", 
                  RowBox[{"eroded", "[", 
                   RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"erodedtozero", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", "iast"}], 
                    "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", "2"}], "]"}], 
                   "]"}]}], ",", "impacttime"}], "]"}]}], ";"}], "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"AppendTo", "[", 
             RowBox[{"erodedtozero", ",", 
              RowBox[{"{", 
               RowBox[{"iast", ",", "tsince"}], "}"}]}], "]"}]}], "]"}]}], 
         ")"}], ",", 
        RowBox[{"(*", " ", 
         RowBox[{"may", " ", "be", " ", "after", " ", "several", " ", "cd"}], 
         "  ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
        StyleBox[
         RowBox[{"qratio", ">", ".5"}],
         FontColor->RGBColor[1, 0, 0]], ",", "  ", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{
          "approaching", " ", "or", " ", "over", " ", "cd", " ", "event"}], 
          ",", " ", 
          RowBox[{"but", " ", "not", " ", 
           RowBox[{"pulverized", ".", " ", "i"}], " ", "assume", " ", "no", 
           " ", "implicit", " ", "here"}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{"craters", ",", "\[IndentingNewLine]", "  ", 
            RowBox[{
             RowBox[{"calccrater", "[", 
              RowBox[{"diameter", ",", "d", ",", 
               RowBox[{"vel", " ", 
                RowBox[{"Cos", "[", "phival", "]"}]}], " ", ",", "2"}], "]"}],
              ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"calcomega", "[", "1", "]"}], ";", " ", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{
             RowBox[{
             "updates", " ", "omega", " ", "using", " ", "old", " ", 
              "inertia"}], ".."}], " ", "as", " ", "per", " ", "cellino", " ",
             "et", " ", 
            RowBox[{"al", ".", " ", "?"}]}], "*)"}], "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"AppendTo", "[", 
             RowBox[{"testarray", ",", 
              RowBox[{"{", 
               RowBox[{
               "diameter", ",", "phival", ",", "vel", ",", "thetaval", ",", 
                "Phival", ",", "Thetaval", ",", "qratio", ",", "omeg"}], 
               "}"}]}], "]"}], ";"}], "\[IndentingNewLine]", "*)"}], "\n", 
          RowBox[{"(*", " ", 
           RowBox[{
           "a", " ", "new", " ", "form", " ", "defined", " ", "by", " ", 
            "the", " ", "pulverization", " ", "limit"}], " ", "*)"}], "\n", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"erosion", ",", "\t", "\n", "\t", 
            RowBox[{
             RowBox[{"xx", "=", 
              RowBox[{"0.5", "/", 
               RowBox[{"Log", "[", "pulvlim", "]"}]}]}], ";", "\n", "\t", 
             RowBox[{"d", "=", 
              RowBox[{"d", 
               StyleBox[
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{".5", "-", 
                   RowBox[{"xx", " ", 
                    RowBox[{"Log", "[", "qratio", "]"}]}]}], ")"}], "^", 
                 RowBox[{"(", 
                  RowBox[{"1", "/", "3"}], ")"}]}], "Code"]}]}]}]}], 
           StyleBox["]", "Code"]}], 
          StyleBox[";", "Code"], "\n", " ", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"only", " ", "when", " ", "qratio"}], ">", ".5"}], " ", 
           "*)"}], "\[IndentingNewLine]", "\n", 
          RowBox[{"Mkg", "=", 
           RowBox[{
            RowBox[{"Pi", "/", "6"}], " ", "dens", " ", 
            RowBox[{"d", "^", "3"}]}]}], ";", " ", 
          RowBox[{"(*", " ", 
           RowBox[{
           "mass", " ", "for", " ", "new", " ", "reduced", " ", "size"}], " ",
            "*)"}], "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"jinertia", "=", 
             RowBox[{
              RowBox[{"Mkg", "/", "5"}], 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"d", "/", "2"}], ")"}], "^", "2"}], 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"ashape", " ", "beta"}], ")"}], "^", 
               RowBox[{"-", 
                RowBox[{"(", 
                 RowBox[{"2", "/", "3"}], ")"}]}]}], 
              RowBox[{"{", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{"ashape", "^", "2"}], "+", 
                 RowBox[{"beta", "^", "2"}]}], ",", 
                RowBox[{"1", "+", 
                 RowBox[{"ashape", "^", "2"}]}], ",", 
                RowBox[{"1", "+", 
                 RowBox[{"beta", "^", "2"}]}]}], "  ", "}"}]}]}], ";"}], " ", 
           "*)"}], "  ", 
          RowBox[{"(*", " ", 
           RowBox[{"Commented", " ", 
            RowBox[{"by", " ", ":", "G"}]}], " ", "*)"}], 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"update", ",", 
            RowBox[{"fragments", "[", "]"}]}], "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{
            "now", " ", "assumed", " ", "it", " ", "got", " ", "more", " ", 
             "compact"}], ",", " ", 
            RowBox[{"so", " ", "change", " ", "the", " ", 
             RowBox[{"shape", ".", "  ", "assume"}], " ", "the", " ", 
             "alpha"}], ",", " ", 
            RowBox[{"beta", " ", "get", " ", "larger", " ", 
             RowBox[{"(", 
              RowBox[{"more", " ", "spherical"}], " ", ")"}], " ", "by", " ", 
             "a", "  ", "factor"}], ",", " ", 
            RowBox[{
            "but", " ", "dont", " ", "use", " ", "it", " ", "for", " ", "the",
              " ", "rest", " ", "of", " ", "this", " ", "timestep"}], ",", 
            " ", 
            RowBox[{
            "since", " ", "impactors", " ", "already", " ", "set", " ", "for",
              " ", "the", " ", "original", " ", 
             RowBox[{"size", ".", "  ", "so"}], " ", "just", " ", "output", 
             " ", "new", " ", "shape", " ", "in", " ", "astsizetypes", " ", 
             "which", " ", "is", " ", "used", " ", "for", " ", "the", " ", 
             "next", " ", "time", " ", "step"}]}], " ", "*)"}], 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"astsizetype", "[", 
            RowBox[{"[", 
             RowBox[{"iast", ",", "6"}], "]"}], "]"}], "=", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"1", "+", "ashape"}], ")"}], "/", "2"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"astsizetype", "[", 
            RowBox[{"[", 
             RowBox[{"iast", ",", "7"}], "]"}], "]"}], "=", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"1", "+", "beta"}], ")"}], "/", "2"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"dlast", "/", "d0"}], ">", ".7937"}], ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"MemberQ", "[", 
                 RowBox[{
                  RowBox[{"halfmevent", "[", 
                   RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", "iast"}], 
                 "]"}], ",", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"tsince", "=", 
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MemberQ", "[", 
                    RowBox[{
                    RowBox[{"halfmevent", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", "iast"}], 
                    "]"}], ",", 
                    RowBox[{"impacttime", "-", 
                    RowBox[{"halfmevent", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"halfmevent", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", "iast"}], 
                    "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", "3"}], "]"}], 
                    "]"}]}], ",", "impacttime"}], "]"}]}], ";"}], "*)"}], 
                "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"halfmevent", ",", 
                  RowBox[{"{", 
                   RowBox[{"iast", ",", "d", ",", "impacttime"}], "}"}]}], 
                 "]"}]}], "]"}]}], "]"}], ";", " ", 
            RowBox[{"huh", "??"}]}], "\[IndentingNewLine]", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"qratio", "<", "1"}], "&&", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"dlast", "/", "d0"}], ">", ".7937"}], ")"}], "&&", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"d", "/", "d0"}], "<", ".7937"}], ")"}]}], ")"}]}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"AppendTo", "[", 
              RowBox[{"halfmevent", ",", 
               RowBox[{"{", 
                RowBox[{"iast", ",", "dlast", ",", "impacttime"}], "}"}]}], 
              "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"erodedhmevent", ",", 
               RowBox[{"{", 
                RowBox[{
                "iast", ",", "impacttime", ",", "qratio", ",", "dlast", ",", 
                 "d", ",", "d0"}], "}"}]}], "]"}]}]}], "\[IndentingNewLine]", 
           "]"}], ";", "\[IndentingNewLine]", "\n", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"qratio", ">", "1"}], ",", "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{"Print", "[", 
               RowBox[{
               "\"\<in outcomes, qratio>1, {ii,time dlast,d,qratio}= \>\"", 
                ",", 
                RowBox[{"{", 
                 RowBox[{
                 "ii", ",", "time", ",", "dlast", ",", "d", ",", "qratio"}], 
                 "}"}]}], "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"!", 
                RowBox[{"MemberQ", "[", 
                 RowBox[{"cdevent", ",", "iast"}], "]"}]}], ",", 
               RowBox[{"AppendTo", "[", 
                RowBox[{"firstcdevent", ",", "iast"}], "]"}]}], "]"}], ";", 
             "\[IndentingNewLine]", " ", "\n", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"!", 
                RowBox[{"MemberQ", "[", 
                 RowBox[{
                  RowBox[{"halfmevent", "[", 
                   RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", "iast"}], 
                 "]"}]}], ",", 
               RowBox[{"AppendTo", "[", 
                RowBox[{"halfmevent", ",", 
                 RowBox[{"{", 
                  RowBox[{"iast", ",", "dlast", ",", "impacttime"}], "}"}]}], 
                "]"}]}], "]"}], ";", " ", "\n", " ", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"cdevent", ",", "iast"}], "]"}], " ", ";", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{
               "cdevent", " ", "is", " ", "all", " ", "cd", " ", "events"}], 
               ",", " ", 
               RowBox[{"first", " ", "is", " ", "only", " ", "original"}]}], 
              " ", "*)"}], "\n", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"plothis", ">", "0"}], ",", "\[IndentingNewLine]", 
               RowBox[{"AppendTo", "[", 
                RowBox[{"cdplotpts", ",", 
                 RowBox[{"{", 
                  RowBox[{"impacttime", ",", 
                   RowBox[{
                    RowBox[{"Sign", "[", 
                    RowBox[{"omeg", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "]"}], " ", 
                    RowBox[{"Norm", "[", "omeg", "]"}]}], ",", "dlast", ",", 
                   "d0"}], "}"}]}], "]"}]}], "]"}]}]}], "]"}]}], 
         RowBox[{"(*", " ", 
          RowBox[{"d", " ", "at", " ", "time", " ", "of", " ", "cd"}], " ", 
          "*)"}], "\[IndentingNewLine]", ")"}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"pi2", "=", 
       RowBox[{"grav", " ", 
        RowBox[{
         RowBox[{"diameter", "/", "2"}], "/", 
         RowBox[{"Un", "^", "2"}]}]}]}], ";"}], "\[IndentingNewLine]", 
     ")"}]}], " ", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", 
               RowBox[{"--", 
                RowBox[{"-", "end"}]}]}]}]}]}]}]}]}]}]}], " ", "of", " ", 
      "outcomes", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"function", "--"}], "--"}], "--"}], "--"}], "--"}],
                "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
        "--"}], "--"}]}], "-", "-"}], " ", "*)"}], "\n", "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", 
      RowBox[{"--", " ", "get"}]}], " ", "a", " ", "random", " ", "set", " ", 
     "of", " ", "impactors", " ", "for", " ", "each", " ", "target", " ", 
     "and", " ", "time", " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"step", "--"}], "--"}], "--"}], "--"}], "--"}]}], " ", 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "A", " ", "sample", " ", "of", " ", "the", " ", "impactors", " ", "for", 
      " ", "a", " ", "given", " ", "target", " ", "in", " ", "the", " ", 
      "space", " ", "volume", " ", 
      RowBox[{"d", "^", "2"}], " ", "deltime"}], ",", "  ", 
     RowBox[{
     "the", " ", "number", " ", "of", " ", "impactors", " ", "is", " ", 
      RowBox[{"diffdistnow", "[", 
       RowBox[{"[", 
        RowBox[{"-", 
         RowBox[{",", "i"}]}], "]"}], "]"}], " ", "in", " ", "the", " ", 
      "bin", " ", "with", " ", "diameters", " ", "from", " ", 
      RowBox[{"diffdistnow", "[", 
       RowBox[{"[", 
        RowBox[{"i", ",", "-"}], "]"}], "]"}], " ", "to", " ", 
      RowBox[{"diffdistnow", "[", 
       RowBox[{"[", 
        RowBox[{
         RowBox[{"i", "+", "1"}], ",", "-"}], "]"}], "]"}]}]}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"impactorlist", "[", "]"}], ":=", 
    RowBox[{"(", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"prob", "=", 
       RowBox[{
        RowBox[{"d", "^", "2"}], " ", "deltime", " ", 
        RowBox[{"probi", "/", "4"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"diffdistnow", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"diffdistr", "[", 
            RowBox[{"[", 
             RowBox[{"ibin", ",", "1"}], "]"}], "]"}], ",", 
           RowBox[{"RandomVariate", "[", 
            RowBox[{"BinomialDistribution", "[", 
             RowBox[{
              RowBox[{"Round", "[", 
               RowBox[{"diffdistr", "[", 
                RowBox[{"[", 
                 RowBox[{"ibin", ",", "2"}], "]"}], "]"}], "]"}], ",", 
              "prob"}], "]"}], "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"ibin", ",", "1", ",", 
           RowBox[{"numcum", "-", "1"}]}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"impactorbins", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"SparseArray", "[", 
          RowBox[{"diffdistnow", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}], "[", 
         "\"\<NonzeroPositions\>\"", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"impactors", "=", 
       RowBox[{"diffdistnow", "[", 
        RowBox[{"[", "impactorbins", "]"}], "]"}]}], ";"}], 
     "\[IndentingNewLine]", "\[IndentingNewLine]", ")"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", "end"}]}]}]}]}]}]}]}], " ", "of", " ", 
      "impactorlist", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"function", "--"}], "--"}], "--"}], "--"}], "--"}], 
            "--"}], "--"}], "--"}], "--"}], "--"}], "--"}]}], "-", 
     RowBox[{"-", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", "-"}]}]}]}]}], "*)"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"-", "the"}]}]}]}]}]}]}]}]}], " ", "piv", " ", 
      "function", " ", "for", " ", "crater", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"scaling", "--"}], "--"}], "--"}], "--"}]}], "-"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"pivf", "[", 
     RowBox[{"di_", ",", "n_"}], "]"}], ":=", "\n", "    ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
      "this", " ", "assumes", " ", "the", " ", "normal", " ", "component", 
       " ", "of", " ", "\[IndentingNewLine]", "velocity", " ", "and", " ", 
       "uses", " ", "size"}], "-", 
      RowBox[{
      "dependent", " ", "strength", " ", "based", " ", "on", " ", "crater", 
       " ", "size"}]}], " ", "*)"}], "\n", "    ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Un", "=", 
       RowBox[{"vel", " ", 
        RowBox[{"Cos", "[", "phival", "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"termg", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"8", "^", 
             RowBox[{"(", 
              RowBox[{"mu", "/", 
               RowBox[{"(", 
                RowBox[{"2", " ", "+", " ", "mu"}], ")"}]}], ")"}]}], "*", 
            "k1"}], ")"}], "/", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"di", "*", "grav"}], ")"}], "/", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"dens", "/", "densi"}], ")"}], "^", 
                RowBox[{"(", 
                 RowBox[{"1", "/", "3"}], ")"}]}], "*", 
               RowBox[{"Un", "^", "2"}]}], ")"}]}], ")"}], "^", "\n", 
           "      ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"3", "*", "mu"}], ")"}], "/", 
             RowBox[{"(", 
              RowBox[{"2", " ", "+", " ", "mu"}], ")"}]}], ")"}]}]}], ")"}], 
        "^", 
        RowBox[{"(", 
         RowBox[{"-", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"2", " ", "+", " ", "mu"}], ")"}], "/", 
            RowBox[{"(", 
             RowBox[{"3", "*", "mu"}], ")"}]}], ")"}]}], ")"}]}]}], ";", "\n", 
      RowBox[{"termst", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"d0strength", "^", "3"}], "*", "dens", "*", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"3", "/", 
               RowBox[{"(", 
                RowBox[{"4", "*", "Pi"}], ")"}]}], ")"}], "^", 
             RowBox[{"(", 
              RowBox[{"mu", "/", 
               RowBox[{"(", 
                RowBox[{"mu", " ", "-", " ", 
                 RowBox[{"2", "*", "n"}]}], ")"}]}], ")"}]}]}], ")"}], "/", 
          "\n", "     ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"densi", "/", "dens"}], ")"}], "^", 
                  RowBox[{"(", 
                   RowBox[{"1", "/", "3"}], ")"}]}], "*", "di", "*", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"k1", "/", 
                    RowBox[{"k2", "^", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"3", "*", "mu"}], ")"}], "/", "2"}], ")"}]}]}], 
                   ")"}], "^", 
                  RowBox[{"(", 
                   RowBox[{"1", "/", "3"}], ")"}]}], "*", "kr"}], ")"}], "/", 
               "\n", "        ", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", "Y0", ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"dens", "*", 
                    RowBox[{"Un", "^", "2"}]}], ")"}]}], ")"}], "^", 
                  RowBox[{"(", 
                   RowBox[{"mu", "/", "2"}], ")"}]}], "*", "d0strength"}], 
                ")"}]}], ")"}], "^", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"6", "*", "n"}], ")"}], "/", 
               RowBox[{"(", 
                RowBox[{"mu", " ", "-", " ", 
                 RowBox[{"2", "*", "n"}]}], ")"}]}], ")"}]}], "*", "\n", 
            "      ", 
            RowBox[{"(", 
             RowBox[{"densi", "*", 
              RowBox[{"di", "^", "3"}], "*", 
              RowBox[{"kr", "^", "3"}]}], ")"}]}], ")"}]}], ")"}], "^", 
        RowBox[{"(", 
         RowBox[{"-", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"2", " ", "+", " ", "mu"}], ")"}], "/", 
            RowBox[{"(", 
             RowBox[{"3", "*", "mu"}], ")"}]}], ")"}]}], ")"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"piv", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"termg", " ", "+", " ", "termst"}], " ", ")"}], "^", 
        RowBox[{"(", 
         RowBox[{"-", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"3", "*", "mu"}], ")"}], "/", 
            RowBox[{"(", 
             RowBox[{"2", " ", "+", " ", "mu"}], ")"}]}], ")"}]}], ")"}]}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"regime", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"termg", ">", "termst"}], ",", "\"\<gravregime\>\"", ",", 
         "\"\<strengthregime\>\""}], "]"}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"can", " ", "also", " ", "use", " ", "dgrav"}], "  ", "*)"}], 
      "\[IndentingNewLine]", " ", "piv"}], " ", ")"}]}], " ", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", "end"}]}]}]}]}]}]}]}], " ", "of", " ", "piv", " ", 
      
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"function", "--"}], "--"}], "--"}], "--"}], 
                    "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
                 "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
          "--"}], "--"}], "--"}], "--"}]}], "-"}], "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"piv", " ", "in", " ", "terms", " ", "of", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"pi2", " ", "--"}], "--"}], "--"}], "--"}], 
                    "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
                    "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
                  "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
           "--"}], "--"}], "--"}], "--"}], "--"}]}], "-"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"pivpi2f", "[", 
     RowBox[{"pi2_", ",", "vel_", ",", "dt_", ",", "n_"}], "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{"k1", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"pi2", "+", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"k2", " ", 
            RowBox[{"Y0", "/", 
             RowBox[{"(", 
              RowBox[{"dens", " ", 
               RowBox[{"vel", "^", "2"}]}], ")"}]}], 
            RowBox[{
             RowBox[{"(", 
              RowBox[{".01", 
               RowBox[{"dt", "/", "d0strength"}]}], ")"}], "^", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", "1"}], "/", "n"}], ")"}]}]}], ")"}], "^", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"2", "+", "mu"}], ")"}], "/", "2"}], ")"}]}]}], ")"}], 
       "^", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "3"}], 
         RowBox[{"mu", "/", 
          RowBox[{"(", 
           RowBox[{"2", "+", "mu"}], ")"}]}]}], ")"}]}]}], 
     "\[IndentingNewLine]", ")"}]}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", 
               RowBox[{"--", 
                RowBox[{"--", 
                 RowBox[{"--", 
                  RowBox[{"--", "end"}]}]}]}]}]}]}]}]}]}]}]}]}]}], " ", "of", 
     " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"pivpi2f", " ", "--"}], "--"}], "--"}], "--"}], 
                   "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
            "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}]}], "*)"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"-", 
               RowBox[{"--", 
                RowBox[{"-", "get"}]}]}]}]}]}]}]}]}]}]}], " ", "the", " ", 
      "limit", " ", "functions", " ", "for", " ", "crater", " ", "plot", " ", 
      "for", " ", "single", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"target", "--"}], "--"}], "--"}], "--"}], "--"}], "--"}]}],
      "-"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"craterlimf", "[", "name_", "]"}], ":=", 
    RowBox[{"(", "\n", " ", 
     RowBox[{"(*", " ", 
      RowBox[{
      "for", " ", "variable", " ", "types", " ", "i", " ", "need", " ", "to", 
       " ", "do", " ", "something", " ", 
       RowBox[{"here", ":", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"both", "?", " ", "one"}], ".", " ", 
          RowBox[{"mix", "?", "  ", "otherwise"}]}], " ", "will", " ", "give",
          " ", "for", " ", "last", " ", "type", "??"}]}]}], " ", "*)"}], 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"asttypestuff", "[", "name", "]"}], ";", "\n", 
      RowBox[{"plot6", "=", 
       RowBox[{"ListLogLogPlot", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"525", ",", 
             RowBox[{"500", "/", "525"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"525", ",", 
             RowBox[{"400", "/", "525"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"525", ",", 
             RowBox[{"270", "/", "525"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"525", ",", 
             RowBox[{"196", "/", "525"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"525", ",", 
             RowBox[{"158", "/", "525"}]}], "}"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"PlotMarkers", "\[Rule]", "\"\<Vesta\>\""}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", "Red", "}"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"plot6a", "=", 
       RowBox[{"ListLogLogPlot", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"525", ",", 
             RowBox[{"500", "/", "525"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"525", ",", 
             RowBox[{"400", "/", "525"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"525", ",", 
             RowBox[{"270", "/", "525"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"525", ",", 
             RowBox[{"196", "/", "525"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"525", ",", 
             RowBox[{"158", "/", "525"}]}], "}"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"PlotMarkers", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\[EmptyCircle]", ",", "Large"}], "}"}]}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", "Red", "}"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"plot7", "=", 
       RowBox[{"ListLogLogPlot", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"5.3", ",", 
            RowBox[{"2.1", "/", "5.3"}]}], "}"}], "}"}], ",", 
         RowBox[{"PlotMarkers", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"Text", "[", 
            RowBox[{"\"\<Steins\>\"", ",", 
             RowBox[{"Background", "\[Rule]", "White"}]}], "]"}], "}"}]}], 
         ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", "Blue", "}"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"plot7aa", "=", 
       RowBox[{"ListLogLogPlot", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"5.3", ",", 
            RowBox[{"2.1", "/", "5.3"}]}], "}"}], "}"}], ",", 
         RowBox[{"PlotMarkers", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\[EmptyCircle]", ",", "Large"}], "}"}]}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", "Blue", "}"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"plot7a", "=", 
       RowBox[{"ListLogLogPlot", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"12.5", ",", 
            RowBox[{"11", "/", "12.5"}]}], "}"}], "}"}], ",", 
         RowBox[{"PlotMarkers", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"Text", "[", 
            RowBox[{"\"\<Deimos\>\"", ",", 
             RowBox[{"Background", "\[Rule]", "White"}]}], "]"}], "}"}]}], 
         ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", "Blue", "}"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"plot7ab", "=", 
       RowBox[{"ListLogLogPlot", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"12.5", ",", 
            RowBox[{"11", "/", "12.5"}]}], "}"}], "}"}], ",", 
         RowBox[{"PlotMarkers", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\[EmptyCircle]", ",", "Large"}], "}"}]}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", "Blue", "}"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"plot7b", "=", 
       RowBox[{"ListLogLogPlot", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"12.5", ",", 
            RowBox[{"11", "/", "12.5"}]}], "}"}], "}"}], ",", 
         RowBox[{"PlotMarkers", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\[EmptyCircle]", ",", "Large"}], "}"}]}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", "Blue", "}"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"plot7c", "=", 
       RowBox[{"ListLogLogPlot", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"945", ",", 
            RowBox[{"280", "/", "945"}]}], "}"}], "}"}], ",", 
         RowBox[{"PlotMarkers", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"Rotate", "[", 
            RowBox[{
             RowBox[{"Text", "[", 
              RowBox[{"\"\<Ceres\>\"", ",", 
               RowBox[{"Background", "\[Rule]", "White"}]}], "]"}], ",", 
             RowBox[{"Pi", "/", "2"}]}], "]"}], "}"}]}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", "Blue", "}"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"plot7d", "=", 
       RowBox[{"ListLogLogPlot", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"945", ",", 
            RowBox[{"280", "/", "945"}]}], "}"}], "}"}], ",", 
         RowBox[{"PlotMarkers", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\[EmptyCircle]", ",", "Large"}], "}"}]}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", "Blue", "}"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"plot10", "=", 
       RowBox[{"ListLogLogPlot", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"544", ",", 
            RowBox[{"240", "/", "544"}]}], "}"}], "}"}], ",", 
         RowBox[{"PlotMarkers", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"Text", "[", 
            RowBox[{"\"\<Pallas\>\"", ",", 
             RowBox[{"Background", "\[Rule]", "White"}]}], "]"}], "}"}]}], 
         ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", "Blue", "}"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"plot10a", "=", 
       RowBox[{"ListLogLogPlot", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"544", ",", 
            RowBox[{"240", "/", "544"}]}], "}"}], "}"}], ",", 
         RowBox[{"PlotMarkers", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\[EmptyCircle]", ",", "Large"}], "}"}]}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", "Green", "}"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\n", 
      RowBox[{"(*", " ", 
       RowBox[{"get", " ", "the", " ", "crater", " ", "bust", " ", "limits"}],
        " ", "*)"}], "\n", 
      RowBox[{"dcrimdias", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"dcrimdias2", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"craterdias", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"spalldias", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"complexdias", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"dvals", "=", 
       RowBox[{"N", "[", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{".05", " ", 
           RowBox[{"Exp", "[", 
            RowBox[{".23", "i"}], "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "43"}], "}"}]}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"phival", "=", 
       RowBox[{"Pi", "/", "4"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"vel", "=", "velave"}], ";", "\[IndentingNewLine]", 
      RowBox[{"densi", "=", 
       RowBox[{"1.75", " ", 
        RowBox[{"10", "^", "12"}]}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"weighted", " ", "generic", " ", "value"}], " ", "*)"}], 
      "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"d", "=", 
           RowBox[{"dvals", "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"Mkg", "=", 
           RowBox[{
            RowBox[{"Pi", "/", "6"}], " ", "dens", " ", 
            RowBox[{"d", "^", "3"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"diameter", "=", 
           RowBox[{
            RowBox[{"qstarf", "[", 
             RowBox[{
              RowBox[{"d", "/", "2"}], ",", 
              RowBox[{"Pi", "/", "4"}], ",", "velave"}], " ", "]"}], "[", 
            RowBox[{"[", "3", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"mass", "=", 
           RowBox[{
            RowBox[{"Pi", "/", "6"}], " ", "dens", " ", 
            RowBox[{"diameter", "^", "3"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"calccrater", "[", 
           RowBox[{"diameter", ",", "d", ",", 
            RowBox[{"velave", " ", "0.707"}], ",", "1"}], "]"}], ";"}], ")"}],
         ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"i", ",", "43"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]",
       "\n", 
      RowBox[{"d", "=."}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      
      RowBox[{"cratio", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"81", "/", 
             RowBox[{"(", 
              RowBox[{"2", "*", "Pi"}], ")"}]}], ")"}], "^", 
           RowBox[{"(", 
            RowBox[{"nsize", "/", 
             RowBox[{"(", 
              RowBox[{"1", " ", "+", " ", "nsize"}], ")"}]}], ")"}]}], "*", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Y0", "/", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"1", "/", "d0strength"}], ")"}], "^", 
                RowBox[{"nsize", "^", 
                 RowBox[{"(", 
                  RowBox[{"-", "1"}], ")"}]}]}], "*", 
               RowBox[{"(", 
                RowBox[{"d", "*", "Grav", "*", 
                 RowBox[{"dens", "^", "2"}]}], ")"}]}], ")"}]}], ")"}], "^", 
           RowBox[{"(", 
            RowBox[{"nsize", "/", 
             RowBox[{"(", 
              RowBox[{"1", " ", "+", " ", "nsize"}], ")"}]}], ")"}]}]}], 
         ")"}], "/", "d"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"plot8", "=", 
       RowBox[{"LogLogPlot", "[", 
        RowBox[{"cratio", ",", 
         RowBox[{"{", 
          RowBox[{"d", ",", "30", ",", "1000"}], "}"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", "Blue", "}"}]}]}], "]"}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"d", " ", "is", " ", "a", " ", "variable"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"spallratiolim", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"d0strength", "/", "d"}], ")"}], 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"kv", "^", "2"}], " ", 
           RowBox[{"Y0", "/", 
            RowBox[{"(", 
             RowBox[{"2", " ", "mfac", " ", "4", " ", 
              RowBox[{"Pi", "/", "3"}], " ", "dens", " ", "Grav", " ", 
              RowBox[{"d", "/", "2"}], " ", "dens", " ", "kt", "  ", 
              "d0strength"}], ")"}]}]}], " ", ")"}], "^", 
         RowBox[{"(", 
          RowBox[{"nsizespall", "/", 
           RowBox[{"(", 
            RowBox[{"nsizespall", "+", "1"}], ")"}]}], ")"}]}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"plot9", "=", 
       RowBox[{"LogLogPlot", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1.3", " ", "spallratiolim"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"d", ",", "1", ",", "50"}], "}"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", "Black", "}"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"plot9a", "=", 
       RowBox[{"LogLogPlot", "[", 
        RowBox[{
         RowBox[{"{", " ", "spallratiolim", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"d", ",", "1", ",", "50"}], "}"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", "Black", "}"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"dcrimdiasbar", "=", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"dcrimdias", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "2"}], "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{"dcrimdias", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "3"}], "]"}], "]"}], "/", 
           RowBox[{"dcrimdias", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "2"}], "]"}], "]"}]}]}], "}"}], "]"}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"spalldiasbar", "=", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"spalldias", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "2"}], "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{"spalldias", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "3"}], "]"}], "]"}], "/", 
           RowBox[{"spalldias", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "2"}], "]"}], "]"}]}]}], "}"}], "]"}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"Print", "[", "spalldiasbar", "]"}], ";"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"complexdiasbar", "=", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"complexdias", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "2"}], "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{"complexdias", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "3"}], "]"}], "]"}], "/", 
           RowBox[{"complexdias", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "2"}], "]"}], "]"}]}]}], "}"}], "]"}]}], ";",
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"plot11", "=", 
       RowBox[{"ListLogLogPlot", "[", 
        RowBox[{
         RowBox[{"dcrimdiasbar", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", 
            RowBox[{"1", ";;", "2"}]}], "]"}], "]"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", "Purple", "}"}]}], ",", 
         RowBox[{"PlotMarkers", "\[Rule]", 
          RowBox[{"{", "\"\<b\>\"", "}"}]}], ",", 
         RowBox[{"Joined", "\[Rule]", "True"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", "Purple"}], ",", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{".1", ",", "1200"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{".01", ",", "4"}], "}"}]}], "}"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"plot12", "=", 
       RowBox[{"ListLogLogPlot", "[", 
        RowBox[{
         RowBox[{"spalldiasbar", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", 
            RowBox[{"1", ";;", "2"}]}], "]"}], "]"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", "Purple", "}"}]}], ",", 
         RowBox[{"PlotMarkers", "\[Rule]", 
          RowBox[{"{", "\"\<S\>\"", "}"}]}], ",", 
         RowBox[{"Joined", "\[Rule]", "True"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", "Purple"}], ",", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{".1", ",", "1000"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{".01", ",", "3"}], "}"}]}], "}"}]}]}], "]"}]}], ";", 
      RowBox[{"plot13", "=", 
       RowBox[{"ListLogLogPlot", "[", 
        RowBox[{
         RowBox[{"complexdiasbar", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", 
            RowBox[{"1", ";;", "2"}]}], "]"}], "]"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", "Blue", "}"}]}], ",", 
         RowBox[{"PlotMarkers", "\[Rule]", 
          RowBox[{"{", "\"\<C\>\"", "}"}]}], ",", 
         RowBox[{"Joined", "\[Rule]", "True"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"plot14", "=", 
       RowBox[{"LogLogPlot", "[", 
        RowBox[{"0.8", " ", ",", 
         RowBox[{"{", 
          RowBox[{"d", ",", "1", ",", "1000"}], "}"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Thickness", "[", ".02", "]"}], ",", "Brown", ",", 
            RowBox[{"Opacity", "[", ".5", "]"}]}], "}"}]}]}], "]"}]}], ";", 
      " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "estimate", " ", "of", " ", "mac", " ", "crater", " ", "ratio"}], " ", 
       "*)"}], "\n", 
      RowBox[{"(*", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"name", "\[Equal]", "\"\<S-Type\>\""}], ","}]}], "*)"}], 
      RowBox[{"plot15", "=", 
       RowBox[{"Show", "[", 
        RowBox[{"plot12", ",", "plot13", ",", "plot8", ",", 
         RowBox[{"Graphics", "[", 
          RowBox[{"Rotate", "[", 
           RowBox[{
            RowBox[{"Text", "[", 
             RowBox[{
              RowBox[{
              "Framed", "[", "\"\<Max spall w/o disruption\>\"", "]"}], ",", 
              RowBox[{"Log", "[", 
               RowBox[{"{", 
                RowBox[{"0.4", ",", "0.6"}], "}"}], "]"}], ",", 
              RowBox[{"Background", "\[Rule]", "White"}]}], "]"}], ",", 
            ".1"}], "]"}], "]"}], ",", 
         RowBox[{"Graphics", "[", 
          RowBox[{"Text", "[", 
           RowBox[{
            RowBox[{"Framed", "[", "\"\<Spall crater regime\>\"", "]"}], ",", 
            
            RowBox[{"Log", "[", 
             RowBox[{"{", 
              RowBox[{"1.8", ",", ".05"}], "}"}], "]"}], ",", 
            RowBox[{"Background", "\[Rule]", "White"}]}], "]"}], "]"}]}], 
        "]"}]}], ";", "\n", 
      RowBox[{"craterlimits1", "=", 
       RowBox[{"Show", "[", 
        RowBox[{
        "plot15", ",", "plot9", ",", "plot9a", ",", "plot11", ",", "plot14", 
         ",", "plot6", ",", "plot6a", ",", "plot7", ",", "plot7aa", ",", 
         "plot7a", ",", "plot7ab", ",", "plot7b", ",", "plot7c", ",", 
         "plot7d", ",", "plot10"}], "]"}]}], "\n", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{",", "\n", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"or", " ", "else", " ", "c"}], "-", "type"}], " ", "*)"}], 
         "\n", 
         RowBox[{"craterlimits1", "=", 
          RowBox[{"Show", "[", 
           RowBox[{
           "plot11", ",", "plot8", ",", "plot13", ",", "plot14", ",", "plot6",
             ",", "plot6a", ",", "plot7", ",", "plot7aa", ",", "plot7a", ",", 
            "plot7ab", ",", "plot7b", ",", "plot7c", ",", "plot7d", ",", 
            "plot10"}], "]"}]}]}], "]"}], "*)"}], ";", "\[IndentingNewLine]", 
      "\n", 
      RowBox[{"craterlimits2", "=", 
       RowBox[{"Show", "[", 
        RowBox[{
        "plot11", ",", "plot10a", ",", "plot8", ",", "\[IndentingNewLine]", 
         RowBox[{"Graphics", "[", 
          RowBox[{"Text", "[", 
           RowBox[{
            RowBox[{"Framed", "[", "\"\<Bowl crater regime\>\"", "]"}], ",", 
            RowBox[{"Log", "[", 
             RowBox[{"{", 
              RowBox[{"50", ",", ".1"}], "}"}], "]"}], ",", 
            RowBox[{"Background", "\[Rule]", "White"}]}], "]"}], "]"}], ",", 
         RowBox[{"Graphics", "[", 
          RowBox[{"Text", "[", 
           RowBox[{
            RowBox[{"Framed", "[", "\"\<Complex crater \\rregime\>\"", "]"}], 
            ",", 
            RowBox[{"Log", "[", 
             RowBox[{"{", 
              RowBox[{"500", ",", ".15"}], "}"}], "]"}], ",", 
            RowBox[{"Background", "\[Rule]", "White"}]}], "]"}], "]"}], ",", 
         "\n", "\t", 
         RowBox[{"Graphics", "[", 
          RowBox[{"Rotate", "[", 
           RowBox[{
            RowBox[{"Text", "[", 
             RowBox[{
              RowBox[{
              "Framed", "[", "\"\<Max crater w/o disruption\>\"", "]"}], ",", 
              
              RowBox[{"Log", "[", 
               RowBox[{"{", 
                RowBox[{".6", ",", ".3"}], "}"}], "]"}], ",", 
              RowBox[{"Background", "\[Rule]", "White"}]}], "]"}], ",", 
            ".1"}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Graphics", "[", 
          RowBox[{"Text", "[", 
           RowBox[{
            RowBox[{"Framed", "[", "\"\<L-K et al. Max Estimate\>\"", "]"}], 
            ",", 
            RowBox[{"Log", "[", 
             RowBox[{"{", 
              RowBox[{"100", ",", "1"}], "}"}], "]"}], ",", 
            RowBox[{"Background", "\[Rule]", "White"}]}], "]"}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Graphics", "[", 
          RowBox[{"Text", "[", 
           RowBox[{
            RowBox[{"Framed", "[", 
             RowBox[{"StringForm", "[", 
              RowBox[{
              "\"\<This is for a `1` type asteroid\>\"", ",", "name"}], "]"}],
              "]"}], ",", 
            RowBox[{"Log", "[", 
             RowBox[{"{", 
              RowBox[{"1", ",", ".015"}], "}"}], "]"}], ",", 
            RowBox[{"Background", "\[Rule]", "LightGray"}]}], "]"}], "]"}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"Graphics", "[", 
          RowBox[{"Rotate", "[", 
           RowBox[{
            RowBox[{"Text", "[", 
             RowBox[{
              RowBox[{
              "Framed", "[", "\"\<Complex crater w/o disruption\>\"", "]"}], 
              ",", 
              RowBox[{"Log", "[", 
               RowBox[{"{", 
                RowBox[{"200", ",", "3"}], "}"}], "]"}], ",", 
              RowBox[{"Background", "\[Rule]", "White"}]}], "]"}], ",", 
            ".15"}], "]"}], "]"}], ",", 
         RowBox[{"ImageSize", "->", 
          RowBox[{"{", 
           RowBox[{"600", ",", "500"}], "}"}]}], ",", 
         RowBox[{"Frame", "\[Rule]", "True"}], ",", 
         RowBox[{"FrameLabel", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
           "\"\<Asteroid Diameter, km\>\"", ",", 
            "\"\<Ratio of Crater diameter to Target diameter\>\""}], 
           "}"}]}]}], "]"}]}], ";", "\n", 
      RowBox[{"craterlimits", "=", 
       RowBox[{"Show", "[", 
        RowBox[{"craterlimits1", ",", "craterlimits2"}], "]"}]}]}], "\n", 
     ")"}]}], 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"-", "end"}]}]}]}]}]}]}]}]}], " ", "of", " ", "plotlim",
       " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"function", "--"}], "--"}], "--"}], "--"}], 
                    "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
              "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
       "--"}]}], "-"}], "*)"}], " ", "\n", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"popplotf", "[", "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"plot1", "=", 
       RowBox[{"ListLogLogPlot", "[", 
        RowBox[{"cumdistr", ",", 
         RowBox[{"PlotMarkers", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<\[EmptySmallCircle]\>\"", ",", "Tiny"}], "}"}]}], ",", 
         RowBox[{"PlotStyle", "->", "Black"}], ",", 
         RowBox[{"Frame", "\[Rule]", "True"}], ",", " ", 
         RowBox[{"FrameTicksStyle", "\[Rule]", "20"}], ",", 
         RowBox[{"FrameLabel", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<Diameter D, km\>\"", ",", "\"\<Number >D\>\""}], 
           "}"}]}], ",", 
         RowBox[{"LabelStyle", "\[Rule]", "24"}], " ", ",", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Min", "[", 
               RowBox[{"cumdistr", "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], ",", 
              "10000"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{".1", ",", 
              RowBox[{"Max", "[", 
               RowBox[{"cumdistr", "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "2"}], "]"}], "]"}], " ", "]"}]}], 
             "}"}]}], "}"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"plotfit", "=", 
       RowBox[{"LogLogPlot", "[", 
        RowBox[{
         RowBox[{"nfun", "[", "d", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"d", ",", "dialast", ",", "800"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"data", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", "famflg"}], ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"testratio", ">", "0"}], ",", 
           RowBox[{"Transpose", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"cumdistr", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
              RowBox[{"Accumulate", "[", 
               RowBox[{"Prepend", "[", 
                RowBox[{"ntopick", ",", "0"}], "]"}], "]"}]}], "}"}], "]"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"dmin", ",", 
              RowBox[{"-", "testratio"}]}], "}"}], "}"}]}], "]"}], ",", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"family0pts", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "+", 
                RowBox[{"family0pts", "[", 
                 RowBox[{"[", 
                  RowBox[{"i", "+", "1"}], "]"}], "]"}]}], ")"}], "/", "2"}], 
             ",", "i"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", 
             RowBox[{"nasteroids", "-", "1"}]}], "}"}]}], "]"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"plot2", "=", 
       RowBox[{"ListLogLogPlot", "[", 
        RowBox[{"data", ",", 
         RowBox[{"PlotStyle", "\[Rule]", "Black"}], ",", 
         RowBox[{"PlotMarkers", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<\[Bullet]\>\"", ",", "Tiny"}], "}"}]}], ",", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{".001", ",", "10000"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{".1", ",", 
              RowBox[{"Max", "[", 
               RowBox[{"cumdistr", "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "2"}], "]"}], "]"}], " ", "]"}]}], 
             "}"}]}], "}"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"popplot", "=", 
       RowBox[{"Show", "[", 
        RowBox[{"plot1", ",", "plot2", ",", "plotfit", ",", 
         RowBox[{"Graphics", "[", 
          RowBox[{"Text", "[", 
           RowBox[{
            RowBox[{"Framed", "[", 
             RowBox[{"Style", "[", 
              RowBox[{
               RowBox[{"\"\<This uses the '\>\"", "<>", " ", 
                RowBox[{"ToString", "[", "popfile", "]"}], "<>", " ", 
                "\"\<' population model\\r and the '\>\"", "<>", 
                RowBox[{"ToString", "[", "newname", "]"}], "<>", 
                "\"\<' target list\>\""}], ",", "14"}], "]"}], "]"}], ",", 
            RowBox[{"Scaled", "[", 
             RowBox[{"{", 
              RowBox[{".65", ",", ".9"}], "}"}], "]"}], ",", 
            RowBox[{"Background", "\[Rule]", "LightGray"}]}], "]"}], "]"}], 
         "\n", ",", 
         RowBox[{"ImageSize", "\[Rule]", "Full"}]}], "]"}]}]}], ")"}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"-", "end"}]}]}]}]}]}]}]}]}], " ", "of", " ", "poplotf",
       " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"function", "--"}], "--"}], "--"}], "--"}], 
                    "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
              "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
       "--"}]}], "-"}], "*)"}], " ", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"qplotf", "[", "]"}], ":=", "\[IndentingNewLine]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"asttypestuff", "[", "\"\<S-Type\>\"", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"qplots", "=", 
       RowBox[{"LogLogPlot", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"qstarf", "[", 
           RowBox[{"x", ",", 
            RowBox[{"Pi", "/", "4"}], ",", "5.5"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"x", ",", 
           RowBox[{"10", "^", 
            RowBox[{"(", 
             RowBox[{"-", "5"}], ")"}]}], ",", "1000"}], "}"}], ",", 
         RowBox[{"GridLines", "->", "Automatic"}], ",", "\[IndentingNewLine]", 
         RowBox[{"FrameLabel", "->", 
          RowBox[{"{", 
           RowBox[{
           "\"\<Radius, km\>\"", ",", 
            "\"\<Qstar for 45\:02da, 5.5 km/s, MJ/kg\>\""}], "}"}]}], ",", 
         RowBox[{"LabelStyle", "\[Rule]", "24"}], ",", 
         RowBox[{"ImageSize", "->", 
          RowBox[{"{", 
           RowBox[{"600", ",", "500"}], "}"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"asttypestuff", "[", "\"\<C-Type\>\"", "]"}], ";", "\n", 
      RowBox[{"qplotc", "=", 
       RowBox[{"LogLogPlot", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"qstarf", "[", 
           RowBox[{"x", ",", 
            RowBox[{"Pi", "/", "4"}], ",", "5.5"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"x", ",", 
           RowBox[{"10", "^", 
            RowBox[{"(", 
             RowBox[{"-", "5"}], ")"}]}], ",", "1000"}], "}"}], ",", 
         RowBox[{"GridLines", "->", "Automatic"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"Dashed", ",", "Black"}], "}"}]}]}], "]"}]}], ";", "\n", 
      RowBox[{"qplot", "=", 
       RowBox[{"Show", "[", 
        RowBox[{"qplots", ",", "qplotc", ",", 
         RowBox[{"ListLogLogPlot", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"263", ",", "0.02"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"263", ",", "0.013"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"263", ",", "0.0016"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"2.65", ",", 
              RowBox[{"2.5", " ", 
               RowBox[{"10", "^", 
                RowBox[{"-", "4"}]}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"6.24", ",", 
              RowBox[{"8.7", " ", 
               RowBox[{"10", "^", 
                RowBox[{"-", "4"}]}]}]}], "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"6.24", ",", 
              RowBox[{"1.3", " ", 
               RowBox[{"10", "^", 
                RowBox[{"-", "3"}]}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"181", ",", "0.1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"181", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"110", ",", 
              RowBox[{"3.1", " ", 
               RowBox[{"10", "^", 
                RowBox[{"-", "2"}]}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"110", ",", 
              RowBox[{"3.1", " ", 
               RowBox[{"10", "^", 
                RowBox[{"-", "1"}]}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"56", ",", 
              RowBox[{"4.1", " ", 
               RowBox[{"10", "^", 
                RowBox[{"-", "2"}]}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"56", ",", 
              RowBox[{"4.1", " ", 
               RowBox[{"10", "^", 
                RowBox[{"-", "1"}]}]}]}], "}"}]}], "}"}], "]"}], ",", 
         RowBox[{"Graphics", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Text", "[", 
             RowBox[{"\"\<Vesta, 52km proj\>\"", ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Log", "[", "263", "]"}], ",", 
                RowBox[{"Log", "[", ".008", "]"}]}], "}"}]}], "]"}], ",", 
            RowBox[{"Text", "[", 
             RowBox[{"\"\<Steins\>\"", ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Log", "[", "2.65", "]"}], ",", 
                RowBox[{"Log", "[", ".00015", "]"}]}], "}"}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Text", "[", 
             RowBox[{"\"\<Deimos?\>\"", ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Log", "[", "6.24", "]"}], ",", 
                RowBox[{"Log", "[", ".0006", "]"}]}], "}"}]}], "]"}], ",", 
            RowBox[{"Text", "[", 
             RowBox[{"\"\<Themis (C)\>\"", ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Log", "[", "380", "]"}], ",", 
                RowBox[{"Log", "[", ".1", "]"}]}], "}"}]}], "]"}], ",", 
            RowBox[{"Text", "[", 
             RowBox[{"\"\<Eos(K)\>\"", ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Log", "[", "200", "]"}], ",", 
                RowBox[{"Log", "[", ".03", "]"}]}], "}"}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Text", "[", 
             RowBox[{"\"\<Koronis(S)\>\"", ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Log", "[", "25", "]"}], ",", 
                RowBox[{"Log", "[", ".04", "]"}]}], "}"}]}], "]"}]}], 
           "\[IndentingNewLine]", "}"}], "]"}], ",", 
         RowBox[{"Graphics", "[", 
          RowBox[{"Line", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Log", "[", "263", "]"}], ",", 
               RowBox[{"Log", "[", ".001613", "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Log", "[", "263", "]"}], ",", 
               RowBox[{"Log", "[", ".02", "]"}]}], "}"}]}], "}"}], "]"}], 
          "]"}], ",", 
         RowBox[{"Graphics", "[", 
          RowBox[{"Line", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Log", "[", "200", "]"}], ",", 
               RowBox[{"Log", "[", ".02", "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Log", "[", "340", "]"}], ",", 
               RowBox[{"Log", "[", ".02", "]"}]}], "}"}]}], "}"}], "]"}], 
          "]"}], ",", 
         RowBox[{"Graphics", "[", 
          RowBox[{"Line", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Log", "[", "200", "]"}], ",", 
               RowBox[{"Log", "[", ".0016", "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Log", "[", "340", "]"}], ",", 
               RowBox[{"Log", "[", ".0016", "]"}]}], "}"}]}], "}"}], "]"}], 
          "]"}], ",", 
         RowBox[{"Graphics", "[", 
          RowBox[{"Line", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Log", "[", "181", "]"}], ",", 
               RowBox[{"Log", "[", ".1", "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Log", "[", "181", "]"}], ",", 
               RowBox[{"Log", "[", "1", "]"}]}], "}"}]}], "}"}], "]"}], "]"}],
          ",", 
         RowBox[{"Graphics", "[", 
          RowBox[{"Line", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Log", "[", "110", "]"}], ",", 
               RowBox[{"Log", "[", ".03", "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Log", "[", "110", "]"}], ",", 
               RowBox[{"Log", "[", ".3", "]"}]}], "}"}]}], "}"}], "]"}], 
          "]"}], ",", 
         RowBox[{"Graphics", "[", 
          RowBox[{"Line", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Log", "[", "56", "]"}], ",", 
               RowBox[{"Log", "[", ".04", "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Log", "[", "56", "]"}], ",", 
               RowBox[{"Log", "[", ".4", "]"}]}], "}"}]}], "}"}], "]"}], 
          "]"}], ",", 
         RowBox[{"Graphics", "[", 
          RowBox[{"Text", "[", 
           RowBox[{
            RowBox[{"Framed", "[", 
             RowBox[{"StringForm", "[", 
              RowBox[{
              "\"\<This is for both S-Types (red, solid) and C-Types (black, \
dashed)\\n at 5.5km/s and 45\:02da.\\n This uses factors of \>\"", "<>", 
               RowBox[{"ToString", "[", "qfac", "]"}], "<>", " ", 
               "\"\< for the values in the gravity regime, \\nand \>\"", "<>", 
               RowBox[{"ToString", "[", " ", "qstrengthfac", "]"}], "<>", 
               "\"\< for the slope in the strength regime.  The transition \
sharpness factor is \>\"", "<>", 
               RowBox[{"ToString", "[", "nsharp", "]"}]}], "]"}], "]"}], ",", 
            
            RowBox[{"Scaled", "[", 
             RowBox[{"{", 
              RowBox[{".4", ",", ".8"}], "}"}], "]"}], ",", 
            RowBox[{"Background", "\[Rule]", "LightGray"}]}], "]"}], "]"}]}], 
        "]"}]}]}], ")"}]}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"--", "--"}], "===", "===", "===", "===", "===", "===", 
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", "end"}]}], " ", "of", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"qplotf", "[", "]"}], "--"}], "--"}], "--"}], "--"}]}], "===",
      "===", "===", "===", "===", "===", "===", 
     RowBox[{"==", 
      RowBox[{"--", 
       RowBox[{"--", "-"}]}]}]}], "*)"}], "\n", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", "the"}]}]}]}]}]}]}], " ", "Q", "*", " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"function", "--"}], "--"}], "--"}], "--"}], 
                    "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
                 "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
          "--"}], "--"}], "--"}], "--"}], "--"}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
     "now", " ", "presented", " ", "for", " ", "the", " ", "case", " ", "of", 
      " ", "a", " ", "normal", " ", "impact"}], ",", " ", 
     RowBox[{
      RowBox[{
      "change", " ", "for", " ", "other", " ", "angles", "\n", "this", " ", 
       "is", " ", "the", " ", "actual", " ", "total", " ", "Q", " ", "in", 
       " ", "the", " ", 
       RowBox[{"impactor", ".", " ", "as"}], " ", "the", " ", "angle"}], 
      "\[Rule]", 
      RowBox[{"90", "\:02da", " ", 
       RowBox[{"(", "flat", ")"}]}]}], " ", ",", " ", 
     RowBox[{
     "more", " ", "Q", " ", "is", " ", "needed", "\n", "but", " ", "scaling", 
      " ", "result", " ", "is", " ", "not", " ", "valid", " ", "for", " ", 
      "small", " ", "normal", " ", "velocity"}]}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"qstarf", "[", 
     RowBox[{"r_", ",", "phi_", ",", "vel_"}], "]"}], ":=", 
    RowBox[{
     StyleBox["(",
      FontWeight->"Plain"], 
     RowBox[{
      RowBox[{"slope", "=", 
       RowBox[{"3", " ", "mu", " ", "qstrengthfac", " ", 
        RowBox[{"(", 
         RowBox[{"1", "/", 
          RowBox[{"(", 
           RowBox[{"1", "-", 
            RowBox[{"2", " ", "nsize"}]}], ")"}]}], ")"}]}]}], " ", ";", 
      "\[IndentingNewLine]", 
      RowBox[{"qstars", "=", 
       RowBox[{"Min", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"qconst1", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"r", "/", ".0001"}], ")"}], "^", " ", "slope"}]}], ")"}],
          ",", "qconst1"}], "]"}]}], ";", "\n", 
      RowBox[{"qstarg", "=", 
       RowBox[{"qfac", " ", "qconst2", " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"r", "/", "250"}], ")"}], "^", 
         RowBox[{"(", 
          RowBox[{"3", " ", "mu"}], ")"}]}]}]}], ";", 
      RowBox[{"(*", " ", 
       RowBox[{"Eq", ".", " ", "4"}], " ", "*)"}], "\n", 
      RowBox[{"nsharp", "=", "1."}], ";", "\n", 
      RowBox[{"qstar", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"qstars", "^", 
            RowBox[{"(", 
             RowBox[{"1", "/", "nsharp"}], ")"}]}], "+", 
           RowBox[{"qstarg", "^", 
            RowBox[{"(", 
             RowBox[{"1", "/", "nsharp"}], ")"}]}]}], ")"}], "^", "nsharp"}], 
        " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Cos", "[", "phi", "]"}], "/", 
            RowBox[{"Cos", "[", 
             RowBox[{"45", " ", "Degree"}], "]"}]}], " ", 
           RowBox[{"vel", "/", "velave"}]}], ")"}], "^", 
         RowBox[{"(", 
          RowBox[{"2", "-", 
           RowBox[{"3", "mu"}]}], ")"}]}]}]}], ";", "\n", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"new", " ", "value"}], "..."}], " ", "*)"}], "\n", 
      RowBox[{"Mkg", "=", 
       RowBox[{"4", " ", 
        RowBox[{"Pi", "/", "3"}], " ", "dens", " ", 
        RowBox[{"r", "^", "3"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"massstar", "=", 
       RowBox[{"2", " ", "qstar", "  ", 
        RowBox[{"Mkg", "/", 
         RowBox[{"vel", "^", "2"}]}]}]}], " ", ";", 
      RowBox[{"(*", " ", 
       RowBox[{"eq", ".", " ", "6"}], " ", "*)"}], "\n", 
      RowBox[{"dstar", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"6", "/", "Pi"}], ")"}], " ", 
          RowBox[{"massstar", "/", "dens"}]}], ")"}], "^", 
        RowBox[{"(", 
         RowBox[{"1", "/", "3"}], ")"}]}]}], ";", 
      RowBox[{"{", 
       RowBox[{"qstar", ",", "massstar", ",", "dstar"}], "}"}]}], ")"}]}], 
   "  ", 
   RowBox[{"(*", " ", 
    RowBox[{"qstar", " ", "in", " ", 
     RowBox[{"MJ", "/", "kg"}]}], "*)"}], " ", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", "end"}]}]}]}]}]}]}], " ", "of", " ", "qstarf", " ", 
      
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"function", "--"}], "--"}], "--"}], "--"}], 
                   "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
            "--"}], "--"}], "--"}], "--"}], "--"}], "--"}]}], "-", "-"}], 
    "*)"}], "\[IndentingNewLine]", "\n", " ", 
   RowBox[{
    RowBox[{"resetomegf", "[", "d_", "]"}], ":=", 
    RowBox[{"(*", " ", 
     RowBox[{"now", "  ", "d", " ", "dependent", " ", "possible"}], " ", 
     "*)"}], "\[IndentingNewLine]", 
    RowBox[{"(", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"xx", "=", 
        RowBox[{"RandomVariate", "[", 
         RowBox[{"WeibullDistribution", "[", 
          RowBox[{"1", ",", ".3"}], "]"}], "]"}]}], ";"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"the", " ", "spike", " ", "below", " ", 
        RowBox[{".5", " ", "/", "s"}], " ", "is", " ", "obtainable", " ", 
        "if", " ", "most", " ", "of", " ", "reset", " ", "is", " ", "small", 
        " ", "spin"}], ",", " ", 
       RowBox[{
       "but", " ", "too", " ", "much", " ", "if", " ", "all", " ", "resets", 
        " ", "are", " ", "very", " ", 
        RowBox[{"small", "?"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"yi", "=", 
       RowBox[{"RandomReal", "[", 
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"xx", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"yi", ">", ".35"}], ",", 
         RowBox[{"RandomReal", "[", 
          RowBox[{"{", 
           RowBox[{"1", ",", "8"}], "}"}], "]"}], ",", 
         RowBox[{"RandomReal", "[", 
          RowBox[{"{", 
           RowBox[{"0", ",", ".1"}], "}"}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"40", "%", " ", "start", " ", "below", " ", 
        RowBox[{".1", "/", "day"}]}], " ", "*)"}], "\n", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"xx", "=", ".0005"}], ";"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"xx", "=", ".01"}], ";"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"10", "^", 
          RowBox[{"-", "3"}]}], ",", 
         RowBox[{"10", "^", 
          RowBox[{"-", "3"}]}], ",", "1"}], "}"}], 
       RowBox[{"RandomChoice", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1."}], ",", "1."}], "}"}], "]"}], 
       RowBox[{"xx", "/", 
        RowBox[{"(", 
         RowBox[{"1.38", " ", 
          RowBox[{"10", "^", "4"}]}], ")"}]}]}]}], "\n", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"three", " ", "components"}], ",", " ", 
       RowBox[{"arbitrary", " ", "sign"}]}], " ", "*)"}], ")"}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", 
               RowBox[{"--", 
                RowBox[{"--", 
                 RowBox[{"--", 
                  RowBox[{"-", "end"}]}]}]}]}]}]}]}]}]}]}]}]}]}], " ", "of", 
     " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"resetomegf", "[", "]"}], "--"}], "--"}], "--"}], 
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", 
               RowBox[{"--", 
                RowBox[{"--", 
                 RowBox[{"--", "-"}]}]}]}]}]}]}]}]}]}]}]}]}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     GraphicsBox[{GraphicsComplexBox[CompressedData["
1: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
        "], {{{}, 
          {RGBColor[0.9, 0.36, 0.054], Opacity[0.3], EdgeForm[None], 
           GraphicsGroupBox[PolygonBox[CompressedData["
1:eJwl1GV4l1UAxuH/BoMNRgxGjB5do+ZGjG7GRoyGEZvEJiUhAhKCSdotHSah
YJIGqCjdDdKoqJSCgtyTD/d1fu9zruv9eKLTR6aMCA4EAkFkBt0/M4Ludx09
xFmbwfzru5ZzEN/rf6ipB/KK/o7b1PD9YBb9Mlu5RYwtPet/Op2X2MLfVLen
UUun8SLf8hfV7AOoqQfwAt9wk6r2/tTQ/Xmer7lBFXs/YnQ/nuMrrlPZ3pfq
ui9z2cw1KtlTqaZTmcMmrlLR3oequg+z2cifVLD3poruzSw28Afl7b2orHsx
k/X8Tjl7TyrpnsxgHVcoa+9BRd2DZ/mS34i2d6eC7s4zfMGvlLF3o7zuxtN8
zi+UtnelnO7KU3zGZUrZu1BWd+FJPuUSJe0pROsUnuATLlLC3pkyujPTWcsF
its7UVp3YhprOE8xe0dK6Y48zsecI8regZK6A1P5iLMUtSdTQiczhdWcoYg9
ieI6icms4mcK29tTTLdnEis5TSF7IlE6kcdYwSki7e0oqtsxkQ85SUF7W4ro
tkzgA05QwN6GwroN43mf40TYW1NIt+ZR3uMY+e2tiNStGMe7HCWfvSUFdUse
4R2OkNfeggK6BWNZzmHy2JsToZszhmUcItzejPy6GaNZykFy25uSTzdlFEs4
QC57E/LqJjzMYvYTZm9MHt2YkSxiH6H2RoTrRoxgIXvJaW9Ibt2Q4SxgDzns
CeTSCQxjPrsJsTcgTDdgKPPYRXZ7fUJ1fR7ibXaSzV6PnLoembzFDoLtdcmh
65LBm2wnyB5PiI5nCG/wUyDw/0MaR3YZx2Be50f+4wF32bJOBvEa27hLrLus
NzmWgbzKD9yhjrt74BOXxw==
             "]]]}, {}, {}}, {{}, {}, 
          TagBox[
           {RGBColor[0.9, 0.36, 0.054], AbsoluteThickness[1.6], Opacity[1.], 
            LineBox[CompressedData["
1:eJwl1HeciHUcB/DjDne2G/Y647iFo6RBGlJURlQqKo5IUQkpK+0QIiXKKFRG
kQYZLQpFS2lZDVsKLaH39+WP9/P5/D6/1+t5/nsyew7sPKBIQkLCLR6RTT1O
yPVMpZBmFI10d1Ju4Gl6cwaJke5OyY08Qx/OJCkyXswnYlp8i+YUi4zv8qn+
LH05i+KR9qJs0qfTjxaUiLQnslmfwa2cTXKkPYnP9OfozzmkRNqL8bn+PLdx
LiUj7cX5Qp/J7ZxHqUh7Cb7UZzGAlpSOtCfzlT6bgbSiTKQ9hS36HO7gfMpG
2kvytf4Cd9KacpH2Unyjv8hdXED5SHtptupzGcSFVIi0l+FbfR53cxGpkfay
fKfPZzAXkxZpL8f3+ksMoQ3pkfby/KC/zFAuISPSXoEf9Ve4h7ZUjLSnsk1f
wDAupVKkPY3t+kLu5TIqR9rT2aEv4j7aUSXSnsFOfTHDaU/VSHtFdumvMoLL
qRZpr8RP+muM5AqqR9or87O+hFFcSY1IexV+0Zcymg7UjLRX5Vf9de6nI7Ui
7dXYrS9jDJ2oHWmvzh79DR6gM5mR9hrs1d/kQa6iTqS9Jvv0t3iILtSNtNdi
v/42D9OVepH22hzQl/MIV1M/0p7JQX0Fj3INWZH2OhzS3+ExrqVBpL0uv+kr
eZxuNIy01+OwvoqxXEd2pL0+v+urGcf15ETas/hDX8N4biA30t6AI/q7PEF3
8iLtDTmqv8cEepAfac/mmP4+E7mRRpH2HP7UP2ASN9E40p7LX/qHPMnNNIm0
5/G3vpbJ9KQg0p7PP/o6ptAr2Brxr/4RT1Ho3Jjj+sf01pvwn95HFhQ5/V9u
6vw/zcWW8A==
             "]]},
           Annotation[#, "Charting`Private`Tag$6713483#1"]& ]}}], {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0, 0},
      DisplayFunction->Identity,
      Frame->{{True, True}, {True, True}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{
       "DefaultBoundaryStyle" -> Automatic, 
        "DefaultGraphicsInteraction" -> {
         "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
          "Effects" -> {
           "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
            "Droplines" -> {
             "freeformCursorMode" -> True, 
              "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
        "DefaultMeshStyle" -> AbsolutePointSize[6], "ScalingFunctions" -> 
        None, "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}, "AxesInFront" -> True},
      PlotRange->{All, All},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.05], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], ";"}], "*)"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"-", "this"}]}]}]}]}], " ", "constructs", " ", "the", " ", 
      "plot", " ", "of", " ", "a", " ", "running", " ", "box", "  ", "mean", 
      " ", "versus", " ", "diameter"}], ",", " ", 
     RowBox[{
      RowBox[{"using", " ", "a", " ", "box", " ", "width", " ", 
       RowBox[{"of", " ", "'"}], 
       RowBox[{"width", "'"}], " ", "and", " ", "not", " ", "dropping", " ", 
       "any", " ", 
       RowBox[{"spins", "  ", "--"}], "This", " ", "is", " ", "not", " ", 
       "the", " ", "same", " ", "as", " ", "in", " ", "the", " ", "es"}], 
      "\[IndentingNewLine]", "-", 
      RowBox[{"Pravec", " ", "paper"}]}], ",", " ", 
     RowBox[{
      RowBox[{"they", " ", "use", " ", 
       RowBox[{"the", " ", "'"}], "Geometric", " ", 
       RowBox[{"Mean", "'"}], " ", "and", " ", "cut", " ", "off", " ", "the", 
       " ", "slow", " ", "spinners", " ", "in", " ", "an", " ", "arbitrary", 
       " ", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"way", "--"}], "--"}], "--"}], "--"}], "--"}], 
                    "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
                    "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
                  "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
           "--"}], "--"}], "--"}], "--"}]}], "-"}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "this", " ", "uses", " ", "Mathematica", " ", "moving", " ", "average"}],
      ",", " ", 
     RowBox[{"much", " ", "faster"}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"back", " ", "to", " ", "mine"}], ",", " ", 
     RowBox[{
     "it", " ", "uses", " ", "variable", " ", "widths", " ", "based", " ", 
      "on", " ", "range"}]}], " ", "*)"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"runboxmeanf", "[", 
     RowBox[{"list_", ",", "percent_", ",", "color_"}], "]"}], ":=", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{
       RowBox[{
       "list", " ", "is", " ", "a", " ", "set", " ", "of", " ", "pairs"}], 
       ";", " ", "dia"}], ",", 
      RowBox[{
      "spin", " ", "\[IndentingNewLine]", "percent", " ", "now", " ", "is", 
       " ", "right", " ", "percent", " ", "of", " ", "diameter", " ", 
       "range"}]}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"list1", "=", 
       RowBox[{"Sort", "[", "list", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"list1", "=", 
       RowBox[{"DeleteCases", "[", 
        RowBox[{"list1", ",", 
         RowBox[{"{", 
          RowBox[{"0.", ",", "_"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"lll", "=", 
       RowBox[{"Length", "[", "list1", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"lll", "<", "5"}], ",", 
        RowBox[{
         RowBox[{"Print", "[", "\"\<too few to get mean\>\"", "]"}], ";", 
         RowBox[{"Return", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"istart", "=", 
       RowBox[{
        RowBox[{"FirstPosition", "[", 
         RowBox[{
          RowBox[{"list1", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
          RowBox[{"_", "?", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"#", ">", " ", 
              RowBox[{
               RowBox[{"list1", "[", 
                RowBox[{"[", 
                 RowBox[{"1", ",", "1"}], "]"}], "]"}], "percent"}]}], "&"}], 
            ")"}]}]}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"ilast", "=", 
       RowBox[{
        RowBox[{"FirstPosition", "[", 
         RowBox[{
          RowBox[{"list1", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
          RowBox[{"_", "?", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"#", ">", " ", 
              RowBox[{
               RowBox[{"list1", "[", 
                RowBox[{"[", 
                 RowBox[{"lll", ",", "1"}], "]"}], "]"}], "/", "percent"}]}], 
             "&"}], ")"}]}]}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"ilast", "=", 
         RowBox[{"Min", "[", 
          RowBox[{"ilast", ",", 
           RowBox[{"lll", "-", "5"}]}], "]"}]}], ";"}], "*)"}], 
      "\[IndentingNewLine]", "\n", 
      RowBox[{"ListLogLogPlot", "[", 
       RowBox[{
        RowBox[{"Table", "[", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "convert", " ", "percent", " ", "for", " ", "dia", " ", "range", 
           " ", "to", " ", "number", " ", "of", " ", "points"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"numright", "=", 
            RowBox[{
             RowBox[{"FirstPosition", "[", 
              RowBox[{
               RowBox[{"list1", "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
               RowBox[{"_", "?", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"#", ">", 
                   RowBox[{"percent", " ", 
                    RowBox[{"list1", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", ",", "1"}], "]"}], "]"}]}]}], "&"}], 
                 ")"}]}]}], "]"}], "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"width", "=", 
            RowBox[{"Min", "[", 
             RowBox[{
              RowBox[{"i", "-", "1"}], ",", 
              RowBox[{"(", 
               RowBox[{"numright", "-", "i"}], ")"}], ",", 
              RowBox[{"lll", "-", "i"}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{"{", 
               RowBox[{"i", ",", "numright", ",", "width"}], "}"}], "]"}], 
             ";"}], "*)"}], "\[IndentingNewLine]", 
           RowBox[{"part", "=", 
            RowBox[{
             RowBox[{
              RowBox[{"list1", "[", 
               RowBox[{"[", 
                RowBox[{
                 RowBox[{"i", "-", "width"}], ";;", 
                 RowBox[{"i", "+", "width"}]}], "]"}], "]"}], "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", "2"}], "]"}], "]"}], "//", "Flatten"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"list1", "[", 
              RowBox[{"[", 
               RowBox[{"i", ",", "1"}], "]"}], "]"}], ",", 
             RowBox[{"Mean", "[", "part", "]"}]}], "}"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"istart", "+", "2"}], ",", 
            RowBox[{"ilast", "-", "2"}]}], "}"}]}], "]"}], ",", 
        RowBox[{"PlotStyle", "\[Rule]", "color"}], ",", 
        RowBox[{"FrameLabel", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"\"\<Diameter, km\>\"", ",", "\"\<Spin, cycles/day\>\""}], 
          "}"}]}], ",", 
        RowBox[{"Joined", "\[Rule]", "True"}]}], "]"}]}], ")"}]}], 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"___", "___", "___", "___", "___", "___", "_"}], "-", " ", 
     RowBox[{"end", " ", "of", "  ", 
      RowBox[{
       RowBox[{"runboxmeanf", " ", "--"}], "--"}]}], "-"}], "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "existing", " ", "binaries", " ", "probably", " ", "binary", " ", "pairs",
      " ", "if", " ", "spun", " ", "well", " ", "past", " ", "barrier"}], " ",
     "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"assume", " ", "elongations", " ", "for", " ", "C"}], "-", 
     RowBox[{
     "Type", " ", "and", " ", "moderate", " ", "spins", " ", "above", " ", 
      "the", " ", "limit"}]}], " ", "*)"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "for", " ", "the", " ", "spins", " ", "and", " ", "diameters", " ", "at",
       " ", "the", " ", "spinlimit"}], ",", " ", 
     RowBox[{
     "a", " ", "tumbler", " ", "would", " ", "recover", " ", "very", " ", 
      RowBox[{"fast", ".", "  ", "Therefore"}]}], ",", " ", 
     RowBox[{
     "assume", " ", "is", " ", "is", " ", "recovered", " ", "to", " ", 
      "principal", " ", "axis", " ", "spin"}], ",", 
     RowBox[{"then", " ", "lower", " ", "the", " ", "spin"}], ",", " ", 
     RowBox[{
     "and", " ", "assume", " ", "it", " ", "is", " ", "a", " ", "much", " ", 
      "longer", " ", "effective", " ", "shape", " ", "for", " ", "subsequent",
       " ", 
      RowBox[{"hits", " ", "?"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     GraphicsBox[{
       {RGBColor[0.92, 0.488, 0.2432], EdgeForm[{Opacity[0.581], Thickness[
        Small]}], {}, 
        {RGBColor[0.92, 0.488, 0.2432], EdgeForm[{Opacity[0.581], Thickness[
         Small]}], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.00061, 0}, {0.00062, 13.}, "RoundingRadius" -> 
                0]},
              
              ImageSizeCache->{{26.590720669999968`, 29.781026813999972`}, {
               1.1170981979510535`, 3.1025114552292044`}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 13]& ,
            TagBoxNote->"13"],
           StyleBox[
           "13", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
            False]],
          Annotation[#, 
           Style[13, {FontFamily -> "Helvetica", FontSize -> 14}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.00062, 0}, {0.00063, 28.}, "RoundingRadius" -> 
                0]},
              
              ImageSizeCache->{{29.281026813999972`, 
               32.47133295799998}, {-0.5968401758314283, 
               3.1025114552292044`}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 28]& ,
            TagBoxNote->"28"],
           StyleBox[
           "28", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
            False]],
          Annotation[#, 
           Style[28, {FontFamily -> "Helvetica", FontSize -> 14}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.00063, 0}, {0.00064, 58.}, "RoundingRadius" -> 
                0]},
              
              ImageSizeCache->{{31.971332957999977`, 
               35.16163910199998}, {-4.024716923396392, 3.1025114552292044`}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 58]& ,
            TagBoxNote->"58"],
           StyleBox[
           "58", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
            False]],
          Annotation[#, 
           Style[58, {FontFamily -> "Helvetica", FontSize -> 14}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.00064, 0}, {0.00065, 68.}, "RoundingRadius" -> 
                0]},
              
              ImageSizeCache->{{34.66163910199998, 
               37.85194524599996}, {-5.167342505918048, 3.1025114552292044`}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 68]& ,
            TagBoxNote->"68"],
           StyleBox[
           "68", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
            False]],
          Annotation[#, 
           Style[68, {FontFamily -> "Helvetica", FontSize -> 14}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.00065, 0}, {0.00066, 99.}, "RoundingRadius" -> 
                0]},
              
              ImageSizeCache->{{37.35194524599996, 
               40.54225138999996}, {-8.709481811735177, 3.1025114552292052`}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 99]& ,
            TagBoxNote->"99"],
           StyleBox[
           "99", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
            False]],
          Annotation[#, 
           Style[99, {FontFamily -> "Helvetica", FontSize -> 14}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.00066, 0}, {0.00067, 121.}, "RoundingRadius" -> 
                0]},
              
              ImageSizeCache->{{40.04225138999996, 
               43.232557533999966`}, {-11.223258093282816`, 
               3.1025114552292052`}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 121]& ,
            TagBoxNote->"121"],
           StyleBox[
           "121", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
            False]],
          Annotation[#, 
           Style[121, {FontFamily -> "Helvetica", FontSize -> 14}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.00067, 0}, {0.00068, 120.}, "RoundingRadius" -> 
                0]},
              
              ImageSizeCache->{{42.732557533999966`, 
               45.922863678}, {-11.108995535030651`, 3.1025114552292052`}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 120]& ,
            TagBoxNote->"120"],
           StyleBox[
           "120", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
            False]],
          Annotation[#, 
           Style[120, {FontFamily -> "Helvetica", FontSize -> 14}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.00068, 0}, {0.00069, 130.}, "RoundingRadius" -> 
                0]},
              
              ImageSizeCache->{{45.422863678, 
               48.613169821999975`}, {-12.251621117552304`, 
               3.1025114552292052`}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 130]& ,
            TagBoxNote->"130"],
           StyleBox[
           "130", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
            False]],
          Annotation[#, 
           Style[130, {FontFamily -> "Helvetica", FontSize -> 14}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.00069, 0}, {0.0007, 169.}, "RoundingRadius" -> 
                0]},
              
              ImageSizeCache->{{48.113169821999975`, 
               51.30347596599998}, {-16.707860889386758`, 
               3.1025114552292052`}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 169]& ,
            TagBoxNote->"169"],
           StyleBox[
           "169", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
            False]],
          Annotation[#, 
           Style[169, {FontFamily -> "Helvetica", FontSize -> 14}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.0007, 0}, {0.00071, 199.}, "RoundingRadius" -> 
                0]},
              
              ImageSizeCache->{{50.80347596599998, 
               53.993782109999984`}, {-20.13573763695172, 
               3.1025114552292052`}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 199]& ,
            TagBoxNote->"199"],
           StyleBox[
           "199", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
            False]],
          Annotation[#, 
           Style[199, {FontFamily -> "Helvetica", FontSize -> 14}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.00071, 0}, {0.00072, 216.}, "RoundingRadius" -> 
                0]},
              
              ImageSizeCache->{{53.493782109999984`, 
               56.68408825399999}, {-22.078201127238533`, 
               3.1025114552292052`}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 216]& ,
            TagBoxNote->"216"],
           StyleBox[
           "216", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
            False]],
          Annotation[#, 
           Style[216, {FontFamily -> "Helvetica", FontSize -> 14}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.00072, 0}, {0.00073, 179.}, "RoundingRadius" -> 
                0]},
              
              ImageSizeCache->{{56.18408825399999, 
               59.374394397999964`}, {-17.85048647190841, 
               3.1025114552292052`}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 179]& ,
            TagBoxNote->"179"],
           StyleBox[
           "179", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
            False]],
          Annotation[#, 
           Style[179, {FontFamily -> "Helvetica", FontSize -> 14}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.00073, 0}, {0.00074, 162.}, "RoundingRadius" -> 
                0]},
              
              ImageSizeCache->{{58.874394397999964`, 
               62.06470054199997}, {-15.908022981621599`, 
               3.1025114552292052`}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 162]& ,
            TagBoxNote->"162"],
           StyleBox[
           "162", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
            False]],
          Annotation[#, 
           Style[162, {FontFamily -> "Helvetica", FontSize -> 14}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.00074, 0}, {0.00075, 84.}, "RoundingRadius" -> 
                0]},
              
              ImageSizeCache->{{61.56470054199997, 
               64.75500668599997}, {-6.995543437952693, 3.1025114552292044`}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 84]& ,
            TagBoxNote->"84"],
           StyleBox[
           "84", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
            False]],
          Annotation[#, 
           Style[84, {FontFamily -> "Helvetica", FontSize -> 14}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.00075, 0}, {0.00076, 31.}, "RoundingRadius" -> 
                0]},
              
              ImageSizeCache->{{64.25500668599997, 
               67.44531282999998}, {-0.9396278505879243, 
               3.1025114552292044`}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 31]& ,
            TagBoxNote->"31"],
           StyleBox[
           "31", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
            False]],
          Annotation[#, 
           Style[31, {FontFamily -> "Helvetica", FontSize -> 14}], 
           "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, False},
      AxesLabel->{None, None},
      AxesOrigin->{0.000607, 0},
      Frame->True,
      FrameLabel->{{None, None}, {None, None}},
      FrameStyle->Automatic,
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{Automatic, Automatic},
      GridLinesStyle->Directive[
        GrayLevel[0.4, 0.5], 
        AbsoluteThickness[1], 
        AbsoluteDashing[{1, 2}]],
      ImagePadding->{{26., 25.659279}, {18., 3.872814}},
      ImageSize->{93.6953125, Automatic},
      LabelStyle->{FontFamily -> "Helvetica", FontSize -> 14},
      PlotRange->{{0.000606875, 0.000763125}, {0., 227.3684210526316}},
      PlotRangePadding->Automatic,
      Ticks->{Automatic, Automatic}], "second", " ", "variable", " ", "is", 
     " ", "where", " ", "the", " ", "peak", " ", "is"}], "*)"}], 
   "\[IndentingNewLine]", " ", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"spunoverf", "[", "]"}], ":=", 
    RowBox[{"(", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"plothis", ">", "0"}], ",", 
        RowBox[{
         RowBox[{"AppendTo", "[", 
          RowBox[{"binforplots", ",", 
           RowBox[{"{", 
            RowBox[{"impacttime", ",", 
             RowBox[{
              RowBox[{"Sign", "[", 
               RowBox[{"omeg", "[", 
                RowBox[{"[", "3", "]"}], "]"}], "]"}], " ", 
              RowBox[{"Norm", "[", "omeg", "]"}]}], ",", "d", ",", "d0"}], 
            "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"AppendTo", "[", 
          RowBox[{
           RowBox[{"histplotpts", "[", 
            RowBox[{"[", "plothis", "]"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"impacttime", ",", "d", ",", 
             RowBox[{
              RowBox[{"Sign", "[", 
               RowBox[{"omeg", "[", 
                RowBox[{"[", "3", "]"}], "]"}], "]"}], " ", 
              RowBox[{"Norm", "[", "omeg", "]"}]}], ",", "wobble"}], "}"}]}], 
          "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"omeg", "=", 
         RowBox[{
          RowBox[{"Sign", "[", 
           RowBox[{"omeg", "[", 
            RowBox[{"[", "3", "]"}], "]"}], "]"}], "  ", 
          RowBox[{"RandomVariate", "[", 
           RowBox[{"TriangularDistribution", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{".2", ",", "0.9"}], "}"}], ",", ".4"}], "]"}], "]"}], 
          RowBox[{"{", 
           RowBox[{"0", ",", "0", ",", "1"}], "}"}], "currentspinlim"}]}], 
        ";"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"omeg", "=", 
         RowBox[{
          RowBox[{"Sign", "[", 
           RowBox[{"omeg", "[", 
            RowBox[{"[", "3", "]"}], "]"}], "]"}], "  ", 
          RowBox[{"RandomReal", "[", 
           RowBox[{"{", 
            RowBox[{".9", ",", "1.0"}], "}"}], "]"}], 
          RowBox[{"{", 
           RowBox[{"0", ",", "0", ",", "1"}], "}"}], "currentspinlim"}]}], 
        ";"}], "*)"}], " ", 
      RowBox[{"(*", 
       RowBox[{"Commented", " ", "by", " ", "Gaurav"}], " ", "*)"}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"plothis", ">", "0"}], ",", 
        RowBox[{
         RowBox[{"AppendTo", "[", 
          RowBox[{"binforplots", ",", 
           RowBox[{"{", 
            RowBox[{"impacttime", ",", 
             RowBox[{
              RowBox[{"Sign", "[", 
               RowBox[{"omeg", "[", 
                RowBox[{"[", "3", "]"}], "]"}], "]"}], " ", 
              RowBox[{"Norm", "[", "omeg", "]"}]}], ",", "d", ",", "d0"}], 
            "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"AppendTo", "[", 
          RowBox[{
           RowBox[{"histplotpts", "[", 
            RowBox[{"[", "plothis", "]"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"impacttime", ",", "d", ",", 
             RowBox[{
              RowBox[{"Sign", "[", 
               RowBox[{"omeg", "[", 
                RowBox[{"[", "3", "]"}], "]"}], "]"}], " ", 
              RowBox[{"Norm", "[", "omeg", "]"}]}], ",", "wobble"}], "}"}]}], 
          "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"wobble", "=", "0"}], ";"}], "*)"}], " ", 
      RowBox[{"(*", " ", 
       RowBox[{"Commented", " ", "by", " ", "gaurav"}], " ", "*)"}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", "itsabinary"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"itsabinary", "=", "True"}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"not", " ", "in", " ", "binaries"}], ",", " ", 
           RowBox[{
            RowBox[{
            "put", " ", "new", " ", "one", " ", "in", " ", "binaries"}], 
            ".."}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"binaries", "=", 
            RowBox[{"Complement", "[", 
             RowBox[{"binaries", ",", 
              RowBox[{"Select", "[", 
               RowBox[{"binaries", ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"#", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", "iast"}], 
                 "&"}]}], "]"}]}], "]"}]}], ";"}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"binaries", ",", 
           RowBox[{"{", 
            RowBox[{"iast", ",", "d", ",", 
             RowBox[{
              RowBox[{"Sign", "[", 
               RowBox[{"omeg", "[", 
                RowBox[{"[", "3", "]"}], "]"}], "]"}], " ", 
              RowBox[{"Norm", "[", "omeg", "]"}]}], " ", ",", "impacttime"}], 
            "}"}]}], "]"}], ";", 
         RowBox[{"(*", " ", 
          RowBox[{
          "this", " ", "is", " ", "the", " ", "state", " ", "and", " ", 
           "time", " ", "at", " ", "first", " ", "binary", " ", "formation"}],
           " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{"\"\<iast new shape \>\"", ",", 
             RowBox[{"{", 
              RowBox[{"iast", ",", "ashape", ",", "beta"}], "}"}]}], "]"}], 
           ";"}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"plothis", ">", "0"}], ",", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"binforplots", ",", 
             RowBox[{"{", 
              RowBox[{"impacttime", ",", 
               RowBox[{
                RowBox[{"Sign", "[", 
                 RowBox[{"omeg", "[", 
                  RowBox[{"[", "3", "]"}], "]"}], "]"}], " ", 
                RowBox[{"Norm", "[", "omeg", "]"}]}], ",", "d", ",", "d0"}], 
              "}"}]}], "]"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
     ")"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", "Strength"}]}]}]}]}]}]}]}]}], " ", "spin", " ", 
     "limit", " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"plots", "  ", "--"}], "--"}], "--"}], "--"}], "--"}], 
           "--"}], "--"}], "--"}], "--"}], "--"}], "--"}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"this", " ", "is", " ", "from", " ", "Holsapple"}], ",", " ", 
     RowBox[{
      RowBox[{
      "Icarus", " ", "2007.", "  ", "I", " ", "use", " ", "a", " ", 
       "coefficient", " ", "for", " ", "a", " ", "prolate", " ", "body", " ", 
       "with", " ", "alpha"}], "=", 
      RowBox[{"beta", "=", 
       RowBox[{
       "0.6", "\[IndentingNewLine]", "and", " ", "the", " ", "expected", " ", 
        "strength", " ", "assuming", " ", 
        RowBox[{
         RowBox[{"strength", "~", "r"}], "^", 
         RowBox[{"-", ".5"}]}], " ", "with", " ", "a", " ", "lab", " ", 
        "values", " ", "of", " ", "2.25", " ", 
        RowBox[{"10", "^", "8"}]}]}]}]}], "  ", "*)"}], "\[IndentingNewLine]",
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"spinlimplots", "[", "unitsname_", "]"}], ":=", 
    RowBox[{"(", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Which", "[", 
       RowBox[{
        RowBox[{"unitsname", "\[Equal]", "\"\<Radians/s\>\""}], ",", 
        RowBox[{
         RowBox[{"unitsfac", "=", "1"}], ";", 
         RowBox[{"exp", "=", "1"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"unitsname", "==", "\"\<Cycles/day\>\""}], ",", 
        RowBox[{
         RowBox[{"exp", "=", "1"}], ";", 
         RowBox[{"unitsfac", "=", 
          RowBox[{"1.38", " ", 
           RowBox[{"10", "^", "4"}]}]}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"unitsname", "==", "\"\<Hours/cycle\>\""}], ",", 
        RowBox[{
         RowBox[{"unitsfac", "=", 
          RowBox[{"1.745", " ", 
           RowBox[{"10", "^", 
            RowBox[{"-", "3"}]}]}]}], ";", 
         RowBox[{"exp", "=", 
          RowBox[{"-", "1"}]}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"denscgs", "=", "2.5"}], ";", "\[IndentingNewLine]", 
      RowBox[{"omeglim", "=", 
       RowBox[{"unitsfac", " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"2", 
           RowBox[{"Sqrt", "[", 
            RowBox[{"2.25", " ", 
             RowBox[{
              RowBox[{"10", "^", "8"}], "/", "denscgs"}]}], "]"}], 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"10", "^", "5"}], " ", 
              RowBox[{"dd", "/", "2"}]}], " ", ")"}], "^", 
            RowBox[{"-", 
             RowBox[{"(", 
              RowBox[{"5", "/", "4"}], ")"}]}]}]}], ")"}], "^", "exp"}]}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"y1", "=", 
       RowBox[{"Min", "[", 
        RowBox[{
         RowBox[{"omeglim", "/.", 
          RowBox[{"dd", "\[Rule]", ".001"}]}], ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"0.01", " ", "gravlimit", " ", "unitsfac"}], ")"}], "^", 
          "exp"}]}], " ", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"y2", "=", 
       RowBox[{"Max", "[", 
        RowBox[{
         RowBox[{"omeglim", "/.", 
          RowBox[{"dd", "\[Rule]", ".001"}]}], ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"0.01", " ", "gravlimit", " ", "unitsfac"}], ")"}], "^", 
          "exp"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"y3", "=", 
       RowBox[{"(", 
        RowBox[{"omeglim", "/.", 
         RowBox[{"dd", "\[Rule]", ".001"}]}], ")"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"y4", "=", 
       RowBox[{"unitsfac", 
        RowBox[{
         RowBox[{"(", "gravlimit", " ", ")"}], "^", "exp"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"omeglimweak", "=", 
       RowBox[{"unitsfac", " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"2", 
           RowBox[{"Sqrt", "[", 
            RowBox[{"2.25", " ", 
             RowBox[{
              RowBox[{"10", "^", "7"}], "/", "denscgs"}]}], "]"}], 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"10", "^", "5"}], 
              RowBox[{"dd", "/", "2"}]}], ")"}], "^", 
            RowBox[{"-", 
             RowBox[{"(", 
              RowBox[{"5", "/", "4"}], ")"}]}]}]}], ")"}], "^", "exp"}]}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"omeglimweakest", "=", 
       RowBox[{"unitsfac", " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"2", 
           RowBox[{"Sqrt", "[", 
            RowBox[{"2.25", " ", 
             RowBox[{
              RowBox[{"10", "^", "6"}], "/", "denscgs"}]}], "]"}], 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"10", "^", "5"}], 
              RowBox[{"dd", "/", "2"}]}], ")"}], "^", 
            RowBox[{"-", 
             RowBox[{"(", 
              RowBox[{"5", "/", "4"}], ")"}]}]}]}], ")"}], "^", "exp"}]}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"plotstrength", "=", 
       RowBox[{"LogLogPlot", "[", 
        RowBox[{"omeglim", ",", 
         RowBox[{"{", 
          RowBox[{"dd", ",", ".001", ",", "1000"}], "}"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", "Orange", "}"}]}], ",", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"y3", ",", "y4"}], "}"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"plotstrength2", "=", 
       RowBox[{"LogLogPlot", "[", 
        RowBox[{"omeglimweak", ",", 
         RowBox[{"{", 
          RowBox[{"dd", ",", ".001", ",", "1000"}], "}"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"Dotted", ",", "Orange"}], "}"}]}], ",", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"y3", ",", "y4"}], "}"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"plotstrength3", "=", 
       RowBox[{"LogLogPlot", "[", 
        RowBox[{"omeglimweakest", ",", 
         RowBox[{"{", 
          RowBox[{"dd", ",", ".001", ",", "1000"}], "}"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"Dashed", ",", "Orange"}], "}"}]}], ",", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"y3", ",", "y4"}], "}"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"plotgrav1", "=", 
       RowBox[{"LogLogPlot", "[", 
        RowBox[{
         RowBox[{"unitsfac", " ", 
          RowBox[{"gravlimit", "^", "exp"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"dd", ",", ".001", ",", 
           RowBox[{"dcenter", "/", "3"}]}], "}"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"Dotted", ",", " ", "Thick", ",", "Gray"}], "}"}]}], ",", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{".001", ",", "0.1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"y1", ",", "y2"}], "}"}]}], "}"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"plotgrav2", "=", 
       RowBox[{"LogLogPlot", "[", 
        RowBox[{
         RowBox[{"unitsfac", " ", 
          RowBox[{"gravlimit", "^", "exp"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"dd", ",", 
           RowBox[{"dcenter", "/", "3"}], ",", 
           RowBox[{"3", " ", "dcenter"}]}], "}"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"Dashed", ",", "Thick", ",", "Gray"}], "}"}]}], ",", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{".1", ",", "2"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"y1", ",", "y2"}], "}"}]}], "}"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"plotgrav3", "=", 
       RowBox[{"LogLogPlot", "[", 
        RowBox[{
         RowBox[{"unitsfac", " ", 
          RowBox[{"gravlimit", "^", "exp"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"dd", ",", 
           RowBox[{"3", " ", "dcenter"}], ",", "1000"}], "}"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"Thick", ",", "Gray"}], "}"}]}], ",", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"1", ",", "1000"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"y1", ",", "y2"}], "}"}]}], "}"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"upperrange1", "=", 
       RowBox[{"unitsfac", 
        RowBox[{
         RowBox[{"(", " ", 
          RowBox[{"2", 
           RowBox[{"Sqrt", "[", 
            RowBox[{"2.25", " ", 
             RowBox[{
              RowBox[{"10", "^", "8"}], "/", "denscgs"}]}], "]"}], 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"10", "^", "5"}], 
              RowBox[{
               RowBox[{"dcenter", "/", "3"}], "/", "2"}]}], ")"}], "^", 
            RowBox[{"-", 
             RowBox[{"(", 
              RowBox[{"5", "/", "4"}], ")"}]}]}]}], ")"}], "^", "exp"}]}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"upperrange2", "=", 
       RowBox[{"unitsfac", " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"2", 
           RowBox[{"Sqrt", "[", 
            RowBox[{"2.25", " ", 
             RowBox[{
              RowBox[{"10", "^", "8"}], "/", "denscgs"}]}], "]"}], 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"3", " ", 
              RowBox[{"10", "^", "5"}], 
              RowBox[{"dcenter", "/", "2"}]}], ")"}], "^", 
            RowBox[{"-", 
             RowBox[{"(", 
              RowBox[{"5", "/", "4"}], ")"}]}]}]}], ")"}], "^", "exp"}]}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"lin1", "=", 
       RowBox[{"ListLogLogPlot", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"dcenter", "/", "3.5"}], ",", 
             RowBox[{"unitsfac", " ", 
              RowBox[{"gravlimit", "^", "exp"}]}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"dcenter", "/", "3.5"}], ",", "upperrange1"}], "}"}]}], 
          "}"}], ",", 
         RowBox[{"Joined", "\[Rule]", "True"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", "Dotted"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"lin2", "=", 
       RowBox[{"ListLogLogPlot", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"2", " ", "dcenter"}], ",", 
             RowBox[{"unitsfac", " ", 
              RowBox[{"gravlimit", "^", "exp"}]}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"2", " ", "dcenter"}], ",", "upperrange2"}], "}"}]}], 
          "}"}], ",", 
         RowBox[{"Joined", "\[Rule]", "True"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", "Dashed"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"limitplots", "=", 
       RowBox[{"Show", "[", 
        RowBox[{
        "lin1", ",", "lin2", ",", "plotstrength", ",", "plotstrength2", ",", 
         "plotstrength3", ",", "plotgrav1", ",", "plotgrav2", ",", 
         "plotgrav3", ",", 
         RowBox[{"Frame", "\[Rule]", "True"}], ",", 
         RowBox[{"FrameLabel", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<Diameter, km\>\"", ",", "\[IndentingNewLine]", 
            RowBox[{"StringForm", "[", 
             RowBox[{"\"\<Spin, ``\>\"", ",", "unitsname"}], "]"}]}], "}"}]}],
          ",", 
         RowBox[{"LabelStyle", "\[Rule]", "24"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", "Black"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "Full"}], ",", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"Log", "[", 
           RowBox[{"{", 
            RowBox[{"y1", ",", "y2"}], "}"}], "]"}]}]}], "]"}]}]}], 
     "\[IndentingNewLine]", ")"}]}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", "End"}]}]}]}]}]}]}]}]}], " ", "of", " ", 
     "Strength", " ", "spin", " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"limits", "  ", "--"}], "--"}], "--"}], "--"}], "--"}],
            "--"}], "--"}], "--"}], "--"}], "--"}], "--"}]}], "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", "tumblelimit"}]}]}]}]}]}]}]}], " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"function", " ", "--"}], "--"}], "--"}], "--"}], 
                    "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
              "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
      "--"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"tumblelimitf", "[", 
     RowBox[{"unitsname_", ",", "legend_"}], "]"}], ":=", 
    "\[IndentingNewLine]", 
    RowBox[{"(", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Which", "[", 
       RowBox[{
        RowBox[{"unitsname", "\[Equal]", "\"\<Radians/s\>\""}], ",", 
        RowBox[{
         RowBox[{"yfac", "=", "1"}], ";", 
         RowBox[{"exp", "=", "1"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"unitsname", "\[Equal]", "\"\<Cycles/day\>\""}], ",", 
        RowBox[{
         RowBox[{"yfac", "=", 
          RowBox[{"1.38", " ", 
           RowBox[{"10", "^", "4"}]}]}], ";", 
         RowBox[{"exp", "=", "1"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"unitsname", "\[Equal]", "\"\<Hours/cycle\>\""}], ",", 
        RowBox[{
         RowBox[{"yfac", "=", 
          RowBox[{"1.745", " ", 
           RowBox[{"10", "^", 
            RowBox[{"-", "3"}]}]}]}], ";", 
         RowBox[{"exp", "=", 
          RowBox[{"-", "1"}]}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"tumblelimit1", "=", 
       RowBox[{"LogLogPlot", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"yfac", " ", "6.25", " ", 
            RowBox[{"10", "^", 
             RowBox[{"-", "5"}]}], " ", 
            RowBox[{"d", "^", 
             RowBox[{"-", 
              RowBox[{"(", 
               RowBox[{"2", "/", "3"}], ")"}]}]}], " ", 
            RowBox[{"relaxfac", "^", 
             RowBox[{"(", 
              RowBox[{"1", "/", "3"}], ")"}]}]}], ")"}], "^", 
          RowBox[{"(", "exp", ")"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"d", ",", 
           RowBox[{".5", " ", "plotdsmallest"}], ",", 
           RowBox[{"1.2", " ", "dmax"}]}], "}"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"Thick", ",", "Black"}], "}"}]}]}], "]"}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"4.5", " ", "Byr"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"tumblelimit2", "=", 
       RowBox[{"LogLogPlot", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"10", "^", 
             RowBox[{"(", 
              RowBox[{"1", "/", "3"}], ")"}]}], "yfac", " ", "6.25", " ", 
            RowBox[{"10", "^", 
             RowBox[{"-", "5"}]}], " ", 
            RowBox[{"d", "^", 
             RowBox[{"-", 
              RowBox[{"(", 
               RowBox[{"2", "/", "3"}], ")"}]}]}], " ", 
            RowBox[{"relaxfac", "^", 
             RowBox[{"(", 
              RowBox[{"1", "/", "3"}], ")"}]}]}], ")"}], "^", 
          RowBox[{"(", "exp", ")"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"d", ",", 
           RowBox[{".5", " ", "plotdsmallest"}], ",", 
           RowBox[{"1.2", " ", "dmax"}]}], "}"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"DotDashed", ",", "Green"}], "}"}]}]}], "]"}]}], ";", 
      RowBox[{"(*", " ", 
       RowBox[{"450", " ", "Myr"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"tumblelimit3", "=", 
       RowBox[{"LogLogPlot", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"100", "^", 
             RowBox[{"(", 
              RowBox[{"1", "/", "3"}], ")"}]}], "yfac", " ", "6.25", " ", 
            RowBox[{"10", "^", 
             RowBox[{"-", "5"}]}], " ", 
            RowBox[{"d", "^", 
             RowBox[{"-", 
              RowBox[{"(", 
               RowBox[{"2", "/", "3"}], ")"}]}]}], " ", 
            RowBox[{"relaxfac", "^", 
             RowBox[{"(", 
              RowBox[{"1", "/", "3"}], ")"}]}]}], ")"}], "^", 
          RowBox[{"(", "exp", ")"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"d", ",", 
           RowBox[{".5", " ", "plotdsmallest"}], ",", 
           RowBox[{"1.2", " ", "dmax"}]}], "}"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Dashing", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"Large", ",", "Large"}], "}"}]}], ",", "Red"}], 
           "}"}]}]}], "]"}]}], ";", 
      RowBox[{"(*", " ", 
       RowBox[{"45", " ", "Myr"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"tumblelimit4", "=", 
       RowBox[{"LogLogPlot", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"1000", "^", 
             RowBox[{"(", 
              RowBox[{"1", "/", "3"}], ")"}]}], "yfac", " ", "6.25", " ", 
            RowBox[{"10", "^", 
             RowBox[{"-", "5"}]}], " ", 
            RowBox[{"d", "^", 
             RowBox[{"-", 
              RowBox[{"(", 
               RowBox[{"2", "/", "3"}], ")"}]}]}], " ", 
            RowBox[{"relaxfac", "^", 
             RowBox[{"(", 
              RowBox[{"1", "/", "3"}], ")"}]}]}], ")"}], "^", 
          RowBox[{"(", "exp", ")"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"d", ",", 
           RowBox[{".5", " ", "plotdsmallest"}], ",", 
           RowBox[{"1.2", " ", "dmax"}]}], "}"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"Dotted", ",", "Purple"}], "}"}]}]}], "]"}]}], ";", 
      RowBox[{"(*", " ", 
       RowBox[{"4.5", " ", "Myr"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"legend", ",", 
        RowBox[{
         RowBox[{"plotlimit", "=", 
          RowBox[{"LogLogPlot", "[", 
           RowBox[{
            RowBox[{"yfac", " ", 
             RowBox[{
              RowBox[{"combinedspinlimf", "[", 
               RowBox[{"d", ",", "dcenter", ",", "gravlimit", ",", "True"}], 
               "]"}], "^", "exp"}]}], ",", 
            RowBox[{"{", 
             RowBox[{"d", ",", ".01", ",", "1000"}], "}"}], ",", 
            RowBox[{"PlotStyle", "->", 
             RowBox[{"{", 
              RowBox[{"Red", ",", "Dashed"}], "}"}]}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"text1", "=", 
          RowBox[{"Graphics", "[", 
           RowBox[{"Text", "[", 
            RowBox[{
             RowBox[{"Framed", "[", 
              RowBox[{"\"\<\\r The relaxation factor is \>\"", "<>", 
               RowBox[{"ToString", "[", "relaxfac", "]"}], "<>", 
               "\"\<\\n The horizontal red dashed line is the \
gravity-strength spin limit.\>\""}], "]"}], ",", 
             RowBox[{"Scaled", "[", 
              RowBox[{"{", 
               RowBox[{".5", ",", ".85"}], "}"}], "]"}], ",", 
             RowBox[{"Background", "\[Rule]", "White"}]}], "]"}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"Show", "[", 
          RowBox[{
          "tumblelimit1", ",", "tumblelimit2", ",", "tumblelimit3", ",", 
           "tumblelimit4", ",", "plotlimit", ",", "text1", ",", 
           RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
           RowBox[{"ImageSize", "\[Rule]", "Full"}], ",", 
           RowBox[{"Frame", "\[Rule]", "True"}], ",", 
           RowBox[{"FrameLabel", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"\"\<Diameter\>\"", ",", " ", "\"\<Cyles/day\>\""}], 
             "}"}]}]}], "]"}]}]}], "]"}]}], "\[IndentingNewLine]", ")"}]}], 
   "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", "end"}]}]}]}]}]}]}]}], " ", "of", " ", 
     "tumblelimit", " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"function", " ", "--"}], "--"}], "--"}], "--"}], 
                    "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
              "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
      "--"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", "unitschange"}]}]}]}]}]}]}]}], " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"function", " ", "--"}], "--"}], "--"}], "--"}], 
                    "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}]\
, "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"unitschange", "[", 
     RowBox[{"pts_", ",", "fac_"}], "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{"Transpose", " ", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"pts", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
        RowBox[{"fac", " ", 
         RowBox[{"pts", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "2"}], "]"}], "]"}]}]}], " ", "}"}], "]"}], 
     ")"}]}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", "end"}]}]}]}]}]}]}]}], " ", "of", " ", 
     "unitschange", " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"function", " ", "--"}], "--"}], "--"}], "--"}], 
                    "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
              "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
      "--"}]}], "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", "the"}]}]}]}]}]}], " ", "maxwell", " ", "fit", " ", 
      "to", " ", "the", " ", "velocity", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"distribution", " ", "--"}], "--"}], "--"}], "--"}], 
           "--"}], "--"}], "--"}], "--"}], "--"}]}], "-"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"velstatf", "[", "rand_", "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{"InverseCDF", "[", 
      RowBox[{
       RowBox[{"MaxwellDistribution", "[", "3.232", "]"}], ",", "rand"}], 
      "]"}], 
     RowBox[{"(*", 
      RowBox[{"Print", "[", 
       RowBox[{"Style", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"\"\<..... THE POPULATION IS LOADED.... With \>\"", " ", "<>", 
           RowBox[{"ToString", "[", "popfac", "]"}], "<>", "  ", "\n", 
           "\.00"}], "\"\< times more mass than the present population\>\""}],
          ",", " ", "18", ",", " ", "Red"}], "]"}], "]"}], "*)"}], ")"}]}], 
   "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", "end"}]}]}]}]}]}]}]}], " ", "of", " ", "velstatf", 
      " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"function", "--"}], "--"}], "--"}], "--"}], 
                    "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
             "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}]}], "-"}], 
    "*)"}], "\[IndentingNewLine]", "\n", 
   StyleBox[
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", "a"}]}]}], " ", "function", " ", "to", " ", "get", " ",
        "wobble", " ", "relaxed", " ", "spin", "\[IndentingNewLine]", "now", 
       " ", "I", " ", "use", " ", "actual", " ", "exponential", " ", 
       "decay"}], ",", " ", 
      RowBox[{
       RowBox[{
       "and", " ", "adjust", " ", "omeg", " ", "values", " ", "satisfying", 
        " ", "decay", " ", "of", " ", "wobble", " ", "and", " ", "balance", 
        " ", "on", " ", "A"}], "-", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"momentum", " ", "--"}], "--"}], "--"}], "--"}]}]}], "*)"}],
    
    FontColor->RGBColor[1, 0, 0]], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"wobblecalcf", "[", "]"}], ":=", "\[IndentingNewLine]", 
    RowBox[{"(", "\[IndentingNewLine]", 
     RowBox[{"(*", "  ", 
      RowBox[{
       RowBox[{
       "get", " ", "wobble", " ", "at", " ", "end", " ", "of", " ", "last", 
        " ", "time", " ", "step"}], ",", " ", 
       RowBox[{"assuming", " ", "const", " ", "AM"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"jx", ",", "jy", ",", "jz"}], "}"}], "=", "jinertia"}], ";", 
      RowBox[{"tsince", "=", 
       RowBox[{"impacttime", "-", "tlasthit"}]}], ";", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "should", " ", "not", " ", "be", " ", "here", " ", "unless", " ", 
         "tsince"}], "<", "trelax"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", "  ", 
       RowBox[{"exponential", " ", "decay", " ", 
        RowBox[{"formula", ".", "  ", "get"}], " ", "ratio", " ", "of", " ", 
        "new", " ", "to", " ", "old", " ", "wobble"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"gamma", "=", " ", 
         RowBox[{"Exp", "[", 
          RowBox[{
           RowBox[{"-", 
            RowBox[{"Log", "[", 
             RowBox[{
              RowBox[{"wobble", "/", "1"}], " ", "Degree"}], "]"}]}], 
           RowBox[{"Min", "[", 
            RowBox[{"1", ",", 
             RowBox[{"tsince", "/", "trelax"}]}], "]"}]}], "]"}]}], ";"}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"gamma", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1.", " ", 
          RowBox[{"Degree", "/", "wobble"}]}], ")"}], "^", 
        RowBox[{"(", 
         RowBox[{"tsince", "/", "trelax"}], ")"}]}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"not", " ", "here", " ", "unless", " ", 
         RowBox[{"tsince", "/", "trelax"}]}], "<", "1"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"same", " ", "as", " ", "above"}], ",", " ", 
        RowBox[{"but", " ", "less", " ", "roundoff", " ", "problem"}]}], " ", 
       "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"gamma", ">", "1"}], "||", 
         RowBox[{"gamma", "<", "0"}]}], ",", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<oops error in wobblecalcf.  \
{timesince,trelax,wobble,gamma,omeg}= \>\"", ",", 
           RowBox[{"{", 
            RowBox[{
            "tsince", ",", "trelax", ",", "wobble", ",", "gamma", ",", 
             "omeg"}], "}"}]}], "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"omeg2", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"alpha1", " ", "omegx"}], ",", 
         RowBox[{"alpha1", " ", "omegy"}], ",", 
         RowBox[{"alpha2", " ", "omegz"}]}], "}"}]}], ";", 
      RowBox[{"(*", " ", 
       RowBox[{"new", " ", "spin"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"wobble", "=", 
         RowBox[{"ArcTan", "[", 
          RowBox[{
           RowBox[{"Sqrt", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"omeg", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "^", "2"}], "+", 
             RowBox[{
              RowBox[{"omeg", "[", 
               RowBox[{"[", "2", "]"}], "]"}], "^", "2"}]}], "]"}], "/", 
           RowBox[{"Abs", "[", 
            RowBox[{"omeg", "[", 
             RowBox[{"[", "3", "]"}], "]"}], "]"}]}], "]"}]}], ";"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"the", " ", "solution", " ", "to", " ", "wobble2"}], "==", 
        RowBox[{"gamma", " ", "wobble", " ", "and", " ", "am"}], "\[Equal]", 
        RowBox[{"am2", " ", "is", " ", "given", " ", "by", " ", 
         RowBox[{"(", 
          RowBox[{"I", " ", "did", " ", "this", " ", "separately"}], " ", 
          ")"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"alpha2", "=", 
        FractionBox[
         SqrtBox[
          RowBox[{
           RowBox[{
            SuperscriptBox["jx", "2"], " ", 
            SuperscriptBox["omegx", "2"]}], "+", 
           RowBox[{
            SuperscriptBox["jy", "2"], " ", 
            SuperscriptBox["omegy", "2"]}], "+", 
           RowBox[{
            SuperscriptBox["jz", "2"], " ", 
            SuperscriptBox["omegz", "2"]}]}]], 
         SqrtBox[
          RowBox[{
           SuperscriptBox["omegz", "2"], " ", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["jz", "2"], "+", 
             FractionBox[
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  SuperscriptBox["jx", "2"], " ", 
                  SuperscriptBox["omegx", "2"]}], "+", 
                 RowBox[{
                  SuperscriptBox["jy", "2"], " ", 
                  SuperscriptBox["omegy", "2"]}]}], ")"}], " ", 
               SuperscriptBox[
                RowBox[{"Tan", "[", 
                 RowBox[{"gamma", " ", "wobble"}], "]"}], "2"]}], 
              RowBox[{
               SuperscriptBox["omegx", "2"], "+", 
               SuperscriptBox["omegy", "2"]}]]}], ")"}]}]]]}], "Input"], 
      StyleBox[";", "Input"], "\[IndentingNewLine]", 
      RowBox[{"alpha1", "=", 
       FractionBox[
        RowBox[{"omegz", " ", 
         SqrtBox[
          RowBox[{
           RowBox[{
            SuperscriptBox["jx", "2"], " ", 
            SuperscriptBox["omegx", "2"]}], "+", 
           RowBox[{
            SuperscriptBox["jy", "2"], " ", 
            SuperscriptBox["omegy", "2"]}], "+", 
           RowBox[{
            SuperscriptBox["jz", "2"], " ", 
            SuperscriptBox["omegz", "2"]}]}]], " ", 
         RowBox[{"Tan", "[", 
          RowBox[{"gamma", " ", "wobble"}], "]"}]}], 
        RowBox[{
         SqrtBox[
          RowBox[{
           SuperscriptBox["omegx", "2"], "+", 
           SuperscriptBox["omegy", "2"]}]], " ", 
         SqrtBox[
          RowBox[{
           SuperscriptBox["omegz", "2"], " ", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["jz", "2"], "+", 
             FractionBox[
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  SuperscriptBox["jx", "2"], " ", 
                  SuperscriptBox["omegx", "2"]}], "+", 
                 RowBox[{
                  SuperscriptBox["jy", "2"], " ", 
                  SuperscriptBox["omegy", "2"]}]}], ")"}], " ", 
               SuperscriptBox[
                RowBox[{"Tan", "[", 
                 RowBox[{"gamma", " ", "wobble"}], "]"}], "2"]}], 
              RowBox[{
               SuperscriptBox["omegx", "2"], "+", 
               SuperscriptBox["omegy", "2"]}]]}], ")"}]}]]}]]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Im", "[", "alpha2", "]"}], ">", "0"}], ",", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<wobble wrong omeg= \>\"", ",", 
           RowBox[{"{", 
            RowBox[{"omeg", ",", "omegx"}], "}"}]}], "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\n", 
      RowBox[{"omeg", "=", "omeg2"}], ";", "\[IndentingNewLine]", 
      RowBox[{"omegnet", "=", 
       RowBox[{
        RowBox[{"Sign", "[", "omegz", "]"}], 
        RowBox[{"Norm", "[", "omeg", "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"wobble", "=", 
       RowBox[{"ArcTan", "[", 
        RowBox[{"Sqrt", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"omeg2", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "^", "2"}], "+", 
            RowBox[{
             RowBox[{"omeg2", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "^", "2"}]}], ")"}], "/", 
          RowBox[{
           RowBox[{"omeg2", "[", 
            RowBox[{"[", "3", "]"}], "]"}], "^", "2"}]}], "]"}], "]"}]}], " ",
       ";"}], "\[IndentingNewLine]", ")"}]}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"-", "End"}]}]}]}]}]}]}]}]}], " ", "of", " ", 
      "wobblecalcf", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"function", "--"}], "--"}], "--"}], "--"}], 
                   "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
            "--"}], "--"}], "--"}], "--"}], "--"}], "--"}]}], "-"}], "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"wobblecurvef", "[", "]"}], ":=", 
    RowBox[{"(", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"tanglevals", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "2"}], "+", 
          RowBox[{"i", " ", "2"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "40"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"testhere", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Position", "[", 
           RowBox[{
            RowBox[{"fulltermwobble", "/", "Degree"}], ",", 
            RowBox[{"_", "?", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"#", ">=", 
                  RowBox[{"tanglevals", "[", 
                   RowBox[{"[", "i", "]"}], "]"}]}], "||", 
                 RowBox[{"#", "<=", 
                  RowBox[{"-", 
                   RowBox[{"tanglevals", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}]}]}], ")"}], " ", "&"}], 
              ")"}]}]}], "]"}], "//", "Flatten"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "40"}], "}"}]}], "]"}]}], ";", 
      RowBox[{"plotpts", "=", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{"tanglevals", ",", 
          RowBox[{"100.", " ", 
           RowBox[{
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"Length", "[", 
               RowBox[{"testhere", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", "40"}], "}"}]}], "]"}], "/", 
            "nasteroids"}]}]}], "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"label", "=", 
       RowBox[{"Style", "[", 
        RowBox[{
         RowBox[{
         "Framed", "[", 
          "\"\<The percent of wobblers in the simulation as a function of \
\\rthe assumed magnitude of the observation limit angle.\>\"", "]"}], ",", 
         "16"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Labeled", "[", 
       RowBox[{
        RowBox[{"Show", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"ListPlot", "[", 
           RowBox[{"plotpts", ",", 
            RowBox[{"Joined", "\[Rule]", "True"}], ",", 
            RowBox[{"Frame", "\[Rule]", "True"}], ",", 
            RowBox[{"FrameLabel", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{
              "\"\<Observable angle\>\"", ",", 
               "\"\<Percent of wobblers\>\""}], "}"}]}], ",", 
            RowBox[{"PlotStyle", "\[Rule]", "Black"}]}], "]"}], ",", 
          RowBox[{"ListPlot", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"6", ",", "1"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"6", ",", "20"}], "}"}]}], "}"}], ",", 
            RowBox[{"Joined", "\[Rule]", "True"}], ",", 
            RowBox[{"PlotStyle", "->", "Dashed"}]}], "]"}], ",", 
          RowBox[{"ListPlot", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"15", ",", "1"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"15", ",", "20"}], "}"}]}], "}"}], ",", 
            RowBox[{"Joined", "\[Rule]", "True"}], ",", 
            RowBox[{"PlotStyle", "->", "Dashed"}]}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"PlotRange", "->", "All"}], ",", 
          RowBox[{"ImageSize", "\[Rule]", "Full"}]}], "]"}], ",", "label"}], 
       "]"}]}], ")"}]}], 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"-", "End"}]}]}]}]}]}]}]}]}], " ", "of", " ", 
      "wobblecurvef", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"function", "--"}], "--"}], "--"}], "--"}], 
                   "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
            "--"}], "--"}], "--"}], "--"}], "--"}], "--"}]}], "-"}], "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", "spinup"}]}]}], " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"efficiency", "--"}], "--"}], "--"}], "--"}], 
                    "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
                    "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
             "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}]}],
     "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "zetafactor", " ", "and", " ", "ellipsratio", " ", "set", " ", "at", " ", 
     "top", " ", "end", " ", "for", " ", "each", " ", "target"}], " ", "*)"}],
    "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "i", " ", "took", " ", "out", " ", "the", " ", "max", " ", "value", " ", 
     "of", " ", "unity"}], " ", "*)"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"zetaf", "[", 
     RowBox[{"phi_", ",", "d_", ",", "name_"}], "]"}], ":=", " ", "\n", 
    RowBox[{"(", "\n", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"name", "\[Equal]", "\"\<S-Type\>\""}], ",", 
         RowBox[{
          RowBox[{"zeta0", "=", 
           RowBox[{"0.4", " ", "zetafactor"}]}], ";", "\n", 
          RowBox[{"zeta", "=", 
           RowBox[{"zeta0", "  ", 
            RowBox[{
             RowBox[{"Cos", "[", "phi", "]"}], "^", "2"}]}]}]}], ",", "\n", 
         RowBox[{
          RowBox[{"zeta0", "=", 
           RowBox[{"0.8", " ", "zetafactor"}]}], ";", "\n", 
          RowBox[{"zeta", "=", 
           RowBox[{"zeta0", 
            RowBox[{"(", 
             RowBox[{"1", "-", 
              RowBox[{"2", " ", 
               RowBox[{"phi", "/", "Pi"}]}]}], ")"}]}]}]}]}], "]"}], ")"}], 
      ";", "\n", 
      RowBox[{"(*", 
       RowBox[{"zeta", "=", 
        RowBox[{"1.", "  ", "for", " ", "testing", " ", "only"}]}], " ", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"use", " ", "following", " ", "with", " ", "zetafactor"}], "->",
         "1"}], " ", "*)"}], "\n", 
      RowBox[{"dfac", "=", 
       RowBox[{"multiptf", "[", 
        RowBox[{"d", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{".0001", ",", "4"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{".01", ",", "4"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"2", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1000", ",", "1."}], "}"}]}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"zeta", "=", 
       RowBox[{"zeta", " ", "dfac"}]}]}], ")"}]}], 
   RowBox[{"(*", " ", 
    RowBox[{"size", " ", "dependency"}], "*)"}], "\n", "\[IndentingNewLine]", 
   "\n", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"-", "end"}]}]}]}]}]}]}]}], " ", "of", " ", "zeta", " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"function", "--"}], "--"}], "--"}], "--"}], 
                    "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
              "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
      "--"}]}], "*)"}], "\n", "\n", 
   RowBox[{
    RowBox[{
     StyleBox["spindata2013means",
      FontWeight->"Plain"], 
     StyleBox["=",
      FontWeight->"Plain"], 
     GraphicsBox[{{}, {{{}, {}, 
         {RGBColor[0, 0, 1], PointSize[
           NCache[
            Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
          CapForm["Butt"], LineBox[CompressedData["
1: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
ic7j7lLQ0ll+SX+bBMKNVUYT7pH+Rr9EO9YsgZlTdFzPPaDg+E7je2cLJHAe
rB69eUTBqqa4Iw6vJfCjdtl7WhoFP8hu2DL0SgINekX5FzIpeKM0puPtW6l9
J7cdiayUgJrc4LYFT0l8p2bqJJDf32s6PZWRTcHnNZ/NVpHxFB+1Jm3OoaCb
kg+9OEsClNpw/q1cCvLKzmx7lyOBPX48paJXFLw8/+Xihf+fy7kSzqQHUmvM
8o25fUnqSYb6P23uSq34KeD+rNtSr9NmBviQ+SZfxXUKhRSM6N99eWkRcc/R
Q17E8Prw2rhUCYTOWt80+JqCLrxQ67MpZH2lZuZXikg+eAcd0SHro0Smb5le
SkG+o/FIHFmfYpTLdc83FJRNvtn1mayvSV/2+oa3FDyacuzgxyay31NGna+V
U5B7L+dCX68EuM9lZy+poCCDU/mCQc53JC/ObPo7Mv/WeJ0l5PxvbZD894bY
ednfub0NEiiOTlifVk3BfRMNnneS+DL0v1C2v6fgp8KgUEOuBMQdk//INFLQ
9Ni0/e/I+Rmrf4/o/Y+cz45xP9fvlcCsa03x1c0UvO/76arLNgmkP0g08m0h
/etQdEnBSgm8yRWYPv1A8mf8Zb+2XVKX2N5TNN0uAfqro4/tWym41rU9Z9cK
qW/q6l87uloCntWNWQvbSb/UdjK5aS+B5QrdPr+7SL//L46j6SUBsxB+2rQe
kk9udRpZJB7RbL/tJcQ7N90amR8kAetEo5hTPAreavQJtCAObknhz+ql4O7O
7NjzZyTwTThRRltE+pnGzMYP7hLwYpm63++nYEqDQYzzFglENqpNtpFQcOBx
AMthjwR21qrtHTdMwbEpLqa6/hKI2O09bfkIBUfL7pw/c1hqq4bPv+KOScAu
NnhvN3F2rHKlbqgExvBEi+ZXcj5zluRZ7Cf5ExbI3viL3H+WD2uGSPzLk7Ve
DRPniFa/X0rGm64WvPnSbwpGqj6iziDzNVfu9K77Q0EdhxMpNLL+B7uHQ0/J
UvHTnyqjylNSp6hZVJvESWDqk49ebEUqXl02K9s7VOrH/2KubrhC1nvdQfcp
caCouOvnCQnUKVSfFilRsTPsw7/U4yR/zd9O+keh4tyciNl3PCUwnOAUzGJQ
ceey8q6iEAlojB64nUFcVVSy7+QhCawYtzt7BpuKr7rP/O0jzxWOmBx15VDx
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
           "]]}}, 
        {RGBColor[0, 0, 1], PointSize[
          NCache[
           Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
         CapForm["Butt"]}, {
         {RGBColor[0, 0, 1], PointSize[
           NCache[
            Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
          CapForm["Butt"]}, {}}, {
         {RGBColor[0, 0, 1], PointSize[
           NCache[
            Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
          CapForm["Butt"]}, {}}}, {{}, {}}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, False},
      AxesLabel->{None, None},
      AxesOrigin->{-5.7605194184707, 0.11089471360388298`},
      DisplayFunction->Identity,
      Frame->{{True, True}, {True, True}},
      FrameLabel->{{None, None}, {None, None}},
      FrameStyle->Automatic,
      FrameTicks->FrontEndValueCache[{{
          Charting`ScaledTicks[{Log, Exp}], 
          Charting`ScaledFrameTicks[{Log, Exp}]}, {
          Charting`ScaledTicks[{Log, Exp}], 
          Charting`ScaledFrameTicks[{Log, Exp}]}}, {{{{0., 
            FormBox["1", TraditionalForm], {0.01, 0.}, {
             AbsoluteThickness[0.1]}}, {1.6094379124341003`, 
            FormBox["5", TraditionalForm], {0.01, 0.}, {
             AbsoluteThickness[0.1]}}, {2.302585092994046, 
            FormBox["10", TraditionalForm], {0.01, 0.}, {
             AbsoluteThickness[0.1]}}, {3.912023005428146, 
            FormBox["50", TraditionalForm], {0.01, 0.}, {
             AbsoluteThickness[0.1]}}, {4.605170185988092, 
            FormBox["100", TraditionalForm], {0.01, 0.}, {
             AbsoluteThickness[0.1]}}, {6.214608098422191, 
            FormBox["500", TraditionalForm], {0.01, 0.}, {
             AbsoluteThickness[0.1]}}, {6.907755278982137, 
            FormBox["1000", TraditionalForm], {0.01, 0.}, {
             AbsoluteThickness[0.1]}}, {-0.6931471805599453, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-0.5108256237659907, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-0.35667494393873245`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-0.2231435513142097, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-0.10536051565782628`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {0.6931471805599453, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {1.0986122886681098`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {1.3862943611198906`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {1.791759469228055, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {1.9459101490553132`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {2.0794415416798357`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {2.1972245773362196`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {2.995732273553991, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {3.4011973816621555`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {3.6888794541139363`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {4.0943445622221, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {4.248495242049359, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {4.382026634673881, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {4.499809670330265, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {5.298317366548036, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {5.703782474656201, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {5.991464547107982, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {6.396929655216146, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {6.551080335043404, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {6.684611727667927, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {6.802394763324311, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {7.600902459542082, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {8.006367567650246, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {8.294049640102028, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {8.517193191416238, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {8.699514748210191, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {8.85366542803745, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {8.987196820661973, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {9.104979856318357, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {9.210340371976184, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {9.305650551780507, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {9.392661928770137, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}}, {{0., 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
            
             AbsoluteThickness[0.1]}}, {1.6094379124341003`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
            
             AbsoluteThickness[0.1]}}, {2.302585092994046, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
            
             AbsoluteThickness[0.1]}}, {3.912023005428146, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
            
             AbsoluteThickness[0.1]}}, {4.605170185988092, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
            
             AbsoluteThickness[0.1]}}, {6.214608098422191, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
            
             AbsoluteThickness[0.1]}}, {6.907755278982137, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
            
             AbsoluteThickness[0.1]}}, {-0.6931471805599453, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-0.5108256237659907, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-0.35667494393873245`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-0.2231435513142097, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-0.10536051565782628`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {0.6931471805599453, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {1.0986122886681098`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {1.3862943611198906`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {1.791759469228055, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {1.9459101490553132`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {2.0794415416798357`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {2.1972245773362196`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {2.995732273553991, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {3.4011973816621555`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {3.6888794541139363`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {4.0943445622221, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {4.248495242049359, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {4.382026634673881, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {4.499809670330265, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {5.298317366548036, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {5.703782474656201, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {5.991464547107982, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {6.396929655216146, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {6.551080335043404, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {6.684611727667927, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {6.802394763324311, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {7.600902459542082, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {8.006367567650246, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {8.294049640102028, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {8.517193191416238, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {8.699514748210191, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {8.85366542803745, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {8.987196820661973, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {9.104979856318357, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {9.210340371976184, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {9.305650551780507, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {9.392661928770137, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}}}, {{{-4.605170185988091, 
            FormBox[
             TagBox[
              InterpretationBox["\"0.01\"", 0.01, AutoDelete -> True], 
              NumberForm[#, {
                DirectedInfinity[1], 2}]& ], TraditionalForm], {0.01, 0.}, {
             AbsoluteThickness[0.1]}}, {-2.3025850929940455`, 
            FormBox[
             TagBox[
              InterpretationBox["\"0.10\"", 0.1, AutoDelete -> True], 
              NumberForm[#, {
                DirectedInfinity[1], 2}]& ], TraditionalForm], {0.01, 0.}, {
             AbsoluteThickness[0.1]}}, {0., 
            FormBox["1", TraditionalForm], {0.01, 0.}, {
             AbsoluteThickness[0.1]}}, {2.302585092994046, 
            FormBox["10", TraditionalForm], {0.01, 0.}, {
             AbsoluteThickness[0.1]}}, {4.605170185988092, 
            FormBox["100", TraditionalForm], {0.01, 0.}, {
             AbsoluteThickness[0.1]}}, {-6.907755278982137, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-6.214608098422191, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-5.809142990314028, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-5.521460917862246, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-5.298317366548036, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-5.115995809754082, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-4.961845129926823, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-4.8283137373023015`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-4.710530701645918, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-3.912023005428146, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-3.506557897319982, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-3.2188758248682006`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-2.995732273553991, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-2.8134107167600364`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-2.659260036932778, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-2.5257286443082556`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-2.4079456086518722`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-1.6094379124341003`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-1.2039728043259361`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-0.916290731874155, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-0.6931471805599453, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-0.5108256237659907, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-0.35667494393873245`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-0.2231435513142097, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-0.10536051565782628`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {0.6931471805599453, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {1.0986122886681098`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {1.3862943611198906`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {1.6094379124341003`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {1.791759469228055, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {1.9459101490553132`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {2.0794415416798357`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {2.1972245773362196`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {2.995732273553991, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {3.4011973816621555`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {3.6888794541139363`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {3.912023005428146, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {4.0943445622221, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {4.248495242049359, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {4.382026634673881, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {4.499809670330265, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {5.298317366548036, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {5.703782474656201, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {5.991464547107982, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {6.214608098422191, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {6.396929655216146, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {6.551080335043404, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {6.684611727667927, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {6.802394763324311, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {6.907755278982137, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {7.600902459542082, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {8.006367567650246, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {8.294049640102028, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}}, {{-4.605170185988091, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
            
             AbsoluteThickness[0.1]}}, {-2.3025850929940455`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
            
             AbsoluteThickness[0.1]}}, {0., 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
            
             AbsoluteThickness[0.1]}}, {2.302585092994046, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
            
             AbsoluteThickness[0.1]}}, {4.605170185988092, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
            
             AbsoluteThickness[0.1]}}, {-6.907755278982137, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-6.214608098422191, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-5.809142990314028, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-5.521460917862246, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-5.298317366548036, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-5.115995809754082, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-4.961845129926823, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-4.8283137373023015`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-4.710530701645918, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-3.912023005428146, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-3.506557897319982, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-3.2188758248682006`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-2.995732273553991, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-2.8134107167600364`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-2.659260036932778, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-2.5257286443082556`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-2.4079456086518722`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-1.6094379124341003`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-1.2039728043259361`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-0.916290731874155, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-0.6931471805599453, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-0.5108256237659907, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-0.35667494393873245`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-0.2231435513142097, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {-0.10536051565782628`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {0.6931471805599453, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {1.0986122886681098`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {1.3862943611198906`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {1.6094379124341003`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {1.791759469228055, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {1.9459101490553132`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {2.0794415416798357`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {2.1972245773362196`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {2.995732273553991, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {3.4011973816621555`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {3.6888794541139363`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {3.912023005428146, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {4.0943445622221, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {4.248495242049359, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {4.382026634673881, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {4.499809670330265, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {5.298317366548036, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {5.703782474656201, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {5.991464547107982, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {6.214608098422191, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {6.396929655216146, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {6.551080335043404, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {6.684611727667927, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {6.802394763324311, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {6.907755278982137, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {7.600902459542082, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {8.006367567650246, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}, {8.294049640102028, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
             AbsoluteThickness[0.1]}}}}}],
      GridLines->FrontEndValueCache[{
         Charting`ScaledTickValues[{Log, Exp}], 
         Charting`ScaledTickValues[{Log, Exp}]}, {{{-4.605170185988091, 
           Directive[
            AbsoluteThickness[0.1]]}, {-2.3025850929940455`, 
           Directive[
            AbsoluteThickness[0.1]]}, {0., 
           Directive[
            AbsoluteThickness[0.1]]}, {2.302585092994046, 
           Directive[
            AbsoluteThickness[0.1]]}, {4.605170185988092, 
           Directive[
            AbsoluteThickness[0.1]]}}, {{0., 
           Directive[
            AbsoluteThickness[0.1]]}, {1.6094379124341003`, 
           Directive[
            AbsoluteThickness[0.1]]}, {2.302585092994046, 
           Directive[
            AbsoluteThickness[0.1]]}, {3.912023005428146, 
           Directive[
            AbsoluteThickness[0.1]]}, {4.605170185988092, 
           Directive[
            AbsoluteThickness[0.1]]}, {6.214608098422191, 
           Directive[
            AbsoluteThickness[0.1]]}, {6.907755278982137, 
           Directive[
            AbsoluteThickness[0.1]]}}}],
      GridLinesStyle->Directive[
        GrayLevel[0.4, 0.5], 
        AbsoluteThickness[1], 
        AbsoluteDashing[{1, 2}]],
      LabelStyle->{FontFamily -> "Helvetica", FontSize -> 14},
      Method->{
       "OptimizePlotMarkers" -> True, 
        "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Exp[#]& )[
             Part[#, 1]], 
            (Exp[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Exp[#]& )[
             Part[#, 1]], 
            (Exp[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{-5.7605194184707, 5.680172609017068}, {
       0.11089471360388298`, 7.112301636173582}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{
        Charting`ScaledTicks[{Log, Exp}], 
        Charting`ScaledTicks[{Log, Exp}]}]}], ";"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "should", " ", "put", " ", "these", " ", "in", " ", "an", " ", 
      "external", " ", "file"}], ",", " ", 
     RowBox[{"no", " ", "need", " ", "to", " ", "waste", " ", "memory"}]}], 
    "  ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"spindata2019means", "=", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.5, 0, 0.5], PointSize[
          NCache[
           Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
         CapForm["Butt"], LineBox[CompressedData["
1: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
oCdrz3pEiIZzkhbO3POYiqcnz8wKxE4+B+cuPfgg5Au2v/pszsIRrHvpeZDN
ZU6S3MTlgtjz9OSJgB22eUbgVoXrzIPKYG1HmtCVY+AgsUdkN0mww75XXYxs
4GijuZFYAbCNnoKGmwxY5qTG7IQ6uOmlblr7YTDt4PfFA+zgZNVqyroYJ+lN
ddnU2O/N5KbyPueeOY4Nj2w7VvCUEeLhqWJvWRnAY74n2SeWoP3jYydpqtgg
XhjmpdvMCpaOWYj5ogvtJ4dCD9lZgcsczE5/fwxGlRVJ5++DSR/HaAV9OUin
kv0w7djN5P1xbOdEf4Gnf3O13ewCm3YcymimgPccHIxQ28654YITojsf3OUg
3TpWvz9HdTM5gS3/1bEg8MpexUM8KeAXZplG5o4cpLPJlC3T3ZvIIaPiVw/Z
gXu6lMclvcDHW24oNp8Fcxzi2uuwzr5hqu/bBR5zQ9zSwla1QwTM+Vpr925F
8PUrFtt2GXGQ6swSZtyfbSLTvqin2SoMPvX2nEqnOJhL41STnCZYaN2loNgU
fNY+3OiEAyF+MC30xyuw7CmJgV9vOEjrjwyE9mtuIk86/4xsCAIH7dsuYhYP
7i8nPXr8hIOUatCiIyC2iay3uTCTKxSsm/Etak822OCdwWRhLThuojeiqp2D
5DHdudqdR0eOpD1h+/QBOF64iCnfB3xCuoHOJB78sFZm6GsBWFObd/FXOQdJ
QCric+F7OvJuk99Zuh84SH/M2pm8LenItP8mhWbDwPebQ4zbQsChKcbT3fXs
G37MeNW2bRR8RCJ96s0EOylvTVIxXZaOPGPRL3QiHLx8JiTCJIOd9LCsUUKQ
ho5MxT91JiAL/Hv436Xy92C1A1Stu7TB7dGiBWbXwUWXtQYjn4Jt9M8fbA9l
J2W90L0cEEVLli+TLK9nB+9VF9cnS4ANht4gBU2wKGvx1ysnwI4vqnd5CINd
cnUf5CiCU+p4x3mOsZN2fSxccVCnJXPdWdB6KAo+6p2w00EEXGllYD4nA5Zl
u3+98QjYg51yqPgiO4nVpV795m8aMm3hvbfMYuDqC/7DEsfATXnno33VwNk8
h27qXwY7V4fv9lTYseEyh2PmNifBbutGOj02YJXnEWcSX4Ilj96pDwkDU/fa
mHOX7CBZc0qVbw+kITOxcW4JcgCPO7tWRYSDpXzbjyQngI/SzL1/8GzH//t7
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
j6b4b7bK0obDtrWYnj6whN2N7VoUCB9CAnEGJsknF7Dqxm4XJfEh1GJ+oCGU
a2nDPUzsBy8KgzP9dC/sFgffSWEU5xcFH4mkF6Qj9A/uPqNN0oD8Gf5lemWG
4EuK1hLvTcBGFoJLTBZgNav5p4WmYKrbo/tpCfGbzKuLJy3Bkz/dR2wegpf4
rddpPAj5xtyskvH5WbqESV/mH0IqSSvUz/wXME/aaRnKxCBKuj058N14Adum
ab8qnTKIYhJePdCpW8SoZUirgzaD+PwIcVeVgJP67jDQ/sCds+vIhD4eLzrw
V/4r+PclS6s9pYsYW5z/Dme1QcRw6ezjk0WLmDvvU8bU3YNoa85xl7MFi1hV
ub5m1twv9M/9K5ML3v7xpZi177m/kJYZ65y1Gzg4bsljJWARi2/4tPAh4Rf6
YuaoM/kO7KGdV6MeBx5efM1MkwZ2ZeskmxC8+8c5Xe548I5cTNp8lrLhua7z
298tgnte780sw993//m31l3PKFawEaXClHEHOOqpG4MsG1hzJchGZQvY3SH9
3RwnuPl7wSkJEXCybYKy7SHw8uDx3kZVcMnb7/Nyx8FrVzoCBE+BrY4X9/Ib
gM1MHOo89MH9ryTra/H+d7ozqs46/0LOTuL6i2pg1s+b1BQP4++vVqo6zcu/
kO3r7YmH8fcJZ3rjVuddeD23uo4NTlKwgq/vd4/PDaAaKQcWmT5w0pVk24Eh
CuYn3TT5rnIAGRsE2sh2UjDMj44h6e4Asku4rPfcanHDMcKpXNdtFjF58iSv
3+kBdPBYAzng+iImPDn1yk9+AMkeZn6bew3cLlIh/tIKTPdH+sb9G2CF6E2H
H54Fi2zb997kJ2XDEcU+xQ29YAvrv8NsY2D311nVL6fAQTE/IwUJccm+qYvh
f8A5xcp0CoT2IjZXaDiWwSd4tt3mY1jYcOGVvOtFbOCUW1fzG/jA73llfvzY
AzatwYLU9oFnv7/42k/wCu0t4+C94DeWWc8+4/uLSjozlE90AF3M5/L14QZ/
slYM/k0F5jj4rZD3M2XD/hUBDxlSwV7tz7itYikY7wH5o+pb8Od17e8Zwj3c
fKS+b6UfKRw93ncngoJ9Nk9vfPGnH/Gn3rDXj6dgO++VCPQ19KMUrqaxAx8o
mOTl4QvBpf2Iuye2NgY/X/YLrv+MsvuRh2rNE6dmCsay3V3817t+tOlTw5+/
+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
Dyyw+k3rGWrffW6e/z1y85b/Nk4j+7HQJr9H44fs9U4//gt+H3Pd1acazXfm
kL3OH3DSowE7vd/gnpHiV52V4FtRiRJxaHxeyGRnaQ34GFXA8rla8Mmo1jp/
ZMteJ2lf5CkH9gebiRYauLSvvZc4foSBPxD5xHe7h3V/wWzfVsZJ8yPb04iz
fw25YnW2UaIOnF7fr9SA2l96hruzIguaCujvQGZ057VtQeNHfzfxSDSAY/7U
2Lg0ghnilT0eNoGZKCy1DJrR+PO/vTa1gMttDyq8Qe6KervG3Aquk/rRYYO8
fHnS+ytyRrzz7SRkhoWSsFjkl1c7vnojL/Lr5F5CVtghUMeCXHvW6m4Sqme1
4sN9IWRntScsL9B8Sqx5dhSj+d7V4nyaitYnsybifi9az+paaYYudPx6TQpS
7tSDh6RnV+zRetYbKQvnoPinPlh9uUvM355Vmxu8ZZDQF9jHRNcApkvk/6LX
BL7/zVuaqwX8xb3mzZZW8MTi2yYXZA8Zi44SZGq9lSDaNvCVgwobe5C/zW+9
LYn6G+llxJY1gs0oHxUeRvl5flfvL0X9bZS8/9WjeApvBo8Xt4O58xOlK5Fj
Ew10vyLTmMsYr6LxPGYCDC9Q/LA6BxbBDnD+qpf82y6wqdRL3s894FMZJp9J
1xuTPRMtF1WFzGlPFbCC+ssXPNccI75+x2+vTz14dJCwsCex4ncXeOvbqDGp
HnDMysVGil6w14Mj9B6o/eBDx4ToTvBPc/HkM6h9UZ3m57c+sO7fuxq/BsDj
30V4vIbAT6dkDwuMgOmp3kTajoLvu/iwTSEzsQXYyI6B5/P5wrSRDVydM48R
ve+3ksPjS4MErv1a10VawCvbi2LEkRnXXbrokZO/qnGbNKP+Sy0Gy43gYubL
L56j/jTqTCljbeCsq9VHSde/kW142DVlpBO82JBwbWcXOEBUQEoetQv/dhqU
ROPPJWml/kT9L8Z2Fy/2gAtOxH762wf+ZWvn7DMArunptt48BBYI3Xm5DVk8
ypnp1DC4RTm42QI5KKB64AbRG/sf3U5+SIw/qyPWXQ+myTz1cxD5o6tGWhay
tnzqhT3I+kJhRon/wLfvHPkq2QBuCxqyDWgCP7zJ+OdlCzjP5pW5VyuY+A76
JwH56YfGlz2ov56ea2NLM9jyzSqNUhuqTyuf1qsDPBU4LGzQheqN9ctk7gH7
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
c1FMm8EpSdQCT1A884ZyvQeKj1pX2VnKglu2Vco/lgObLa53Jl8PFLfzlnHO
K4A3JUimSCqC9TzY2RmRfRM2255A+XU1yjznUD0hpleBB1G/l05Pl8ivbyk+
X58qQ4vy9f5TE2BD9bcWJFCxKYOV3Hc4f1ABb7+/vmBCFSzOm54wqwb+lv77
deUWVO+99BeFrWAJxoWnJsj/VpJ03ZDPsvsNaCHLqKYYTaB6B6U6lEKQg8XW
yb1G/W3u7r3EgByZ3nBGHs2bvfiknR3tx9hjU/MtdD3R3D+VO4fOt9Sj/1kC
cZ4yZYqHva4T/QVvHie/vqP4TEWt+JgKuLjhtXW7Mjhrp0NIgBJ4MY7hdo0C
uKhQsMkC1U9cyj4Qvxn83Hv04NlNYJ3JXKfNyMeGV3ZflgKr5+/YNSQN/lJC
JT2D6tHdjZFvlgFr97TNZMmCp7sXy03QPC3n3pbUI4tnM/opyIP7jdiPpyCb
6Z3zfojM37sq5IbMJPidyQXVC23L18tF8znf3GbXiuaJm3zqnIzWG1jOLzej
82ssbmomv16heGdpROVrZCnttOi/KF/Ba+DLIqov1Fkp/wTV51srMr2K8g22
R7SHImflZEm1onz7RpriAmI/5uqpdxwKiJ+jZdNCbsqDBf5x7i1D8RrfP5P6
suDMu4kZHtJg4ZT49nAZ8H86y6RelJ9o+HflOqp37uW1XnrU74Np9+BOwoMl
R+8alc2SFOutfdbkwG8f+daLoHiR9NmvybLgkc8cPnybwSeu7g2MkQYrS3uk
kN9foHj0y4zTLlS/f/zmdfLtna1xJ16+mvj5N16sbVURXHK7LJgJxRPMLjTp
ozgz53iUvDL4L1v6vkQVcKd6B4uVKvhfevaGk0R88N0tfbZXxM9j/L20PMgy
lwS8yD/PURxXIJbouAXsr5HSI7IVLPy2ndYZxdMsLs+sqIEPb2vPa0L5HZun
O6bUwX3vhoceahCPcw5rgz8/EI/PIwuMJVvBr43/q/NTB0cKv4j7Dzm/bTz5
M7LatBBTJvJpxv7lDlRP8obylmQ1sLnZxbj7KP6L2zDwJpqnIsOQ20cLfDBK
L6Rbm3jd/d+W2Beds6S9HrXxLzXBZ4J3eBchR2a5ni9TB7MzPr6iiVy4YRe3
kwZYaKDXtpTw+esPWc72E9f/WPzhn1vAgW0PAl5vBQ/rD0XeQDYO8BahRc7d
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
p2CBfMk7+La3IXi+bd/vNOT9C+xzkfrgyTc8+18R8QtzzD7VrYukY8kGsp+Q
o89pTa7/XnXDMQPs86PIFtR0nJNG4Kxkd6c/yG78wu+3Il+l9Gn1RuNps52T
M1H8zds7Ti+NwWarI6ZjyHdtGG0rkWcOelMPEeNN7LgUDnYT55fK0NJn5Dva
oxMZhmDPLM2cAuQY0nXOGGOwQuh9Hjni/DUw0Lah+0y8/ulqZq5f/xtuX9jO
u1UXXJZVHGJH7CdXO2db8fAiKb2hcrxTFTz6VNkpSB0s9ENAfBy58/r29kU1
8OUjViIzhCPnqPOMfy2S/DLbGlORPz3bvLD++r7hp/taD6UgHyjf5PdOHaws
QdfCgcZbfbZj0Sby/7TFffo+RdyfS+L8lpXBVQaaf7argWvyKr8ZqIMtP/3Z
6YN8tlesUBF5fNSu/SAan1u+NfWSCjih5HQpGcp/ZfwqXA318zrNpJKD8EQ4
X2jEEnH+Lf4wdFMGn+mrfJ21F2z15WhB5h6wdJuSdcTuWZKDFlc4G+USifal
457/5MHbUo9FW8qC85O/6lMg37gnoaOH8icfeTXQonpRTLs/0qL4Nxqb3392
gUdK3g7NyIHNxyvCKNB4svTS0V3IHSKpbcIo/+CFNUNLFJdSma13VAA7pfrN
zaG4TtLEfA3q53LIjobfyEvpBlfy0PiifDFVyj1ga+43lUso/uz+/Zh85PPx
P94dRfPVTUsNHUf+a/u7TRvVu+TA1vMNuUKXvskN+VTKae8QNP6xZ0CGCLLZ
4o/Nfmh+7sWHj56ieKLDk+RWtF8xz4rD1v8/7Q1TXHxD+RQdT88ft/NPo/0I
4HzSTo/qRxU4vjBH/YnfHd/8Cvm/sz9lZpA5vOaSJpHPD0Yyv0N+E+r1zxs5
zSLD8gaaTyOmJjoMrYfv6gRVLloPL8OAzC+0no9rDq9ZdoADeW3L42TAYt/n
/1tF519zOS/vfrTe6rJarXg0v7zNkMP6/8e4Yd0ulh0JSmDq+sPpu1TA/2qC
Kq+qgmN3PuVrVQNnnKw0G1AHk6sq2fZroHoB4YUvSeCgBud/fpqof9W/PvPI
ub9dxtbfD294X1wbRRiy2p+P4YeRW+vobqgi/yL/9nAF1SuPznO/jkwtEe/G
j/yav6Y1gOiv+vLoWDb9EimSdeRgoTq4+qjW5VU1cI5Abd0fVTCjGbnXQxWw
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
22imuu+Vgn8qj67hLQfv2Bj1yxflnw6ucvAk3hwRFmT7nMzvTaPYpe/vLvt8
eOyfR33gDAPzMIUBlP/Q+4HdIHK8Xd2uIfA9VZo2l6Xzpl7vxhInch55XXrl
xE/wwZ/C7M+IfdaNja55RUsVMJu5PTgI3lQUQEs/BKY4XdvQheL7Y3sHbiPb
6m3cufR7yssuFbyU9LIf/CRo9OTsD7Bg2+oUnx5wSMuKtWMd4LMKq8OtW8BN
JtSJb3VgYX5hAZsGMN8+9suByFJ6yW0BKD/0+vDV5FrwYZlbLY4o7s00534V
xd3Pe0ZKVoNV2H3jamvALwfqTlBRe1nX3tgcQH7+9xRHRyN4b+oFxyRkL0Mh
umzkvn/ttDRkvE95RXguupL9X35EZVcz+Ea2xftfTeAjrrYvJOvBf5KjV/tV
gVV3l/H8rQEPenRXPUNO4nybvfR7oMu+sPOnZQOyYa/J96eo/iMH2vUUUftm
2Y9DClB/R2gNP022gXPTNR/VdYCrH5zif0ne505bT30IeEPu59jAAaN2sLpl
rNWWThRnSM8+hfL1skwuLhCz0Ec8HnIn98e8SvR5ZMvGvWamyKOrTe5xE89y
RUfvfkfux7rjxomkP0MFVxXM3pP9uJWdHBHBcevbOQzawAXjW8IPkPF5jvPs
S/Em63eizfcC8lp+qaf5jeATEhnfbteBwz7yzmeR9aBhlrZc/EBL3Xnik/WR
GvBJp5R9LeXgnsmKvP+QX6kwGtCR6y/3AI/A0U+0VLWQm0xGNeAkwRvKrBXg
mRsHEhTLwd9nFS7vRuVX7X53y5T0z/IWr6CDPy113c2aqYOk///xvrcuDKCl
JkvUH32KrDPO1hvZDFZSe7R26fc7ly2zuqZmazt4VIMunpXMr+C7UZlVwbRU
WkHvWzVd4LKwyFcp5Pl6pMxc9WQIuV4nj/83g/w1szNkArnzP85aE2Sf84V7
O0h9ujfe5r8MI+eR/JqVH5vANu4LLbxkfQ7FfPAq+Ur2K2WV6KX+m+UOFa/6
RktV+P0jcTuJbz3bfP54FDnPMhTkaJDynM15xx1jyPtmpT5lphnsmjbRrtAG
PkEvdUGtY+n/n2F6nxtHS3VO6bLpagfb7dHbcakTXDK2x+dIF1hxy6MeS+Rz
dca7ln4/PW/NlPqhZLJf3xPZ9rMdXJz8dpcRMmN9cPLS7y0uuzBCLiW4FVzw
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
L2y/A84uYftzyRd8Nr5AyTQQPD7/1U/kHnhOhn7/RhDYqWln2Rih/Y16OrWq
fuA4leuxxzzAsUn92y5en8E2m08sPN5ExkdslOOuOs9g4xa1xfP8ZPzlp33q
u8LBvQIfAqmh4I2HpDMzUP93CfBvSBEk46niN14E+IJvPLiK8/qD+f2Lgj94
gx1XT6cUICelx3JpCaPxvbjrsZ0vWHR78N7tAeg+qnO66s9WMt6RXPs85A44
kvLwjCuy24moDQ9FyLi00H4buyBw0DorySF/8GRvFIeQJzjjYlOjswuYlSM3
bL87+DcP2WeckD8Yn5+f5g0u1SIdf+aFxpNutu6gKBm/Oq8i/NcPHOPjYpXi
DWY9dMgv2Rf86mNaU5on+Nj7jRZD7mCFxPkM2g2w9pb9p567zmD8iu/zvu4g
48VT3vqRbuBe7ZN9nmh+uwQkVoPEUH3Zp/Y4eoOt+AZ//6++/nNpuHzDS9Tf
vij3GVkJMs65e6ZGHNXbvG3WgLsUGX/IFOrpguIXxVrat+4m40Wtu9rJ/uAD
LfzUnLvgB9M/dHODwW2Hbyha/O98xG9cqpch427tCZyUSPDtH+wFbMh8Ur0v
Lu4h4zr+NvTUMLCLXMoYA2qvbHX33nwFMi4wJyPiFAFOcOU0E0DrkXzFyd1Y
iYzTzuekf0HO537L8EiFjJMqD8W8ReuTkYvS5HWQjBvcDeE5jOr5QoNv5NnD
aD2+E1AJRPXCdyuyPk2TjEeHL6y7is7XziNjZ9S0yPh9jo1/N4aBn49/Gf6E
/IN9LXPkKBk/aJDwVRo5Z3rykbcOym+tNK5F7T2lDaoIHyPjajea7S3vgK9G
6F63QOPfdnTMv0oPrZcDWccXb4Ft59THYq+BG2Pa5kOugI25jKncTuALN669
17cDu5VVf6i8BH4z/EZMmBDXchvu1T47g5mmqnpYHCfjecVNxh6W4IROkalk
C7C3iNPOq6dQfbVKOMUYofp85UCxswBL7h3PXrMEt8TV/z14FjzyRIxXyQ78
u6p9ttAR7Pb1nB75OvibdZnWLVTPV2hsjvImZPyTkvwjIzQ+t6WL+TpNyXi5
KPsJZrReLCV/OzGbo/0+onBTzG1w+qEmU25U77Sv3V7YKfQ9fY8oV33AJn/8
5bx9wdmzYRnqfuBf0buFiwie2bPc1UywcRMPpyHB7tnqXGcJ7f3sf3Blzguc
262XwXkbHEOaDX1+E6z/mPGprAu47g91fKcj+FPvqT0l9uCFdOZ2PVvw0sdd
J5IJ7pZdLo4jeOdHG+eX5wlxk86N788Qvq8yxsvYCjx1b6qS0Rq8GH5JOZwQ
PxZ51zPCEtz86dHPZ6fAdFnHxDozcFv3macbCPnafKwXhQgmYQYKJFPwOQFb
h78nwUEGh4Lo5uDq2wo9BRZgbvUEOTKyctbp4H4rMv7CYH24x+kZbCJa+ynH
WXS+vBdn7ULeWzVWk32OjO+xUIoZRU4ZkKAP2JJxI3xhaDd6f2TZ/uH1l9B+
nMZ3f95oBovYLxGAOZJxH5F5IU8DMKneW4PTBP0eMxCx+nAZ1cvRhxeOInsI
0L9ddiLjNiU+UQ5HwIvyIp0L2uCLyWHXe/RnMJvRCgHqNXRfCG/kFUbv8+5N
YEq8TsbN0mP/CBqDdY8o1Vsen8F8NpU8lHch45fi1mp5tMD3Vdl2zquDKz50
sCwdASvlXfq0/Sj43Avy+AUUXyoSG2h2Rfvlm0v8m9RmME+W9oYgdzI+P6Ru
pqIAtrj/5CKzHLhk91RLtxI4fIuL6JF9YDeHNpyMgU0MHMWVCO3rXQosED8M
zrjBynId5QvLsX7W8kbrKfnhhWPK4G8tCfv3KoD7eb6H7yDElQWPih3aC+6U
sEsPVAKf6uK+ob0H/HlUlPfA7hks7LI1fcCHjHvakTzcCVZpebqnEuX/eLW+
1MmPjF8riWDaJQ9uL9Ka81YEL5DUXl1BNgjZI0kOIONdYUp/lFF/Hbb90n8Y
iNaHoPsvBhS3rDbesesuuq9Rh/odUX8/hkU9rbxHxvdmTHBJIh/MrRvVCybj
rdp51nUHZrBYQVrr5xDU/xeHNf0JfmZX8aUO9UekSvUFKQKtNxfD1XjU3wYV
8ZM7osj4prvNtc+UwNXeejfL9oLfkH61+h2cwV6oRpQVR6P+sM083Ibav2u6
yng+Ds1nIkkvXwYsdy97PhHZ6U8Hk18Cui/rr20pQPXwIqIyjDMJjadD3lNb
1J8gc4m3yclkXLyzd8f4XvDyzJ/JAYJd+EnLE6ozGKe9QrV0KhkfnX135TCa
/0LvxDKtDHTe7J8pT0b9exvJwOWeQ8bjdXZdat6P4sKPf1JzyXjyJmbzayoz
WOrV3mv3n5HxD659PP+rj/9seZ8+6iALtnN1jKVKgm96KtC2SoAV0s42aIqA
va1zY9+IgRedcj2dCM/v3XZnwlia8L7id5qhyFksBXmCL9D+8u99yXdJcIDx
tqpRcfCbUlaSsSj4wFdSVxv/DLZYPXhEvgCdFxZ8Jy03gHd9Dkx3Xg8+ys2Y
cYUHfFLP+vw/TvD2795/vnDNYIeD7VKrCsn45cCysSSUX7bE9eJIMRnn2Z8W
oojajz6w6NRVQsaD7wU/dV4HHtzJ/dSEOoN9LsT+OlSg+XGd91PnAPc1NjG/
YQe3r1Nk5+ABX/Y15yneDM7/xn76lBC4Lsflm4gI2H7sxYPSHWB5jWCSszi4
uUb4RdMusP5aM3+IFFiiflIlWBoc/PPIrlGChc0krBYI9vl1V+kEwWc/iruw
ENp7Vn+vVIbwvoVOh6gUMfD6gJ1dCaJgxagY3aytYNafVRymAoT2G740R/GC
vePDN90gjl/E1ywVRrDoTuUuESawloZPf80K/f99IFps4cwy2NZOwtx8DbyH
U257FwNhfLwHFyoI7Y1ey/5XR3Dghz57H4LlKrk2OBH6w+5jkONHqIfflkdr
HzKDG9ayNzbSCO+j+Ft0EeJvd91tHiY4wOIjSw0r+FtDYBOFYN5m68lwwvve
d1TWGRC+J/1LdmXULHxvqKVIih9hPDaFTx9aIuR3ahvH9xDGZ2u+UOZ3wnh6
ZfIIqSyCX7bJL5dM0zFq3v6A2Up0nk964HGTYN151abEGTrmbENrv11NxicY
J0z4kNUeVbZSXqH7VDGHnMccHVPc++dUdiP6fR09yCawSscGCyvCilvI+L/6
ReOKJTr24U6zsmob+r2WZYS9RP0PYa+NefWWjEtdy6rbh7zZ/vVTjQ5U7+u7
oryRo0q+uLZ0kvHTp38H4Wh+eObUF/TeofuPFUO8HsEpU1psMgzgUZ6dL8fR
+/6zS2viqOMiODTtRW8h6l+dMKNsdzfaH9z6L15A7f3erCB0ogf9/gjxlLmO
xmvm5b/a/l4yvnoy7/cr0gzm1+woZNWH+ncpVfobGl/35aeyIx9Re4LBPlLk
mf+3U9LMNl4S2CtPxeAAI/iY8MO4lyvwfJQHV0oYGj+WpY5/5z6h9fes/QZ5
Bvwivb/xCB1snGDWv3mejpVYzt78PkDGa0KFOhz/0TGHbOV8uyEyXs+7k9K8
BNY7ZLrNeRFswRaeFrMMfsr8aa1pBrx0+GzXfoJfMEzUrSc8L/rAkP0doX3r
nufJeqvgHSaBp9TQfPzn8VcjPF6E/j3RKH9zA41f4MmC5N/DaL+6YhsUjNrr
6/HWcBj53/8z9UMcaLz+c4JABd2GBC6Z9bPxJMQNfoyGSy7C878GfNNVpsCV
W/MfbflGx2rcqtMmRtHvz9HGJesRsJe2QHcJIR5Ssm1fIMEv1g5E/fhEx3LU
Z/z+fEP3tashn/P76djVE9LqUz/R75Vc/t72T2CDuKu3fw+Dh/QePg/5TMfu
G6p9/TNGxhmEFrOaBumYV6mv1pUJ9Ps7MCal/jPYxlouMJXgH3FSs35fwAqD
7HrOP+mY/jfW85OTZPzQBrZa9x90bMvbU41jf8m4R1CuUXsH+IDB3SfV7+jY
8cVT7Jfo6P4bs2GDVBcds5iPeHN+DvVvVeqHYh8dm/y8IP9lnoyHBXfnb/tI
x2w+/cIGF9HvtycRSSYorvss89PJZTTfaRIzfEN0bODyHsxwjYyzMf+49JDg
nvE/6zVQf6Mb99DaGSi40YlgZx7U34BaF7uXVAp+50vjXslxOtatE9elwEzB
097t0L36h4612w3NPGeh4NeX+MK80H5UMmL1TpyNgt/aa8d+i2Dqzg3Df2fA
PsxVYRLzYOGrMpKPF8BVQ4WUmn9gLV4ZW6ZFcHm1a6IFIe5ZNFg3idoLclK4
lLaOgvtvjpedpINnqq4/XPlLx+w4iiLYOSl4qVWV2u4JsJSc0HXVMbAX9Skf
9Rf4hJKv7+3vdIxdaIgrkIuC27EfVypE47Vpw6D+KjcaDydK7UdUP93aLUdc
eSl4b86i4oMBcGL+Sk1tH9hzJv/P1fd0LHRHzeIEHwV/GTf3wbKbjj14J3p/
YDMF/zORqMDZA85vto107QQLVJt9Nm4Fs0+5L72uB58oqZxcqQbPkUxH6krA
Ecz9gd9zwZrXdl5XTgXf0XXxL0kGf3J8eXV/Gjg9+2Tpuidg+UALmnYmWErO
UKSHEBcc7+/ZnwU2U3ljOpgNrtJZuBVNiOt/Y3qWR3h+3+ujKXcI+f4zHz3+
EPrPxjAzpPcU/L2t+/L+x+ANAUfcHTPAKv5zlvGE71GLznlyIQUsho8uPH1I
6G+UoawtYTym7r8MziO0x68aGviU8P1bA9y7gwj9vWbgnxZF8PPh7Mlpwnjf
UFtnEJ0EHjnRbTtCiCv/5sypJPQv3fd66KVHYPH8x8W3wsFGDiNBtgF0LGnC
4RouhOpPxOSdqB8dk8hKuVcijMbX+ah2vjcdGx4JtpTaRsGjDnqajqG43zVt
TxdxCu7KouP8yhP8lxZvrI3yzX4El/+SoOCDtAMBZ1H+TkG5/FOS6Hsox0YC
PcGPN95VT/GlYwb/VOYv7qbgdVmyG+R96FjcRVdSmQya7+NH9eZQ/4YCMiZ2
7aHgsxHCllp+4Jqzsf9aPMCY+ebe+JvgN4Pjm3/cAKf4UF+tII9F5kcnylHw
k2Zxp2+j/Jqe4gUOBdSfwauXa1zpWOmiV9T5vRR8PVm/73UImP3B7obj3uCa
d3G2l2+AS2Wb1X7dBM+00BOGPcD2PteufyQ8fzhoHwNrAHg1QkqkHI3PIe0z
vWX7KbjSlc2qD2+D7bcHG3ndAmc9lBfqvAn+LS0c+x05//F4SRyG9tP3bBYy
zmCepKpr5m7gwcbDb7ah741/UxJ2U42CR/MVfpe8CVZ+m6/1xYWOJQvFnWvU
pODcbTNOrdfo2IaNFVkZR1F9uOQl+FxB95dMnseTxyh4/xVBcaGrdCzTe4dl
83EKnrtOrsTtMh277stgqmRIwQvP6e51vggOaOTR57oA3sKUV5HlQMc+xXUE
cpig/cUuRuoWsrGK8CWjk2h9/jyp98yOjp3l92F+cAp9//0C96JLaL+sTqpc
s0L7Sc7F/DVkDv9g2UtnKPhxoTWJRvT9SyrSZgfPUfC+xY4pZSfwDXeNcS3k
9Csc67JsKPj+n2ZF7uh76gRZs7/YUXCFG9tPBqP3XZ3cbKV7iYJbfRv/HWUP
Nlh4E3nmEljpx04HqQtg575jXh9t6Ni3q6UMAZcpOG+3y5cQa/CJZrdXdrbg
ZiPLhF0XwTUFAgO151F7E+Zl41fQ+ca1b88cisvHHbtUcQ2N146Q8HL0/n2s
zTYizhRcjxq74I/eP6B/bus9FwreMrfKZore99Nc95PJDVSfsTs8806BhxOl
veNMwEcPxd4b0wbjjttd9mHgTRdO+1nIgS/xGt62UAQz/NH+2KcMfli5Jfgg
wR952YvaFcAGdV8LuKXB4rE3G38S2tc797f5mTy4H689sFUVvKtdzm0IB+94
IcFG0gR3vBCbZdIBVzb99i3QJ/RnpSeQwRisOlX279AJ8HtKT2/ESfCKZ0yy
lwVh/JgoVd2W4J57O/aOE1w6f7GlgpBfhkW3DBPa4yXL3SwyBZ/l3/wx0wA8
Mz4nr0zov7uo6Fc1goPM9td4HgU7yKpJWB8Bj01Odd1A+SvaZfHb3Ck4x81H
jlba4GXZC7IByL0kJaE7HhScJeey6NRRsGb24swWPfR776e0nYEXBV90viMc
qEvHFhU5nXPuoPFeuzVhgOI7RPSa2O+h+wz5xyEVgu+ks9y3R++fs/0z5BSE
vk9H7SELev7tKday7mAKThNk4LdH/aUbFxkphaL7wa+Uc9f0wU5a0ombUH0m
hzMVxIah9SyWFeFsDK7ofOdsjOJkTdbuxXAK/ppvh64Awfu2C73KOQa+9sKn
f9UI7SePP5dYRlLwwDD5gjw03ip1019GYtD7jaJWC4+D15UVWpmZgcX7JJnS
TcHbmTovfzMES/t2R6qj/s08OHSEFE/Bj/wrGPM3ApM6D0yOEuLNPmoLDifA
AgemIi9ZgCmb1gZiie2V6mrsQHH1m77q5xIoeNg1hd2HToFFNPtlLp9G980C
PcqbRHQfbIhPlLQC98w/El48BcbDzv/rQd9zOq9h8HMqBTe2CC2bsgQPfsjr
rDKnY3mW4c+wdHTfPWoXUoTiUnrsccuPKXhtBZm61wLM/fv94QwUbxVdjC7L
QvtDo+zjMfS+ufXDrkEvKHisf9xZJ2twhraM0JFz4Gd2FzKqz9Ix87AaxeRC
Cn7zwFSQJcGMyWE6ZsiRT19+zi+l4J1SAR1RqP1Hv/f+W1eO1lOJmInNaXCL
X9OWT1bgLNf2U8fQ8+TCid4LLyn4mgk+70NwsDx2RPAiuDB9psbCkY5xGSzt
86+l4Gcct564hvobxBJ8T6kenUeytgqCaP8eT67486ORgt9zEXfkIDiiJ9O5
yhrsrEq7w2cD/lr9qWnwDB27vHFEB2+m4KkeWaLz5uAD2ZFjVWh+7lVcoWi9
Ret7q+XxsuNgd44lmzRjsGQ0HilmAA5R3X/wAFp/Xs+ibyW3o/jzM+mCaH1r
pKuVHeui4AlqgtGBaL1dkZ72znhHwV8wu94wOwreNNmt5oH2h9ILZ20NetB+
nK6stP4ouL3bWdMHrV9Dm6N+mb0U3LE1hZOqBZbRzJY8qgluLeSWPncQLPWG
f/l/+/l/3uLt8zpVBezd5h62ex84V63AzQEH/6y951mvDhZhiCpPPgT+Y6Cy
c/oAmJYqUklSBifwroTYEN7PV7Uq9ZSQ//wG03TVfvD7opqKR/LgPFOW4+Jy
YAGRD1fK94A77FZuh+wFl4WoDkYSvl9QUamJj9D/Ev2P2+4Sxs8kiKKaoQte
sLN7YHGc4Ccd/9gNwcfebakJNgAHJC6Mc+qD12mpTG1A7TVGvec0+kjBL3Z9
EKSj/TEpIqBy5ROqv5qDX0xRfCPHjF/mEDrPRWc7a1F/tkqV2h0foeByAWf3
pR+mY/MBRwIzRtF+xDFZOnIA/AijHtFWBNfZFyau7qJj2y+ft1/4gu7X9lc4
3gnTsbaw/jaNXxQ8M1fMl3crmF3GtHYXNzq/rN/Hxv6m4JuNuDc+FaRjqRGt
UmNjFPx+yW8mO/T8UMK7uwcm0P3JtUOYvJmOWa4t5YZPovzsRxoMW8D+Fwrm
VDaBR440CZwRAqu8Vfwsvw18SOotT78YHSsSM48b+YPqhfzkQ6o42g891o7J
/6XglkmPLxYgb9t4cUMvHZ0XGc1X+STpWNOygZDYLAWPXOr5JC4CdmG9fMNh
I3gmZMn8Ays4een3zwY2MO9F3m+MKF7Woy91cRGt79VDNfsItno4NeNM8Ori
lnkSO3iv00JvGA/YOjkg9edmsE+VvHIIwZeUTC8W8dMxh9JXO8qXUH0U6Hl/
QuO3u1ngJ/MKqqcQakMtLx0L2eh63WwV3fejo/+KbaBjyk+GGjPX0O+Rmwl3
OTjo2JrtjjYNJipeYPZqLJQLjZezmEc0iYpf36B35xHKrzpeL2LHRsUT5K9c
6UP5v5ISTYrXUfGyqWfYABm8q0PgZjoLHcO4jxoyrafiIg9UWs6h8Xm8+kBc
gZuK88wYixuh+tjt69bZykvFGye2qF1cR8cUNr032riRim+zmfrmx0fHKrRy
jh4WoOITwjykIyjf9EkQp8hWKjovApfTOcDWGRqpmWg8+S+++WW/jYqvaeN1
UhQ6ZpLAsLS6nYo/8Dk8EM5Mx2JfXdwbuZOKV8/RGVtR/KPBR1q/GBW3fSHB
fh7Zx3hYpVCSimeRZj8Ok8FsByYYnqC41sqp6S5ZKq5+mid6NwtYjKVTcA+a
v6dS1h+eKKD2ar6WynCALXjKx824wEennplsYwV7PlIae094nos76Iwa4Xld
279ZCoT8wmlFN+f14McfAsW4Ce3fIJXa7iL4q9OmHzbc4A9sS91ihPbyRRiH
x9jA0m1Nc1M0MLn1Zm424X0Ol1X18ljA417CfXmEfGWTlyyhDGDeD0+0w0ng
Ws3FcaO16f/3+Q5pnqlZcHP5ZZmIX+BtImryLl/B9cYPzqsSvEnBUOjBN/DI
t1Fm/zHw6OyihDvB4UL3SW/GpzHxx24/bu6l4tc4SeRrv6cxsyS1/hoVKl5D
2do7/GMao4YoxlFUqXg0a3eB3p9pLOLXGVGd/VTcLjtrtgM9b1srpCelgeZH
14MzE+UrN2j6zmtR8XZmHjF51L8sGl/fPm1UPxhfVt7INLZHZGTxtg4VZ9XY
fUqC4LJF4RthP8DBbyIYfCbACW51Zlp0sN74LtbqBfAJkerBSyvg7T/O12Qy
0v/fF/1E5mtR/UZJlf1+pUvF95kP77pGBYerRZ4QR/XQe7XtWYsBFXd3tMz+
/mX6/+31hVOO4SeYidfJbfT7NKbo1pG8zgi1v21h4t4X8Lk9zSb8I+BN5H+7
s3+A1cX3fXyCvm/E5OBpPWMqfkxq1x8D9H0nSvMuc5lR8bwq36S6OfBrh/HL
65enMUatb2LR5lR8R1WT2o7FaczdQhd/cJqK84WGOn5E9dZfpaUSZUPFE7+P
Gzuh8QiZ5VZ9d56K/05lV05D49G1Vp2tb0fFZ16/DMj63/6wa6OiliOaTyvx
v+dQe0/uVj9kuIr2C0H83wyqx8Nl+nipM9p/glJN/v6bxi4xdQhl3aTi3XpW
ai9RfJwt+qKwB9rP9u85VIDihjfWNZjfpuKfBMKqrqyAh7sp7XOof/85k4fS
ZUIGJwbJjguh+RCp9i5j80Hrz2f+CzdaH/JSckaavuj5P5smE9HzOyWr51/6
o/o4adi6C8X/c/hIXVIMIV5qIHHrOfreGPOwT7vvUPH1e7Z890X5CnWb1lLv
UfHQnOSNYSj/P5dY/P03zAhOsq4RCyGYHN3/79UqPC91h7e4cmka46DMbZS5
T8Xbhm7a6qD2nZ4XcF+IQvP18Kre9yWwTZW2XOE8WIpy1mz9FFizvGrz/+rj
P9ckGfZ9HQJzKvuLCfeAG/xmlKyawdc+b2Pf1gDu7bpg0dEIzq10C7MhxJ/8
4VBwIMSjH9dnJNSCE9dkDiUR8k3cfn3gJbzPcODFrjKCf5xeSTneCa6/YDO5
3A42CjdP+0no/5OTuey3+8Es8g4d2Ccwa/qGaw8+gu0sD1FVB8H99+StW76C
yZ0Hrat+gtOE9Ur3jIFV7/SNJxLivx2mIz4NT2NzW2y1tiZScUV31mze0Wls
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
n6ThOYrn40+h/dDC637eL3Ma7nGEVCGI9j95jsJQsiUN35xz6tHT+9OYRmDj
YeFTNPzJZfmENLSf9Of0v1OxouGLrucOVseA3529yqqP8mmXdd4zX6Dhv37V
RMSFgJOunS2QjwBbLfJqfo4GK+xk4I0nxPNUm1IDw6exDfeiihzsafjRnh66
L7LSlzrmkss0fEOiXCtLPPiz6AOvwgdg9YcO4S1x4L+tZQXHEsEWtxUqGAnP
y3U0/ahPBY8Kl4qOp4FjkgU/JaP9miX/K2n1Kg0/WbshfBidZ6//NhTzXqfh
w1lyl4NzwTfwVtMP2eCyy078uYT8mAvxms05YFbKHYEMQj5HpG1jAGrPqNb9
kLQzqscvI/Xn0Xq4FMqeqe5CwwXuSXtfTwUX5uwv/YXqLa7MjH7vBg2f7Xt6
+VkK2DWjWnAripsdbniVcpOG/1HjbpFB7SslqduV3kL7YfIp789of72yZejX
W3e0XlbH+U+i+mejJGp89UDr17D5SHc52Km9kXsY3ZfC1IuCN3jR8H/r3Fys
0P03Umib605vGn4vMEKMvQacYXHu058qdD6c1Mn08KfhnSSrf1nofrYr5klP
ZAANtzkpHG1YDnYwpeyyRufDbt/EPVcjabglp19tCFq/bC+ecDyNRvvh2+Ww
zSjuWzDyuzOGhnNJSw7zI8dPXWGVTqDhb3LvKdNfgm8XdPXwov3oJOfA6PEk
tF5J8vH+6PtKuDY9CEhF63+rhXI4av/c7a6BmDQaHp2ZeFMbzQd1YG61LAO1
573e/lEGeDV5aFt5HDhr21nZkHvghO0PXHMDpzGKquvH5sc0fILKoxDtg/bf
Bs9tY5moP/EWXBf80foyr1+VzKXhJuQXpzeh+PMjidE6z2m4poJ8f6Av+DKD
r8UWQry+1yFlKQBcyeWWRPUDF//wcvG8C+b40albFQg+XlSW1+gJfingYJlG
eL5gN2uDgTdY+kvmD/Xb4GHOyUO2LmBlsaI5aS/w2uDLbUcJ7ytXaNpVHAzG
70bsdA8FP4qzeTscBT40UJacGQk+sBtzxYLAq6auRgyEfJH1O3EaId+e6uKr
Smh/0FI+knQP/Ola/KsXhPGMvSfwrO0WmJvBRq6F8H23G2x0Kq+DN247ynXE
CfzhyxWmvzfAsvdvlcSj8bvcY/ToUh7aL6ctqod8wWwi4YKsaH4Y3fb9uJlP
w7eJdXgaov0ymE2PN7aQhsscbvOZRvdx77zVwuJitN8wxeyPRd/jEZt9rK6E
hsdJ12vEof3z2eM/T/Re0/D2h6u1tihu9bjG2aUOzeeztSADtF+az10T9K1H
47fBL8EuGix3f+P91Fiw4UYszicBXCsjWvQ1CVxiG7ZFAt03P8rqnqxpoeFN
rXYTeVHgjTaTDsfQ/L5s4RztbUPz+W9XzKZA8FDFwEYVPzDv1bflYiHglme3
Yv9FgTc87HqW/Qj8xaCPIwG9f5/I4tXRt6g+3hgplaH+tY0qHSd3of1zu0/j
brQflu8WV9rSTcMFAw91PUH77Z59g0/MPtJwmrPgzSW0/52f6n9wtp+Gf/38
c8sQuo93rDM56/AJjac8z0I82g8nNUajvAZRvbwulApE+7Oh/z7L+M803CCl
tDUI2SrG3DxjhIbfnZ992Y28f+Xgneqv6LzhcIthRPdz6RNeyw3f0H3/DcPu
TGRDvXTvDz9oOLn8wqu/qWCFc5N13eg8Muk/f4hnioYHmpZX3EgB2x7suNaP
8nU9GYRFptH5z2mZ7oj8abLERWYG7Zd5Tdlvk8F0qeeHK9B5trlH0FfvH4qr
SyqZoPOZI/09k/kSuj9JdHluReerTqjx0Uur6H1/GU40ofpj17h1/coaug92
9dRLovW9FGW0y5OJGY/+bdS8Hu0vrSkBHb4kZnyfYZCaiRc4Nyt3Yfo6mBI2
Wit3eRp79T3c6A6ZGVelnX+2/gLY8EFH9daz6PfE+1slwRRm/LW+h/tFK/R7
4BlumM7GjLN2hl5iOD2NJcqptj9Zx4x/8mye0TAH701cPNV4Ciz1T1WvyQJc
UG735PYJ8MG5tlBVQ/CWp6qjnHrgi1qhGVwE39LwWPp8FPw3MnzdTW2w+sid
4rwjYG7y6cI5LbBmu0p3HqG9rMk7M/MEB2f1zFcYgX9ff1jXQrC/jBFfGMHj
+suaOwnf90TtsdWoFbhFtf9KC2G8lvhzd8sRzHRMPnIL8oxP+rln65lxrdWb
8QG205j/+LbbeRzMuMiJZE3bS9PYl2IJSjkXGm9fuYr3DtOY1rh+Xt1GZtyF
IVdoyAYcILLzxmX0/F+tispWfmZcNgCXdT83jbkmdOx+K8CMD8Zmz06g9n7v
DfZuF2TGPSeP/vl0Ff1enF4s7NrKjBtfPK8wg/bL+rUr9d3bmfHErH3xJx3A
U+vPq1e7gN8+eB5xyhNsJa60QTQA/Ma394gy2m/EXOrr34sx4wra1ab+6Hyw
bGkofi/OjG/1uyA4cWcaeyfYGfBeghnX5myIE0P1x2r/S/H9LmacsVfoFeUc
WNYeD3UjxM8KihmdIzjvg4S440Wwv8aZSn5HtP912St1SzHjA9QvAzF26D62
7XJTpwwzXi8VannPEayhH8/IegX8kpF3eJvrNPb9cFh5hywzrvbxj87R2+DR
8LE1DbR/BjI+2/9WjhnXjd5/pQ7dryfdVqKaFJnxI24qPSloPY6M4I0NSsy4
YJu0RDrKX1+YMFN4kBk3/XLnLxs6P9bl/h/T9R1P9fs+DlwUzj5H2VFklEKk
4m3cdyGFMrNF9siqjIwykoyyikQZlRSRyB6lUGlI2TSIc45jnEOKSv3u7x+/
z8ufz8c9Xvd93dd93ecczL27H+XDSlHNWvT+OCV8ot7Q54c0Wdkga1SPC9oe
+6cfRPmxtI+4Fr1ffZ9v50cc5oeVJ4H00inMHQZrUi0j50HtS+fJkCP8cLfo
1BltNH5B2F/Yz5QfOqR3615C65HmCX7jYo7Gc4Q8H6LfN28nvcIdLfjhoDdT
YAd6f/c/q+S3seSH1zbZXgxB71Pi5t7fB6z5YRP/o49i6Pf7zfYmyj4bfpgz
LLa8Ab0H93K5R9Ts+KGJs3r7sWzMHpH2Iv3o91dlecAVJXt+SLnBi1+H6l+G
Ps99KUd034U19ymjdj3z7Q1sV1QfeG6F30Hzx8p2lH9154c1P7WX3qD5L7mP
/R70QPHPtTinjN7Hply6Qo8nP0xvvqmTiX5PPBh6zNPgww9n5g1rx1IxC9Rk
3pxMwfwdbNzFuIjZn/+jlXoE5s6mJzaBfpibXyq+kTuJWa/RgR4ThFnB5GRj
iwfm+KF2Q1FvzNfnBhOJJzBbi9j28/pj1qkTsti/yj8SQoUNfDC78nOZbHPC
fD9ro+KDY5h5b6nyarlhDhyYfLB31fd978Tp2nhhvtdep/PMHbNgbvhOteOY
NWlSh4IdMJsYuZz9aIkZGoYqLZpgNn30Z0fVKnsPVowKHcU8NLJWeweql4ww
Ld/UAH7oxnboX0D1f2KbZ1pUED+0ERQuqEff27jttI7vKdTf4vr+HlRPNwY+
+HYkhB961Q4/3oT6G2kvWUhE8MO6IRsHc1SvU6pu0NZH8kNJ6+uUaLN5IPEi
QfRDDLpf7+/761tifmmzLS3nEOaYY1r3bLTmQZxJSHrleX5oLzP8rRui3wP3
HbhTE1B9mmUnJWjPA+74BI/QRPR+ma/JxNmg+wxs3f67jOqh4rMhPFpP5anm
QcVUfjjPy9p7B7UHrH3utyGdH959N37lmBnmrVmKvnXG8+DnxZrg9ix+eOeP
HF+KHvp9sqOWXpuN7sfCV7UGo3lwu5lP+/419H7K3a7gOjwPRir3/Od2gx9W
XDdr9UTzBfIsjh+9ieq/45/hTkPML/gM1qWvahc4KtRCRe/fG50DexQK+eGT
xs5FJX3MNf3iJS1ov/wvt/mLF/FD4o6tb579h9nKdj+1D8yDqqhk39nbaD9c
p56MongsHP2n8vkOP/xWO1jspD4Pwr9WDj8s4YeL2x728qLxQ6O7/Y4/4Ifa
wcGVkyqofkkWjMEKdF4v1fYn7Z4H2X1JkPII7beHv9tyB/o90a4derqBHz4W
f7KxXXEeQP/mKZ1mFP/n2q5nZOeBiMzE4I4Wfogj+0jVy2BeuZB/v2ML+v6g
lTv/E364fLa9SwTNx7j/YM0PZPE/xd9KkffvraV3t6H3J2O78i9l9PtdpdGp
9Dk/zNvd0bt3zzz4xJ188lo7uu+39aI/q82DDxemveM7+GHIW6FfhWh/x+42
lBq95Ieei1wtQauc76FzGa+JOfGFYuXvVabhtXIdtDA/ubO3zmCV7c+l/M1e
1V9U4GhiuQbm7Ae0JdPdmMk92nSlnZi/FHXnRihgtsxizmRsxszhb64+sgFz
0kVLA4e1mL/9DuDSwGOO88u+2ot8L/a68sprfsjwI+Y38M0DE0M/Y+Ybfhi6
tCk1nnceLC59rrj2Hp03r2jbceQNHr0tAR/4YfWwmu1Tnnnwx2tl0+gguv/v
QSXgmgemxNbHeSPo/enue1q4wgExBRvt7D+jfOM+YOOxzAFet47Z63/hh11x
IjOGPzAH3E9/l/QLs4HB++CaFcyLdzTUZ/5iftHW1X35DweIlI61cI+j8+v4
USOPxmtnxqm2TqB6zOypV1zggF39JnfS6ej3rX59Wcw8ZsEGrqRjbMy0mJta
0Wg9WzUnasIZ/PC24ru80SUOEI77+cCVidYDw2WfrLL816ozPN85QBIG1qVy
+GHtutkVw0UOOMC+F+m0gN7X2rQV5yXMLru/ROsi//7is9fgO4rXw7zpDLS+
6zfNjwn9QPt7Gtr6eo4DDh25snHiJ3pfKZ4OHqg/fCsXcv0Xso6JiinaX9Nl
vpjdf/nhr+AiGTn0vfi8N9wb/yFnPunE/+SAwDd3Z6LX4uBu4yLvO2j+k03O
DR7rcNBX01v0IIqXi8gFXlU+HJy/WCDzFp0HMFGbBBQc3OC5TTSZwwHl1ZyH
7wVwMLwsv+nZHOaipDSX4HEOCDZ4HcsWxUGDy795kic4oDi0MSVKAgcZk7Pj
5EnMo7TuQ2zUTk/TSHOWxMEdKhOBL9B4La4OI7nNOHha4KtJxigHrDnzmQcn
hYNQqtKYD7ULpTdefbgFBy/41++c/YY5of7LUMYUB0RZWppoyONgWKavVf4c
Zo9jt9nVbMwuOQcqvq2yu3FJz/oZzPoBp/fIrho/3ROR/3Ias6/LlyzaLOaJ
saA461XtcRu4YynzmDf7HhorRPMJBR0F4ltxkGvJ72TUEuYTz8rxtH+YqwiF
6kvofv5//36nflcEj1n70/7ow2TM6pcVs1NomIscGLJbN2B+274iLi00DzJ9
KeFxO3CQ5nd8ul5wHrSIzQsdUMLBNOV/Gz1Q+7PJKvlXKui8X3ZVaRDnwSNV
ksoJNRzkmL85ns8/D/zXlZQ+0MDB27TtQdqEeaDeVO3up4mD+Uq3vVUomA2e
rLl2F41Pf36lmqWDgw9Eah+4of44u+ZD9yEObjw1+9Ud7a/QV+SUgS4O6rZI
2fX85oAH5UJt4/pov4dWPhitn/+fbbOfXssRxGy+bzBaGa13t9ia/p9GOKgy
1BN/APU/xWpu6zVG8dvV+8FbYB581AzKqjqM8kdu+yIHrU9SoXvR3wQHPyrg
YhWQz5w2WNxmhoPdj3gDJnCYK+amMzag+qIUO/rYxgoHqdRA0/XIKc9cPs7a
4GDrgIXFJXQfZBzsPbudcFBO9dSoNTpf60Er5TJnHFwbFBR4eQTd/+lqVzE3
HDQ6E92xhcUB1Z2SmxM8cfB54037lq8ckNBZsMHFCwddjX8c+4HyfTyviaPl
jYNdl1+kvv7EAffae93nfXBwbPvIpRPo/mjeFt3j4I/yOS1yknuMA8zYiwF7
AnBQZyA4IZ+J7rN/xbjZaRzEBTC0f6P7QucBEduDcRBvUlj8i4m5zjT0eDH6
HvXcGyGfMzjIC3NS3iDfl90ltjECBzP26P1XNYjqs4Tf8nfk6pe4Mw6oPWCT
d0NdLA4q3X3ravAZ1RfV3yEiF3AwViazbP1XzPHde9a/nsBsETZXc3oKM89X
Qjt7VfurOZHvVizMtbuuutawMftGSPy9NI95yeL4xNgs5ref3C1OTmIOpdzc
rbSqfSjZ4XjUHObdXSZROeOYHR4cOctHx1yfv+V2yKr9LJ4+fYvZt+p7mlVi
OYOYGcXC5Ier7K/5sj5qGHPEvcb06lXxumUxdv7pqnYV7pm14l8wiwflC2qs
Wh8lJ7GkeNV6Nh/e+a7qE+Zm7oUq4hhmG9kBPvtV848XWZoV93KA2+y7150J
OLii586jOMABj349OJp/EQcVzkmHjKH1mZh4bzmShOqZBreY2CRmqcm6q06o
vuVtMvWSTUb3R16CzI/Og/XRoPxDCg6e6dnnMYHuw2c3t+3KaTjYUX6gmrbK
FrTm+8mo/8e5jy4j6ai+hw1e3juLOWHgR+kKmt9+0RUmZqL41bZsF0L5MNKF
CkUWDvJP5ks9YHCAb3XrHo3rOMiSr9nVgNZ3iUJ5T87FQedxqXIetP+xzPG2
+jyUr/4apf1fML+8ruLyHeVvhs9Le7eb6H5fwK8l9XOAhufsBY189P74KIwU
v+WA2tjJo5eKcFDTIH93Uw8HDM1byVcX42Dp7OvOsnccILp0/4FDCQ5Kq30v
anjDAU4SFY/KStF9EnKxL+7igIUJs275chzcGydg8fE5B7gqam0reoiDAt9f
P09/ht7zZ5uKDj7Cwa9uK+ziJxxwatEjj1iHg4Xc7VoX6zkg5CE76HUzeh/N
/87eq+KA6BUlzYmnqP58OH/cB/mT3e2mmjYclH8aUrX8kAMqjY+cs32O4mlv
/VToAQf0VHlP/25H+x399D2pmAMezi7M+b9A70Gu50JxAQcMpz3d9fUVDk5+
Yu8ezeKAtQ0GdeZv0PdSy2aCMjgg8bADZctbHEylmd11SkDvteTvqGfvUP04
8C1/fQTmTb7rPRa8OUBZ8W+263tUz3QvmST7c8C1DwmOPB/Q/XjkU5jswwE+
1g1viz7iYIPL7yeqyK55zZ4ne3HwpgipRsydAw4O3NM7MoTiITDIH++NWfiJ
32fHVe0RjV1faB6oHt7qNJQYxsGmxqgMohvm0gz1nufIoQtP6xY/o/p8U26M
yxnzrX1vlnktOUDiFE9KxlccFJuY31OAvNx4qs95DAcVW/akLZpzwPfD/Ior
4+g+3pUsfnUE87/ARocCE8yVH2rLSw0wy20I53t8CPMGkdA1H1eNz+d8z1U+
innJ8M0bAWvMYbaK691Wtf9h/PfM3BGzv5Z/8g4nzAcq2E8v22Ge5VceerTK
L4sLwmSPY9a8EX7yuDtmMY1xcpnvqv6/GbgG11XtBQdHSl0wxzEfDWxd9f1l
UxWDRG/M0Dm841Mgur9vPdd7TuJgSNrdCuEA9F7FDVznZuCgz0h7hsIpzI1b
Rzb2BXMAv8VSpToL/V7Iiv9DOoV5n8my5s3THFCy7d3aQg7qnxCrEOXFARt9
GY/85lF90blothbl05fly8b/LaD4M2P+jntywHbLK/s/fMfBoLS+3R+R5XDz
GmuXcNBqYN/6arR/VcNp1q7f6L0Z77znsMr7g++XTKH91o/F27r8Rb9PEmyy
z6L4/XGzb1P8h9aDXz5+zB7lk+5krh03Hr6ofaS1zR2z8m+VTmFkW9WpfFke
PDQqDfYtR/Mxj5nvurAOD9u+E0c80HmqRv2YNOXFQ+Jfsq6sFQf8yk65IM6H
h9wqZeekDDC/+5bZSDXGLPD65r1dyK3FIgKTyGcHddoPG3JA7pMX+YMEPLz6
w9vL0wj9fjd5E7KGgodmdUylItRfyTa6oEQYD407a3XPo3ZFD3UZHjH0fd+7
J4uReS/4fehCFvQXN4hA+XvD6Jf/FXHkGlLzKTR/YNrYD4eNeCjeEPxyH+o/
tEPBV1YCD6XTRA+Zo/sw/zo6sU8KD6t7b8vUmXEAzjbX2GMLHu5+80Z/0hjz
i8YEleWDHMAz0fR0UQYPg4cjtrmgdpkuUadmWbS/57xbKw6jer48H9WyAw/B
++UYS1MO0HVskDJWwkNm7vYxK+RAUnmfgDIeJrZRcOlmmP2/+WdWo3gqUxzC
BpHv73j+egrd5xkrJnOHKh4evAZcytD6C+bv6CwgFw2wz4L96PfX3cKO93vw
sFlXbnBFD9UHrquqWzTwMDbOhNMC0O+lUsIwAzl1LEZ5L2rXpa930dDCQ67+
Tod/ezHTKPZy0eockJ7xWTtRBw83dH06/BSNf9WiaXtjHx4eycvJ1NZBv7de
1+102Y+H6y7dyAvdj3kP+69FtS5m+ua0b5+1MOOEX7fZqWMek7804vMf5vTx
ZyqEnZjl7y2wclaZkNx5YHrV+PWddmtl9qyaf6kwemLV984vXpE9ADC/zZH2
ajuE2Sp64W+nOebExzsr6LaYs7KSc8nHMP9n6rhhm/Oq7yVeunJ4lQl+PddG
VvV/4nHkxU17zEnDalxOlqvmX3Y7qGCIWRfu/HhRG7NqbcFpbmXM8cu8ghs2
YS7WxPN9keIA0lHjRTldPEx2wkcEbEHvo8yj96f18XB5IMvsmhBmX1Fzv6ti
qD5NPjPUOICH8zNj2VzimKOnmxeOovF5fW5r2wzw8F801btDgQMaN7SfNDyE
h4+FO7hytnFAy9aI5CwjPNQ0P7cPynBAePkefztjPHwetrvJXxr52l4dycN4
2HJWtW/LJsweXKnR3PIcoD0lXHznCB6+OpJC/oPWzwr9q+1tgoc9j0RPLW7l
AAuhiz+7rPHQ5Z1E12M0P39etJWZLbpvnBeWKps5QKBce2q9HR66rfPNGUP9
P3AZDV2zx0Pvrf3fuyTQ75moDaOFx/AwnKf2Uz/av0fJ/CjdGQ97ayOXGDKY
/0unL9FX2XyfyBFftL8DnjH1947j4drHd+RG0HwBh+pifV3w0Ov6raSVDRzw
I8mHHeSOh4uLN5vMUPw2Hm3lrvHEw9KFwCDORswbc9TSB9B4VVaVRqgXOn+Z
xiPKmzALhzTLdItwwKGmgGPq3ni4V9LDJgDNx9j7I3AZeVCmonEjWn/lD19N
rRMof5NLDdoEOEDwUvxkayAemt6OWVJE62lTW+h7EoLyYbp7gELCbPBj37oW
Pg4gf+W6HR2Kh6efZTxP+csGXadeypwLR/Xq9BDxzz82yPzp2Ft/Dg9d21st
tq7h/M+FG/2yj+E4oD/eJO5HDB6uSOlusaFwQN2gm97jWHR/NthPSBDR76OA
2oVTcXi4n+w9X0nlgIk/T9+WXMTDX+uvvexC4//aBLM9EtF+1d3ocag/1Yrd
cSwFD32iboXewXPAQEzawaFL6P5M8ZWN4zDjlo9EnOfmgHJ/fb71aej9yfi3
o2eWDbRpnoOX0lG9FJYQzv3GBvrRce78mXh4edKuEzDZ4MiQdXo7css6J83L
bDYw2rGh7M9VPAxzsMsEP9ngW3X78Nw1PNxlufmt0C82uJ+vdN3uBh6qLwl5
DS2yQWJZXo/QTTzUFqN93bDCBiaDF/n4CvFQrjZs5skqT0r1F+7/g7mXY5UY
+g+zSnRsMI2f8z9bH64xMuDDXHRBeUoNhzmsPWptgADmEy6hqcarTImMpCqt
x2y2YnBQSxhz9t5fTcSNmKsLg7WebcYsgnt8QEsWs1qPo/+5VSYlpBM/rPJn
nQt/GdKYP/KOMSvFMQvavFV6jL73rLmA2YasH8MfsYjyHVcd1XC2CA81ErRV
2lC7VFjm1h+38NAm+tTv9aj+0I6Pm/ndwcOfcgfDTFC+ZFhsSs2/i4chKUIu
J1H8/r8noWmuMIEDthhm9dmVoPe3SWyiDuXLnT1OhwxK8bBs39xw7ToOaLB0
0OQuw8N9l9bLy6Hzcfp5f/FuBXpv09WsKUtsUFTKDpytwUPetH031syzgcfm
QEulFjyMMHpsj5tiA02303UFrXio5RLcMjTMBhVx/Ze0n+HhS76Rwu10NujU
smwb6MDDUb/73ZozmD8FpiSGzWPeXe4wwYvmC3t23PrkKzysIG9SC5pgg3Uc
4/4z71D/T8wY9VE2OKWsKcnsxsOZvSIfcR/YgGelfrLjAx7mJTxYvoXajcpf
K5/9iIeZJfILrQOYzz+b9/79kQ2y3j9Lm+5F9WJG+wc/Gu91TvOhXT+q52QB
7qK3mPeJ6TvteccG8bs/uJ0bRPen7y91fycbuJ2f/zI9hIf5D54XlnageDsa
hUd9Qu/3lH6K2is2eLLuocDUZzxMmTH8uu8lG4R2xe9bR0fr/bakUdCKOc27
RPFlFRtI8lgpDDNRPalSzBV9xAbJAobsXyw8/GHXXH0Rtdf9t1vg4TQeThid
eHUBtWd+HgRFHBSPuzy4L+VscDP8x1ereXQfZbjFLt5lA3eO7GnCAprPTyj0
9C02uJC8r2vrIh5uq41XvFTABjORAxKjyPfPDl3VLsGsO9Ee6YDGOz/3zdT/
iYdizD+/fR+wweMKv5plZIefP45zlbJBc/+1lw+W8FCyX+Bo+WM2mI4QDYv6
jYdRrJQncY1s0HdRS0vlD7qfdSHD8s/Z4GBkDvsbsuKw06PELjYoFdt19doK
qjeDjjjfHjYolycqGP/Fwxupdms7+9ngkId8xT9k1fFbCXtGMP+suBrp8Qnz
hg/iMzdX+eA8sS52EPMPm4eTmW8w/1Hpvfe1CbNE5Mqg7X3MMdw54alpmKVJ
wgtDQZgv57rwrwljgxKND3G7eAjwYoKSVcYJNvieEX/deB0BijX/J8Hljjm7
IBRf5MkGZwZD7B/xEuCFlZ85RzwwB20K+zLpyga1r2Jl3PkIcKYyvGK3Nzpf
mRdlyngCFMgKdqxG/XUFM+YOEAlwOV1spyKaL+h8brEjmQDxv0g0Xjc2KIZp
JxMFCPCtk+k89Rjmbbfdlryd2WDjSYq4qSABTsRfyb6M+odMTAlUCRGg2Suu
/X4+bOBQZfhGUAR9L/FirhPaT6qMnmGYKAGKO3LfIjmywZ0RmxStjQT41Yt4
QN6WDd7tyg+ZQW7esc58yowNZqNumt2UIMC7r4N3Dhmj+UJ7Bv9JEqCwWEt+
0EE2wFXY7mqTIkDS/LmJ+4fYoNq88tZJaQJMr+25ikPtDaJvL/MoEKBPxiGh
FQM22M467NethL7X+foilyWK90iXzSUVAlQf/ju21wTzmfH6v+9Q/1YfG6Ul
NQJcmCzRdULz5fYRlot3E2DpfIyXCzIr+P3l4+oEeKPioL8+Gi+sLsD5oE2A
lkZuH/iQP2ZKHKbvI8CRtuw/eHM2iN5XlrWkT4C1sx0/rxxmg39qisFcBwlw
v5UFY70hG9D+8hc9QM5ZMGP3a7GBsoLSs+NGBMg3AUTCAGZlOw1HA7RfBxuJ
yEZjAnxMLbJ4coANuH2Egb8JWu+Bzi+eaH1eSuEVYRZov3TSJaF9bKDz8uU3
GUvU/+vVy+Y70f0+5CEUY02A/+zzHwbLsYF6ECM4wZ4Aq1TvF2yQRfm2fctf
VQcCNHIvvtm6mQ0kps6PJzoSINe0wg8BScwybS7f4sUxq/slh5+Xwez5UFKG
uR3zJ/sgryAVzK9Pb9/zcZUfr9EUkFfG/C+tgM99K+Yth+5OVq/6/ss9irzU
9Zgv89+yFuNG59P4EO4+huI3rZf2ZW4OuOjhu5OdCDD5v8w2++9z4F27Fvde
ZwLUJhUOLkzMAV3pzPfjbgSYO6OuNfN8Doht0ou87EmAbJMvyRUNc2CY6sWj
4YXOy587Q/jBHLDb4dyT4kuA5/+bsM96MgfSOyLX7j1BgD3EkasJyC/2bMm5
EESAi4mVqnX/55gkKdkwAjx7brfIp040fnv6wbfI0gyXpAPP5sDOGhHbkxEE
eLjprM3eHsyi9Sdcq9+g7+NbSM8jCXCyxMXgx6s5YLtF5cOJKALkn9LkKn6L
1p9M/VQbTYD9RVOZ7NE5kMf9n6lzDAFGxqVq+H+ZA94jidX8sQR4cmpvPRnt
T+JGSOO98wR44EfKtCfyunMlQ2bxBHj7t+K7Nej7am7k6WXkuBBGmh36XtCE
/re0JAIk78zVa0GO+St3JyEFnf+vlbenu+ZA2qLjJuVLBPje9oD9AGqPWBxP
7kM+te65Kal1DhQQ5hZrMglwTOg/x1u1c0BRknfI8QoB5iWfzzpZNweKXZ+q
mWcRIDHz621z1K7xOW5sCTn13fQR/3tzoKGQTyAzhwCT3tfxeN1E+1PPlb+Q
S4DFJUkp0uVz4LpH04jkTQK02vXTKxD1f6Eg308tIEBKYImf12XMVhKxfGGZ
c+Bsao4NdxEBuvRa3xpPmwOxOwW/X7tNgPRHf2F/2BzYIrbVIbEY7Udvd//m
Y3PgEtC99+weuh8lVQHXI+ZAt0JrQ2oFAe76coiX2x0zqSZ82he1C/OwHdUe
EuCRcvYe6tk5cPtjvDilGp2/XdncmoA5wHdvINf6MQE+V5X92hONOUaA+mI2
cQ4Q3sTS82vQ+YnUL14omgPugRP8rY0EuC8upPl7Jea9Ib1naC2YJdp3Ecxf
Yr4oar3TvgszhyWrM9CJ2WhTitTmRsynrZp2J5Zitu7U377nGmbCzKmx/Wi9
olfhEd5mArQvros84YT8NeSkF/IyHJDmNp4D0TImH9ktBLg5rUs1EI/i06ap
daWVADfx+vhR/syCjzvWXDdtJ8Bq3eATI9vmwLeqNbIanQS4VYSqt405Cxbq
MjWlXqL6qvEoJ+fXLMg3nf3wDNknuV94iTUL0kcPEdmvCbAvfVlMrHcWlO8Y
Jzi9R++j0D311JezYOfGn3GTH1B+m1/xvpg9C2SyPmZ39RJgTeAmiuD9WVBW
nKPs10eANDPT3MhHs+BZDUP9YT8Bmp5fE/47YxaQG0Pumw0QoLw2zS4+F7O9
nW//ePks8OzqebR7iADTGt+d+IC8j/fLiT+jBJhl8M9wZ+ks0DxLL938FeUL
+P3YumUWsGQDnZ4ipwss7ZKsnwV6Ocop5ydQfu37cXB34yyI6rtFl5kkQMfp
YSJfwyz4wcRzybEIsPPNsTSNulngRVN3vjNDgBl1qmngyixI6BEW1Z8lwIYw
gbx70bPA5Y2wN/c8qm9pkfH+Z2dBnJvv5n0LKB+ddw5bhWE+JrOtmp40Cw5f
jvL+glxkaftu+sIs+AUj+yQXUb0lOs3qo/ncY8IELH8TICtAdkQhEu0vb1Pj
PLKFsUzE38uzQEo4yjr9DwG65QjHPQufBb0vXHzfrhDg0PrGX5v8ZkGx23z0
+TVE+CK87fGtiFkg/uCTlwAfEV5nPzx7KRbzL+WLlv+3fq/r5tseIidGnw9I
Q+1vebviWfxEiBdMrfobPwtEtdpF/hGIcCxSoPJWAObctuxhBfdZMH/taBSN
QoQHRNM7LhvNAonvAQXlyNzjB13sbGaBAbdbtbQAEX7Kj/lkrj4LeE+rhDis
J8JMmMKUMZ8Fzj3f+bI2EKEWQVk1w3IWPDTvb1EVJEKGYctKqSv6ntKzgHBR
IrRk429+C5wF6p/YHUJiRFjECQvX98fcWj9h67fK0ULBPUXWmMsbal7e2ov5
d3jcIz4qZlbJ4QvCj2f+52CRbb/ES2dAcmZ1f6sEEXbHT4tUnZ8B31vXnO7a
TISnuPXjb13HXPn1VPXbqzNA6tLAkf+2EKGZlOh0XfQMaD4WcaJElghTuPU3
J7jOAH7zE3b0bURYr1QhZu04A4om5oJiFYgwSceB3nNsBvg8eBwlsZ0IFbuv
Xq1C/e0DW6PqkHd6d/9rtpoB8rv493xXJsIdRPHYQpcZYDK+79czFSIsC3lR
GnRoBrz1vnw0cxeab5eMv+jhGVCZU1eRtQfF59VPfz/TGSCcI9Gzcy8RPtW/
niGHnEay1+PSQucjJRkdazEDTIe0GB46RPjKW5Gr12kGBFI8T3MBIjzSeMD5
gfkMuMxLWcxBvpoSrhlwHLOawOYDv10xzzIiadGeM+D47od8qrpEmLo1dGwD
6r//m2LIih6Kz+9j78+j+XcMxNs4GhLhiKtswTrUvilEZYe8MREuVSsN/+c3
AwL25+awDxNhKFtppCsIs0JmzdOImBnQ9YY6ZmZKhDXi9cELyK8OZxwXMyfC
TuH+N8IhM+BGppUizoYIp5cEtHTCZsBppYzFd7YoHpXbmsLPzYC6gr2hnnZE
qG/Mebrx4gy4+3Vt1oIjEdrZPBEri58BH0WzyfVORDgwLMO3P20GKC4/XCp1
IUJvlwvGQ4kzoNBFsGjQlQhD7h1zOndhBrQ40jbxuRPhd6fw1sDIGXDBYPr1
DWTL7wsrTmdnQKa4G1+XBxHyXte7n5gwA9Y5JP6U8SbCwCQ+3nE0X7Trft8N
J4jQYLl4oSJ2BuhWBQ4FBRPhgltD3kLADIgwcLTkCyHCs67PTYVQfMPOk985
hKH1/rDIbbXF/IRCTPlxAvNe6cyz+zwwe2wbKrUPxixdTVcNDcf8b5xz/p4X
5tgmf/Hj6HvpqjMXlc+i+90WjhcInAH3jz1kl8YQIckTzBai+C7vf8H/N44I
AwS5m7ag+DrqwY9y8UT4n+B21XzUPzW38bTJBbSe63/vf0brVfD9VD2OfGey
l3TdZAbokHIsHZKI0ErTW0n8yAwQ2pS81fMyqkdcJUFmGjNgqJrvwy/kb/10
jUqFGRDn+fnk5VQiPP2O+kSJMgMIB4ozHqcR4ZnLB/GTpBngFHtN4FA6Ed4b
OZH1Z80MiPrDShhBPv4zsaaaNQ2OdjaZ82QS4XCQ46U+zjR4lmT7ryCXCK8F
Z0ecYUwDeTOndbY3iNDEeYti6ArmpxUZx9Lo0+C2q6bC2ZtESP9H5qTNTIOM
jg4x2i0inB+4mvzg3zSIfXz9YudtIsxaWZZ90TMNmhtqbrDuECGund+B1DsN
9LIrq56UofMssDhfOIK5PoKz0x+th6OkrGr+gAifD+yGelwzQKv3QQBvBRFS
ZZhRT9bNAHfep99e1BNh0D3j96/qp4FYlW/99mYijOjdcsmrZho4xQgcePCU
CMPKGKSE1mkgVcZtqN1GhA+OxzEG26ZBrpK8+68XKB8nO7jvvMB8d5N9eEXF
NFiXeV548jURSi28uBV3fxooPo2JXfuWCImCMt97SqbB6NiJL7CbCNlZO+UL
iqfBQGy/1nwfileLvFvVG8xixl+FFJ5j/jrmEuPTiPnJH2n+i22Yi05KSe3/
jPlC3nZPrn7M1hmv/lY2Yz5y+2ZP5o1pEHzXuvrGADqf/TMjj1E8XC8biRz8
TIS+kdJ7NqP5fQVUCX3I7z9L7/yJ5pu+uv+76xcilJTer3hsdBo8DT77gYM8
Gmz9+PvgNKi4EXT4Kp0IXV8/s3D+MA2sNHIyXjHRfbFbDLMrmwbWfxQ2n2QR
oYvEM607MdNgtmQzUWgJvb8L+JLn+dMg6enbuw3LROgWU2E9UojM7qg7xEWC
9/VLxCyuTINLm4wIx9eQ4GmiSJ+u/TTg2vuwlYeHBK8206zvqkwDuUNEWS4c
CV74Va92dCfKtw3O+jsIJCgVMiftLz8NysfnN+4nkmBe3vLRrXunAZGnImeM
RIKeRmpnL2yeBgbL92KM15Ngw3bbolI4DUKqUx5tFSHBz9cLXfPUpkHJvmft
HaIkWFMgoCqoNw0mXh13FpQkwTkzv+WfitPgrDHZKUeWBC8GjTY9NZ8Gwxdy
E6TlSHA5WdfsuxZav7tCs5o8CRrH0PnI6PtN22pevNtKgkaPhNOKdkyDgPqP
MpHbSdD6eTD3pBy6D3U9uk+VSdDwul1tLPIJR4GwDbtJMHq98QYog+5jzKnm
sj0kKGsjlDS0ZRoYq8VU6qmT4AOPcqVKNL/pc551cVok6G7fbzytjfLTZgFk
aJOgW4B0gwSy8fxvq0IdEjRbiZsp2T4NosimnCU9EqQY1vX68GOuXEl5eXaM
9T//GfxsIzbOQu+BEOXyARIcXp9/POI1C0yoJdnVHiJB1bpUPq/3LHC7yllC
x5AEU60LXs4PsMBHj5CLRkYkyKxUDxBtZoGhXWfVeE1J0IHSPO/fyQKcInAp
BVmmVqTgxksWMF5zVCbHjAQFgw2v8GezwDHqFKPSggR1joX/krrCAntsuws9
bUhQ4j67RjUe9W88myXmSIIp5ddEEkNY4I9OSKLsMRJMumui7mvFAnz9ven6
x5HNZ0L3eWHm/Ly27OXEAlWjk8smLiS4ccRRlhzEAnkdW13c3EhwXbRormMU
C3w9m3N0wZ0EP0Zm+rA8WOD3dfkryV4k+PdU8fCsKwtQRs7hr3qTIPuCn+qM
PwscKjuSUu9Hgt4tk3Mbklng3oR2k3UQCerdPDg/eokFyt7raYUFo/2tC/y+
rogFeEd28UWHkCC1Sk7nUgULyC3seJgQSoLdO/sC3G+wQMRPuF8snASzj2hu
bIhjgcNDpZ9vII9Z8H8qvsYCQVd7uMoiSfDkqz9PHVG8tKO8p7XOkaCI+8/i
2JssINZqWt4RTYL3ju3s0kbxmhA2NBmMI8H35/9syUKWfvvClJ2A8jfyr5hf
Ogt0iq/H/U4kwWdReR6RhZjJ+9pHZGpZ4MfUBq11KSTor3FSZk0TC8yP9AzI
ZJJg1Pf5Yy5oPfmdPSPFyM6eWusPX8E88/D2TNRlzHzOWUr2+SzggNscvDML
rT/WJ2XuLgvQUkU+Ps4mwfnkdEOeRyxwc1qY+V8O2s9WO4mkGhZo2n1rw9Ad
Elz7RmbNa7Se7/fWTtkVo/2AKi5XlF9cceeOT1SS4N7IFyr3S1ngSNllfffH
qD3nYmpzOQtYOiv8cK0jwX/M09HibSzA43LrgGs9CSrVKQZ2ofYmE87YGPLN
qT98WgUoXhU7Lh5vJMHnvf6396B45B+pXvsVeVtrkY0p6v81jM5l/4QEf55r
X+J7yAI+vE0Wtk9J0NTolbUmOj/HwH8XrNtIMEJOZOdudL46H47LGr4gwfrr
bo96UPyOsxMiDV6SYLiN60edDyyQxvI7/KSLBEeGWvxDu9H8p7d26LwmQd3U
Ly9O9mLe+bD+jcAUC0zGxa5peEOCBjO3KuyYmDeH19+5w2AB6nzS3ew+VC/a
o9aIDrGAy3wub9IgWu+layepLSwQULyjf2UYnY/s2/sl6D4byuzdHjJKgsIz
XCav0P0Nc4ijB35C+XHViZMyj9lsc5V19icWiEmVrD44QYJHNzxnbF8zDbYE
PKvYzSBBAb/MfulhFvi1re/aLAfVQ5Hs/drdmJWGVNTO3cLcGi36oe8h5pdn
ThB/o/zFfS9o9JknQYtR29ttSSzQv6msqOMHCZbckGzTS0T1iLTZOvQfuk+j
3Waaqeh8z1XN+3GR4aRui6ZaBAts1ie99ieSoZXwBm9BTxaY9VbY84FMhld4
vr1q8EX5Nr1BiC1EhuLCn5aSXFgg6cmXf97CZKjz+rX5bQcWsN4R8kRSggxd
vhDlv1mg8/U++DtwMxlOf5LnHTZlgcGG4LsHt5Bha/qTc0pHWGCT67ApTZ4M
n9yRWmN2CPPn7qCQE+os0B1QsYtnKxn6LNFqhzawwJV1Y35OCmi9W4/Ejq7H
bGqTtOM0gQWcNnF2DiBrzg5L3aageDfGXd2lSIYl+n0NBj+nwKF858kBVTJM
Ojm5uw2NT9ctf1mvRoau+sG3RARY4N/fjQrSe8jwmuGbSztxLNDxaqeBwF4y
5Howp0ZE9ryR+M72PzKUK9UCxbyYy+evV2Wj8SeHgq23apNh78c4wlH0fTGl
i0YO+8jw3vJ42zEuFtC1/LNn3QG037jRGNfZKaDdrHRmAfmPCsf5yfAUcPU5
f+fAITJcy9465bk4BTqKhi6oGZLh4npmctf4FLB5mGEsbUSGXjLNDu9+T4Ho
Sf2lqcNkWLj9z5jnrynw16jdZOAIGXbKmXMK0X63RHUkt5uQIaEw6mUQfQpE
tp7ZpGVKhpny9sv2XzDTXF/cX8zCjHv2lKAdg7m4ncrffBZzmmYTQ8pnCiRl
aHXMWZDhBuvuveMBU2Bo9xnfEUsyfNRr8dkvaQokFtf3CduQ4RnC2T7pM1Mg
XPIlycOODEGojf3eE1OA7qUz2mlPhryd98s/ofnd1CJbtR3IcJBvXWVK5hQw
MuNcr0L2akmQeJg4Bba1vDG85kqGsZPC6+9FTQGzJ1INJDcy7GuwbTyWhuYX
vnZ+CfmG2peg/65hPnHE70ve5SmgXCanNu5ORr9ft5nFXp8C31QkxPt8ydCN
N+7jlfNTgPlgQW84kAxtDGsnYvKmgMbInLrGSfS91J2CU/emQOZASblZCBka
1rldodRgdtm01e7L7SngUnPJ9b9QMoycoI3l5aB4pe2uPneGDEvHXvfkFk6B
TxcevzKKJkOe2ieV0hlTgP1eN+lyLDr/2OU/76Iwe9X/yFownwJNDhO7t19A
90VkQ4rhoSkgzinYJJBAhmX0jffE5abQ/5umpHhka2c9nt3bpsCa7SltZUlk
GM9UXVjRmALPgl0VMpPJsP9GY6rR0SlATf7asT2VDN/6vTyzfpU7ZH8DKXR+
LRvfW/mkk2GU7vH1AcFTwL7nXOmlK2QYtFfy+T6PKfC9/GBLTh4ZUllh0jdQ
O7lqKqiviAyFXssabUfx/7B9ftngLrofhl9v2aHzz0szfJpXgvZ7fa7T4STm
ccc+8y1of2J6mYxj5WTYXCZScdAWc8zX0dpZT8xfzatvnt2POdrj8KfWQ5ht
L4nv8TTAfCDzb4MBio+cgLTPl8dkKMWpVQ1B40N/VmiY1ZDhTihT+lF7Clwk
mvmNPiHDcxk1Ljjkx0eyN95sI8NXZpcEBxymgMHGe5aSHSg//1531nSZAkG/
qqKaX5Dhh+NFFrP2U4BoYXE68hUZEufOTpyzmwLxjAic5msyvLmZ6BAcitm3
6Rs+HO3/nTq192o3GX7HmajdR/dhm3ZvzOn3ZBh8aOa+XsQUKIuc7iz4QIa3
26VySxKmwImSDZvPfSRD98aPzgfR+Km/VgG9A2RYpLNgREX3oUei1TL4E7qv
x+tG7h+fAvzmUlfOfSPDQ8tnX/66gPZ3enhkA50MN561Flb0ngIFU6Lyx1lk
uHndDU9R1N/IC09+hyz7RpzvjQ26vxLW6t9nUP2tLDbaoTcFSoLu1r+bRfXw
KndAqPQUGCmPCtKeI0OmHpfzh/VT4NfjQX3n76gekDpfpjCZ4Kus879XP8kw
ex1DkI/NBF+CzM0Lf5Phl5hSYQk6E7TeFPu7dQ0FXotMHexE/dd8Fwk9yEOB
P+IdVNkvmICtuTzyip8CZ5d823Y8Y4LSeIn1OUQKtH0X+iarnQnipha8RkkU
GBW/86d7BROwdIOTpSgUaPntzNGyHCb48bYy3J1KgdAkdf4asqf8v+loAQqs
/sgmi6Vh3hHNNTpaxASMdLv3uRso0E9wqDI8lgkcLO8rMsUosMB9LiEpmwn6
46S5xDZRYHoly3j9CSawtlMtPylNgTRlfzu5UCbQ/Xj+7Wd5CjxtJbO+4ywT
NMbvVHm8lQJ5t+06znuKCbhGi6KStlEg4F1YdolkAvJygvgi8pLJ1NVTR5mg
LPxLlZMCBbbU6jCOGzBB37aTdqd3UCDF5eXHQGkm+JwjrntIkQJX7pNNBRYZ
gBbqE9apTIHJ+2TWDhOZoMZrRIumToFi4Qsw4i8DlMY4peZpUaDFsENWKgfz
FEvv/XUGA7zQKI4q06HAuH+j75RGGKD74dIpc0iBnb/XO/L2MYBN86sCXj0K
TOQWXupA/Zu8Xil0HKJAr4raizQ2A5D8z0sqG1LgJc3hZzEiTDAtGzTobUSB
gjxOtX1bmOBP8syv4MMo3lZsW8YeJji8f2tZihkFBhefW+nfxwRDsxv+W0RW
E8jgx21G8b+wrQBnRYFlziPcwxIovpuiF4KQ8+a4p6tkmKDTzeuLqxPKj/cb
PURR/8mJsMu7nCkwu6ZqoOAnA8juEJv2OU6BkceAV9YnBngtGXHimycFOnpv
3XCNxQALMdFhF3wpUOF76Tr7rwyQJph5KsmPAg96vMxwfsEAKnIFVTb+FGji
1aDilcsA/Q5yH34GUeBE3aBkAYpHLS3bLvMUBY70nhOsHWeAcfzoE5cQCtzt
98C2/h8DrMwV1WafocCf59OIxHVMkL1cfPJvFMrPNRe85wXQ+Re4Db2IpcDY
2uaMP1QmKMEJJSskUGBfuSVHQIgJiA93d9skUeC2KwtW5DVMELogGtuCvMtW
t2lmigHWyc7vLciiQPW8781UPiYQMklw8smmQMmJK7cLZhlA93mf7zvkp17C
Vm2DDHDoXvl92TwKvPlUoiS2hwEOrO/7ef8+Beq/3VZhjlxY+0BXs4wCr1+p
Uc1pZoC+1+PSmeUoHyQcZWJQPDZd8PM484gCrwS67tb8yAC95cJ3sh6j/VaL
htxH4zeX1MW8aaRA8vFRvfPo+8pfo20ftFLgryH783vfYT6/q8GUfwbly/rP
qRpP0f2M/GgcifJHn3znTHsbBf69alJhgfLPY++AWfIzCkxp2U2Wn2aAoz5s
IbPnFHg8y7r1BIqv7uFLJzw7UT5oX0mlkphgftiu0/IlBZrziw9k4JggxS6U
Pf+GAp8LOiteRfnhLyh59OhbCszJPKigj/Ip5OgvsKMH1RPc+Xs5gphLTez8
9qHz0bB7lcdGHs7p8daBTFBBXZI485ECt6b/qb5mh1nZ+5XUBR8m+Hvwh8Xv
MQp8IFO1nurMBCA6O+U9kwK99ZtIbnJMIPh0tvIoiwJxAlTTZXMmCLwzIvGc
g+7Dz0smZ42Y4N38yvNLSxSYkTXR4eLPBLVXNKUpv9D9/Sb0syWBCXzm8xPS
/1Kgq+4Np8sXmUD2V+/wCy4qTFls7D2UzgT5X226tq6hwsb7IbWGSUwQZSuq
7sZLhfc0XnHWZzKBAj6h8BmypWCUkFIK6p9e3fGOnwonql/euIvaxcvJycdw
VPjHyUFQ7TITTOlbf9YgUCHD7f3r7gtMYFchU2JFpEIJ1rYuyTOoXrlJtT+i
UeGF9KfnTh5kgqR8V2maABV+HbO74+DEBPFhPicZ66lQ0oI+edkac0JUhU6P
IxOYvdDtGBGhwkO6RrM2Dkxw7BHp1tGNVKj930iPsxkTGOTcKFiWoMLssZ3s
NC0muPItOzFPigo/N5i9+o7O88Y1O/VKGSr0bs4MOsmN6veM6by6PBUqNkbK
UNB9iZNzKuTdRoU8hWdM8lC74ufp/OTtVFjYtn6fDD8TuLtI3dTdQYV8PT/+
eKH8Mtwe4LdNkQorNT64iXxB9VE11tEa+fJIjvjyawbokkgO+q5Eha9TNp3u
bME8Jz4hGVHPAK36Wh9Klanw5/i79OJKBpjnXakNVqHC6s89lOIyBghMtOnW
2UWFl7IyJEEWA7w78t5vEdnRhyQ6EsYAAYdEqVvUqNB+r/WEmy9az6nS9Y/2
UiG7LCX2ljPm8V+ngkttGaDdK2LSU50KafHRBxrcGOD7SRmrq8hP/snOdZxg
gJ23fZTZyH59pcP2Xgyg5Xox5ZomFVLiIof/HWWA69+WvTZrUWFDpoxbF2CA
yP88d5Ugj4fnWUsYY94la8CMd2eAGfqXk73I3SX2Hw3N0f2LPJhRq02Fh68q
Pk+GDHBnrl0O6FDhDdvUdk9XBrh0fqh7AfmhoFiLiz8DyAnHakYAKgw1uB6U
FMcAPDn3w3qRrfgMXTfGo/fFT55K20eFy54FYQ9Re0b7br3i/VTopq0rdALV
3x0pR9o89ahw04tje42DGCBn/Zb5Qn0qFH4XO0N1ZID4N+VPhw9QoQf49N3f
gwGYWkpeuQepsKafnCRhht6rQwekXiCnamzozg9kgC8uPgPfkYXGnNoenmEA
94RDv7gMqfC/nhwbwbMMIONSeC/DiAoHdbzNN55igJ4Wxf2mh6lQvkAt9EYo
qoc2rfUJR6hQ2oSRooviZVbZ6oSzoMLIrpi6Iw4M4EIZN/e1pML5ooYNb4+g
9zQgvekZsmyg38VsHQbg17spufEoFfr6dJqqbGcATvJA12tkVcGgrEYFlD++
eXZRVlQ4eTFIoH4dA0hm/DA56oDy4bEvMZQX7e/c9nLCMSq0+DAuf47MAMmq
7iO5zuj+S6RWvVvLAKHrgiYlj1OhFjEgw3iWDp6SPDxNXaiw5T/ND9en6YA2
9GLdEV903it9Z1S/0sHimVj+vyeoMDjgsJUjMn3Phx8jgWi+/q0nl1l0AE+E
tKmdpEIVYcVdXt/p4JeO7a0k5ESJH7ZD4gygOcEf9QXZ0LwrtkSGAdRH2Z++
nqLCfCO7iJsqDICrzrHZfY4K377c+CtRkQGOeRkc54uhwu/XNs8wpBlAQ1Fj
qeQ8Fd5RSYnYacEA66V5rXQTqXBk/yeeSuQtpcUHniITitr3/l+8rP6kvDt/
iQpj3vtufqKH+f7aO96tugxg0ea+bsdlVF/EvRbCUX4KX7Ma+4Os172TK06d
AVyl196SS0X1Kn+UqoTyh7YMwjlpVPim5coLOXSejPuPn56/QoVyztpjeNQf
Tv0yW3MV5ZN4+Y7cfQwwwXzyez6LCt/XJCsto/1mXS/x3phNhWunvqT92sEA
BeRN1ePXUP3JuXi9dzMD3NM5QUvMoUJ1r9M/hzaifDk6of3wJhUuXV8uGxVk
gJqtXHodBei+6oP8WkkGKHm6bLOvEO2ndd7uI3LgP7Nvd2+h+5in21Arh86b
a1i54zYVMtfkrX2whgGurkmDD4up0LaG1s/+RQevtCkngkupUGEwe89Fbgao
mHszKVdOhZtn7nkFoPxoWy7oFq2gwj7pqxpfkCN3nH4W/5AKy3+Hy5Pq6WC+
70JGH3LubU3yu2d00Okunir6iAqB1kaznEo6CN52JTMD+R6RkQaS6cBGSUGk
rRa1pzQPZF6jg8/Q0T6ukQq30hf4dJvoYNDy8IBAM6o/U1d66rvowI1880pd
K3oP/nGp/n5AB42eEl3WT6hQ82jK5bEaOhh9H+F/4CkVqr3Y5bGCxs+E/Wdw
vg3V9zw/jWfP6WCLjevvUuTqGfUKtUd0EP3A6v3f56j+CR99nnGVDqS8LK3y
O6nQOHC62KeADhzWKq078xLFW/+jaH8O5vVC85emb9LBXtbFJPdX6Hy2J5TT
r9DByviRQbMutP5/LQ/23KCDSzN/c4VeU2EYU2z4fRkdlGTQvMLeoHjZKFsV
PKSDnK2ST7XeovXvsoxzROtRpG3lXH9PhfCPbLfhdTpgdSQtH/xAhSURl860
XqSDyQZL6RbkQXv/6EtxdKCj/UXX7iOK5+P45BsX6MD2i/9DgyE0fvaHYFsj
5kDat5ZzzXSwP1CQ1ITM08OwfFFHB0nHzYTWjFJh3WARp7aWDrLEY0/u+YTq
Z0B/w190XiE2tgvmX6iQmPLkbn4aHZwKeeXf+w3l+xscV8klOtjopT9ez6DC
LdPrzqSm0MGjseQNZ5ioHiTeORgZTwfyIds6JqepUFz7s9ZSIB38M2VLnJtB
8R2YETFG603qvJ61jo3y0SZ8kYHi72WfqGLPQfFOvpngkYTZPLBwMS6GDvwp
7Zp981TY1D77yxa5JLuqz2ABvZ93VX/lnqODzFeT9abfqbA96XaN7gk6EKj7
qtCGfIYuKSztRQc/3hin7lqkQoGvtCe3NenAxLbYxhYZ2DWMvtiBzleybq5p
iQrp5QHlnw6gemV9z+f5MjpPBecjE8fpQOmXBO7BbyrM4TrL+yeADvjKXuhc
/oPql/KOG5NudBDWV6o/iGxzj0DOC8Pce0TpGRntV2qfZ2LwXypk/TgnpJJI
ByqEYmmrf1T4NMbKd9iSDrxr06btuWjQ2eRN2pw+HfyeIuFfI59UsJd9rUcH
vrsrFaV4aDA2wi5OC6B8iP12/ts6GizUoncvS6L74KXr1slHgz2JJXEaWnTA
VlDh7+KnwcfJL88claODHUeswkXwNNgymHYqlEYHRzcdbeCh0eADECS3bS0d
dP04G70V2frjibpBUTp4w5pPbkS+Zql7nkpA52ucrXVKgAabZBX8HPHoPB5Y
1ZgK0mCnjE3wIJq/pya+m0+YBmV785VjFejgiljZmWBkk5N7h+4I0EHe7Qal
FhEa1FCabf60FXOVmtqQsDwdGMa30kckaFBPxUIRt5kO/vyMTduyiQbfXzsU
Zoj2x3Xr/MYVZKmHckqv0Hr49OQ8i2VokBv/eH6Smw7ePy9MmUWe3qpyo41I
B7MNhcsh8jQYf+tap9oGOtg15JXVsJUG/Tuv9Pei+SaVpXf5b6PBXaxXm412
0YEmQZHcq0CDDhfss4n76KCtLfr5xu00OMAj+WdhIx18zdicK7yDBj2Ww5KW
0P5a277yxyFr3VpOy0X5c2t4ICFKkQbVpWoXvxjSwYM6wW4GMitWO+6lDR0E
ao7qtCrRoHJ3lLyxOeaRae7pfap0kFjYcrxMhQb3lowoa22hgzWkm9NrdqP9
JSQ8v43O20XMgZmKrNdcJSChTQfvBvv4PP+jQb6dn7rbBelgj+Qu+WOaNEhR
CwnesTQJbJuKuOZ1aPB3rqd7KRcdCPmR1srso8EIcQocn50Eov23enn0aJD6
3VKrF50/7cnP7K8HaFDiptzntKFJ4H6eFXP9EA2q8k8zbgxOgjX8B0CMEQ3a
hg7ZWrRPgqZg3iapwzS48ErOeE3rJAg7wc9rbEKDtwx3cZk9mgRPZkVFb1jQ
YJeQhH1m7SS47Je/57IlDQYkTuY2dkyCtXOsWw+RJd6J/9qH5vvy0zIt1poG
t18t6tw4PAk2Ovynt9OOBk+JaoDSz5PAylkpxhz5VjLPivunSfB0KcV7GPmn
6MHDdQOT4NC3rf6vnNB8DFu15hHMLYz0+pDKSVAVnOzc5k6Dd97eoPpcmwRn
XW5Oy3ug87hTIpZTOgkSJrjkVLxRvgrx3a8pngRlaeHj5siCnzzU996fBF2l
/fmnkQsPEi4WpU6C8DHPlnYfGhy9E0fccmsSSD7MlcD50uC4vtwrt+xJ0H5h
vOtcAA3GjJHG89Mmwaan/23uPoX2M08RHEyaBGMegbR3ITR45uzlU0khk+Ck
mGD6uTC0v7H+qTiDSVA6yJp2iUT5fi5v+JPGJND3ckveFkWDTztFdtkhW5lS
igyRTQq1DedVUf+EbmnVszTY3jFsvXRkEgwJj57siKbBoGU+gxMKk2Df7jOu
/DE0eLQsIOCZ0iQojgj6cj0OxevYa1vJXZNAg8iIWUFWfz1clbwfnUe8h/Xa
eBp88sDDW8wGxWdFi/sA8mCZ6edq5J0W5/keJ9Bg9Z45N3PLScB/5g2X+kUa
FOhUCqQ4TII++c6d15FVvHya1YImQV6K9f8r4s7jofr+P4Ariiiae2csKaWk
KKG0kd5vW9oRIh8pKiqytNiiLEkJbWRtQ0qiFFIhtFtaFJFEzB0zxr4lkt/5
/vPrz+fj3DHH+7zP65z7eHiw+UOcX7dMZ+thHvg9nOnaE0nWz1RZNtmFBxc1
vH4NRLFwXu+CZnd/HiiqhGTFRbNwsGs0UuIgD84OM8/qiN/s/bxhpg8POjZ5
JDZfYKH81OLXbqSeFXLll8UusXBcz/bI36v/XNZ6t/DnUR6UuZVO67vCwrYU
k44F5PMbPC2XxcazcE/3DJVfu0m/tWgdzCOumRPlUkPmL6+etyA+kYXl/EXj
gnU80GiQOVpHnKwul7qUjCuucSyUTyL9P6movIOM67PbMYH4zV+rb81beCAU
L0z4TRzwIfSQqjkP0DRFITGZhVOUmlqLJXlw7L7CiN01FvpP0e82qmPAu2nh
SOINFloO9s8eymBggvGjbyPEM7R61P7mMCBeU1Sie5OFRx2dJ9Y/YCDrYvC6
GSksjFubudaDjN8ZkdHWJXbYVpZjdp8Bs+RqbblbLGz/9K5dIp2B1gazx+4Z
pJ+7noz+yfzn11Vvn+1LZcBlb+zrc3dZaLrhi/OmlwwETZzmnkncOup8t1DI
gMLwlrliWaR/61i5n94woHVX3y2E+OZeUWuPRAYqPRR86u+zUOPELvHoQgbU
chUKZB6SPDNolA59xMDzvi2GSwpYuL9STcsvjYGlKw5q3ili4ez7zZtn+TOQ
unzOasMyFvYqyrVPi2Jgt0Gfnc8LFqo5m48ZnWLgxO/IkTWvWRjVtzRhgzcD
b4J3/RSWszClU5EuD2ZgYsqdSMkKcp7xU6ckE9umTl6pRqycfmWnEvn8S/9r
WmHEnKjl5Xd8yXy3TZHSr2Sh7rb7x233MaBjs7i/vIrkbVXEt3ZVBnxE3g3d
/kj6WfGV4nYdBhxi9yVvq2bhk4IHJsULGPhVneDfX8vCk1O85eN1GSgo+b5h
qI6cJ5cdD7WI/PO7sQarSD4XolNiwgUNZD2Lzmt/qeKCCWeZqPF30g+/xa/a
fuDCdoWWEtkmkpdGz696vuZC2OTNYueJ/9vvJRVTyoX4/Le7Tzaz0MfG+My9
R1woUR0M5PwkzjhPxbVyQf69seB1KwsXX67/nMVwYW8258ZaLqlXzM+0+Y1c
8NFJPGdPvGq1ztwiLhdGa//7K8OQ/pzV9Px0LRe6NAujw4kf5Vq0uJLn4xpj
dsfwyPf7ztCe0MCFqZYyx6h20t+5eYMmY1xIE5Q/8eoh6zOva5WBIgNeieZh
k3pJfe+6lFZYM2Cl0ZYvNkDyTVSo8JXUlymQVY4cYqFgaHvwoAUDjwKMbiUP
s9Aiyrqww5yBMv0JJ57+YWHzL8/Q7c4MxF9TmDdxnORhQ3OB0V4Gpi/WVnxP
HHWl2+6RLQMRz6/aSYhQKKG8g+uzn/S/1xqxb+IUOj+oWOpP+uPaWJBemgSF
iSL627TIfkke/DTSSGxc4ineWs1AUdKkkmwpCjWM84xTnjPweqq5kcM0Cp8N
RHmotzFgob1IgcWi0FLul4voMAO5i78G1RN/dqvetPIjA99Kzy0241BYdiki
90spA+q6miWyshTmSl95dSCfgf09z3KWyVO4SPBJbW4zAw1GypfciLV/aAtl
+xjwUG2afUOJwsGtfy7t6mHAs7a/zFGZwvm56nL7SV5bzFDmx8yjUDflRE3/
Zh6shco9SvMp1HeJv7xuBw9+zBrjtxCn5UWHbnHiwfyYRvsmVQrtDvutPEfO
m/0PZy1106Dwhbhm149QHmT4Gqs5alK4XWleq54fD3hJB5KytSj03G6JlWTc
cF2uvdxS8vv9kvENIvlY4a1unrSMzM9M183AkQd1qkKTEysplCz/G+7jyoNP
K13jOoifWJ4Ov7efB3tVymXfraIwe2bR5VfGJD+jw3ZV6FHY6NjMpC/nwVbD
1Cq2PoW7N4pM/zKfB1azfe57AIVc02CLTzwG1sXGuaUTx7RI/tdUy4DBUv+k
ZKTwyGtW0LsnDAyniZ/gGlBo26bcbk/qPbTH3jTUhIzrLJ6bQNZv/angTVLr
KDw1em2UT+qvHie5ut6UzHdXR0QHyb81js1XbDZRGBnj+upzCgMHlA7W/CDu
8fBmG8aTn7+JkQjeTKGyadqvhvMMtEWMSCcTy8l9sJh1juSlkWLNsCWFC4q0
DHz/Y0BVwnRHnw2FP60iRE6vI3mycVN7yA7Sj9U5xfMMSD9nvkkOt6fw+ovC
nfWSDGysPHg52JHCKR1fZyjPZODcLuaYkDi1PjDsCYsB4c/EUg8nCh36apas
+sOF1DT55RHEx5tuPV0mzkB0lu+5euIFiz08OyUYCJUYKT20j8KvCwND/0ox
MNM2Vph2gKyvjprEE5JHe4bbDtcTF290uJZ6gAFZ67xnOa4UuumdtRkh++VL
7r6TRYco3Bo4cvS7Fdm/BUombZ4UOlKq92aQfAvdM+CucoTCHLHeBQsmM/Dq
knPI3aOkfu+HLfI5DIgc85ug5U3hKNVs3SjHgGvhXdEkHwrjy3I39qZzYbxs
R9gkPwq1Zk6d0/WYC/nu7rrPj1O4WrIq5kcCF1SrOBamIRS+Czv43e0LF3zX
PW1+FU7h7zDnL24PuNCR8caxidg5YUuTAcnD6nsjjtQZCjedihckPiQefaEj
fY4833eNdzyCC5eWX5tZQjyZE9+k+5QL7r7t689FUqhWEr1A6j0X/L6JhSqd
p9DbYculHSR/9/2IEhMQq/uq150k+bxILWPb5UsUhsyRmHaM5Pef9IOTm4hX
hQS0PVtE+tPj4RTTeApFI4/uojcyIP8uetKeZAqlXed9/uHAQIaGRS/rKoU1
597W7SbnzayipI/5KRSugWbNTYMMPJt5c+uVVArd1w+t1DzCwDSexIK36RQW
3lMKXmjDADjJpP4m/iy6VsV8O+m/PpuXlnco7Ji42kWbeMtm1QyRDApVz2x4
KHacnGc22Q41dykUv706MuohA6VuMwsfZ1EoY+ZgvpfslxUf4rZOyafwu7Ge
PWcODwInw31l4uAnAZXDC3iwSDPuOpe49MVGJZjBg2tVZ19/LKKwmlr7I1yL
B2N5Ko2PyygM735arUXGS2ZV1K56SeHdybHBwyRvvEpi0PE1hQMTu526p/LA
fKRWSusdha7uVoVRQwywNfTKrSsonLXpyn0Q54GnCysijDhn2jnDIRMezE1P
HVP4ROGkqPw7zqd5EPYmmdKrp3BFtFe96hNyf677fdL/J4V6S1/d1nrLAzX/
BeFiQtKfr/Z6T/zLg/VlIUIhsbZup1zmL3I/1ucGfBihcPZ5tdzzPHK/fG3c
SI9SiHyDKwmT2uAet/z35jEKI6ajWF8jD+bdNdJ7OE7qsdb5aksnD6pmC8dj
RGjcRj+JUpJtg9K41pXRE2jkGXpaSg3w4GnwusueE2kMF1rvZD6S+3SmVvDP
STSm6BTWJAh44Br+8VDAFBqVNu2bJtXNg/v35tc8Jw7rLOtUIO+nsYn/ZSlI
0riBbpHQIO+3nxRtJXcSd5/mLgG6DWbniXatpmh859uoHUreFx97pu9YwqHx
2MLkhpcW/zzesFZ6lts/O+z1yrM1bwN9v+LiFfI0xnorutiT90XBfquubYo0
PpE6MmlqaRtYrI8tCFGiUbDRaH2aBB/2TMhRHFOlsb77oLPnHD6cqR8Y91hI
49OybXh9CR+6Di/2v6BO40OnvHfPV/GhLTnw6cJFNJ730ps33/KfdVhJIkn7
+cB/7LbCirjBbersw/p8cNYMfXCSuGusMqLVlA9/tbePNSyl0cenxeCbFR9K
9R7P911Oo+d3jYCM7XyghSG8OH0ahbbWXl7ZfJjQ6WB0wJhGscBalbIEPnxO
Ej21zYTGw5VKl1+l8mGx7H7Z/PU0ZjjLfaQT+RAEhwzObqDRemBHRcd7Pkg2
+l1ltpB6VX1RN23iA8fSIWuXGY2V4xYFNwv4UKL0Yu43KzLfhZ9PHbYRQPGa
/KxNNjT6r1SXN1EXwOza4bSy/2hcExydxV4mgLviIJy7k8a5OjeMuZsFsMFg
uQAdady8Rt4we4sAVpeYyTY60dhZ8qztDAigKqTWS3MPjRc2b11rEikA8Qv5
XXeJP6v+2iWZKIAMtuOKQWcaP45+0S68KgCux/dGO1caX0ZnTbbOEYB0W/Ho
aU8aY3q+b9DPFIDiWd+8b4E0uq7f59xG7Dr8wvp6CI0jxafaRj8LYM3Kiuy5
4TRmWzodnlsugL+Bwe7CMzQGOQYsN/wogF3XahdFnaPRNuwg1nwVwESd9zN6
iN0K0gedJNtBTfrgDlYCjXPaBs7VqrRDzPxYjcxEGr2r578ac/1nlXzx1WZp
7dCoqcSOTSLzUY7TyIxtB/kjci9TUmh0aTLOPhveDieGIZGXRqNh4aRTj3La
4SBv9X2z2zSupRe/PC0phJS8wozADBofKJ9ftrKrHa4G1fjLZNNob60yuneg
Hc6NTAu9Q8xqSL99Xv1/f/8Y8KrvEY3T3z16ftReCG+l/Yeq8mjsuOHYNHRI
CBenaFX75tP4N0U73MxcCIsNK9WCntEYlZ3h7W8mBNcDPnZWz2mstps4+ClM
CKUPA1e+Iq4vWilXYiWEPNjOjS6j8VSWz+WENCFcmLfwu8cLsp+WNen5VQvB
4cw6gf5Lsj/Ze1ebhAvB/G2IlMtbGme+Mzl165oQDP3znq17R/a3hlrn5TIh
yCxeIppTSeO0MwYHjxQLQZEj1V78kcYK3+19HTwhiCuJWb2sptGGThQMJAnh
16qCA9O/0Dg59PV4mLwQrkdhW1ANjfOMFN1ybIVwRojJP+tpDJ03x857pxDe
O9r29hPPvHB2dMcpIXxy3aIe30TjhFrZOu8XQgg0yTF9JKRxwXcMeWQthNbD
Te9s+mn87nq8xdJPCDMUjs3W+ENjmc+EqDtk/hd3pfmcH6NxlGl4VkR3QLe3
ttzXcfK8bFOMpH4HqFy5+iBchI3b5I5JF0Z1AH3buFxqIhtbEvr6L/3tgFv+
5qtOT2GjcYChU9CpTmg3zMh/Snzk96c5PqOdkLg1eKRVko2ik9ITFvR1QtgS
WOwhzUZvWxf9aJ0u6I6UGbNjsZGzPUEhzrgLTt7X2XeZYuPVSD1uQFgXOIQY
HYmj2di02y67+2wXwPiGKpcZbGyX++1qvaML/P0WtdXOZ2OO0z7+oUndkIQr
qGBVNnbPzVwzPa0LuEXLxq5osNFtfU+F8ZEuGFSPjKrRZeMBkfjGzj9dwOoo
ymxfw0bWo3sRTbVdIEjybdAzJM+PbM+xluiG+PMFT+8TXz3h1LI0oAtC7xsJ
e4l3dT4zsc/ugh+XKiXjN7ORNvj2Z59dN8za6vMmagsbAzJf7MuP7YZDzq65
0rvI/G6dyJf+3g3Ha/ymiexmo4Gu97gcu+f/7fFAbOpcix54W+EuzHFkY5XX
0xs5L7shlRvmZOTMxmee3BksyR7YcXp0Mriy8eeaiMplc3tgJde/IdKNjXsj
xUWnbO6BXdlOHwJOsvGRfqaZfUQPzGq4MXAimI2v97aLeRST7+OL/Npwio0l
mnmSvi09MLlg2sQDxNKH+T+8xnugTyn+3vooNpbOuq1UqNILMxtscfpFNj6w
fqNiNrsX7H9dd98ay0ZDvv7+WJ9eCPd/6TuczMYs+xWDFcH/+//CWRO8U9n4
zV9BrUC1F5zoKhePXDaWG52cXzzQA7fcPyTHFbEx5Yr8pD7LXjCJ9uamtrBR
5XOyLL2hF/Y0FBbe7mCjU3r1YUvzXoiQUq//08dGxxgR6XVmvXD9UOaN9EHS
bx6N4ztdekGtmPtbWZaDuVNN8xO3kPk8zvIMVOfgIQ2z0a/7e+GhdLlWkhYH
l55dfiOprhcOK/vcM9HmIGtEZs17uT4436z6omsNBzcujKq4GNQHo9IuUGrC
wZ1DafKLnvaB7JvdmyPMOSh9u7JhfUMf2B85FKlpwUGvtbp6v6h+eB900r/R
hoOygyW7mw37Ibbod52OOwdPB4X5udv0w7EldhZlQRz8b9GF6PXX+kE0/uQG
zQsc1NHdyC3PH4DIbcOarkkcdDgterMuawAujS2KmXeNg+st3RtGA4mv3uJ+
vMnB1sD4FqkrAzB7/ZbVsnc5uKw0XtN82QAEeIpXyxdz0F4rSODc3g/bNkXE
HmzmYNHmz15tUgMQl37zzlwlWXwyVPgkflo/7DQyFItZJItWAUN10Ur9kG+k
4lBjIItfnaX2WH/vh1vPv+ftPCuLtXc+FK/eOgCTjs5adLJAFoU6x8cDIwag
Lna33b2Pspgw1mJ3I/Sfh2LDZly83g9FTgWzWsXl8MjM7uzMb73geSax18tL
jtwPLsrAl24QM3WWeRAvjxXWh0UerOuB/wMQUTAZ
          "]]}}, {{}, {}}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, False},
      AxesLabel->{None, None},
      AxesOrigin->{-5.780261971073012, 0.1220681309470558},
      DisplayFunction->Identity,
      Frame->{{True, True}, {True, True}},
      FrameLabel->{{None, None}, {None, None}},
      FrameStyle->Automatic,
      FrameTicks->FrontEndValueCache[{{
          Charting`ScaledTicks[{Log, Exp}], 
          Charting`ScaledFrameTicks[{Log, Exp}]}, {
          Charting`ScaledTicks[{Log, Exp}], 
          Charting`ScaledFrameTicks[{Log, Exp}]}}, {{{{0., 
            FormBox["1", TraditionalForm], {0.01, 0.}}, {
           1.6094379124341003`, 
            FormBox["5", TraditionalForm], {0.01, 0.}}, {2.302585092994046, 
            FormBox["10", TraditionalForm], {0.01, 0.}}, {3.912023005428146, 
            FormBox["50", TraditionalForm], {0.01, 0.}}, {4.605170185988092, 
            FormBox["100", TraditionalForm], {0.01, 0.}}, {
           6.214608098422191, 
            FormBox["500", TraditionalForm], {0.01, 0.}}, {
           6.907755278982137, 
            FormBox["1000", TraditionalForm], {0.01, 
            0.}}, {-0.6931471805599453, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-0.5108256237659907, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-0.35667494393873245`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-0.2231435513142097, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-0.10536051565782628`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {0.6931471805599453, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {1.0986122886681098`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {1.3862943611198906`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {1.791759469228055, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {1.9459101490553132`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {2.0794415416798357`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {2.1972245773362196`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {2.995732273553991, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {3.4011973816621555`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {3.6888794541139363`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {4.0943445622221, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {4.248495242049359, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {4.382026634673881, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {4.499809670330265, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {5.298317366548036, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {5.703782474656201, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {5.991464547107982, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {6.396929655216146, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {6.551080335043404, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {6.684611727667927, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {6.802394763324311, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {7.600902459542082, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {8.006367567650246, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {8.294049640102028, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {8.517193191416238, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {8.699514748210191, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {8.85366542803745, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {8.987196820661973, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {9.104979856318357, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {9.210340371976184, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {9.305650551780507, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {9.392661928770137, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}}, {{0., 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 
            0.}}, {1.6094379124341003`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 
            0.}}, {2.302585092994046, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 
            0.}}, {3.912023005428146, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 
            0.}}, {4.605170185988092, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 
            0.}}, {6.214608098422191, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 
            0.}}, {6.907755278982137, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 
            0.}}, {-0.6931471805599453, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-0.5108256237659907, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-0.35667494393873245`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-0.2231435513142097, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-0.10536051565782628`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {0.6931471805599453, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {1.0986122886681098`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {1.3862943611198906`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {1.791759469228055, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {1.9459101490553132`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {2.0794415416798357`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {2.1972245773362196`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {2.995732273553991, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {3.4011973816621555`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {3.6888794541139363`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {4.0943445622221, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {4.248495242049359, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {4.382026634673881, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {4.499809670330265, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {5.298317366548036, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {5.703782474656201, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {5.991464547107982, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {6.396929655216146, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {6.551080335043404, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {6.684611727667927, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {6.802394763324311, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {7.600902459542082, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {8.006367567650246, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {8.294049640102028, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {8.517193191416238, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {8.699514748210191, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {8.85366542803745, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {8.987196820661973, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {9.104979856318357, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {9.210340371976184, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {9.305650551780507, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {9.392661928770137, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}}}, {{{-4.605170185988091, 
            FormBox[
             TagBox[
              InterpretationBox[
               StyleBox["\"0.01\"", ShowStringCharacters -> False], 0.01, 
               AutoDelete -> True], NumberForm[#, {
                DirectedInfinity[1], 2}]& ], TraditionalForm], {0.01, 
            0.}}, {-2.3025850929940455`, 
            FormBox[
             TagBox[
              InterpretationBox[
               StyleBox["\"0.10\"", ShowStringCharacters -> False], 0.1, 
               AutoDelete -> True], NumberForm[#, {
                DirectedInfinity[1], 2}]& ], TraditionalForm], {0.01, 0.}}, {
           0., 
            FormBox["1", TraditionalForm], {0.01, 0.}}, {2.302585092994046, 
            FormBox["10", TraditionalForm], {0.01, 0.}}, {4.605170185988092, 
            FormBox["100", TraditionalForm], {0.01, 0.}}, {-6.907755278982137, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-6.214608098422191, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-5.809142990314028, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-5.521460917862246, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-5.298317366548036, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-5.115995809754082, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-4.961845129926823, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-4.8283137373023015`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-4.710530701645918, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-3.912023005428146, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-3.506557897319982, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-3.2188758248682006`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-2.995732273553991, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-2.8134107167600364`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-2.659260036932778, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-2.5257286443082556`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-2.4079456086518722`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-1.6094379124341003`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-1.2039728043259361`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-0.916290731874155, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-0.6931471805599453, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-0.5108256237659907, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-0.35667494393873245`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-0.2231435513142097, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-0.10536051565782628`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {0.6931471805599453, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {1.0986122886681098`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {1.3862943611198906`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {1.6094379124341003`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {1.791759469228055, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {1.9459101490553132`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {2.0794415416798357`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {2.1972245773362196`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {2.995732273553991, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {3.4011973816621555`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {3.6888794541139363`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {3.912023005428146, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {4.0943445622221, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {4.248495242049359, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {4.382026634673881, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {4.499809670330265, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {5.298317366548036, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {5.703782474656201, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {5.991464547107982, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {6.214608098422191, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {6.396929655216146, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {6.551080335043404, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {6.684611727667927, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {6.802394763324311, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {6.907755278982137, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {7.600902459542082, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {8.006367567650246, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {8.294049640102028, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {8.517193191416238, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}}, {{-4.605170185988091, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 
            0.}}, {-2.3025850929940455`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 
            0.}}, {0., 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 
            0.}}, {2.302585092994046, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 
            0.}}, {4.605170185988092, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 
            0.}}, {-6.907755278982137, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-6.214608098422191, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-5.809142990314028, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-5.521460917862246, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-5.298317366548036, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-5.115995809754082, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-4.961845129926823, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-4.8283137373023015`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-4.710530701645918, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-3.912023005428146, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-3.506557897319982, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-3.2188758248682006`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-2.995732273553991, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-2.8134107167600364`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-2.659260036932778, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-2.5257286443082556`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-2.4079456086518722`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-1.6094379124341003`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-1.2039728043259361`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-0.916290731874155, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-0.6931471805599453, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-0.5108256237659907, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-0.35667494393873245`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-0.2231435513142097, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {-0.10536051565782628`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {0.6931471805599453, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {1.0986122886681098`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {1.3862943611198906`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {1.6094379124341003`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {1.791759469228055, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {1.9459101490553132`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {2.0794415416798357`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {2.1972245773362196`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {2.995732273553991, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {3.4011973816621555`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {3.6888794541139363`, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {3.912023005428146, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {4.0943445622221, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {4.248495242049359, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {4.382026634673881, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {4.499809670330265, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {5.298317366548036, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {5.703782474656201, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {5.991464547107982, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {6.214608098422191, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {6.396929655216146, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {6.551080335043404, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {6.684611727667927, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {6.802394763324311, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {6.907755278982137, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {7.600902459542082, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {8.006367567650246, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {8.294049640102028, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}, {8.517193191416238, 
            FormBox[
             TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 
            0.}}}}}],
      GridLines->FrontEndValueCache[{
         Charting`ScaledTickValues[{Log, Exp}], 
         Charting`ScaledTickValues[{Log, Exp}]}, {{{-4.605170185988091, 
           Directive[]}, {-2.3025850929940455`, 
           Directive[]}, {0., 
           Directive[]}, {2.302585092994046, 
           Directive[]}, {4.605170185988092, 
           Directive[]}}, {{0., 
           Directive[]}, {1.6094379124341003`, 
           Directive[]}, {2.302585092994046, 
           Directive[]}, {3.912023005428146, 
           Directive[]}, {4.605170185988092, 
           Directive[]}, {6.214608098422191, 
           Directive[]}, {6.907755278982137, 
           Directive[]}}}],
      GridLinesStyle->Directive[
        GrayLevel[0.4, 0.5], 
        AbsoluteThickness[1], 
        AbsoluteDashing[{1, 2}]],
      LabelStyle->{FontFamily -> "Helvetica", FontSize -> 14},
      Method->{
       "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
        "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            Exp[
             Part[#, 1]], 
            Exp[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            Exp[
             Part[#, 1]], 
            Exp[
             Part[#, 2]]}& )}},
      PlotRange->{{-5.780261971073012, 6.149109116189496}, {
       0.1220681309470558, 7.284702925966114}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{
        Charting`ScaledTicks[{Log, Exp}], 
        Charting`ScaledTicks[{Log, Exp}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"NotebookFind", "[", 
     RowBox[{
      RowBox[{"EvaluationNotebook", "[", "]"}], ",", " ", "\"\<firstone\>\"", 
      ",", "Previous", ",", " ", "CellTags"}], "]"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"SelectionEvaluate", "[", "nb", "]"}], ";"}]}]}]], "Input",
 CellOpen->True,
 InitializationCell->True,
 CellChangeTimes->{{3.8862042575771103`*^9, 3.886204274076947*^9}, 
   3.886219217883979*^9, 3.8862192755257807`*^9, {3.888219404762125*^9, 
   3.888219408465341*^9}, {3.8882194393821898`*^9, 3.8882194553340063`*^9}, {
   3.888320790288035*^9, 3.888320805805808*^9}, {3.888323552588133*^9, 
   3.888323558408164*^9}, {3.8883270436964703`*^9, 3.888327053425449*^9}, {
   3.888327118967691*^9, 3.888327124796135*^9}, {3.888327161471519*^9, 
   3.8883272040317383`*^9}, {3.893203399993388*^9, 3.8932034555357924`*^9}, {
   3.8932035560738993`*^9, 3.893203606727813*^9}, {3.8932036465672903`*^9, 
   3.893203680938035*^9}, {3.893203813085862*^9, 3.893203828857501*^9}, {
   3.893203867935472*^9, 3.893203940747422*^9}, {3.8932043840237103`*^9, 
   3.893204412905159*^9}, 3.893204636988447*^9, 3.893204677636375*^9, {
   3.893204727755909*^9, 3.8932047438141537`*^9}, {3.8932293153895397`*^9, 
   3.893229315827312*^9}, {3.89323862356842*^9, 3.89323866444882*^9}, {
   3.89323983367441*^9, 3.893239874805163*^9}, 3.893293468255918*^9, {
   3.89364666776882*^9, 3.8936466945785837`*^9}, {3.893648199993195*^9, 
   3.8936482008111134`*^9}, {3.893728539212159*^9, 3.893728638356042*^9}, 
   3.893731041099547*^9, {3.893733854286962*^9, 3.8937338775990047`*^9}, {
   3.893746865382575*^9, 3.8937469384125633`*^9}, {3.893760600679823*^9, 
   3.893760602715045*^9}, {3.893761813207502*^9, 3.893761818209813*^9}, {
   3.893821477664979*^9, 3.8938215023862457`*^9}, {3.893821775142179*^9, 
   3.893821775541111*^9}, {3.8938224565205393`*^9, 3.893822457245345*^9}, {
   3.8938248385691137`*^9, 3.893824842317528*^9}, {3.893825375562669*^9, 
   3.893825381341722*^9}, {3.893825433069881*^9, 3.893825438575795*^9}, {
   3.8938262426544867`*^9, 3.893826245887339*^9}, {3.893831869095611*^9, 
   3.893831872925138*^9}, {3.893832073535069*^9, 3.893832074822679*^9}, {
   3.893833549924238*^9, 3.893833553066272*^9}, {3.8945154795408487`*^9, 
   3.894515483837144*^9}},
 FontFamily->"Arial",
 FontSize->14,
 FontWeight->"Regular",
 FontColor->GrayLevel[0.5],
 Background->GrayLevel[0],
 CellTags->"Functions",
 CellLabel->"In[14]:=",ExpressionUUID->"24bfcc48-0bac-437c-ad13-4510b0119c60"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"SetOptions", "[", 
     RowBox[{"$FrontEndSession", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"InitializationCellEvaluation", "\[Rule]", "True"}], ",", 
        RowBox[{"InitializationCellWarning", "\[Rule]", "False"}]}], "}"}]}], 
     "]"}], ";"}], "\n", "*)"}], "\n", "\n", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Print", "[", 
     RowBox[{"Style", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"DateString", "[", 
         RowBox[{"FileDate", "[", 
          RowBox[{"NotebookFileName", "[", "]"}], "]"}], "]"}], "<>", " ", 
        "\"\< SSAH Version \>\"", "<>", 
        RowBox[{"ToString", "[", "mversion", "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"Large", ",", "Red"}], "}"}]}], "]"}], "]"}], ";"}], "*)"}], 
  "\n", "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"SetOptions", "[", 
     RowBox[{"Plot", ",", " ", 
      RowBox[{"PlotTheme", " ", "->", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<DarkColor\>\"", ",", " ", "\"\<Thick5\>\""}], "}"}]}]}], 
     "]"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"opennew", "=", "True"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"firsttime", "=", "False"}], ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "Paths", " ", "are", " ", "set", " ", "to", " ", "read", " ", "in", " ", 
      "data", " ", "using", " ", "normal", " ", "path", " ", "forms", " ", 
      "for", " ", "whatever", " ", "platform", " ", "is", " ", "being", " ", 
      "used", "\n", "here", " ", "\"\<dir\>\"", " ", "is", " ", "set", " ", 
      "above", " ", "to", " ", "that", " ", "one", " ", "this", " ", "file", 
      " ", "is", " ", "in"}], ",", " ", 
     RowBox[{
     "so", " ", "the", " ", "data", " ", "file", " ", "must", " ", "be", " ", 
      "in", " ", "the", " ", "same", " ", "directory", " ", 
      "\[IndentingNewLine]", "using", " ", "filenamejoin", "  ", "should", 
      " ", "give", " ", "the", " ", "correct", " ", "path", " ", "names", " ",
       "when", " ", "running", " ", "in", " ", "Windows"}], ",", " ", 
     RowBox[{"but", " ", "that", " ", "needs", " ", "checking"}]}], "*)"}], 
   "  ", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dir", "=", 
     RowBox[{"NotebookDirectory", "[", "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"pathfamily", "=", 
     RowBox[{"ToString", "[", 
      RowBox[{"FileNameJoin", "[", 
       RowBox[{"{", 
        RowBox[{"dir", ",", "\"\<data\>\"", ",", "\"\<family-data\>\""}], 
        "}"}], "]"}], "]"}]}], ";"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{"G", ":", " ", 
     RowBox[{
     "Path", " ", "where", " ", "all", " ", "data", " ", "are", " ", 
      "stored"}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"famnames", "=", 
     RowBox[{"StringTrim", "[", 
      RowBox[{
       RowBox[{"Prepend", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"FileNameTake", "[", 
            RowBox[{
             RowBox[{"FileNames", "[", 
              RowBox[{"\"\<*.txt\>\"", ",", "pathfamily"}], "]"}], "[", 
             RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", 
             RowBox[{"Length", "[", 
              RowBox[{"FileNames", "[", 
               RowBox[{"\"\<*.txt\>\"", ",", "pathfamily"}], "]"}], "]"}]}], 
            "}"}]}], "]"}], ",", "\"\<None\>\""}], "]"}], ",", 
       "\"\<.txt\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"inputfile", "=", 
     RowBox[{"SystemDialogInput", "[", 
      RowBox[{"\"\<FileOpen\>\"", ",", 
       RowBox[{"FileNameJoin", "[", 
        RowBox[{"{", 
         RowBox[{"dir", ",", "\"\<inputs\>\""}], "}"}], "]"}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ToString", "[", "inputfile", "]"}], "\[NotEqual]", 
       "\"\<$Canceled\>\""}], ",", 
      RowBox[{"valuesnow", "=", 
       RowBox[{"Import", "[", 
        RowBox[{"inputfile", ",", "\"\<NB\>\""}], "]"}]}], ",", 
      RowBox[{
       RowBox[{"NotebookFind", "[", 
        RowBox[{
         RowBox[{"EvaluationNotebook", "[", "]"}], ",", " ", 
         "\"\<firstone\>\"", ",", " ", "Previous", ",", " ", "CellTags"}], 
        "]"}], ";", 
       RowBox[{"Quit", "[", "]"}]}]}], "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"famlist", "=", 
     RowBox[{"FileNames", "[", 
      RowBox[{"\"\<*.txt\>\"", ",", "pathfamily"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"newname", "=", 
     RowBox[{"FileNameTake", "[", "inputfile", "]"}]}], ";"}], "\n", 
   RowBox[{"(*", 
    RowBox[{
    "load", " ", "them", "  ", "for", " ", "a", " ", "family", " ", "dmin", 
     " ", "and", " ", "dmax", " ", "are", " ", "overwritten"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "now", " ", "both", " ", "updateword", " ", "and", " ", "bornagain", " ",
       "are", " ", "superfluous"}], ",", " ", 
     RowBox[{"could", " ", "eliminate", " ", "bornagain", " ", "later"}]}], 
    " ", "*)"}], "\n", "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"huh", 
     RowBox[{"??", "?"}]}], " ", "*)"}], "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "popfile", ",", "dmin", ",", "dmax", ",", "asttype", ",", "family0", 
       ",", "\n", "testratio", ",", "diameterlast", ",", "tmaxby", ",", 
       "nsteps", ",", "updateword", ",", "bornagain", ",", "\n", "dcenter", 
       ",", "spinupratio", ",", "erosion", ",", "nth", ",", "nhistplots", ",",
        "craters", ",", "popfac", ",", "qfac", ",", " ", "pulvlim", ",", " ", 
       "velfac", ",", "zetafactor", ",", "ellipsratio", ",", "relaxfac", ",", 
       "tumbleangle\:02da", ",", "qstrengthfac", ",", "drainfac", ",", 
       "splashfac", ",", "depleteword", ",", "notes"}], "}"}], "=", 
     "valuesnow"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"nb", "=", 
     RowBox[{"EvaluationNotebook", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"Print", "[", 
      RowBox[{"\"\<family0= \>\"", ",", "family0"}], "]"}], ";"}], "*)"}], 
   "\n", 
   RowBox[{
    RowBox[{"$PlotTheme", "=", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Scientific\>\"", ",", "\"\<Grid\>\"", ",", "\"\<LargeLabels\>\"", 
       ",", " ", 
       RowBox[{"PlotMarkers", " ", "->", " ", 
        RowBox[{"{", 
         RowBox[{"Automatic", ",", " ", "Tiny"}], "}"}]}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"spinplot1", "=", 
     RowBox[{"Show", "[", 
      RowBox[{
       RowBox[{"Import", "[", 
        RowBox[{"FileNameJoin", "[", 
         RowBox[{"{", 
          RowBox[{
          "dir", ",", "\"\<data\>\"", ",", "\"\<2019spinplot.pdf\>\""}], 
          "}"}], "]"}], "]"}], ",", 
       RowBox[{"ImageSize", "\[Rule]", "Full"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"spinplot2", "=", 
      RowBox[{"Show", "[", 
       RowBox[{
        RowBox[{"Import", "[", 
         RowBox[{"FileNameJoin", "[", 
          RowBox[{"{", 
           RowBox[{
           "dir", ",", "\"\<data\>\"", ",", "\"\<2013spinplot_bare.pdf\>\""}],
            "}"}], "]"}], "]"}], ",", 
        RowBox[{"ImageSize", "\[Rule]", "Full"}]}], "]"}]}], ";"}], "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"histoplot1", "=", 
     RowBox[{"Show", "[", 
      RowBox[{
       RowBox[{"Import", "[", 
        RowBox[{"FileNameJoin", "[", 
         RowBox[{"{", 
          RowBox[{
          "dir", ",", "\"\<data\>\"", ",", "\"\<2013histoplot.pdf\>\""}], 
          "}"}], "]"}], "]"}], ",", 
       RowBox[{"ImageSize", "\[Rule]", "Full"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"histoplot2", "=", 
     RowBox[{"Show", "[", 
      RowBox[{
       RowBox[{"Import", "[", 
        RowBox[{"FileNameJoin", "[", 
         RowBox[{"{", 
          RowBox[{
          "dir", ",", "\"\<data\>\"", ",", "\"\<2019LogHisto.pdf\>\""}], 
          "}"}], "]"}], "]"}], ",", 
       RowBox[{"ImageSize", "\[Rule]", "Full"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"NotebookFind", "[", 
     RowBox[{
     "nb", ",", " ", "\"\<inputcalcs\>\"", ",", " ", "All", ",", " ", 
      "CellTags"}], "]"}], ";"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{"Calls", " ", "inputcalcs"}], " ", "*)"}], "\n", 
   RowBox[{"SelectionEvaluate", "[", "nb", "]"}]}]}]], "Input",
 Deletable->True,
 CellOpen->False,
 InitializationCell->False,
 CellChangeTimes->{{3.889621416189893*^9, 3.889621432565104*^9}, {
  3.8896223380591307`*^9, 3.88962235131035*^9}},
 FontFamily->"Arial",
 FontSize->14,
 FontWeight->"Regular",
 FontColor->GrayLevel[0.5],
 Background->GrayLevel[0],
 CellTags->"topend",
 CellLabel->"In[84]:=",ExpressionUUID->"b555c67b-21d0-4036-9d30-fb5a9d7d1adc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "make", " ", "some", " ", "necessary", " ", "changes", " ", "and", " ", 
    "put", " ", "up", " ", "selection", " ", "grid"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"modify", " ", "if", " ", "popfac"}], "\[NotEqual]", "1"}], " ", 
   "*)"}], "\n", "\[IndentingNewLine]", " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"read", " ", "the", " ", "population", " ", "distribution"}], ",",
     " ", 
    RowBox[{"this", " ", "is", " ", "already", " ", "extended"}]}], " ", 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"pathcum", "=", 
     RowBox[{"ToString", "[", 
      RowBox[{"FileNameJoin", "[", 
       RowBox[{"{", 
        RowBox[{"dir", ",", "\"\<data\>\"", ",", "\"\<cumpopulation\>\"", ",", 
         RowBox[{"ToString", "[", 
          RowBox[{"popfile", "<>", "\"\<.txt\>\""}], "]"}]}], "}"}], "]"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"cumdistr", "=", 
     RowBox[{"Import", "[", 
      RowBox[{"pathcum", ",", "\"\<NB\>\""}], "]"}]}], ";"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"read", " ", "the", " ", "population", " ", "distribution"}], 
     ",", " ", 
     RowBox[{"this", " ", "is", " ", "already", " ", "extended"}]}], " ", 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"these", " ", "all", " ", "have", " ", "91", " ", "elements"}], 
    " ", "*)"}], 
   RowBox[{"(*", " ", 
    RowBox[{
    "the", " ", "value", " ", "at", " ", "each", " ", "boundary", " ", "is", 
     " ", "the", " ", "number", " ", "with", " ", "greater", " ", 
     "diameter"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"popfac", "\[NotEqual]", "1"}], ",", 
      RowBox[{"cumdistr", "=", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"cumdistr", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
          RowBox[{"popfac", " ", 
           RowBox[{"cumdistr", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "2"}], "]"}], "]"}]}]}], "}"}], "]"}]}]}], 
     "]"}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "drop", " ", "the", " ", "last", " ", "1", " ", "smaller", " ", "than", 
     " ", "1", " ", "cm"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
     "This", " ", "would", " ", "need", " ", "to", " ", "be", " ", "changed", 
      " ", "if", " ", "that", " ", "smallest", " ", "number", " ", 
      "changed"}], ".."}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"cumdistr", "=", 
     RowBox[{"Drop", "[", 
      RowBox[{"cumdistr", ",", 
       RowBox[{"-", "1"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"numcum", "=", 
     RowBox[{"Length", "[", "cumdistr", "]"}]}], ";"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{"now", " ", "81"}], "*)"}], "\n", 
   RowBox[{
    RowBox[{"cumdistr0", "=", "cumdistr"}], ";"}], 
   RowBox[{"(*", " ", 
    RowBox[{
    "keep", " ", "original", " ", "for", " ", "when", " ", "population", " ", 
     "evolves"}], " ", "*)"}], "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"distfitf", "[", 
      RowBox[{"cumdistr0", ",", "81"}], "]"}], ";", " ", 
     RowBox[{"(*", " ", 
      RowBox[{
      "get", " ", "the", " ", "approximation", " ", "used", " ", "to", " ", 
       "get", " ", "inverses", " ", "easily"}], " ", "*)"}], "\n", 
     RowBox[{
      RowBox[{"cumfit", "[", "x_", "]"}], ":=", 
      RowBox[{"(", 
       RowBox[{"cdx", " ", 
        RowBox[{"x", "^", 
         RowBox[{"-", "alphax"}]}]}], ")"}]}], ";"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"cumplots", "=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"nsteps", "+", "1"}], "}"}]}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"cumplot1", "=", 
     RowBox[{"Show", "[", 
      RowBox[{
       RowBox[{"ListLogLogPlot", "[", 
        RowBox[{"cumdistr0", ",", " ", 
         RowBox[{"ImageSize", " ", "\[Rule]", " ", "Large"}], ",", 
         RowBox[{"Joined", "\[Rule]", "True"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"Dashed", ",", "Black"}], "}"}]}], ",", "\n", "      ", 
         RowBox[{"PlotRange", " ", "\[Rule]", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"10", "^", 
               RowBox[{"-", "5"}]}], ",", " ", 
              RowBox[{"10", "^", "3"}]}], "}"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{".1", ",", " ", 
              RowBox[{"10", "^", "20"}]}], "}"}]}], "}"}]}]}], "]"}], ",", 
       " ", 
       RowBox[{"Graphics", "[", 
        RowBox[{"Text", "[", 
         RowBox[{
          RowBox[{"\"\<Time= \>\"", " ", "<>", " ", 
           RowBox[{"ToString", "[", "0", "]"}]}], ",", " ", 
          RowBox[{"Scaled", "[", 
           RowBox[{"{", 
            RowBox[{".5", ",", " ", "0.9"}], "}"}], "]"}]}], "]"}], "]"}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"cumplot2", "=", 
     RowBox[{"ListLogLogPlot", "[", 
      RowBox[{"cumdistr0", ",", " ", 
       RowBox[{"ImageSize", " ", "\[Rule]", " ", "Large"}], ",", 
       RowBox[{"Joined", "\[Rule]", "True"}], ",", 
       RowBox[{"PlotStyle", "\[Rule]", "Blue"}], ",", "\n", "      ", 
       RowBox[{"PlotRange", " ", "\[Rule]", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"10", "^", 
             RowBox[{"-", "5"}]}], ",", " ", 
            RowBox[{"10", "^", "3"}]}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{".1", ",", " ", 
            RowBox[{"10", "^", "20"}]}], "}"}]}], "}"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"cumplots", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "=", 
     RowBox[{"Show", "[", 
      RowBox[{"cumplot1", ",", "cumplot2"}], "]"}]}], ";", 
    RowBox[{"diffdistr", "=", 
     RowBox[{"Transpose", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Drop", "[", 
         RowBox[{
          RowBox[{"cumdistr", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
          RowBox[{"-", "1"}]}], "]"}], ",", 
        RowBox[{"Differences", "[", 
         RowBox[{"cumdistr", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}]}], "}"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "this", " ", "should", " ", "be", " ", "called", " ", "the", " ", 
      "incremental", " ", "number"}], ",", " ", 
     RowBox[{
     "it", " ", "is", " ", "the", " ", "number", " ", "of", " ", "objects", 
      " ", "in", " ", "each", " ", "bin", " ", "with", " ", "diameters", " ", 
      "from", " ", "given", " ", "diameter", " ", "to", " ", "the", " ", 
      "next", " ", 
      RowBox[{"(", "smaller", ")"}], " ", "one"}]}], " ", "*)"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "and", " ", "note", " ", "that", " ", "Diiference", " ", "and", " ", 
      "Accunualte", " ", "are", " ", "NOT", " ", "inverse", " ", "to", " ", 
      "each", " ", "other"}], ",", " ", 
     RowBox[{"one", " ", "needs", " ", "a", " ", 
      RowBox[{"Prepend", "[", "]"}]}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"diffdistr0", "=", "diffdistr"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"boundaries", "=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"cumdistr", "[", 
        RowBox[{"[", 
         RowBox[{"i", ",", "1"}], "]"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "numcum"}], "}"}]}], "]"}]}], ";"}], 
   RowBox[{"(*", " ", 
    RowBox[{
    "all", " ", "of", " ", "the", " ", "boundaries", " ", "of", " ", "each", 
     " ", "bin"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"boundaries2", "=", 
     RowBox[{"Drop", "[", 
      RowBox[{
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"cumdistr", "[", 
          RowBox[{"[", 
           RowBox[{"i", ",", "1"}], "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "numcum"}], "}"}]}], "]"}], ",", 
       RowBox[{"-", "1"}]}], "]"}]}], ";"}], 
   RowBox[{"(*", " ", 
    RowBox[{
    "all", " ", "of", " ", "the", " ", "boundaries", " ", "of", " ", "each", 
     " ", "bin"}], " ", "*)"}], "\[IndentingNewLine]", " ", 
   RowBox[{
    RowBox[{"bindias", "=", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Drop", "[", 
         RowBox[{
          RowBox[{"cumdistr0", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
          RowBox[{"-", "1"}]}], "]"}], "+", 
        RowBox[{"Drop", "[", 
         RowBox[{
          RowBox[{"cumdistr0", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", "1"}], "]"}]}], 
       ")"}], "/", "2"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"numlast", "=", 
     RowBox[{"cumdistr", "[", 
      RowBox[{"[", 
       RowBox[{"numcum", ",", "2"}], "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dialast", "=", 
     RowBox[{"cumdistr", "[", 
      RowBox[{"[", 
       RowBox[{"numcum", ",", "1"}], "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dmax", "=", 
     RowBox[{"Min", "[", 
      RowBox[{"dmax", ",", 
       RowBox[{"cumdistr", "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", "1"}], "]"}], "]"}]}], "]"}]}], ";"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{
    "target", " ", "range", " ", "cannot", " ", "be", " ", "smaller", " ", 
     "than", " ", "target", " ", "set"}], " ", "*)"}], "\[IndentingNewLine]", 
   
   RowBox[{
    RowBox[{"dmin", "=", 
     RowBox[{"Max", "[", 
      RowBox[{"dmin", ",", "dialast"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"dmax", "==", "dmin"}], ",", 
      RowBox[{"exact", "=", "True"}], ",", 
      RowBox[{"exact", "=", "False"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
   
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"dmax", "<", "dmin"}], ",", 
      RowBox[{
      "MessageDialog", "[", 
       "\"\<The max diameter must be larger than the minimum!\>\"", "]"}]}], 
     "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"nhistplots", "=", 
     RowBox[{"Max", "[", 
      RowBox[{"1", ",", 
       RowBox[{"Min", "[", 
        RowBox[{"nhistplots", ",", "nasteroids"}], "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"tmax", "=", 
     RowBox[{"tmaxby", " ", 
      RowBox[{"10", "^", "9"}]}]}], ";"}], "  ", 
   RowBox[{"(*", " ", 
    RowBox[{"time", " ", "in", " ", "years"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"muQ", "=", 
     RowBox[{"5", " ", 
      RowBox[{"10", "^", "12"}]}]}], ";"}], 
   RowBox[{"(*", " ", 
    RowBox[{"Harris", ",", " ", 
     RowBox[{"1994", ";", "  ", 
      RowBox[{
       RowBox[{"g", "/", "cm"}], "/", 
       RowBox[{"sec", "^", "2"}]}]}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"family0", " ", "is", " ", "always", " ", "set"}], ".."}], " ", 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"family0", "==", "\"\<None\>\""}], ",", "  ", 
      RowBox[{"famflg", "=", "False"}], ",", 
      RowBox[{
       RowBox[{"famflg", "=", "True"}], ";"}]}], "]"}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"veldistplot", "=", 
     RowBox[{"Plot", "[", 
      RowBox[{
       RowBox[{"PDF", "[", " ", 
        RowBox[{
         RowBox[{"MaxwellDistribution", "[", "3.25", "]"}], ",", "x"}], "]"}],
        ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "0", ",", "14"}], "}"}], ",", 
       RowBox[{"PlotStyle", "\[Rule]", 
        RowBox[{"{", "Black", "}"}]}], ",", 
       RowBox[{"Frame", "\[Rule]", "True"}], ",", 
       RowBox[{"FrameStyle", "\[Rule]", "Thick"}], ",", " ", 
       RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
       RowBox[{"BaseStyle", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"FontSize", "\[Rule]", "20"}], "}"}]}], ",", 
       RowBox[{"ImageSize", "\[Rule]", "Full"}], ",", " ", 
       RowBox[{"FrameLabel", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
         "\"\<Impact velocity, km/s\>\"", ",", 
          "\"\<Probability Density Function\>\""}], "}"}]}]}], "]"}]}], ";"}],
    "\n", "\n", 
   RowBox[{
    RowBox[{"zetaplot", "=", 
     RowBox[{"Show", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"LogLogPlot", "[", 
          RowBox[{
           RowBox[{"zetaf", "[", 
            RowBox[{
             RowBox[{"45", "Degree"}], ",", "d", ",", "\"\<S-Type\>\""}], 
            "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"d", ",", ".001", ",", "1000"}], "}"}], ",", 
           RowBox[{"PlotStyle", "\[Rule]", 
            RowBox[{"{", "Black", "}"}]}]}], "]"}], ",", 
         RowBox[{"LogLogPlot", "[", 
          RowBox[{
           RowBox[{"zetaf", "[", 
            RowBox[{
             RowBox[{"45", "Degree"}], ",", "d", ",", "\"\<C-Type\>\""}], 
            "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"d", ",", ".001", ",", "1000"}], "}"}], ",", 
           RowBox[{"PlotStyle", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"Red", ",", "Dashed"}], "}"}]}]}], "]"}], ",", 
         RowBox[{"Graphics", "[", 
          RowBox[{"Text", "[", 
           RowBox[{"Style", "[", 
            RowBox[{
            "\"\<Spinup Efficiency factor\\n for C-Types (Black) and S-Types \
(Red) for 45\:02da impacts.  Zetafactor= \>\"", "<>", 
             RowBox[{"ToString", "[", "zetafactor", "]"}]}], "]"}], "]"}], 
          "]"}]}], "}"}], ",", 
       RowBox[{"ImageSize", "\[Rule]", "Full"}], ",", 
       RowBox[{"Frame", "\[Rule]", "True"}], ",", 
       RowBox[{"FrameLabel", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
         "\"\<Asteroid Diameter, km\>\"", ",", 
          "\"\<Spinup Efficiency Factor\>\""}], "}"}]}], ",", 
       RowBox[{"LabelStyle", "\[Rule]", "18"}], ",", 
       RowBox[{"PlotRange", "\[Rule]", 
        RowBox[{"Log", "[", 
         RowBox[{"{", 
          RowBox[{".1", ",", "2"}], "}"}], "]"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{"famflg", ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"family0pts", "=", 
        RowBox[{"Import", "[", 
         RowBox[{
          RowBox[{"FileNameJoin", "[", 
           RowBox[{"{", 
            RowBox[{"pathfamily", ",", 
             RowBox[{"ToString", "[", 
              RowBox[{"family0", "<>", "\"\<.txt\>\""}], "]"}]}], "}"}], 
           "]"}], ",", "\"\<NB\>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
         "see", " ", "if", " ", "it", " ", "is", " ", "a", " ", "shifted", 
          " ", "version"}], ".."}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"nasteroids", "=", 
        RowBox[{"Length", "[", "family0pts", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"fam0pts", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"family0pts", "[", 
             RowBox[{"[", "i", "]"}], "]"}], ",", "i"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "nasteroids"}], "}"}]}], "]"}]}], ";", 
       RowBox[{"fam0plot", "=", 
        RowBox[{"ListLogLogPlot", "[", 
         RowBox[{"fam0pts", ",", 
          RowBox[{"ImageSize", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"600", ",", "500"}], "}"}]}], ",", 
          RowBox[{"PlotStyle", "\[Rule]", "Black"}], ",", 
          RowBox[{"FrameLabel", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
            "\"\<Diameter, km\>\"", ",", "\"\<Cumulative Number\>\""}], 
            "}"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"StringTake", "[", 
           RowBox[{"family0", ",", 
            RowBox[{"-", "8"}]}], "]"}], "==", "\"\<_shifted\>\""}], ",", 
         RowBox[{
          RowBox[{"notshifted", "=", 
           RowBox[{"StringDrop", "[", 
            RowBox[{"family0", ",", 
             RowBox[{"-", "8"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"notshiftedpts", "=", 
           RowBox[{"Import", "[", 
            RowBox[{
             RowBox[{"FileNameJoin", "[", 
              RowBox[{"{", 
               RowBox[{"pathfamily", ",", 
                RowBox[{"ToString", "[", 
                 RowBox[{"notshifted", "<>", "\"\<.txt\>\""}], "]"}]}], "}"}],
               "]"}], ",", "\"\<NB\>\""}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"noshiftpts", "=", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"notshiftedpts", "[", 
                RowBox[{"[", "i", "]"}], "]"}], ",", "i"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", "nasteroids"}], "}"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"notshiftedplot", "=", 
           RowBox[{"ListLogLogPlot", "[", 
            RowBox[{"noshiftpts", ",", 
             RowBox[{"ImageSize", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"600", ",", "500"}], "}"}]}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", "Purple"}], ",", 
             RowBox[{"FrameLabel", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
               "\"\<Diameter, km\>\"", ",", "\"\<Cumulative Number\>\""}], 
               "}"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", ",", 
         "\[IndentingNewLine]", 
         RowBox[{"notshiftedplot", "=", 
          RowBox[{"Graphics", "[", 
           RowBox[{"Text", "[", 
            RowBox[{
             RowBox[{"Style", "[", 
              RowBox[{
              "\"\< There is no shifted data for this family..\>\"", ",", 
               RowBox[{"Background", "\[Rule]", "LightGray"}], ",", 
               "Medium"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "1"}], "}"}]}], "]"}], "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"famplots", "=", 
        RowBox[{"Show", "[", 
         RowBox[{"fam0plot", ",", "notshiftedplot", ",", 
          RowBox[{"Graphics", "[", 
           RowBox[{"Text", "[", 
            RowBox[{
             RowBox[{"Framed", "[", 
              RowBox[{
              "StringForm", "[", 
               "\"\<The present family data (purple) \\n and the assumed \
initial data (black)\\n that will evolved into the present values\>\"", "]"}],
               "]"}], ",", 
             RowBox[{"Scaled", "[", 
              RowBox[{"{", 
               RowBox[{".3", ",", ".15"}], "}"}], "]"}], ",", 
             RowBox[{"Background", "\[Rule]", "White"}], ",", 
             RowBox[{"BaseStyle", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"14", ",", 
                RowBox[{"FontFamily", "\[Rule]", "\"\<Times\>\""}]}], 
               "}"}]}]}], "]"}], "]"}]}], "]"}]}], ";", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
         "so", " ", "i", " ", "have", " ", "plots", " ", "of", " ", "both", 
          " ", "the", " ", "original", " ", "family", " ", "data"}], ",", " ", 
         RowBox[{"and", " ", "the", " ", "shifted", " ", "one"}], ",", " ", 
         RowBox[{"if", " ", "it", " ", "was", " ", "called"}]}], " ", "*)"}], 
       "\[IndentingNewLine]", "\n", 
       RowBox[{"dmin", "=", 
        RowBox[{"Min", "[", "family0pts", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"dmax", "=", 
        RowBox[{"Max", "[", "family0pts", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"ntopick", "=", 
        RowBox[{"Reverse", "[", 
         RowBox[{"BinCounts", "[", 
          RowBox[{"family0pts", ",", 
           RowBox[{"{", 
            RowBox[{"cumdistr", "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "1"}], "]"}], "]"}], "}"}]}], "]"}], 
         "]"}]}], ";", " ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"huh", "?", "  ", "how"}], " ", "did", " ", "this", " ", 
         "work", " ", 
         RowBox[{"before", "?"}]}], " ", "*)"}], 
       RowBox[{"(*", " ", 
        RowBox[{
        "numbers", " ", "in", " ", "bins", " ", "of", " ", "the", " ", 
         "familydata"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"testratio", "=", "1"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"updateword", "\[Equal]", "\"\<Evolving\>\""}], ",", 
         RowBox[{
          RowBox[{
          "MessageDialog", "[", 
           "\"\<You have chosen a fixed set of asteroids, therefore you \
cannot have an evolving population\>\"", "]"}], ";", "  ", 
          RowBox[{"updateword", "=", "\"\<Steady\>\""}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{
         "calculation", " ", "of", " ", "population", " ", "changes", " ", 
          "is", " ", "only", " ", "valid", " ", "when", " ", "chhosing", " ", 
          "some", " ", "targets", " ", "in", " ", "each", " ", "bin"}], ",", 
         " ", 
         RowBox[{
         "not", " ", "for", " ", "a", " ", "given", " ", "list", " ", "of", 
          " ", "diameters"}]}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"bornagain", "=", "True"}], ";"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"bornagain", "=", "True"}], ";", "\n", 
       RowBox[{"diameterlast", "=", "dmin"}], ";", "\[IndentingNewLine]", 
       RowBox[{"craters", "=", "False"}]}]}], "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "give", " ", "the", " ", "possibility", " ", "to", " ", "pick", " ", 
     "and", " ", "type", " ", "for", " ", "any", " ", "family"}], " ", "*)"}],
    "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"asttype", "=", 
      RowBox[{"Which", "[", 
       RowBox[{
        RowBox[{"family", "\[Equal]", "\"\<Eos\>\""}], ",", "\"\<S-Type\>\"", 
        ",", 
        RowBox[{"family", "==", "\"\<Eosinitial\>\""}], ",", "\"\<S-Type\>\"",
         ",", 
        RowBox[{"family", "\[Equal]", "\"\<Vesta\>\""}], ",", 
        "\"\<S-Type\>\"", ",", 
        RowBox[{"family", "\[Equal]", "\"\<Koronis\>\""}], ",", 
        "\"\<S-Type\>\"", ",", 
        RowBox[{"family", "\[Equal]", "\"\<Spinasteroids\>\""}], ",", 
        "\"\<25-75 Mixture\>\"", ",", 
        RowBox[{"family", "\[Equal]", "\"\<Spinasteroids2704\>\""}], ",", 
        "\"\<25-75 Mixture\>\"", ",", 
        RowBox[{"family", "\[Equal]", "\"\<all2013Spindias\>\""}], ",", 
        "\"\<25-75 Mixture\>\"", ",", 
        RowBox[{"family", "\[Equal]", "\"\<all2013Spindias_shifted\>\""}], 
        ",", "\"\<25-75 Mixture\>\"", ",", "True", ",", 
        "\"\<25-75 Mixture\>\""}], "]"}]}], ";"}], "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"I", " ", "use", " ", "the", " ", "S"}], "-", 
      RowBox[{"type", " ", "properties", " ", "for", " ", "Vesta"}]}], ",", 
     " ", 
     RowBox[{
      RowBox[{"we", " ", 
       RowBox[{"don", "'"}], "t", " ", "know", " ", "what", " ", "properties",
        " ", "to", " ", "use", " ", "for", " ", "V"}], "-", "Type"}], ",", 
     " ", 
     RowBox[{
      RowBox[{
       RowBox[{
       "but", " ", "that", " ", "should", " ", "be", " ", "the", " ", "best", 
        " ", "choice", " ", "for", " ", "its", " ", "surface"}], ".."}], " ", 
      "catastrophic", " ", "disruption", " ", "will", " ", "not", " ", 
      "hapen", " ", "in", " ", "any", " ", "case", "\[IndentingNewLine]", 
      "If", " ", "another", " ", "family", " ", "is", " ", "considered"}], 
     ",", " ", 
     RowBox[{
     "its", " ", "type", " ", "should", " ", "be", " ", "added", " ", 
      "here"}], ",", " ", 
     RowBox[{
      RowBox[{
      "in", " ", "the", " ", "above", " ", "the", " ", "default", " ", "is", 
       " ", "C"}], "-", "Type"}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"densbar", "=", 
     RowBox[{"1.75", " ", 
      RowBox[{"10", "^", "12"}]}]}], ";"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{
    "a", " ", "weighted", " ", "average", " ", "for", " ", "the", " ", 
     "total", " ", "population"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"densi", "=", "densbar"}], ";"}], 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "needed", " ", "here", " ", "for", " ", "calc", " ", "of", " ", 
      "nasteroids"}], ",", " ", 
     RowBox[{
     "but", " ", "needs", " ", "to", " ", "also", " ", "be", " ", "moved", 
      " ", "to", " ", "the", " ", "impactor", " ", "loop"}]}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "for", " ", "combinations", " ", "this", " ", "must", " ", "be", " ", 
      "done", " ", "in", " ", "the", " ", "f"}], ",", " ", 
     RowBox[{"but", " ", "no", " ", "mixture", " ", "needed"}]}], "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"probi", "=", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"velfac", "*", "2.85"}], ")"}], "/", 
      RowBox[{"10", "^", "18"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"gravlimit", "=", "7.6*^-4"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"gravlimit", "=", "1"}], ";"}], "*)"}], 
   RowBox[{"(*", " ", 
    RowBox[{"turn", " ", "gravity", " ", "limit", " ", "off"}], "   ", "*)"}],
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Grav", "=", 
     RowBox[{"6.67", " ", 
      RowBox[{"10", "^", 
       RowBox[{"-", "20"}]}]}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"nframes", "=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"nth", ">", "0"}], ",", 
       RowBox[{"Ceiling", "[", 
        RowBox[{"nsteps", "/", "nth"}], "]"}], ",", "0"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"Print", "[", 
      RowBox[{"\"\<nframes \>\"", ",", 
       RowBox[{"{", 
        RowBox[{"nsteps", ",", "nth", ",", "nframes"}], "}"}]}], "]"}], ";"}],
     "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", " ", 
   RowBox[{"(*", " ", 
    RowBox[{"Some", " ", "initial", " ", "calculations"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"qexponent", "=", 
     RowBox[{"3", "*", "mu"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"drainconst", "=", 
     RowBox[{"drainfac", "*", "4.2", "*", 
      RowBox[{"10", "^", "4"}], "*", 
      RowBox[{"velfac", "^", "qexponent"}]}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"omegs", "=", 
     RowBox[{"Sqrt", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"4", "*", 
         RowBox[{"(", 
          RowBox[{"Pi", "/", "3"}], ")"}], "*", "6.67", "*", "dens"}], ")"}], 
       "/", 
       RowBox[{"10", "^", "20"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"binfirst", "=", 
     RowBox[{
      RowBox[{"astnum", "[", "dmax", "]"}], "[", 
      RowBox[{"[", "2", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"binlast1", "=", 
     RowBox[{
      RowBox[{"astnum", "[", "diameterlast", "]"}], "[", 
      RowBox[{"[", "2", "]"}], "]"}]}], ";"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{
    "limit", " ", "for", " ", "constant", " ", "ratio", " ", "of", " ", 
     "targets", " ", "to", " ", "population"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"binlast", "=", 
     RowBox[{
      RowBox[{"astnum", "[", "dmin", "]"}], "[", 
      RowBox[{"[", "2", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"steadypop", "=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"updateword", "===", "\"\<Steady\>\""}], ",", "True", ",", 
       "False"}], "]"}]}], ";"}], " ", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"!", "famflg"}], ",", 
      RowBox[{
       RowBox[{"ntopick", "=", 
        RowBox[{"Table", "[", 
         RowBox[{"0", ",", 
          RowBox[{"numcum", "-", "1"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"calcnasteroids", "[", "]"}]}]}], "]"}], ";"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{"how", " ", "many", " ", "test", " ", "targets"}], " ", "*)"}], 
   "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{"velave", "=", 
     RowBox[{"5.29", " ", "velfac"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{"steadypop", ",", 
      RowBox[{"depleteword", "=", "\"\<Not Relevant\>\""}]}], "]"}], ";"}], 
   "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"asttype", "==", "\"\<25-75 Mixture\>\""}], ",", 
      RowBox[{"craters", "=", "False"}]}], "]"}], ";"}], "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"nasteroids", "\[Equal]", "1"}], ",", 
       RowBox[{
        RowBox[{"diameterlast", "=", "dmin"}], ";", 
        RowBox[{"nhistplots", "=", "1"}], ";", 
        RowBox[{"craters", "=", "True"}]}]}], "]"}], ";"}], "\n", "*)"}], 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"nasteroids", ">", "1"}], ",", 
      RowBox[{"craters", "=", "False"}]}], "]"}], ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"expecttime", "=", 
     RowBox[{"nasteroids", "   ", "popfac", " ", "nsteps", " ", ".02"}]}], 
    ";"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"very", " ", "crude", " ", "experience", " ", "on", " ", 
      RowBox[{"Keith", "'"}], "s", "  ", "iMac", "  ", "will", " ", "run", 
      " ", "faster", " ", "if", " ", "some", " ", "get", " ", "busted", " ", 
      "\[IndentingNewLine]", "could", " ", "be", " ", "researched", " ", "to",
       " ", "improve"}], ",", " ", 
     RowBox[{"if", " ", 
      RowBox[{"desired", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"Style", "[", 
    RowBox[{
    "\"\<Here are the Inputs from this file, Want to Change Them???\\r  Enter \
a New value for any one,  \nhit 'Return' or brown button to update the \
numbers of targets..\\r Click the 'huh?' to get info \>\"", ",", 
     RowBox[{"FontSize", "->", "18"}], ",", 
     RowBox[{"FontColor", "\[Rule]", "Purple"}], ",", "\[IndentingNewLine]", 
     RowBox[{"FontFamily", "\[Rule]", "\"\<Helvetica\>\""}], ",", 
     RowBox[{"TextAlignment", "\[Rule]", "Center"}]}], "]"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"Style", "[", 
    RowBox[{
    "\"\<The units are mass~kg, Length~km, time~sec, velocity~km/sec, \
force~kNewtons, energy~MJoule\>\"", ",", "\[IndentingNewLine]", 
     RowBox[{"FontSize", "->", "16"}], ",", 
     RowBox[{"FontColor", "\[Rule]", "Black"}], ",", 
     RowBox[{"FontFamily", "\[Rule]", "\"\<Helvetica\>\""}], ",", 
     RowBox[{"TextAlignment", "\[Rule]", "Center"}]}], "]"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   StyleBox[
    RowBox[{"Style", "[", 
     RowBox[{"\"\<0.  The Input File\>\"", ",", 
      RowBox[{"FontSize", "->", "18"}], ",", 
      RowBox[{"FontColor", "\[Rule]", "Black"}], ",", 
      RowBox[{"FontFamily", "\[Rule]", "\"\<Helvetica\>\""}], ",", 
      RowBox[{"TextAlignment", "\[Rule]", "Center"}]}], "]"}],
    FontColor->RGBColor[0, 0, 1]], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"data", "=", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<File Name:\>\"", ",", 
        RowBox[{"Button", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"ToString", "[", "newname", "]"}], "<>", 
           RowBox[{"ToString", "[", "\"\<-> Click to open\>\"", "]"}]}], ",", 
          
          RowBox[{"SystemOpen", "[", "inputfile", "]"}], ",", 
          RowBox[{"Background", "\[Rule]", "LightBrown"}]}], "]"}], ",", 
        RowBox[{"Button", "[", 
         RowBox[{"\"\<Input Notes\>\"", ",", 
          RowBox[{"MessageDialog", "[", "notes", "]"}], ",", 
          RowBox[{"Background", "\[Rule]", "LightBrown"}], ",", 
          RowBox[{"ImageMargins", "\[Rule]", "5"}]}], "]"}]}], "\n", "}"}], 
      "}"}]}], ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{"Print", "[", 
    RowBox[{"Style", "[", 
     RowBox[{
      RowBox[{"Text", "@", 
       RowBox[{"Grid", "[", 
        RowBox[{"data", ",", "\[IndentingNewLine]", 
         RowBox[{"Background", "\[Rule]", 
          RowBox[{"{", "LightGreen", "}"}]}], ",", 
         RowBox[{"Dividers", "\[Rule]", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{"Black", ",", "Black", ",", "Black"}], "}"}], "}"}]}], 
         ",", 
         RowBox[{"Alignment", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{"Center", ",", "Center"}], "}"}], "}"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"ItemSize", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{"10", ",", "25", ",", "20"}], "}"}], "}"}]}], ",", 
         RowBox[{"Frame", "\[Rule]", 
          RowBox[{"Darker", "[", 
           RowBox[{"Gray", ",", ".6"}], "]"}]}], ",", 
         RowBox[{"ItemStyle", "\[Rule]", "18"}], ",", 
         RowBox[{"Spacings", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"Automatic", ",", ".2"}], "}"}]}]}], "]"}]}], ",", 
      RowBox[{"TextAlignment", "\[Rule]", "Center"}]}], "]"}], "]"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\n", 
   StyleBox[
    RowBox[{"Style", "[", 
     RowBox[{
     "\"\<1. Cumulative number function of Impactor Population and Target \
Asteroids\>\"", ",", 
      RowBox[{"FontSize", "->", "18"}], ",", 
      RowBox[{"FontColor", "\[Rule]", "Black"}], ",", 
      RowBox[{"FontFamily", "\[Rule]", "\"\<Helvetica\>\""}], ",", 
      RowBox[{"TextAlignment", "\[Rule]", "Center"}]}], "]"}],
    FontColor->RGBColor[0, 0, 1]], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"data", "=", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "\"\<Population cumulative number function in main belt ->\>\"", ",", 
         
         RowBox[{"PopupMenu", "[", 
          RowBox[{
           RowBox[{"Dynamic", "[", "popfile", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{
            "\"\<KAH-SFD\>\"", ",", "\"\<SFDtruncated\>\"", ",", 
             "\"\<Bottke2005\>\""}], "}"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Button", "[", 
          RowBox[{"\"\<Huh?\>\"", ",", 
           RowBox[{
           "MessageDialog", "[", 
            "\"\<Sets variable 'popfile'.  The file with the binned \
population number of all objects > some diameter d in the main belt,  with no \
additions below 1 cm sizes.  New estimates are easily added as new files with \
the same format, with the file name added to this dialog box. \\r The \
populations with lots of small  impactors well generally run quite slowly, \
those with fewer small impactors will run much more quickly. The inclusion of \
more small impactors will not affect final distributions noticeably. \
Primarily, that choice will affect the lifetimes of small targets.\>\"", 
            "]"}], ",", 
           RowBox[{"Background", "\[Rule]", "LightBrown"}]}], "]"}]}], "\n", 
        "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Minimum Diameter of test asteroids, km\>\"", ",", 
         RowBox[{"EventHandler", "[", 
          RowBox[{
           RowBox[{"InputField", "[", 
            RowBox[{
             RowBox[{"Dynamic", "[", "dmin", "]"}], ",", 
             RowBox[{"FieldSize", "\[Rule]", "8"}]}], "]"}], ",", 
           RowBox[{"\"\<ReturnKeyDown\>\"", ":>", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"NotebookLocate", "[", "\"\<inputcalcs\>\"", "]"}], ",", 
              RowBox[{"FrontEndTokenExecute", "[", 
               RowBox[{"nb", ",", "\"\<Evaluate\>\""}], "]"}]}], "}"}]}]}], 
          "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Button", "[", 
          RowBox[{"\"\<Huh?\>\"", ",", 
           RowBox[{
           "MessageDialog", "[", 
            "\"\<Sets variable 'dmin'.  The smallest diameter (km) of all the \
exemplar targets\>\"", "]"}], ",", 
           RowBox[{"Background", "\[Rule]", "LightBrown"}]}], "]"}]}], "\n", 
        "}"}], ",", "\n", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Maximum Diameter of test asteroids, km\>\"", ",", 
         RowBox[{"EventHandler", "[", 
          RowBox[{
           RowBox[{"InputField", "[", 
            RowBox[{
             RowBox[{"Dynamic", "[", "dmax", "]"}], ",", 
             RowBox[{"FieldSize", "\[Rule]", "8"}]}], "]"}], ",", 
           RowBox[{"\"\<ReturnKeyDown\>\"", ":>", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"NotebookLocate", "[", "\"\<inputcalcs\>\"", "]"}], ",", 
              RowBox[{"FrontEndTokenExecute", "[", 
               RowBox[{"nb", ",", "\"\<Evaluate\>\""}], "]"}]}], "}"}]}]}], 
          "]"}], ",", "\n", 
         RowBox[{"Button", "[", 
          RowBox[{"\"\<Huh?\>\"", ",", 
           RowBox[{
           "MessageDialog", "[", 
            "\"\<Sets variable 'dmax'.  The largest diameter (km) of all the \
exemplar targets\>\"", "]"}], ",", 
           RowBox[{"Background", "\[Rule]", "LightBrown"}]}], "]"}]}], 
        "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<A distinct distribution/family or none? ->\>\"", ",", 
         RowBox[{"PopupMenu", "[", 
          RowBox[{
           RowBox[{"Dynamic", "[", "family0", "]"}], ",", "famnames"}], "]"}],
          ",", "\[IndentingNewLine]", 
         RowBox[{"Button", "[", 
          RowBox[{"\"\<Huh?\>\"", ",", 
           RowBox[{
           "MessageDialog", "[", 
            "\"\< Sets variable 'family'. This allowsthe target asteroids to \
come from an asteroid family distibution, or other special distribution such \
as those with spin data.\n\\nPut file with cum number data in the \
'family-data' folder for your choice, using the example formats of others\\n\n\
Pick 'none' for a sample of test asteroids to come from the main population \
distribution\\n\nThe name here is the family, i actually load its data and \
its shifted data. The run uses the shifted data if available\>\"", "]"}], ",", 
           RowBox[{"Background", "\[Rule]", "LightBrown"}]}], "]"}]}], "}"}], 
       ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Asteroid Type\>\"", ",", 
         RowBox[{"PopupMenu", "[", 
          RowBox[{
           RowBox[{"Dynamic", "[", "asttype", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{
            "\"\<25-75 Mixture\>\"", ",", "\"\<S-Type\>\"", ",", 
             "\"\<C-Type\>\""}], "}"}]}], "]"}], ",", "\n", 
         RowBox[{"Button", "[", 
          RowBox[{"\"\<Huh?\>\"", ",", 
           RowBox[{
           "MessageDialog", "[", 
            "\"\<Sets variable 'asttype'.  Can be S-Type, C-Type, or 25% \
taken as S-Types and 75% as s\\nIt is assumed that S-Types are rocky, and \
C-Types are porous\>\"", "]"}], ",", 
           RowBox[{"Background", "\[Rule]", "LightBrown"}]}], "]"}]}], 
        "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   RowBox[{"Print", "[", 
    RowBox[{"Style", "[", 
     RowBox[{
      RowBox[{"Text", "@", 
       RowBox[{"Grid", "[", 
        RowBox[{
         RowBox[{"Prepend", "[", 
          RowBox[{"data", ",", 
           RowBox[{"{", 
            RowBox[{
            "\"\<Factor\>\"", ",", "\"\<Value of factor\>\"", ",", 
             "\"\<Help?\>\""}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Background", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"None", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Lighter", "[", 
               RowBox[{"Yellow", ",", ".9"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"White", ",", 
                RowBox[{"Lighter", "[", 
                 RowBox[{
                  RowBox[{"Blend", "[", 
                   RowBox[{"{", 
                    RowBox[{"Blue", ",", "Green"}], "}"}], "]"}], ",", ".8"}],
                  "]"}]}], "}"}]}], "}"}]}], "}"}]}], ",", 
         RowBox[{"Dividers", "\[Rule]", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Darker", "[", 
               RowBox[{"Gray", ",", ".6"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"Lighter", "[", 
                RowBox[{"Gray", ",", ".5"}], "]"}], "}"}], ",", 
              RowBox[{"Darker", "[", 
               RowBox[{"Gray", ",", ".6"}], "]"}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Darker", "[", 
               RowBox[{"Gray", ",", ".6"}], "]"}], ",", 
              RowBox[{"Darker", "[", 
               RowBox[{"Gray", ",", ".6"}], "]"}], ",", 
              RowBox[{"{", "False", "}"}], ",", 
              RowBox[{"Darker", "[", 
               RowBox[{"Gray", ",", ".6"}], "]"}]}], "}"}]}], "}"}]}], ",", 
         RowBox[{"Alignment", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{"Center", ",", "Center"}], "}"}], "}"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"ItemSize", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{"30", ",", "20"}], "}"}], "}"}]}], ",", 
         RowBox[{"Frame", "\[Rule]", 
          RowBox[{"Darker", "[", 
           RowBox[{"Gray", ",", ".6"}], "]"}]}], ",", 
         RowBox[{"ItemStyle", "\[Rule]", "14"}], ",", 
         RowBox[{"Spacings", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"Automatic", ",", ".8"}], "}"}]}]}], "]"}]}], ",", 
      RowBox[{"TextAlignment", "\[Rule]", "Center"}]}], "]"}], "]"}], 
   "\[IndentingNewLine]", "\n", 
   StyleBox[
    RowBox[{"Style", "[", 
     RowBox[{"\"\<2.  Definition of Calculation Parameters\>\"", ",", 
      RowBox[{"FontSize", "->", "18"}], ",", 
      RowBox[{"FontColor", "\[Rule]", "Black"}], ",", 
      RowBox[{"FontFamily", "\[Rule]", "\"\<Helvetica\>\""}], ",", 
      RowBox[{"TextAlignment", "\[Rule]", "Center"}]}], "]"}],
    FontColor->RGBColor[0, 0, 1]], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"data", "=", 
     RowBox[{"{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "\"\<Ratio of sample targets to entire population,\\r(or '-n' for 'n' \
target asteroids)\>\"", ",", "\n", 
         RowBox[{"EventHandler", "[", 
          RowBox[{
           RowBox[{"InputField", "[", 
            RowBox[{
             RowBox[{"Dynamic", "[", "testratio", "]"}], ",", 
             RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
           RowBox[{"\"\<ReturnKeyDown\>\"", ":>", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"NotebookLocate", "[", "\"\<inputcalcs\>\"", "]"}], ",", 
              RowBox[{"FrontEndTokenExecute", "[", 
               RowBox[{"nb", ",", "\"\<Evaluate\>\""}], "]"}]}], "}"}]}]}], 
          "]"}], ",", "\n", 
         RowBox[{"Button", "[", 
          RowBox[{"\"\<Huh?\>\"", ",", 
           RowBox[{
           "MessageDialog", "[", 
            "\"\<Sets variable 'testratio'.  Determines the percent of test \
targets from the bins up to diameterlast. \nThis will determine the number of \
samples from each bin. \nIt can be >1, but usually is a very small number. \
Chack how many targets are indicated below.  To get a given number 'n' of \
test targets, insert -n. It picks randomly from the bins of the chosen sizes, \
so it may include diameters outside the chosen range.\nThe calculation time \
scales with the (number of asteroids(*(number of expected hits) shown below.  \
\nAlthough the box might display a number in exponential form, it must be \
input in decimal form, a MM feature I have not yet overcome\>\"", "]"}], ",", 
           
           RowBox[{"Background", "\[Rule]", "LightBrown"}]}], "]"}]}], "}"}], 
       ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<For all Asteroid Diameters Greater Than:\>\"", ",", "\n", 
         RowBox[{"EventHandler", "[", 
          RowBox[{
           RowBox[{"InputField", "[", 
            RowBox[{
             RowBox[{"Dynamic", "[", "diameterlast", "]"}], ",", 
             RowBox[{"FieldSize", "\[Rule]", "8"}]}], "]"}], ",", 
           RowBox[{"\"\<ReturnKeyDown\>\"", ":>", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"NotebookLocate", "[", "\"\<inputcalcs\>\"", "]"}], ",", 
              RowBox[{"FrontEndTokenExecute", "[", 
               RowBox[{"nb", ",", "\"\<Evaluate\>\""}], "]"}]}], "}"}]}]}], 
          "]"}], ",", 
         RowBox[{"Button", "[", 
          RowBox[{"\"\<Huh?\>\"", ",", 
           RowBox[{
           "MessageDialog", "[", 
            "\"\<Sets variable diameterlast'.  The number of test targets \
will be a constant in all bins smaller than that of this diameter.  This is \
not relevant if there is a given number of asteroid targets.. \>\"", "]"}], 
           ",", 
           RowBox[{"Background", "\[Rule]", "LightBrown"}]}], "]"}]}], "}"}], 
       ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Max Time, Byr \>\"", ",", 
         RowBox[{"EventHandler", "[", 
          RowBox[{
           RowBox[{"InputField", "[", 
            RowBox[{
             RowBox[{"Dynamic", "[", " ", "tmaxby", "]"}], ",", 
             RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
           RowBox[{"\"\<ReturnKeyDown\>\"", ":>", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"NotebookLocate", "[", "\"\<inputcalcs\>\"", "]"}], ",", 
              RowBox[{"FrontEndTokenExecute", "[", 
               RowBox[{"nb", ",", "\"\<Evaluate\>\""}], "]"}]}], "}"}]}]}], 
          "]"}], ",", "\n", 
         RowBox[{"Button", "[", 
          RowBox[{"\"\<Huh?\>\"", ",", 
           RowBox[{
           "MessageDialog", "[", 
            "\"\<Sets variable tmaxby'.  The total time of the simulation in \
Byr.  Note that the calculation uses time in years\>\"", "]"}], ",", 
           RowBox[{"Background", "\[Rule]", "LightBrown"}]}], "]"}]}], "}"}], 
       ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Number of timesteps with population updates and history movie \
frames) \>\"", ",", 
         RowBox[{"EventHandler", "[", 
          RowBox[{
           RowBox[{"InputField", "[", 
            RowBox[{
             RowBox[{"Dynamic", "[", "nsteps", "]"}], ",", 
             RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
           RowBox[{"\"\<ReturnKeyDown\>\"", ":>", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"NotebookLocate", "[", "\"\<inputcalcs\>\"", "]"}], ",", 
              RowBox[{"FrontEndTokenExecute", "[", 
               RowBox[{"nb", ",", "\"\<Evaluate\>\""}], "]"}]}], "}"}]}]}], 
          "]"}], ",", "\n", 
         RowBox[{"Button", "[", 
          RowBox[{"\"\<Huh?\>\"", ",", 
           RowBox[{
           "MessageDialog", "[", 
            "\"\<Sets variable 'nsteps'.  The entire calculation is \
subdivided into shorter time steps, in which each target diameter is assumed \
to be constant. When the population is steady, this only affects the number \
of frames for movies.\>\"", "]"}], ",", 
           RowBox[{"Background", "\[Rule]", "LightBrown"}]}], "]"}]}], "}"}], 
       ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Replaced when destroyed? \>\"", ",", 
         RowBox[{"PopupMenu", "[", 
          RowBox[{
           RowBox[{"Dynamic", "[", "bornagain", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"True", ",", "False"}], "}"}]}], "]"}], ",", "\n", 
         RowBox[{"Button", "[", 
          RowBox[{"\"\<Huh?\>\"", ",", 
           RowBox[{
           "MessageDialog", "[", 
            "\"\<Sets variable 'bornagain'. This is used to study a target \
set in which the final population is known.Therefore, every time an object is \
destroyed, it is replaced with its original diameter and random small spin.  \
Presumably it is a fragment from a larger object and the assumed fragment \
spins are small and random.\>\"", "]"}], ",", 
           RowBox[{"Background", "\[Rule]", "LightBrown"}]}], "]"}]}], "}"}], 
       ",", "\[IndentingNewLine]", "\n", " ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"not", " ", "needed"}], ",", " ", 
         RowBox[{
         "the", " ", "next", " ", "one", " ", "does", " ", "it", " ", 
          RowBox[{"??", "?"}]}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Evolving or Steady Impactor Population?\>\"", ",", 
         RowBox[{"PopupMenu", "[", 
          RowBox[{
           RowBox[{"Dynamic", "[", "updateword", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"\"\<Steady\>\"", ",", "\"\<Evolving\>\""}], "}"}]}], 
          "]"}], ",", "\n", 
         RowBox[{"Button", "[", 
          RowBox[{"\"\<Huh?\>\"", ",", 
           RowBox[{
           "MessageDialog", "[", 
            "\"\<Sets variable 'steadypop'.  The population will be assumed \
to be steady-state and fixed at the initial definition if this is False, \n\
otherwise it is updated at the end of each time step.  If dmax is not much \
larger than dmin, \nthere will be no fragmants replenishing the smaller \
diameter bins, and they will become empty. \\rIt is  active only when the \
targets are a % of the impactors, not for families or set populations\>\"", 
            "]"}], ",", 
           RowBox[{"Background", "\[Rule]", "LightBrown"}]}], "]"}]}], "}"}], 
       ",", "\[IndentingNewLine]", "\n", 
       RowBox[{"{", 
        RowBox[{"\"\<With Erosion? \>\"", ",", 
         RowBox[{"PopupMenu", "[", 
          RowBox[{
           RowBox[{"Dynamic", "[", "erosion", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"True", ",", "False"}], "}"}]}], "]"}], ",", "\n", 
         RowBox[{"Button", "[", 
          RowBox[{"\"\<Huh?\>\"", ",", 
           RowBox[{
           "MessageDialog", "[", 
            "\"\<Seta variable 'erosion'.  Target diameters are diminished \
with each impact if this is true, \ncan be set to false for diagnostic runs \
to see the effect\>\"", "]"}], ",", 
           RowBox[{"Background", "\[Rule]", "LightBrown"}]}], "]"}]}], "}"}], 
       ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Model for Dynamic Depletion?\>\"", ",", "\n", 
         RowBox[{"PopupMenu", "[", 
          RowBox[{
           RowBox[{"Dynamic", "[", "depleteword", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{
            "\"\<Bottke\>\"", ",", "\"\<O'Brien\>\"", ",", "\"\<Bottke2\>\"", 
             ",", "\"\<O'Brien2\>\"", ",", "\"\<Obrienpluspower\>\"", ",", 
             "\"\<None\>\"", ",", "\"\<Not Relevant\>\""}], "}"}]}], "]"}], 
         ",", 
         RowBox[{"Button", "[", 
          RowBox[{"\"\<Huh?\>\"", ",", 
           RowBox[{
           "MessageDialog", "[", 
            "\"\<Sets variable 'depleteword'.  The model for dynamic \
depletion.  It assigns a percent lost from each bin every million years.  It \
is not relevant if there is no updating of the population. \>\"", "]"}], ",", 
           
           RowBox[{"Background", "\[Rule]", "LightBrown"}]}], "]"}]}], "}"}], 
       ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Center of Spin Strength-Gravity Transition Range, km\>\"", ",", 
         RowBox[{"InputField", "[", 
          RowBox[{
           RowBox[{"Dynamic", "[", "dcenter", "]"}], ",", 
           RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", "\n", 
         RowBox[{"Button", "[", 
          RowBox[{"\"\<Huh?\>\"", ",", 
           RowBox[{
           "MessageDialog", "[", 
            "\"\<Sets variable 'dcenter'.  The larger targets are limited in \
their spin by the oit.\nThis defines the center of a transition range. \
Targets in the range can spin above the gravity limit because their strength \
limit is sufficient.  This is related to a strength distribution\>\"", "]"}], 
           ",", 
           RowBox[{"Background", "\[Rule]", "LightBrown"}]}], "]"}]}], "}"}], 
       ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Ratio not spun up in transition region\>\"", ",", 
         RowBox[{"InputField", "[", 
          RowBox[{
           RowBox[{"Dynamic", "[", "spinupratio", "]"}], ",", 
           RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", "\n", 
         RowBox[{"Button", "[", 
          RowBox[{"\"\<Huh?\>\"", ",", 
           RowBox[{
           "MessageDialog", "[", 
            "\"\<Sets variable 'spinupratio'. The larger targets are limited \
in their spin by the gravity limit.  Together with the above value, this \
allow a certain ratio of targets to spin up past the gravity limit over a \
transition range.\>\"", "]"}], ",", 
           RowBox[{"Background", "\[Rule]", "LightBrown"}]}], "]"}]}], "}"}], 
       ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Movie Frames at each nth time step.  n=\>\"", ",", 
         RowBox[{"InputField", "[", 
          RowBox[{
           RowBox[{"Dynamic", "[", "nth", "]"}], ",", 
           RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", "\n", 
         RowBox[{"Button", "[", 
          RowBox[{"\"\<Huh?\>\"", ",", 
           RowBox[{
           "MessageDialog", "[", 
            "\"\<Sets variable 'nth'.  Movie Frames can be constructed at \
each 'nth' time step: nth=1,2,3...  If there are a lot of time steps, this \
can get very big. For no frames put a zero.  The number of time steps will be \
adjusted to be compatible.\>\"", "]"}], ",", 
           RowBox[{"Background", "\[Rule]", "LightBrown"}]}], "]"}]}], "}"}], 
       ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Number of History Plots\>\"", ",", "\n", 
         RowBox[{"InputField", "[", 
          RowBox[{
           RowBox[{"Dynamic", "[", "nhistplots", "]"}], ",", 
           RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
         RowBox[{"Button", "[", 
          RowBox[{"\"\<Huh?\>\"", ",", 
           RowBox[{
           "MessageDialog", "[", 
            "\"\<Sets variable 'nhistplots'.  Must be at least one. The \
number of plots of data versus time.  \\nSince there are often thousands of \
test asteroids, the histories cannot all be ploted. This many are picked \
randomly from all of them\>\"", "]"}], ",", 
           RowBox[{"Background", "\[Rule]", "LightBrown"}]}], "]"}]}], "}"}], 
       ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Calculate Crater Populations?\>\"", ",", "\n", 
         RowBox[{"PopupMenu", "[", 
          RowBox[{
           RowBox[{"Dynamic", "[", "craters", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"False", ",", "True"}], "}"}]}], "]"}], ",", 
         RowBox[{"Button", "[", 
          RowBox[{"\"\<Huh?\>\"", ",", 
           RowBox[{
           "MessageDialog", "[", 
            "\"\<Sets variable 'craters'.  This keeps track of craters, so a \
distribution can be found.  Only allowed if there is a single target..  The \
comparison to observed crater counts will be made if an input file is for a \
named single asteroid; see the input files 'Gaspra', 'Eros' and 'Ida' and \
'Lutetia'for examples. For additional ones the crater count must be put into \
the folder 'Asteroid crater count data'.\>\"", "]"}], ",", 
           RowBox[{"Background", "\[Rule]", "LightBrown"}]}], "]"}]}], 
        "}"}]}], "\[IndentingNewLine]", "}"}]}], ";"}], "\[IndentingNewLine]",
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"Print", "[", 
    RowBox[{"Style", "[", 
     RowBox[{
      RowBox[{"Text", "@", 
       RowBox[{"Grid", "[", 
        RowBox[{
         RowBox[{"Prepend", "[", 
          RowBox[{"data", ",", 
           RowBox[{"{", 
            RowBox[{
            "\"\<Factor\>\"", ",", "\"\<Value of factor\>\"", ",", 
             "\"\<Help?\>\""}], "}"}]}], "]"}], ",", 
         RowBox[{"Background", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"None", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Lighter", "[", 
               RowBox[{"Yellow", ",", ".9"}], "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{"White", ",", 
                RowBox[{"Lighter", "[", 
                 RowBox[{
                  RowBox[{"Blend", "[", 
                   RowBox[{"{", 
                    RowBox[{"Blue", ",", "Green"}], "}"}], "]"}], ",", ".8"}],
                  "]"}]}], "}"}]}], "}"}]}], "}"}]}], ",", 
         RowBox[{"Dividers", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Darker", "[", 
               RowBox[{"Gray", ",", ".6"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"Lighter", "[", 
                RowBox[{"Gray", ",", ".5"}], "]"}], "}"}], ",", 
              RowBox[{"Darker", "[", 
               RowBox[{"Gray", ",", ".6"}], "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Darker", "[", 
               RowBox[{"Gray", ",", ".6"}], "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"Darker", "[", 
               RowBox[{"Gray", ",", ".6"}], "]"}], ",", 
              RowBox[{"{", "False", "}"}], ",", 
              RowBox[{"Darker", "[", 
               RowBox[{"Gray", ",", ".6"}], "]"}]}], "}"}]}], "}"}]}], ",", 
         RowBox[{"Alignment", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{"Center", ",", "Center"}], "}"}], "}"}]}], ",", 
         RowBox[{"ItemSize", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{"30", ",", "20"}], "}"}], "}"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Frame", "\[Rule]", 
          RowBox[{"Darker", "[", 
           RowBox[{"Gray", ",", ".6"}], "]"}]}], ",", 
         RowBox[{"ItemStyle", "\[Rule]", "14"}], ",", 
         RowBox[{"Spacings", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"Automatic", ",", ".8"}], "}"}]}]}], "]"}]}], ",", 
      RowBox[{"TextAlignment", "\[Rule]", "Center"}]}], "]"}], "]"}], "\n", 
   "\[IndentingNewLine]", 
   StyleBox[
    RowBox[{"Style", "[", 
     RowBox[{"\"\<3.  Modifications to Models ('Knobs')\>\"", ",", 
      RowBox[{"FontSize", "->", "18"}], ",", 
      RowBox[{"FontColor", "\[Rule]", "Black"}], ",", 
      RowBox[{"FontFamily", "\[Rule]", "\"\<Helvetica\>\""}], ",", 
      RowBox[{"TextAlignment", "\[Rule]", "Center"}]}], "]"}],
    FontColor->RGBColor[0, 0, 1]], "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"data", "=", 
     RowBox[{"{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<Population distribution Factor\>\"", ",", "\n", 
         RowBox[{"EventHandler", "[", 
          RowBox[{
           RowBox[{"InputField", "[", 
            RowBox[{
             RowBox[{"Dynamic", "[", "popfac", "]"}], ",", 
             RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
           RowBox[{"\"\<ReturnKeyDown\>\"", ":>", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"NotebookLocate", "[", "\"\<inputcalcs\>\"", "]"}], ",", 
              RowBox[{"FrontEndTokenExecute", "[", 
               RowBox[{"nb", ",", "\"\<Evaluate\>\""}], "]"}]}], "}"}]}]}], 
          "]"}], ",", 
         RowBox[{"Button", "[", 
          RowBox[{"\"\<Huh?\>\"", ",", 
           RowBox[{
           "MessageDialog", "[", 
            "\"\<Sets variable 'popfac'. A factor to apply to the number of \
objects in each bin of the cumulative population function \>\"", "]"}], ",", 
           RowBox[{"Background", "\[Rule]", "LightBrown"}]}], "]"}]}], "}"}], 
       ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Q* strength negative slope Factor (0->2) \>\"", ",", 
         RowBox[{"InputField", "[", 
          RowBox[{
           RowBox[{"Dynamic", "[", "qstrengthfac", "]"}], ",", 
           RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", "\n", 
         RowBox[{"Button", "[", 
          RowBox[{"\"\<Huh?\>\"", ",", "\[IndentingNewLine]", 
           RowBox[{
           "MessageDialog", "[", 
            "\"\<Sets variable 'qstrengthfac'.  A factor to change the \
negative slope for the strength regime disruption curve. A value of 0 makes \
it flat, a value of 1 keeps it as-is, a value up to about 2 makes it more \
negative\>\"", "]"}], ",", 
           RowBox[{"Background", "\[Rule]", "LightBrown"}]}], "]"}]}], "}"}], 
       ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Gravity Regime Q* Factor\>\"", ",", "\n", 
         RowBox[{"InputField", "[", 
          RowBox[{
           RowBox[{"Dynamic", "[", "qfac", "]"}], ",", 
           RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
         RowBox[{"Button", "[", 
          RowBox[{"\"\<Huh?\>\"", ",", 
           RowBox[{
           "MessageDialog", "[", 
            "\"\<Sets variable 'qfac'.  A factor to apply to the Q* function \
in the gravity regime\>\"", "]"}], ",", 
           RowBox[{"Background", "\[Rule]", "LightBrown"}]}], "]"}]}], "}"}], 
       ",", "\n", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Pulverization qratio\>\"", ",", "\n", 
         RowBox[{"InputField", "[", 
          RowBox[{
           RowBox[{"Dynamic", "[", "pulvlim", "]"}], ",", 
           RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", 
         RowBox[{"Button", "[", 
          RowBox[{"\"\<Huh?\>\"", ",", 
           RowBox[{
           "MessageDialog", "[", 
            "\"\<The ratio Q/Qstar for complete pulverization\>\"", "]"}], 
           ",", 
           RowBox[{"Background", "\[Rule]", "LightBrown"}]}], "]"}]}], "}"}], 
       ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Velocity Factor\>\"", ",", 
         RowBox[{"InputField", "[", 
          RowBox[{
           RowBox[{"Dynamic", "[", "velfac", "]"}], ",", 
           RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", "\n", 
         RowBox[{"Button", "[", 
          RowBox[{"\"\<Huh?\>\"", ",", 
           RowBox[{
           "MessageDialog", "[", 
            "\"\<Sets variable 'velvac'.  A factor to apply to the  \
distribution of impact velocities\>\"", "]"}], ",", 
           RowBox[{"Background", "\[Rule]", "LightBrown"}]}], "]"}]}], "}"}], 
       ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Spin-up efficiency Factor for Spheres\>\"", ",", 
         RowBox[{"InputField", "[", 
          RowBox[{
           RowBox[{"Dynamic", "[", "zetafactor", "]"}], ",", 
           RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", "\n", 
         RowBox[{"Button", "[", 
          RowBox[{"\"\<Huh?\>\"", ",", 
           RowBox[{
           "MessageDialog", "[", 
            "\"\<Sets variable 'zetafactor'.  A factor to apply to the spin \
imparted for each impact.  It is a factor times the model for \
zetaf(phi).\>\"", "]"}], ",", 
           RowBox[{"Background", "\[Rule]", "LightBrown"}]}], "]"}]}], "}"}], 
       ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\"\< Additional Spin-up Factor for Ellipsoids\>\"", ",", 
           RowBox[{"InputField", "[", 
            RowBox[{
             RowBox[{"Dynamic", "[", "ellipsratio", "]"}], ",", 
             RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", "\n", 
           RowBox[{"Button", "[", 
            RowBox[{"\"\<Huh?\>\"", ",", 
             RowBox[{
             "MessageDialog", "[", 
              "\"\<Sets variable 'ellipsratio'.  An additional factor to \
apply to the spin efficiency imparted for  non-spherical asteroids.  It goes \
away for all large ones.\>\"", "]"}], ",", 
             RowBox[{"Background", "\[Rule]", "LightBrown"}]}], "]"}]}], 
          "}"}], ","}], "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
       
       RowBox[{"{", 
        RowBox[{
        "\"\<tumble angle observational threshold, Degrees\>\"", ",", 
         "\[IndentingNewLine]", 
         RowBox[{"InputField", "[", 
          RowBox[{
           RowBox[{"Dynamic", "[", "tumbleangle\:02da", "]"}], ",", 
           RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", "\n", 
         RowBox[{"Button", "[", 
          RowBox[{"\"\<Huh?\>\"", ",", 
           RowBox[{
           "MessageDialog", "[", 
            "\"\<Sets variable 'tumbleangle\:02da'. The observation threshold \
for the tumble angle alinment in degrees from the Principle Axis.  The \
setting only affects those shown on plots, not the actual calculation.  \
Adjustment of the time fctor below will affect the actual results.\>\"", 
            "]"}], ",", 
           RowBox[{"Background", "\[Rule]", "LightBrown"}]}], "]"}]}], "}"}], 
       ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Tumbler relaxation time factor\>\"", ",", 
         RowBox[{"InputField", "[", 
          RowBox[{
           RowBox[{"Dynamic", "[", "relaxfac", "]"}], ",", 
           RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", "\n", 
         RowBox[{"Button", "[", 
          RowBox[{"\"\<Huh?\>\"", ",", 
           RowBox[{
           "MessageDialog", "[", 
            "\"\<Sets variable 'relaxfac'.  That factor mulitplies the \
relaxation time given by Harris, 1994  of 1.1 10^-3/(omeg^3 D^2) to relax to \
the nutation angle of 6\:02da (that is the historical definition).  \
Literature values range over decades!  See, for example Molina et al., 2003 \
or Pravec et al., 2005 or Sharma et al. 2005\>\"", "]"}], ",", 
           RowBox[{"Background", "\[Rule]", "LightBrown"}]}], "]"}]}], "}"}], 
       ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Drain Factor \>\"", ",", 
         RowBox[{"InputField", "[", 
          RowBox[{
           RowBox[{"Dynamic", "[", "drainfac", "]"}], ",", 
           RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", "\n", 
         RowBox[{"Button", "[", 
          RowBox[{"\"\<Huh?\>\"", ",", 
           RowBox[{
           "MessageDialog", "[", 
            "\"\<Sets variable 'drainfac'.  A factor to change the drain \
factor effect\>\"", "]"}], ",", 
           RowBox[{"Background", "\[Rule]", "LightBrown"}]}], "]"}]}], "}"}], 
       ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Splash Factor \>\"", ",", 
         RowBox[{"InputField", "[", 
          RowBox[{
           RowBox[{"Dynamic", "[", "splashfac", "]"}], ",", 
           RowBox[{"FieldSize", "\[Rule]", "5"}]}], "]"}], ",", "\n", 
         RowBox[{"Button", "[", 
          RowBox[{"\"\<Huh?\>\"", ",", 
           RowBox[{
           "MessageDialog", "[", 
            "\"\<A factor to change the splash factor effect\>\"", "]"}], ",", 
           RowBox[{"Background", "\[Rule]", "LightBrown"}]}], "]"}]}], 
        "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Print", "[", 
     RowBox[{"Style", "[", 
      RowBox[{
       RowBox[{"Text", "@", 
        RowBox[{"Grid", "[", 
         RowBox[{
          RowBox[{"Prepend", "[", 
           RowBox[{"data", ",", 
            RowBox[{"{", 
             RowBox[{
             "\"\<Factor\>\"", ",", "\"\<Value of factor\>\"", ",", 
              "\"\<Help?\>\""}], "}"}]}], "]"}], ",", 
          RowBox[{"Background", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"None", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Lighter", "[", 
                RowBox[{"Yellow", ",", ".9"}], "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{"White", ",", 
                 RowBox[{"Lighter", "[", 
                  RowBox[{
                   RowBox[{"Blend", "[", 
                    RowBox[{"{", 
                    RowBox[{"Blue", ",", "Green"}], "}"}], "]"}], ",", ".8"}],
                   "]"}]}], "}"}]}], "}"}]}], "}"}]}], ",", 
          RowBox[{"Dividers", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Darker", "[", 
                RowBox[{"Gray", ",", ".6"}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"Lighter", "[", 
                 RowBox[{"Gray", ",", ".5"}], "]"}], "}"}], ",", 
               RowBox[{"Darker", "[", 
                RowBox[{"Gray", ",", ".6"}], "]"}]}], "}"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Darker", "[", 
                RowBox[{"Gray", ",", ".6"}], "]"}], ",", 
               RowBox[{"Darker", "[", 
                RowBox[{"Gray", ",", ".6"}], "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"{", "False", "}"}], ",", 
               RowBox[{"Darker", "[", 
                RowBox[{"Gray", ",", ".6"}], "]"}]}], "}"}]}], "}"}]}], ",", 
          RowBox[{"Alignment", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"Center", ",", "Center"}], "}"}], "}"}]}], ",", 
          RowBox[{"ItemSize", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"30", ",", "20"}], "}"}], "}"}]}], ",", 
          RowBox[{"Frame", "\[Rule]", 
           RowBox[{"Darker", "[", 
            RowBox[{"Gray", ",", ".6"}], "]"}]}], ",", "\[IndentingNewLine]", 
          
          RowBox[{"ItemStyle", "\[Rule]", "14"}], ",", 
          RowBox[{"Spacings", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"Automatic", ",", ".8"}], "}"}]}]}], "]"}]}], ",", 
       RowBox[{"TextAlignment", "\[Rule]", "Center"}]}], "]"}], "]"}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\n", 
   StyleBox[
    RowBox[{"Style", "[", 
     RowBox[{"\"\<4.  Resulting in\>\"", ",", 
      RowBox[{"FontSize", "->", "18"}], ",", 
      RowBox[{"FontColor", "\[Rule]", "Black"}], ",", 
      RowBox[{"FontFamily", "\[Rule]", "\"\<Helvetica\>\""}], ",", 
      RowBox[{"TextAlignment", "\[Rule]", "Center"}]}], "]"}],
    FontColor->RGBColor[0, 0, 1]], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"data", "=", 
     RowBox[{"{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<The Number of Sample Asteroids:\>\"", ",", "\n", 
         RowBox[{"Dynamic", "[", "nasteroids", "]"}], ",", 
         RowBox[{"Button", "[", 
          RowBox[{"\"\<Huh?\>\"", ",", 
           RowBox[{
           "MessageDialog", "[", 
            "\"\<Gives value of variable 'nasteroids'.  This is the total \
number of target asteroids, calculated from the above inputs.  \nIf it is too \
large, the calculation will take a lot of time, but many thousands might be \
ok depending on the computer..Try and see..\>\"", "]"}], ",", 
           RowBox[{"Background", "\[Rule]", "LightBrown"}]}], "]"}]}], "}"}], 
       ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
        "\"\<The expected time to run on Keith's iMac, minutes:\>\"", ",", 
         "\n", 
         RowBox[{"Dynamic", "[", 
          RowBox[{"NumberForm", "[", 
           RowBox[{
            RowBox[{"expecttime", "/", "60"}], ",", "5"}], "]"}], "]"}], " ", 
         ",", "\[IndentingNewLine]", 
         RowBox[{"Button", "[", 
          RowBox[{"\"\<Huh?\>\"", ",", 
           RowBox[{
           "MessageDialog", "[", 
            "\"\<Gives the variable 'expecttime'.  This is the expected time \
from experience on Keith's computer, \nit is roughly linear in \
nasteroids*nhits, but n^2 effects can raise their ugly head.. And it will run \
faster if a significant number of the asteroids get busted..\>\"", "]"}], ",", 
           RowBox[{"Background", "\[Rule]", "LightBrown"}]}], "]"}]}], 
        "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Print", "[", 
     RowBox[{"Style", "[", 
      RowBox[{
       RowBox[{"Text", "@", 
        RowBox[{"Grid", "[", 
         RowBox[{
          RowBox[{"Prepend", "[", 
           RowBox[{"data", ",", 
            RowBox[{"{", 
             RowBox[{
             "\"\<Factor\>\"", ",", "\"\<Value of factor\>\"", ",", 
              "\"\<Help?\>\""}], "}"}]}], "]"}], ",", 
          RowBox[{"Background", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"None", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Lighter", "[", 
                RowBox[{"Yellow", ",", ".9"}], "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{"White", ",", 
                 RowBox[{"Lighter", "[", 
                  RowBox[{
                   RowBox[{"Blend", "[", 
                    RowBox[{"{", 
                    RowBox[{"Blue", ",", "Green"}], "}"}], "]"}], ",", ".8"}],
                   "]"}]}], "}"}]}], "}"}]}], "}"}]}], ",", 
          RowBox[{"Dividers", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Darker", "[", 
                RowBox[{"Gray", ",", ".6"}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"Lighter", "[", 
                 RowBox[{"Gray", ",", ".5"}], "]"}], "}"}], ",", 
               RowBox[{"Darker", "[", 
                RowBox[{"Gray", ",", ".6"}], "]"}]}], "}"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Darker", "[", 
                RowBox[{"Gray", ",", ".6"}], "]"}], ",", 
               RowBox[{"Darker", "[", 
                RowBox[{"Gray", ",", ".6"}], "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"{", "False", "}"}], ",", 
               RowBox[{"Darker", "[", 
                RowBox[{"Gray", ",", ".6"}], "]"}]}], "}"}]}], "}"}]}], ",", 
          RowBox[{"Alignment", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"Center", ",", "Center"}], "}"}], "}"}]}], ",", 
          RowBox[{"ItemSize", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"30", ",", "20"}], "}"}], "}"}]}], ",", 
          RowBox[{"Frame", "\[Rule]", 
           RowBox[{"Darker", "[", 
            RowBox[{"Gray", ",", ".6"}], "]"}]}], ",", "\[IndentingNewLine]", 
          
          RowBox[{"ItemStyle", "\[Rule]", "14"}], ",", 
          RowBox[{"Spacings", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"Automatic", ",", ".8"}], "}"}]}]}], "]"}]}], ",", 
       RowBox[{"TextAlignment", "\[Rule]", "Center"}]}], "]"}], "]"}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"Style", "[", 
    RowBox[{
     RowBox[{"Grid", "[", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"Button", "[", 
         RowBox[{"\"\<Refresh the variables as necessary\>\"", ",", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"NotebookLocate", "[", "\"\<inputcalcs\>\"", "]"}], ",", 
            RowBox[{"FrontEndTokenExecute", "[", 
             RowBox[{"nb", ",", "\"\<Evaluate\>\""}], "]"}]}], 
           "\[IndentingNewLine]", "}"}], ",", 
          RowBox[{"Background", "\[Rule]", "Brown"}]}], "]"}], "}"}], "}"}], 
      "]"}], ",", 
     RowBox[{"TextAlignment", "\[Rule]", "Center"}]}], "]"}], 
   "\[IndentingNewLine]", "\n", 
   RowBox[{"Style", "[", 
    StyleBox[
     RowBox[{"\"\<5.  Some Plots of Inputs\>\"", ",", 
      RowBox[{"FontSize", "->", "18"}], ",", 
      RowBox[{"FontColor", "\[Rule]", "Black"}], ",", 
      RowBox[{"FontFamily", "\[Rule]", "\"\<Helvetica\>\""}], ",", 
      RowBox[{"TextAlignment", "\[Rule]", "Center"}]}],
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["]",
     FontColor->RGBColor[0, 0, 1]]}], 
   StyleBox["\[IndentingNewLine]",
    FontColor->RGBColor[0, 0, 1]], 
   RowBox[{
    RowBox[{
     StyleBox["popplot",
      FontColor->RGBColor[0, 0, 1]], "=", 
     RowBox[{"popplotf", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"craterscaling", "=", 
     RowBox[{"craterscalingplotf", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"spinlimplots", "[", "\"\<Cycles/day\>\"", "]"}], ";"}], " ", 
   RowBox[{"(*", 
    RowBox[{"returns", " ", "limitplots"}], "*)"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"distplot", "=", 
     RowBox[{"Show", "[", 
      RowBox[{
       RowBox[{"Plot", "[", 
        RowBox[{
         RowBox[{"PDF", "[", 
          RowBox[{
           RowBox[{"MaxwellDistribution", "[", 
            RowBox[{"3.232", " ", "velfac"}], "]"}], ",", "x"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"x", ",", "0", ",", 
           RowBox[{"15", " ", "velfac"}]}], "}"}], ",", 
         RowBox[{"Frame", "\[Rule]", "True"}], ",", 
         RowBox[{"FrameLabel", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<Velocity, km/s\>\"", ",", "\"\<Probability\>\""}], 
           "}"}]}], ",", 
         RowBox[{"LabelStyle", "\[Rule]", "16"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", "Black"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "Full"}]}], "]"}], ",", " ", 
       RowBox[{"Graphics", "[", 
        RowBox[{"Text", "[", 
         RowBox[{
          RowBox[{"Framed", "[", 
           RowBox[{"StringForm", "[", 
            RowBox[{
            "\"\<The velocity factor is `1` \\rThe Mean velocity is `2` \
km/s\>\"", ",", "velfac", ",", 
             RowBox[{"5.16", " ", "velfac"}]}], "]"}], "]"}], ",", 
          RowBox[{"Scaled", "[", 
           RowBox[{"{", 
            RowBox[{".3", ",", ".5"}], "}"}], "]"}]}], "]"}], "]"}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"plotdsmallest", "=", ".01"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"dmax", "=", "500"}], ";"}], "*)"}], "  ", 
   RowBox[{"(*", " ", 
    RowBox[{
    "initial", " ", "values", " ", "for", " ", "tumblelimit", " ", "curve", 
     " ", "plot"}], " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{"craters", ",", 
      RowBox[{"craterlimf", "[", "asttype", "]"}], ",", "\n", 
      RowBox[{"craterlimf", "[", "\"\<S-Type\>\"", "]"}]}], "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "that", " ", "call", " ", "should", " ", "generate", " ", "the", " ", 
      "bust", " ", "limits", " ", "for", " ", "bowl", " ", "craters", " ", 
      RowBox[{"(", "dcrimdias", ")"}]}], ",", " ", "\[IndentingNewLine]", 
     "    ", 
     RowBox[{"spallcraters", " ", 
      RowBox[{"(", "spalldias", ")"}]}], ",", 
     RowBox[{"complex", " ", "craters", " ", 
      RowBox[{"(", "complexdias", ")"}], " ", "but", " ", "now", " ", "it", 
      " ", "does", " ", "no", " ", "plotting"}]}], "*)"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "ned", " ", "to", " ", "modify", " ", "if", " ", "both", " ", "types", 
     " ", "present"}], " ", "*)"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"button1", "=", 
     RowBox[{"Show", "[", 
      RowBox[{"popplot", ",", 
       RowBox[{"ImageSize", "\[Rule]", "Full"}], ",", 
       RowBox[{"DisplayFunction", "->", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"PopupWindow", "[", 
           RowBox[{
            RowBox[{"Button", "[", 
             RowBox[{"\"\<Population & Target Distributions\>\"", ",", 
              RowBox[{"Background", "->", "LightGreen"}]}], "]"}], ",", "#1", 
            ",", 
            RowBox[{"WindowSize", "->", 
             RowBox[{"{", 
              RowBox[{"700", ",", "550"}], "}"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"WindowMargins", "->", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"200", ",", "Automatic"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"200", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
            RowBox[{
            "WindowTitle", "->", "\"\<Asteroid Population Distribution\>\""}],
             ",", 
            RowBox[{"Background", "\[Rule]", "Gray"}]}], "]"}], "&"}], 
         ")"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{"button2", "=", 
     RowBox[{"Show", "[", 
      RowBox[{
       RowBox[{"Graphics", "[", 
        RowBox[{"qplotf", "[", "]"}], "]"}], ",", 
       RowBox[{"DisplayFunction", "->", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"PopupWindow", "[", 
           RowBox[{
            RowBox[{"Button", "[", 
             RowBox[{"\"\<Catastrophic Dispersion Q*\>\"", ",", 
              RowBox[{"Background", "->", "Pink"}]}], "]"}], ",", "#1", ",", 
            RowBox[{"WindowSize", "->", 
             RowBox[{"{", 
              RowBox[{"700", ",", "550"}], "}"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"WindowMargins", "->", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"200", ",", "Automatic"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"200", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
            RowBox[{
            "WindowTitle", "->", "\"\<Asteroid Dispersion Curve\>\""}], ",", 
            RowBox[{"Background", "->", "Gray"}]}], "]"}], "&"}], ")"}]}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"button3", "=", 
     RowBox[{"Show", "[", 
      RowBox[{
       RowBox[{"Graphics", "[", "craterscaling", "]"}], ",", 
       RowBox[{"DisplayFunction", "->", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"PopupWindow", "[", 
           RowBox[{
            RowBox[{"Button", "[", 
             RowBox[{"\"\<Crater Scaling Plot Piv v. Pi2\>\"", ",", 
              RowBox[{"Background", "\[Rule]", "Orange"}]}], "]"}], ",", "#1",
             ",", 
            RowBox[{"WindowSize", "->", 
             RowBox[{"{", 
              RowBox[{"700", ",", "550"}], "}"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"WindowMargins", "->", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"600", ",", "Automatic"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"200", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
            RowBox[{"WindowTitle", "->", "\"\<Asteroid Crater Scaling\>\""}], 
            ",", 
            RowBox[{"Background", "\[Rule]", "Gray"}]}], "]"}], "&"}], 
         ")"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"button4", "=", 
     RowBox[{"If", "[", 
      RowBox[{"famflg", ",", 
       RowBox[{"Show", "[", 
        RowBox[{
         RowBox[{"Graphics", "[", "famplots", "]"}], ",", 
         RowBox[{"DisplayFunction", "->", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"PopupWindow", "[", 
             RowBox[{
              RowBox[{"Button", "[", 
               RowBox[{"\"\<Family Population\>\"", ",", 
                RowBox[{"Background", "\[Rule]", "Orange"}], ",", 
                RowBox[{"Enabled", "->", 
                 RowBox[{"If", "[", 
                  RowBox[{"famflg", ",", "True", ",", "False"}], "]"}]}]}], 
               "]"}], ",", "#1", ",", 
              RowBox[{"WindowSize", "->", 
               RowBox[{"{", 
                RowBox[{"700", ",", "550"}], "}"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"WindowMargins", "->", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"600", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"200", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
              RowBox[{
              "WindowTitle", "->", "\"\<Asteroid Crater Scaling\>\""}], ",", 
              RowBox[{"Background", "\[Rule]", "Gray"}]}], "]"}], "&"}], 
           ")"}]}]}], "]"}], ",", 
       RowBox[{"Button", "[", 
        RowBox[{"\"\<Family Population\>\"", ",", 
         RowBox[{"Enabled", "\[Rule]", "False"}]}], "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"button5", "=", 
     RowBox[{"Show", "[", 
      RowBox[{
       RowBox[{"Graphics", "[", "limitplots", "]"}], ",", 
       RowBox[{"DisplayFunction", "->", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"PopupWindow", "[", 
           RowBox[{
            RowBox[{"Button", "[", 
             RowBox[{"\"\<Gravity-Strength Spin Limit\>\"", ",", 
              RowBox[{"Background", "\[Rule]", "LightGreen"}]}], "]"}], ",", 
            "#1", ",", 
            RowBox[{"WindowSize", "->", 
             RowBox[{"{", 
              RowBox[{"700", ",", "550"}], "}"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"WindowMargins", "->", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"600", ",", "Automatic"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"200", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
            RowBox[{
            "WindowTitle", "->", "\"\<Strength-Gravity Spin Limits\>\""}], 
            ",", 
            RowBox[{"Background", "\[Rule]", "Gray"}]}], "]"}], "&"}], 
         ")"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"button6", "=", 
     RowBox[{"Show", "[", 
      RowBox[{
       RowBox[{"Graphics", "[", "veldistplot", "]"}], ",", 
       RowBox[{"DisplayFunction", "->", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"PopupWindow", "[", 
           RowBox[{
            RowBox[{"Button", "[", 
             RowBox[{"\"\<Impact Velocity Distribution\>\"", ",", 
              RowBox[{"Background", "\[Rule]", "LightOrange"}]}], "]"}], ",", 
            "#1", ",", 
            RowBox[{"WindowSize", "->", 
             RowBox[{"{", 
              RowBox[{"700", ",", "550"}], "}"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"WindowMargins", "->", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"600", ",", "Automatic"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"200", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
            RowBox[{"WindowTitle", "->", "\"\<Velocity Distribution\>\""}], 
            ",", 
            RowBox[{"Background", "\[Rule]", "Gray"}]}], "]"}], "&"}], 
         ")"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"button7", "=", 
     RowBox[{"Show", "[", 
      RowBox[{
       RowBox[{"Graphics", "[", 
        RowBox[{"tumblelimitf", "[", 
         RowBox[{"\"\<Cycles/day\>\"", ",", "True"}], "]"}], "]"}], ",", 
       RowBox[{"DisplayFunction", "->", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"PopupWindow", "[", 
           RowBox[{
            RowBox[{"Button", "[", 
             RowBox[{"\"\<Tumble Relax Curves\>\"", ",", 
              RowBox[{"Background", "\[Rule]", "LightBlue"}]}], "]"}], ",", 
            "#1", ",", 
            RowBox[{"WindowSize", "->", 
             RowBox[{"{", 
              RowBox[{"700", ",", "550"}], "}"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"WindowMargins", "->", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"600", ",", "Automatic"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"200", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
            RowBox[{"WindowTitle", "->", "\"\<Tumble Relax Func\>\""}], ",", 
            RowBox[{"Background", "\[Rule]", "Gray"}]}], "]"}], "&"}], 
         ")"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"button8", "=", 
      RowBox[{"Button", "[", 
       RowBox[{"\"\<Acknowledgements\>\"", ",", 
        RowBox[{
        "MessageDialog", "[", 
         "\"\<Kevin Housen taught me most of what I know about statisics and \
probability;\\r\\rThomas Henych performed most of the analysis of family data \
used for the fragmentation models.\\r\\rI thank my wife Younghee Kim for her \
constant support and occasional patience.\\r\\rI thank Don Davis for pulling \
me into the studies of asteroids,\\r\\r\nand I thank Stephen Wolfram and the \
Mathematica developers for an amazing code.\>\"", "]"}], ",", 
        RowBox[{"Background", "\[Rule]", "LightBrown"}]}], "]"}]}], ";"}], 
    "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"button12", "=", 
      RowBox[{"Show", "[", 
       RowBox[{
        RowBox[{"Import", "[", 
         RowBox[{"dir", "<>", "\"\</data/keith2.jpg\>\""}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"DisplayFunction", "->", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"PopupWindow", "[", 
            RowBox[{
             RowBox[{"Button", "[", 
              RowBox[{"\"\<Keith\>\"", ",", 
               RowBox[{"Background", "->", "LightBrown"}]}], "]"}], ",", "#1",
              ",", 
             RowBox[{"WindowSize", "->", 
              RowBox[{"{", 
               RowBox[{"300", ",", "400"}], "}"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"WindowMargins", "->", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"500", ",", "Automatic"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"200", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
             RowBox[{
             "WindowTitle", "->", 
              "\"\<Keith a few years ago, but after some accretion\>\""}], 
             ",", 
             RowBox[{"Background", "\[Rule]", "Gray"}]}], "]"}], "&"}], 
          ")"}]}]}], "]"}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"button9", "=", 
     RowBox[{"Show", "[", 
      RowBox[{
       RowBox[{"Graphics", "[", "zetaplot", "]"}], ",", 
       RowBox[{"DisplayFunction", "->", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"PopupWindow", "[", 
           RowBox[{
            RowBox[{"Button", "[", 
             RowBox[{"\"\<Spin-up Efficiency Plot\>\"", ",", 
              RowBox[{"Background", "\[Rule]", "LightBlue"}]}], "]"}], ",", 
            "#1", ",", 
            RowBox[{"WindowSize", "->", 
             RowBox[{"{", 
              RowBox[{"700", ",", "550"}], "}"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"WindowMargins", "->", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"600", ",", "Automatic"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"200", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
            RowBox[{"WindowTitle", "->", "\"\<Spins\>\""}], ",", 
            RowBox[{"Background", "\[Rule]", "Gray"}]}], "]"}], "&"}], 
         ")"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"button10", "=", 
     RowBox[{"Show", "[", 
      RowBox[{
       RowBox[{"Graphics", "[", "spinplot1", "]"}], ",", 
       RowBox[{"DisplayFunction", "->", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"PopupWindow", "[", 
           RowBox[{
            RowBox[{"Button", "[", 
             RowBox[{"\"\<2019 Spin Data Plot\>\"", ",", 
              RowBox[{"Background", "\[Rule]", "LightBlue"}]}], "]"}], ",", 
            "#1", ",", 
            RowBox[{"WindowSize", "->", 
             RowBox[{"{", 
              RowBox[{"700", ",", "550"}], "}"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"WindowMargins", "->", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"600", ",", "Automatic"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"200", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
            RowBox[{"WindowTitle", "->", "\"\<Spins\>\""}], ",", 
            RowBox[{"Background", "\[Rule]", "Gray"}]}], "]"}], "&"}], 
         ")"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"button11", "=", 
     RowBox[{"Show", "[", 
      RowBox[{
       RowBox[{"Graphics", "[", "craterlimits", "]"}], ",", 
       RowBox[{"DisplayFunction", "->", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"PopupWindow", "[", 
           RowBox[{
            RowBox[{"Button", "[", 
             RowBox[{"\"\<Crater Regimes & Limits\>\"", ",", 
              RowBox[{"Background", "\[Rule]", "LightBlue"}]}], "]"}], ",", 
            "#1", ",", 
            RowBox[{"WindowSize", "->", 
             RowBox[{"{", 
              RowBox[{"700", ",", "550"}], "}"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"WindowMargins", "->", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"600", ",", "Automatic"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"200", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
            RowBox[{
            "WindowTitle", "->", 
             "\"\<Crater Type Regimes & Limits, S-Type\>\""}], ",", 
            RowBox[{"Background", "\[Rule]", "Gray"}]}], "]"}], "&"}], 
         ")"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"button13", "=", 
     RowBox[{"Show", "[", 
      RowBox[{"depleteplot", ",", 
       RowBox[{"ImageSize", "\[Rule]", "Full"}], ",", 
       RowBox[{"DisplayFunction", "->", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"PopupWindow", "[", 
           RowBox[{
            RowBox[{"Button", "[", 
             RowBox[{"\"\<Depletion Models\>\"", ",", 
              RowBox[{"Background", "\[Rule]", "LightGreen"}]}], "]"}], ",", 
            "#1", ",", 
            RowBox[{"WindowSize", "->", 
             RowBox[{"{", 
              RowBox[{"700", ",", "550"}], "}"}]}], ",", 
            RowBox[{"WindowTitle", "->", "\"\<Depletion Plot\>\""}], ",", 
            RowBox[{"Background", "\[Rule]", "Gray"}]}], "]"}], "&"}], 
         ")"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"Style", "[", 
    RowBox[{
     RowBox[{"Grid", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"Style", "[", 
           RowBox[{"\"\<Lets look at ->\>\"", ",", "Bold", ",", "20"}], "]"}],
           "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"button1", ",", "button2", ",", "button3"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"button4", ",", "button5", ",", "button6"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"button7", ",", "button8", ",", "button9"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"button10", ",", "button13", ",", "button11"}], "}"}], ",", 
         
         RowBox[{"{", " ", 
          RowBox[{",", "button12", ","}], " ", "}"}]}], "}"}], ",", 
       RowBox[{"ItemSize", "\[Rule]", "15"}], ",", 
       RowBox[{"Frame", "\[Rule]", "All"}]}], "]"}], ",", 
     RowBox[{"TextAlignment", "\[Rule]", "Center"}]}], "]"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"save", " ", "buttons"}], "..."}], "..."}], "..."}], 
        "..."}], "..."}], "..."}], "..."}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"Style", "[", 
    StyleBox[
     RowBox[{"\"\<6. Save this Set?\>\"", ",", 
      RowBox[{"FontSize", "->", "18"}], ",", 
      RowBox[{"FontColor", "\[Rule]", "Black"}], ",", 
      RowBox[{"FontFamily", "\[Rule]", "\"\<Helvetica\>\""}], ",", 
      RowBox[{"TextAlignment", "\[Rule]", "Center"}]}],
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["]",
     FontColor->RGBColor[0, 0, 1]]}], "\n", "\[IndentingNewLine]", 
   RowBox[{"Style", "[", 
    RowBox[{
     RowBox[{"Grid", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Button", "[", 
           RowBox[{"\"\<Save..\>\"", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"valuesnow", "=", 
               RowBox[{"{", 
                RowBox[{
                "popfile", ",", "dmin", ",", "dmax", ",", "asttype", ",", 
                 "family0", ",", "\n", "testratio", ",", "diameterlast", ",", 
                 "tmaxby", ",", "nsteps", ",", "updateword", ",", "bornagain",
                  ",", "\n", "dcenter", ",", "spinupratio", ",", "erosion", 
                 ",", "nth", ",", "nhistplots", ",", "craters", ",", "popfac",
                  ",", "qfac", ",", " ", "pulvlim", ",", " ", "velfac", ",", 
                 "zetafactor", ",", " ", "ellipsratio", ",", "relaxfac", ",", 
                 "tumbleangle\:02da", ",", "qstrengthfac", ",", "drainfac", 
                 ",", "splashfac", ",", "depleteword", ",", "notes"}], 
                "}"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"Write", "[", 
               RowBox[{"inputfile", ",", "valuesnow"}], "]"}], ";", "\n", 
              RowBox[{"Close", "[", "inputfile", "]"}], ";"}], "}"}], 
            "\[IndentingNewLine]", ",", 
            RowBox[{"Background", "\[Rule]", "LightGray"}]}], "]"}], ",", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"Button", "[", 
           RowBox[{"\"\<Save As..\>\"", ",", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{"redo", " ", "newname"}], ",", " ", "inputfile"}], " ", 
             "*)"}], "\n", 
            RowBox[{
             RowBox[{"newname", "=", 
              RowBox[{"InputString", "[", 
               RowBox[{"\"\<New input file name:\>\"", ",", "newname"}], 
               "]"}]}], ";", 
             RowBox[{"notes", "=", 
              RowBox[{"InputString", "[", 
               RowBox[{"\"\<Input File Notes\>\"", ",", "\"\<New Notes\>\""}],
                "]"}]}], ";", 
             RowBox[{"inputfile", "=", 
              RowBox[{"FileNameJoin", "[", 
               RowBox[{"{", 
                RowBox[{"dir", ",", "\"\<inputs\>\"", ",", 
                 RowBox[{"ToString", "[", "newname", "]"}]}], "}"}], "]"}]}], 
             ";", "\[IndentingNewLine]", 
             RowBox[{"valuesnow", "=", 
              RowBox[{"{", 
               RowBox[{
               "popfile", ",", "dmin", ",", "dmax", ",", "asttype", ",", 
                "family0", ",", "\n", "testratio", ",", "diameterlast", ",", 
                "tmaxby", ",", "nsteps", ",", "updateword", ",", "bornagain", 
                ",", "\n", "dcenter", ",", "spinupratio", ",", "erosion", ",",
                 "nth", ",", "nhistplots", ",", "craters", ",", "popfac", ",",
                 "qfac", ",", " ", "pulvlim", ",", " ", "velfac", ",", 
                "zetafactor", ",", " ", "ellipsratio", ",", "relaxfac", ",", 
                "tumbleangle\:02da", ",", "qstrengthfac", ",", "drainfac", 
                ",", "splashfac", ",", "depleteword", ",", "notes"}], "}"}]}],
              ";", "\n", 
             RowBox[{"Write", "[", 
              RowBox[{"inputfile", ",", "valuesnow"}], "]"}], ";", "\n", 
             RowBox[{"Close", "[", "inputfile", "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"Print", "[", "newname", "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"NotebookLocate", "[", "\"\<inputcalcs\>\"", "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"FrontEndTokenExecute", "[", 
              RowBox[{"nb", ",", "\"\<Evaluate\>\""}], "]"}]}], 
            "\[IndentingNewLine]", ",", 
            RowBox[{"Method", "\[Rule]", "\"\<Queued\>\""}], ",", 
            RowBox[{"Background", "\[Rule]", "LightGreen"}]}], "]"}], ",", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"Button", "[", 
           RowBox[{"\"\<Revert to Last Saved\>\"", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"valuesnow", "=", 
               RowBox[{"Import", "[", 
                RowBox[{"inputfile", ",", "\"\<NB\>\""}], "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"newname", "=", 
               RowBox[{"FileNameTake", "[", "inputfile", "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{"load", " ", "them"}], "*)"}], "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                "popfile", ",", "dmin", ",", "dmax", ",", "asttype", ",", 
                 "family0", ",", "\n", "testratio", ",", "diameterlast", ",", 
                 "tmaxby", ",", "nsteps", ",", "updateword", ",", "bornagain",
                  ",", "\n", "dcenter", ",", "spinupratio", ",", "erosion", 
                 ",", "nth", ",", "nhistplots", ",", "craters", ",", "popfac",
                  ",", "qfac", ",", " ", "pulvlim", ",", " ", "velfac", ",", 
                 "zetafactor", ",", " ", "ellipsratio", ",", 
                 "tumbleangle\:02da", ",", "qstrengthfac", ",", "drainfac", 
                 ",", "splashfac", ",", "depleteword", ",", "notes"}], "}"}], 
               "=", "valuesnow"}], ";"}], "\[IndentingNewLine]", "}"}], ",", 
            RowBox[{"Background", "\[Rule]", "Orange"}]}], "]"}], ",", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"Show", "[", 
           RowBox[{
            RowBox[{"Import", "[", 
             RowBox[{"dir", "<>", "\"\</data/keith1.jpg\>\""}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"DisplayFunction", "->", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"PopupWindow", "[", 
                RowBox[{
                 RowBox[{"Button", "[", 
                  RowBox[{"\"\<OK, Show Keith\>\"", ",", 
                   RowBox[{"Background", "->", "LightBrown"}]}], "]"}], ",", 
                 "#1", ",", 
                 RowBox[{"WindowSize", "->", 
                  RowBox[{"{", 
                   RowBox[{"300", ",", "400"}], "}"}]}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"WindowMargins", "->", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"500", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"200", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
                 
                 RowBox[{
                 "WindowTitle", "->", "\"\<Keith (a few years ago)\>\""}], 
                 ",", 
                 RowBox[{"Background", "->", "Red"}]}], "]"}], "&"}], 
              ")"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"Button", "[", 
           RowBox[{"\"\<OK, Do the Simulation\>\"", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"NotebookFind", "[", 
               RowBox[{
               "nb", ",", " ", "\"\<updateall\>\"", ",", " ", "All", ",", " ",
                 "CellTags"}], "]"}], ";", "\n", 
              RowBox[{"SelectionEvaluate", "[", "nb", "]"}]}], "\n", "}"}], 
            ",", 
            RowBox[{"Background", "\[Rule]", "Red"}]}], "]"}]}], "}"}], ",", 
        RowBox[{"{", "}"}]}], "}"}], "]"}], ",", 
     RowBox[{"TextAlignment", "\[Rule]", "Center"}]}], "]"}], "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"SelectionMove", "[", 
    RowBox[{"nb", ",", "Next", ",", "GeneratedCell"}], "]"}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellOpen->False,
 CellChangeTimes->{
  3.886221253204019*^9, {3.8896738989182262`*^9, 3.889673910573771*^9}},
 FontFamily->"Arial",
 FontSize->14,
 FontWeight->"Regular",
 FontColor->GrayLevel[0.5],
 Background->GrayLevel[0],
 CellTags->"inputcalcs",
 CellLabel->
  "In[102]:=",ExpressionUUID->"a7f9375c-efb3-4700-9202-d7d6f87c1459"],

Cell[BoxData["\n"], "Input",
 CellOpen->True,
 FontFamily->"Arial",
 FontSize->14,
 FontWeight->"Regular",
 FontColor->GrayLevel[0.5],
 Background->GrayLevel[
  0],ExpressionUUID->"302417ee-536e-41ef-a637-acf176a684a3"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"NotebookLocate", "[", "\"\<qstarf\>\"", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"FrontEndTokenExecute", "[", 
   RowBox[{"nb", ",", "\"\<Evaluate\>\""}], "]"}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 CellOpen->True,
 CellChangeTimes->{{3.88976251417155*^9, 3.889762521456772*^9}},
 FontFamily->"Arial",
 FontSize->14,
 FontWeight->"Regular",
 FontColor->GrayLevel[0.5],
 Background->GrayLevel[0],
 CellTags->"updateall",
 CellLabel->
  "In[301]:=",ExpressionUUID->"8f783ecc-21ef-4684-b299-513605ac9f09"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"descript", "=", 
   RowBox[{"ToString", "[", " ", 
    RowBox[{
    "\"\<\\n\[Bullet] The input file is '\>\"", "<>", "newname", "<>", 
     "\"\<'. \\r\[Bullet] There are \>\"", "<>", 
     RowBox[{"ToString", "[", "nasteroids", "]"}], "<>", 
     "\"\< target asteroids,  in the range of \>\"", "<>", 
     RowBox[{"ToString", "[", "dmin", "]"}], "<>", "\"\< to \>\"", "<>", 
     RowBox[{"ToString", "[", "dmax", "]"}], "<>", 
     "\"\< km diameter.\\r\[Bullet] It used the '\>\"", "<>", 
     RowBox[{"ToString", "[", "popfile", "]"}], "<>", " ", 
     "\"\<' population file.  \\r\[Bullet] The population was assumed to be \
\>\"", "<>", 
     RowBox[{"ToString", "[", "updateword", "]"}], "<>", 
     "\"\<.\\r\[Bullet] The model for dynamic depletions was \>\"", "<>", 
     RowBox[{"ToString", "[", "depleteword", "]"}], "<>", 
     "\"\<.\\r\[Bullet] There are \>\"", "<>", 
     RowBox[{"ToString", "[", "nhistplots", "]"}], "<>", 
     "\"\< history plots.\\r\[Bullet] I expected it to take \>\"", "<>", 
     RowBox[{"ToString", "[", 
      RowBox[{"expecttime", "/", "60."}], " ", "]"}], "<>", 
     "\"\< minutes to run.\\r\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"plottext", "=", 
   RowBox[{"InputString", "[", 
    RowBox[{"\"\<Text for plots\>\"", ",", "newname"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"NotebookLocate", "[", "\"\<moreinputcalcs\>\"", "]"}], ";", 
  RowBox[{"FrontEndTokenExecute", "[", 
   RowBox[{"nb", ",", "\"\<Evaluate\>\""}], "]"}], ";"}]}], "Input",
 CellOpen->False,
 FontFamily->"Arial",
 FontSize->14,
 FontWeight->"Regular",
 FontColor->GrayLevel[0.5],
 Background->GrayLevel[0],
 CellTags->"updateall",
 CellLabel->
  "In[303]:=",ExpressionUUID->"ab7c6444-e556-4a42-a4ad-bb1e43232158"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"family", "==", "\"\<None\>\""}], ",", "  ", 
     RowBox[{"famflg", "=", "False"}], ",", 
     RowBox[{"famflg", "=", "True"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"updateword", "==", "\"\<popplot\n\>\""}], ",", 
      RowBox[{"update", "=", "False"}], ",", 
      RowBox[{"update", "=", "True"}]}], "]"}], ";", " ", 
    RowBox[{"??", "?"}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"explicitfac", "=", "1."}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Print", "[", "\"\<got tohere\>\"", "]"}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "get", " ", "the", " ", "asteroid", " ", "crater", " ", "count", "  ", 
     "for", " ", "the", " ", "two", " ", "input", " ", 
     RowBox[{"files", " ", "'"}], 
     RowBox[{"Gaspra", "'"}], " ", 
     RowBox[{"and", " ", "'"}], 
     RowBox[{"Ida", "'"}]}], " ", ",", " ", "Eros", ",", " ", 
    RowBox[{
     RowBox[{
     "Lutetiathe", " ", "crater", " ", "counts", " ", "are", " ", "listed", 
      " ", "in", " ", "files"}], ";", " ", 
     RowBox[{"note", " ", "the", " ", "required", " ", "format"}]}], ",", " ", 
    RowBox[{
    "location", " ", "and", " ", "name", " ", "for", " ", "adding", " ", 
     RowBox[{"others", ".", "  ", "for"}], " ", "example"}], ",", " ", 
    RowBox[{"an", " ", "input", " ", "file", " ", 
     RowBox[{"named", " ", "'"}], 
     RowBox[{"asteroidxx", "'"}], " ", "would", " ", "have", " ", "its", " ", 
     "observed", " ", "cumulative", " ", "counts", " ", "in", " ", "the", " ", 
     RowBox[{"file", " ", "'"}], 
     RowBox[{"asteroidxxcratercum", "'"}], " ", "in", " ", "the", " ", 
     RowBox[{"folder", " ", "'"}], "Asteroid_crater", "_count", 
     RowBox[{"_data", "'"}]}]}], "*)"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{"craters", ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"explicitfac", "=", "0.1"}], ";", " ", 
      RowBox[{"(*", ";", "*)"}], "  ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"a", " ", "single", " ", "target", " ", "runs", " ", 
          RowBox[{"fast", ".", " ", "but"}], " ", "plots", " ", "slow", "  ", 
          "for", " ", "ceres"}], "..."}], "still", " ", "set", " ", "the", 
        " ", 
        RowBox[{"implicit", "/", "explicit"}], " ", "division", " ", "very", 
        " ", "low"}], " ", "*)"}], 
      RowBox[{"(*", " ", 
       RowBox[{
       "but", " ", "this", " ", "needs", " ", "to", " ", "depend", " ", "on", 
        " ", "the", " ", "target", " ", 
        RowBox[{"size", ".", "  ", "limit"}], " ", "the", " ", "number", " ", 
        "of", " ", 
        RowBox[{"explicit", "?"}]}], " ", "*)"}], "\n", "\[IndentingNewLine]", 
      RowBox[{"smallest", "=", 
       RowBox[{"d0", "/", "1000"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"newname", "\[Equal]", "\"\<Gaspra\>\""}], "||", 
          RowBox[{"newname", "\[Equal]", "\"\<Ida\>\""}], "||", 
          RowBox[{"newname", "==", "\"\<Eros\>\""}], "||", 
          RowBox[{"newname", "==", "\"\<Lutetia\>\""}], "||", 
          RowBox[{"newname", "==", "\"\<Ceres\>\""}]}], ")"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Which", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"newname", "\[Equal]", "\"\<Gaspra\>\""}], ",", 
           RowBox[{"upscalefac", "=", 
            RowBox[{"Pi", " ", 
             RowBox[{
              RowBox[{"dmin", "^", "2"}], "/", "90"}]}]}], ",", 
           RowBox[{"(*", " ", 
            RowBox[{
            "Gaspra", " ", "data", " ", "is", " ", "for", " ", "a", " ", "90",
              " ", 
             RowBox[{"km", "^", "2"}], " ", "patch"}], " ", "*)"}], "\n", 
           "             ", 
           RowBox[{"newname", "\[Equal]", "\"\<Ida\>\""}], ",", 
           RowBox[{"upscalefac", "=", 
            RowBox[{"Pi", " ", 
             RowBox[{"d0", "^", "2"}]}]}], ",", 
           RowBox[{"(*", " ", 
            RowBox[{
            "Ida", " ", "data", " ", "is", " ", "per", " ", "square", " ", 
             "km"}], " ", "*)"}], "\n", 
           RowBox[{"newname", "==", "\"\<Lutetia\>\""}], ",", 
           RowBox[{"upscalefac", "=", 
            RowBox[{"Pi", " ", 
             RowBox[{"d0", "^", "2"}]}]}], ",", 
           RowBox[{"(*", " ", 
            RowBox[{"data", " ", "is", " ", "per", " ", "square", " ", "km"}],
             " ", "*)"}], "\[IndentingNewLine]", "             ", 
           RowBox[{"newname", "\[Equal]", "\"\<Eros\>\""}], ",", 
           RowBox[{"upscalefac", "=", "963."}], ",", "\n", "\t", 
           RowBox[{"newname", "==", "\"\<Ceres\>\""}], ",", 
           RowBox[{"upscalefac", "=", 
            RowBox[{"Pi", " ", 
             RowBox[{"d0", "^", "2"}]}]}]}], "]"}], ";", 
         RowBox[{"(*", " ", 
          RowBox[{
          "Eros", " ", "data", " ", "is", " ", "per", " ", "square", " ", 
           "km", " ", "use", " ", "online", " ", "formula", " ", "for", " ", 
           "ellipsoid"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
             "add", " ", "upscalefac", " ", "for", " ", "additional", " ", 
              "asteroid", " ", "with", " ", "observed", " ", "crater", " ", 
              "counts", " ", "here"}], "..."}], "\[IndentingNewLine]", "It", 
            " ", "increases", " ", "the", " ", "number", " ", "of", " ", 
            "craters", " ", "in", " ", "the", " ", "cumulative", " ", "count",
             " ", "of", " ", "an", " ", "observed", " ", "area", " ", "to", 
            " ", "the", " ", "entire", " ", "surface", "  ", "Of", " ", 
            "course"}], ",", " ", 
           RowBox[{
           "that", " ", "might", " ", "miss", " ", "a", " ", "few", " ", 
            "large", " ", "craters"}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"astcraters", "=", 
          RowBox[{"Import", "[", 
           RowBox[{
            RowBox[{"FileNameJoin", "[", 
             RowBox[{"{", 
              RowBox[{
              "dir", ",", "\"\<data/Asteroid_crater_count_data\>\"", ",", 
               RowBox[{
                RowBox[{"ToString", "[", "newname", "]"}], "<>", 
                "\"\<cratercum\>\""}]}], "}"}], "]"}], ",", "\"\<nb\>\""}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"astcraters", "=", 
          RowBox[{"Transpose", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"astcraters", "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
             RowBox[{"upscalefac", " ", 
              RowBox[{"astcraters", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "2"}], "]"}], "]"}]}]}], "}"}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"smallest", "=", 
          RowBox[{
           RowBox[{"Min", "[", 
            RowBox[{"astcraters", "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], 
           "\[IndentingNewLine]", 
           RowBox[{"Print", "[", 
            RowBox[{"\"\<the smallest in the data is \>\"", ",", "smallest"}],
             "]"}]}]}]}], ",", 
        RowBox[{"astcraters", "=", 
         RowBox[{"{", " ", "}"}]}]}], "]"}]}]}], "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"for", " ", "other", " ", "asteroids"}], ",", " ", 
      RowBox[{
      "need", " ", "to", " ", "include", " ", "name", " ", "and", " ", "path",
        " ", "here"}]}], " ", "*)"}], "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"these", " ", "cases", " ", "run", " ", "very", " ", 
       RowBox[{"fast", ".", "  ", "to"}], " ", "get", " ", "completeness", 
       " ", "in", " ", "the", " ", "calculated", " ", "crater", " ", 
       "count"}], ",", 
      RowBox[{
      "I", " ", "decrease", " ", "the", " ", "min", " ", "impactor", " ", 
       "size", " ", "for", " ", "the", " ", "explicit", " ", "calcs", " ", 
       "to", " ", "a", " ", "smaller", " ", "number", "  ", "Too", " ", 
       "small", " ", "and", " ", "the", " ", "dynamic", " ", "plot", " ", 
       "of", " ", "the", " ", "cratering", " ", "will", " ", "take", " ", "a",
        " ", "long", " ", "time"}]}], " ", "*)"}], "]"}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Print", "[", "\"\<and so on  \>\"", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"tmaxby", "=", 
   RowBox[{"1.", " ", "tmaxby"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"tmax", "=", 
   RowBox[{"tmaxby", " ", 
    RowBox[{"10", "^", "9"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"endtime", "=", "tmax"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dlist", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dmax", "=", 
   RowBox[{"Min", "[", 
    RowBox[{"dmax", ",", 
     RowBox[{"cumdistr", "[", 
      RowBox[{"[", 
       RowBox[{"1", ",", "1"}], "]"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dmin", "=", 
   RowBox[{"Max", "[", 
    RowBox[{"dmin", ",", "dialast"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"dmax", "\[NotEqual]", "dmin"}], ",", 
    RowBox[{"exact", "=", "False"}], ",", 
    RowBox[{"exact", "=", "True"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"tumbleangle", "=", 
   RowBox[{"tumbleangle\:02da", " ", "Degree"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"probi", "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"velfac", "*", "2.85"}], ")"}], "/", 
    RowBox[{"10", "^", "18"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"omegs", "=", 
   RowBox[{"Sqrt", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"4", "*", 
       RowBox[{"(", 
        RowBox[{"Pi", "/", "3"}], ")"}], "*", "6.67", "*", "dens"}], ")"}], 
     "/", 
     RowBox[{"10", "^", "20"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"nhistplots", "=", 
    RowBox[{"Max", "[", 
     RowBox[{"1", ",", 
      RowBox[{"Min", "[", 
       RowBox[{"nhistplots", ",", "nasteroids"}], "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"binfirst", "=", 
   RowBox[{
    RowBox[{"astnum", "[", "dmax", "]"}], "[", 
    RowBox[{"[", "2", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"binlast1", "=", 
    RowBox[{
     RowBox[{"astnum", "[", "diameterlast", "]"}], "[", 
     RowBox[{"[", "2", "]"}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "limit", " ", "for", " ", "constant", " ", "ratio", " ", "of", " ", 
    "targets", " ", "to", " ", "population"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"binlast", "=", 
   RowBox[{
    RowBox[{"astnum", "[", "dmin", "]"}], "[", 
    RowBox[{"[", "2", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"!", "famflg"}], ",", 
     RowBox[{
      RowBox[{"ntopick", "=", 
       RowBox[{"Table", "[", 
        RowBox[{"0", ",", 
         RowBox[{"numcum", "-", "1"}]}], "]"}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "number", " ", "of", " ", "test", " ", "asteroids", " ", "in", " ", 
        "each", " ", "differential", " ", "bin"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"calcnasteroids", "[", "]"}]}]}], "]"}], ";"}], "  ", 
  RowBox[{"(*", " ", 
   RowBox[{"finds", " ", "ntopick"}], " ", "*)"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"ndmin", "=", 
   RowBox[{"Round", "[", 
    RowBox[{
     RowBox[{"astnum", "[", "dmin", "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"rmin", "=", 
   RowBox[{"dmin", "/", "2"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rmax", "=", 
   RowBox[{"dmax", "/", "2"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ndmax", "=", 
   RowBox[{"Round", "[", 
    RowBox[{
     RowBox[{"astnum", "[", "dmax", "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"massmin", "=", 
    RowBox[{"4", "*", 
     RowBox[{"(", 
      RowBox[{"Pi", "/", "3"}], ")"}], "*", 
     RowBox[{"rmin", "^", "3"}], "*", "dens"}]}], ";"}], "  ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"mass", " ", "of", " ", "smallest"}], ",", " ", 
    RowBox[{"largest", " ", "target"}]}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"massmax", "=", 
   RowBox[{"4", "*", 
    RowBox[{"(", 
     RowBox[{"Pi", "/", "3"}], ")"}], "*", 
    RowBox[{"rmax", "^", "3"}], "*", "dens"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"velave", "=", 
    RowBox[{"velfac", "*", "5.29"}]}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"this", " ", "is", " ", "used", " ", "for", " ", "estimates"}], 
    ",", " ", 
    RowBox[{
    "the", " ", "velocity", " ", "population", " ", "is", " ", "used", " ", 
     "for", " ", "histories"}]}], " ", "*)"}], "\[IndentingNewLine]", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "these", " ", "are", " ", "for", " ", "the", " ", "curves", " ", "of", " ",
     "probable", " ", "largest", " ", "crater"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"factor", "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"-", 
      RowBox[{"Log", "[", 
       RowBox[{"(", 
        RowBox[{"1", "-", "prob"}], ")"}], "]"}]}], ")"}], "^", 
    RowBox[{"-", 
     RowBox[{"(", 
      RowBox[{"1", "/", "alpha0"}], ")"}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"probfacs", "=", 
    RowBox[{"{", 
     RowBox[{".9", ",", ".63", ",", ".5", ",", ".3", ",", ".10"}], "}"}]}], 
   ";"}], "  ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "the", " ", "probability", " ", "levels", " ", "for", " ", "plotting", " ",
     "max", " ", "expected", " ", "crater"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"facvals", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"factor", "/.", 
      RowBox[{"prob", "\[Rule]", 
       RowBox[{"probfacs", "[", 
        RowBox[{"[", "i", "]"}], "]"}]}]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "5"}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"nwanted", "=", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "5", ",", "10", ",", "30", ",", "100"}], 
     "}"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"lostfrombins", "=", 
    RowBox[{"Which", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"depleteword", "\[Equal]", "\"\<Bottke\>\""}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"depletionbottke", "[", 
         RowBox[{"bindias", "[", 
          RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", 
          RowBox[{"numcum", "-", "1"}]}], "}"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"depleteword", "\[Equal]", "\"\<Bottke2\>\""}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"depletionbottke2", "[", 
         RowBox[{"bindias", "[", 
          RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", 
          RowBox[{"numcum", "-", "1"}]}], "}"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"depleteword", "\[Equal]", "\"\<O'Brien\>\""}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"depletionobrien", "[", 
         RowBox[{"bindias", "[", 
          RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", 
          RowBox[{"numcum", "-", "1"}]}], "}"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"depleteword", "\[Equal]", "\"\<O'Brien2\>\""}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"depletionobrien2", "[", 
         RowBox[{"bindias", "[", 
          RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", 
          RowBox[{"numcum", "-", "1"}]}], "}"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"depleteword", "\[Equal]", "\"\<Obrienpluspower\>\""}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"depletionobpluspower", "[", 
         RowBox[{"bindias", "[", 
          RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", 
          RowBox[{"numcum", "-", "1"}]}], "}"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"depleteword", "\[Equal]", "\"\<None\>\""}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Table", "[", 
       RowBox[{"0", ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", 
          RowBox[{"numcum", "-", "1"}]}], "}"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"depleteword", "\[Equal]", "\"\<Not Relevant\>\""}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Table", "[", 
       RowBox[{"0", ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", 
          RowBox[{"numcum", "-", "1"}]}], "}"}]}], "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"totaldepletion", "=", 
    RowBox[{"Table", "[", 
     RowBox[{"0", ",", 
      RowBox[{"numcum", "-", "1"}]}], "]"}]}], ";"}], "  ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "for", " ", "totals", " ", "numbers", " ", "in", " ", "each", " ", "bin"}],
    " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"depletemasses", "=", 
    RowBox[{"Table", "[", 
     RowBox[{"0", ",", 
      RowBox[{"numcum", "-", "1"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{
   "for", " ", "total", " ", "depletion", " ", "masses", " ", "in", " ", 
    "each", " ", "bin"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"lostfromsmallestbin", "=", 
    RowBox[{"lostfrombins", "[", 
     RowBox[{"[", "binlast", "]"}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"from", " ", "the", " ", "depletion", " ", "model"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Print", "[", 
     RowBox[{"{", 
      RowBox[{"binfirst", ",", "binlast1", ",", "binlast"}], "}"}], "]"}], 
    ";"}], "*)"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   StyleBox[
    RowBox[{
    "construct", " ", "the", " ", "list", " ", "of", " ", "test", " ", 
     "asteroids", " ", "unless", " ", "it", " ", "is", " ", "a", " ", 
     "family"}],
    FontColor->RGBColor[1, 0, 0]], " ", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"!", "famflg"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{"exact", ",", " ", 
       RowBox[{"dlist", "=", 
        RowBox[{"ConstantArray", "[", 
         RowBox[{"dmin", ",", "nasteroids"}], "]"}]}], " ", ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"else", " ", "a", " ", "range"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"Do", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Do", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"d", "=", 
              RowBox[{"RandomReal", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"cumdistr", "[", 
                  RowBox[{"[", 
                   RowBox[{"ibin", ",", "1"}], "]"}], "]"}], ",", 
                 RowBox[{"cumdistr", "[", 
                  RowBox[{"[", 
                   RowBox[{
                    RowBox[{"ibin", "+", "1"}], ",", "1"}], "]"}], "]"}]}], 
                "}"}], "]"}]}], ";", "\[IndentingNewLine]", "  ", 
             RowBox[{"(*", " ", 
              RowBox[{
              "the", " ", "original", " ", "diameter", " ", "of", " ", "this",
                " ", "random", " ", "target"}], " ", "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"dlist", ",", "d"}], "]"}], ";"}], 
            "\[IndentingNewLine]", ")"}], ",", 
           RowBox[{"ntopick", "[", 
            RowBox[{"[", "ibin", "]"}], "]"}]}], "]"}], "\[IndentingNewLine]",
          ",", 
         RowBox[{"{", 
          RowBox[{"ibin", ",", "binfirst", ",", "binlast"}], "}"}]}], "]"}]}],
       "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", "else", " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"dlist", "=", "family0pts"}]}], "]"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"does", " ", "not", " ", "use", " ", "ntopick"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"dmax", "=", 
    RowBox[{"Max", "[", "dlist", "]"}]}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "if", " ", "large", " ", "ones", " ", "included", " ", "add", " ", "some", 
    " ", "exact", " ", 
    RowBox[{"ones", ".", " ", "except"}], " ", "i", " ", "dont", " ", "know", 
    " ", "the", " ", "original", " ", "diameter"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"dlist", "=", 
    RowBox[{"RandomSample", "[", "dlist", "]"}]}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"shuffle", " ", "the", " ", "order"}], ",", " ", 
    RowBox[{
    "otherwise", " ", "all", " ", "the", " ", "big", " ", "ones", " ", "are", 
     " ", "first"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "LOAD", " ", "THE", " ", "astsizetype", " ", "array", " ", "for", " ", 
    "the", " ", "first", " ", "timestep"}], " ", "*)"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"astsizetype", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
       "}"}], ",", 
      RowBox[{"{", "nasteroids", "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"diameter", ",", " ", "type", ",", " ", 
    RowBox[{
    "flag", " ", "for", " ", "pinup", " ", "in", " ", "transition", " ", 
     "region"}], ",", "  ", 
    RowBox[{"the", " ", "value", " ", "of", " ", "grav", " ", "limit"}], ",", 
    "\[IndentingNewLine]", "zeta0", ",", " ", "ashape", ",", " ", "beta"}], 
   " ", "*)"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"astsizetype", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", "1"}], "]"}], "]"}], "=", "dlist"}], ";"}], "  ", 
  RowBox[{"(*", 
   RowBox[{
   "initial", " ", "values", " ", "in", " ", "here", " ", "for", " ", 
    "safekeeping"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"load", " ", "types"}], "*)"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"asttype", "\[Equal]", "\"\<25-75 Mixture\>\""}], ",", 
     "\[IndentingNewLine]", "\n", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"ntype", "=", 
         RowBox[{"RandomInteger", "[", 
          RowBox[{"{", 
           RowBox[{"1", ",", "4"}], "}"}], "]"}]}], ";", "\n", 
        "               ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"ntype", "==", "1"}], ",", 
          RowBox[{"asttypethis", "=", "\"\<S-Type\>\""}], ",", 
          "\[IndentingNewLine]", "     ", 
          RowBox[{"asttypethis", "=", "\"\<C-Type\>\""}]}], "]"}], " ", ";", 
        " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"astsizetype", "[", 
          RowBox[{"[", 
           RowBox[{"iast", ",", "2"}], "]"}], "]"}], "=", "asttypethis"}]}], 
       ",", 
       RowBox[{"{", 
        RowBox[{"iast", ",", "nasteroids"}], "}"}]}], " ", "]"}], ",", 
     "\[IndentingNewLine]", "\n", 
     RowBox[{
      RowBox[{"astsizetype", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "2"}], "]"}], "]"}], "=", "asttype"}]}], "]"}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"astsizetype", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", "3"}], "]"}], "]"}], "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"RandomReal", "[", 
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}], "]"}], ">", "spinupratio"}], ",", 
        "True", ",", "False"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "nasteroids"}], "}"}]}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "now", " ", "used", " ", "to", " ", "determine", " ", "a", " ", "few", 
     " ", "that", " ", "can", " ", "spin", " ", "past", " ", "gravlimit", " ",
      "between", " ", 
     RowBox[{"dcenter", "/", "3.5"}]}], ",", " ", 
    RowBox[{"2", " ", 
     RowBox[{"dcenter", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Max", "[", 
       RowBox[{"0", ",", 
        RowBox[{"RandomReal", "[", 
         RowBox[{"{", 
          RowBox[{"diaforgravlim", ",", 
           RowBox[{"10", "diaforgravlim"}]}], "}"}], "]"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "nasteroids"}], "}"}]}], "]"}], ";"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "here", " ", "are", " ", "chances", " ", "of", " ", "being", " ", "grav", 
    " ", "limited", " ", "as", " ", "a", " ", "function", " ", "of", " ", 
    RowBox[{"diametr", ".", " ", "the"}], " ", "CDF"}], "*)"}], "\n", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     GraphicsBox[{
       {RGBColor[0.92, 0.488, 0.2432], EdgeForm[{Opacity[0.581], Thickness[
        Small]}], {}, 
        {RGBColor[0.92, 0.488, 0.2432], EdgeForm[{Opacity[0.581], Thickness[
         Small]}], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{0.04, 0}, {0.06, 2.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{35.096372505868544`, 39.90476452464789}, {
               9.529915932339096, 10.090770341241164`}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox[
           "2", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
            False]],
          Annotation[#, 
           Style[2, {FontFamily -> "Helvetica", FontSize -> 14}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{0.06, 0}, {0.08, 4.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{39.40476452464789, 44.21315654342723}, {
               9.469061523437027, 10.090770341241164`}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 4]& ,
            TagBoxNote->"4"],
           StyleBox[
           "4", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
            False]],
          Annotation[#, 
           Style[4, {FontFamily -> "Helvetica", FontSize -> 14}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{0.08, 0}, {0.1, 32.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{43.71315654342723, 48.521548562206576`}, {
               8.617099798808066, 10.090770341241164`}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 32]& ,
            TagBoxNote->"32"],
           StyleBox[
           "32", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
            False]],
          Annotation[#, 
           Style[32, {FontFamily -> "Helvetica", FontSize -> 14}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{0.1, 0}, {0.12, 106.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{48.021548562206576`, 52.82994058098592}, {
               6.365486669431528, 10.090770341241164`}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 106]& ,
            TagBoxNote->"106"],
           StyleBox[
           "106", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
            False]],
          Annotation[#, 
           Style[106, {FontFamily -> "Helvetica", FontSize -> 14}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{0.12, 0}, {0.14, 302.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{52.32994058098592, 57.13833259976526}, {
               0.4017545970288037, 10.090770341241164`}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 302]& ,
            TagBoxNote->"302"],
           StyleBox[
           "302", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
            False]],
          Annotation[#, 
           Style[302, {FontFamily -> "Helvetica", FontSize -> 14}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{0.14, 0}, {0.16, 582.}, "RoundingRadius" -> 0]},
              ImageSizeCache->{{56.63833259976526, 
               61.44672461854461}, {-8.117862649260804, 10.090770341241164`}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 582]& ,
            TagBoxNote->"582"],
           StyleBox[
           "582", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
            False]],
          Annotation[#, 
           Style[582, {FontFamily -> "Helvetica", FontSize -> 14}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{0.16, 0}, {0.18, 1039.}, "RoundingRadius" -> 0]},
              
              
              ImageSizeCache->{{60.94672461854461, 
               65.75511663732394}, {-22.023095083383485`, 
               10.090770341241164`}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 1039]& ,
            TagBoxNote->"1039"],
           StyleBox[
           "1039", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
            False]],
          Annotation[#, 
           Style[1039, {FontFamily -> "Helvetica", FontSize -> 14}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{0.18, 0}, {0.2, 1298.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{65.25511663732394, 
               70.0635086561033}, {-29.903741036201364`, 
               10.090770341241164`}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 1298]& ,
            TagBoxNote->"1298"],
           StyleBox[
           "1298", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
            False]],
          Annotation[#, 
           Style[1298, {FontFamily -> "Helvetica", FontSize -> 14}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{0.2, 0}, {0.22, 1299.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{69.5635086561033, 
               74.37190067488262}, {-29.9341682406524, 10.090770341241164`}}],
             
             "DelayedMouseEffectStyle"],
            StatusArea[#, 1299]& ,
            TagBoxNote->"1299"],
           StyleBox[
           "1299", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
            False]],
          Annotation[#, 
           Style[1299, {FontFamily -> "Helvetica", FontSize -> 14}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{0.22, 0}, {0.24, 967.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{73.87190067488262, 
               78.68029269366197}, {-19.83233636290901, 10.090770341241164`}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 967]& ,
            TagBoxNote->"967"],
           StyleBox[
           "967", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
            False]],
          Annotation[#, 
           Style[967, {FontFamily -> "Helvetica", FontSize -> 14}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{0.24, 0}, {0.26, 609.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{78.18029269366197, 
               82.98868471244131}, {-8.939397169438728, 10.090770341241164`}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 609]& ,
            TagBoxNote->"609"],
           StyleBox[
           "609", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
            False]],
          Annotation[#, 
           Style[609, {FontFamily -> "Helvetica", FontSize -> 14}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{0.26, 0}, {0.28, 305.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{82.48868471244131, 87.29707673122067}, {
               0.31047298367570164`, 10.090770341241164`}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 305]& ,
            TagBoxNote->"305"],
           StyleBox[
           "305", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
            False]],
          Annotation[#, 
           Style[305, {FontFamily -> "Helvetica", FontSize -> 14}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{0.28, 0}, {0.3, 107.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{86.79707673122067, 91.60546875}, {
               6.335059464980493, 10.090770341241164`}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 107]& ,
            TagBoxNote->"107"],
           StyleBox[
           "107", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
            False]],
          Annotation[#, 
           Style[107, {FontFamily -> "Helvetica", FontSize -> 14}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{0.3, 0}, {0.32, 44.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{91.10546875, 95.91386076877934}, {
               8.251973345395655, 10.090770341241164`}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 44]& ,
            TagBoxNote->"44"],
           StyleBox[
           "44", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
            False]],
          Annotation[#, 
           Style[44, {FontFamily -> "Helvetica", FontSize -> 14}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{0.32, 0}, {0.34, 9.}, "RoundingRadius" -> 0]},
              ImageSizeCache->{{95.41386076877934, 100.22225278755869`}, {
               9.316925501181856, 10.090770341241164`}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 9]& ,
            TagBoxNote->"9"],
           StyleBox[
           "9", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
            False]],
          Annotation[#, 
           Style[9, {FontFamily -> "Helvetica", FontSize -> 14}], 
           "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, False},
      AxesLabel->{None, None},
      AxesOrigin->{0.034, 0},
      Frame->True,
      FrameLabel->{{None, None}, {None, None}},
      FrameStyle->Automatic,
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{Automatic, Automatic},
      GridLinesStyle->Directive[
        GrayLevel[0.4, 0.5], 
        AbsoluteThickness[1], 
        AbsoluteDashing[{1, 2}]],
      ImageMargins->{{0., 0.}, {0., 0.328125}},
      ImageSize->{105.85546875, Automatic},
      LabelStyle->{FontFamily -> "Helvetica", FontSize -> 14},
      PlotRange->{{0.04, 0.34}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {None, 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], 
     GraphicsBox[{
       {RGBColor[0.92, 0.488, 0.2432], EdgeForm[{Opacity[
        0.49699999999999994`], Thickness[Small]}], {}, 
        {RGBColor[0.92, 0.488, 0.2432], EdgeForm[{Opacity[
         0.49699999999999994`], Thickness[Small]}], 
         RectangleBox[{-1.8, 0}, {-1.6, 2.},
          RoundingRadius->0], RectangleBox[{-1.6, 0}, {-1.4, 2.},
          RoundingRadius->0], RectangleBox[{-1.4, 0}, {-1.2, 9.},
          RoundingRadius->0], RectangleBox[{-1.2, 0}, {-1., 8.},
          RoundingRadius->0], RectangleBox[{-1., 0}, {-0.8, 11.},
          RoundingRadius->0], RectangleBox[{-0.8, 0}, {-0.6, 19.},
          RoundingRadius->0], RectangleBox[{-0.6, 0}, {-0.4, 45.},
          RoundingRadius->0], RectangleBox[{-0.4, 0}, {-0.2, 64.},
          RoundingRadius->0], RectangleBox[{-0.2, 0}, {0., 73.},
          RoundingRadius->0], RectangleBox[{0., 0}, {0.2, 97.},
          RoundingRadius->0], RectangleBox[{0.2, 0}, {0.4, 140.},
          RoundingRadius->0], RectangleBox[{0.4, 0}, {0.6, 149.},
          RoundingRadius->0], RectangleBox[{0.6, 0}, {0.8, 175.},
          RoundingRadius->0], RectangleBox[{0.8, 0}, {1., 190.},
          RoundingRadius->0], RectangleBox[{1., 0}, {1.2, 171.},
          RoundingRadius->0], RectangleBox[{1.2, 0}, {1.4, 142.},
          RoundingRadius->0], RectangleBox[{1.4, 0}, {1.6, 100.},
          RoundingRadius->0], RectangleBox[{1.6, 0}, {1.8, 92.},
          RoundingRadius->0], RectangleBox[{1.8, 0}, {2., 59.},
          RoundingRadius->0], RectangleBox[{2., 0}, {2.2, 51.},
          RoundingRadius->0], RectangleBox[{2.2, 0}, {2.4, 29.},
          RoundingRadius->0], RectangleBox[{2.4, 0}, {2.6, 24.},
          RoundingRadius->0], RectangleBox[{2.6, 0}, {2.8, 13.},
          RoundingRadius->0], RectangleBox[{2.8, 0}, {3., 6.},
          RoundingRadius->0], RectangleBox[{3., 0}, {3.2, 2.},
          RoundingRadius->0], RectangleBox[{3.2, 0}, {3.4, 3.},
          RoundingRadius->0], RectangleBox[{3.4, 0}, {3.6, 1.},
          
          RoundingRadius->
           0]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, False},
      AxesLabel->{None, None},
      AxesOrigin->{-1.9080000000000001`, 0},
      Frame->True,
      FrameLabel->{{None, None}, {None, None}},
      FrameStyle->Automatic,
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{Automatic, Automatic},
      GridLinesStyle->Directive[
        GrayLevel[0.4, 0.5], 
        AbsoluteThickness[1], 
        AbsoluteDashing[{1, 2}]],
      LabelStyle->{FontFamily -> "Helvetica", FontSize -> 14},
      PlotRange->{{-1.8, 3.6}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {None, 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], 
     GraphicsBox[{
       {RGBColor[0.92, 0.488, 0.2432], EdgeForm[{Opacity[
        0.48999999999999994`], Thickness[Small]}], {}, 
        {RGBColor[0.92, 0.488, 0.2432], EdgeForm[{Opacity[
         0.48999999999999994`], Thickness[Small]}], 
         RectangleBox[{0.04, 0}, {0.06, 366.},
          RoundingRadius->0], RectangleBox[{0.06, 0}, {0.08, 671.},
          RoundingRadius->0], RectangleBox[{0.08, 0}, {0.1, 713.},
          RoundingRadius->0], RectangleBox[{0.1, 0}, {0.12, 698.},
          RoundingRadius->0], RectangleBox[{0.12, 0}, {0.14, 679.},
          RoundingRadius->0], RectangleBox[{0.14, 0}, {0.16, 704.},
          RoundingRadius->0], RectangleBox[{0.16, 0}, {0.18, 755.},
          RoundingRadius->0], RectangleBox[{0.18, 0}, {0.2, 688.},
          RoundingRadius->0], RectangleBox[{0.2, 0}, {0.22, 725.},
          RoundingRadius->0], RectangleBox[{0.22, 0}, {0.24, 746.},
          RoundingRadius->0], RectangleBox[{0.24, 0}, {0.26, 685.},
          RoundingRadius->0], RectangleBox[{0.26, 0}, {0.28, 671.},
          RoundingRadius->0], RectangleBox[{0.28, 0}, {0.3, 722.},
          RoundingRadius->0], RectangleBox[{0.3, 0}, {0.32, 737.},
          RoundingRadius->0], RectangleBox[{0.32, 0}, {0.34, 709.},
          RoundingRadius->0], RectangleBox[{0.34, 0}, {0.36, 711.},
          RoundingRadius->0], RectangleBox[{0.36, 0}, {0.38, 692.},
          RoundingRadius->0], RectangleBox[{0.38, 0}, {0.4, 700.},
          RoundingRadius->0], RectangleBox[{0.4, 0}, {0.42, 707.},
          RoundingRadius->0], RectangleBox[{0.42, 0}, {0.44, 697.},
          RoundingRadius->0], RectangleBox[{0.44, 0}, {0.46, 682.},
          RoundingRadius->0], RectangleBox[{0.46, 0}, {0.48, 742.},
          RoundingRadius->0], RectangleBox[{0.48, 0}, {0.5, 715.},
          RoundingRadius->0], RectangleBox[{0.5, 0}, {0.52, 682.},
          RoundingRadius->0], RectangleBox[{0.52, 0}, {0.54, 702.},
          RoundingRadius->0], RectangleBox[{0.54, 0}, {0.56, 693.},
          RoundingRadius->0], RectangleBox[{0.56, 0}, {0.58, 782.},
          RoundingRadius->0], RectangleBox[{0.58, 0}, {0.6, 729.},
          
          RoundingRadius->
           0]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, False},
      AxesLabel->{None, None},
      AxesOrigin->{0.0288, 0},
      Frame->True,
      FrameLabel->{{None, None}, {None, None}},
      FrameStyle->Automatic,
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{Automatic, Automatic},
      GridLinesStyle->Directive[
        GrayLevel[0.4, 0.5], 
        AbsoluteThickness[1], 
        AbsoluteDashing[{1, 2}]],
      LabelStyle->{FontFamily -> "Helvetica", FontSize -> 14},
      PlotRange->{{0.04, 0.6}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {None, 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "here", " ", "are", " ", "chances", " ", "of", " ", "being", " ", 
       "limited", " ", "as", " ", "a", " ", "function", " ", "of", " ", 
       RowBox[{"diametr", ".", " ", "the"}], " ", "CDF"}], "*)"}], 
     "\[IndentingNewLine]", 
     GraphicsBox[{
       {RGBColor[0.92, 0.488, 0.2432], EdgeForm[{Opacity[0.469], Thickness[
        Small]}], {}, 
        {RGBColor[0.92, 0.488, 0.2432], EdgeForm[{Opacity[0.469], Thickness[
         Small]}], RectangleBox[{0., 0}, {0.02, 0.038627889634601044},
          RoundingRadius->0], 
         RectangleBox[{0.02, 0}, {0.04, 0.05577926920208799},
          RoundingRadius->0], 
         RectangleBox[{0.04, 0}, {0.06, 0.08262490678598061},
          RoundingRadius->0], 
         RectangleBox[{0.06, 0}, {0.08, 0.11782252050708426},
          RoundingRadius->0], 
         RectangleBox[{0.08, 0}, {0.1, 0.15913497390007456},
          RoundingRadius->0], 
         RectangleBox[{0.1, 0}, {0.12, 0.21372110365398955},
          RoundingRadius->0], 
         RectangleBox[{0.12, 0}, {0.14, 0.2768083519761372},
          RoundingRadius->0], 
         RectangleBox[{0.14, 0}, {0.16, 0.34317673378076063},
          RoundingRadius->0], 
         RectangleBox[{0.16, 0}, {0.18, 0.42013422818791946},
          RoundingRadius->0], 
         RectangleBox[{0.18, 0}, {0.2, 0.5017151379567487},
          RoundingRadius->0], 
         RectangleBox[{0.2, 0}, {0.22, 0.5815063385533183},
          RoundingRadius->0], 
         RectangleBox[{0.22, 0}, {0.24, 0.6563758389261745},
          RoundingRadius->0], 
         RectangleBox[{0.24, 0}, {0.26, 0.722296793437733},
          RoundingRadius->0], 
         RectangleBox[{0.26, 0}, {0.28, 0.7859806114839671},
          RoundingRadius->0], 
         RectangleBox[{0.28, 0}, {0.3, 0.8402684563758389},
          RoundingRadius->0], 
         RectangleBox[{0.3, 0}, {0.32, 0.8830723340790455},
          RoundingRadius->0], 
         RectangleBox[{0.32, 0}, {0.34, 0.9176733780760626},
          RoundingRadius->0], 
         RectangleBox[{0.34, 0}, {0.36, 0.945413870246085},
          RoundingRadius->0], 
         RectangleBox[{0.36, 0}, {0.38, 0.963758389261745},
          RoundingRadius->0], 
         RectangleBox[{0.38, 0}, {0.4, 0.9767337807606263},
          RoundingRadius->0], 
         RectangleBox[{0.4, 0}, {0.42, 0.986428038777032},
          RoundingRadius->0], 
         RectangleBox[{0.42, 0}, {0.44, 0.9919463087248321},
          RoundingRadius->0], 
         RectangleBox[{0.44, 0}, {0.46, 0.995227442207308},
          RoundingRadius->0], 
         RectangleBox[{0.46, 0}, {0.48, 0.9967188665175242},
          RoundingRadius->0], 
         RectangleBox[{0.48, 0}, {0.5, 0.9980611483967188},
          RoundingRadius->0], 
         RectangleBox[{0.5, 0}, {0.52, 0.9989560029828486},
          RoundingRadius->0], 
         RectangleBox[{0.52, 0}, {0.54, 0.9997017151379567},
          RoundingRadius->0], 
         RectangleBox[{0.54, 0}, {0.56, 0.9997017151379567},
          RoundingRadius->0], 
         RectangleBox[{0.56, 0}, {0.58, 0.9998508575689783},
          RoundingRadius->0], 
         RectangleBox[{0.58, 0}, {0.6, 0.9998508575689783},
          RoundingRadius->0], RectangleBox[{0.6, 0}, {0.62, 1.},
          
          RoundingRadius->
           0]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, False},
      AxesLabel->{None, None},
      AxesOrigin->{-0.0124, 0},
      Frame->True,
      FrameLabel->{{None, None}, {None, None}},
      FrameStyle->Automatic,
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{Automatic, Automatic},
      GridLinesStyle->Directive[
        GrayLevel[0.4, 0.5], 
        AbsoluteThickness[1], 
        AbsoluteDashing[{1, 2}]],
      LabelStyle->{FontFamily -> "Helvetica", FontSize -> 14},
      PlotRange->{{0., 0.62}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {None, 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], 
     GraphicsBox[{
       {RGBColor[0.92, 0.488, 0.2432], EdgeForm[{Opacity[
        0.33599999999999997`], Thickness[Small]}], {}, 
        {RGBColor[0.92, 0.488, 0.2432], EdgeForm[{Opacity[
         0.33599999999999997`], Thickness[Small]}], 
         RectangleBox[{0.1, 0}, {0.102, 0.021029082774049215},
          RoundingRadius->0], 
         RectangleBox[{0.102, 0}, {0.104, 0.04250559284116331},
          RoundingRadius->0], 
         RectangleBox[{0.104, 0}, {0.106, 0.06129753914988814},
          RoundingRadius->0], 
         RectangleBox[{0.106, 0}, {0.108, 0.08620432513049962},
          RoundingRadius->0], 
         RectangleBox[{0.108, 0}, {0.11, 0.10574198359433258},
          RoundingRadius->0], 
         RectangleBox[{0.11, 0}, {0.112, 0.12363907531692767},
          RoundingRadius->0], 
         RectangleBox[{0.112, 0}, {0.114, 0.14272930648769575},
          RoundingRadius->0], 
         RectangleBox[{0.114, 0}, {0.116, 0.16375838926174496},
          RoundingRadius->0], 
         RectangleBox[{0.116, 0}, {0.118, 0.18448918717375093},
          RoundingRadius->0], 
         RectangleBox[{0.118, 0}, {0.12, 0.20447427293064876},
          RoundingRadius->0], 
         RectangleBox[{0.12, 0}, {0.122, 0.22252050708426546},
          RoundingRadius->0], 
         RectangleBox[{0.122, 0}, {0.124, 0.24101416853094704},
          RoundingRadius->0], 
         RectangleBox[{0.124, 0}, {0.126, 0.2614466815809098},
          RoundingRadius->0], 
         RectangleBox[{0.126, 0}, {0.128, 0.28113348247576436},
          RoundingRadius->0], 
         RectangleBox[{0.128, 0}, {0.13, 0.29903057419835943},
          RoundingRadius->0], 
         RectangleBox[{0.13, 0}, {0.132, 0.3215510812826249},
          RoundingRadius->0], 
         RectangleBox[{0.132, 0}, {0.134, 0.34436987322893364},
          RoundingRadius->0], 
         RectangleBox[{0.134, 0}, {0.136, 0.36793437733035045},
          RoundingRadius->0], 
         RectangleBox[{0.136, 0}, {0.138, 0.38762117822520503},
          RoundingRadius->0], 
         RectangleBox[{0.138, 0}, {0.14, 0.4086502609992543},
          RoundingRadius->0], 
         RectangleBox[{0.14, 0}, {0.142, 0.4298284862043251},
          RoundingRadius->0], 
         RectangleBox[{0.142, 0}, {0.144, 0.4526472781506338},
          RoundingRadius->0], 
         RectangleBox[{0.144, 0}, {0.146, 0.4699478001491424},
          RoundingRadius->0], 
         RectangleBox[{0.146, 0}, {0.148, 0.49157345264727814},
          RoundingRadius->0], 
         RectangleBox[{0.148, 0}, {0.15, 0.5121551081282625},
          RoundingRadius->0], 
         RectangleBox[{0.15, 0}, {0.152, 0.5312453392990305},
          RoundingRadius->0], 
         RectangleBox[{0.152, 0}, {0.154, 0.5533184190902312},
          RoundingRadius->0], 
         RectangleBox[{0.154, 0}, {0.156, 0.5718120805369127},
          RoundingRadius->0], 
         RectangleBox[{0.156, 0}, {0.158, 0.5903057419835943},
          RoundingRadius->0], 
         RectangleBox[{0.158, 0}, {0.16, 0.6114839671886652},
          RoundingRadius->0], 
         RectangleBox[{0.16, 0}, {0.162, 0.6317673378076062},
          RoundingRadius->0], 
         RectangleBox[{0.162, 0}, {0.164, 0.6519015659955257},
          RoundingRadius->0], 
         RectangleBox[{0.164, 0}, {0.166, 0.6695003728560776},
          RoundingRadius->0], 
         RectangleBox[{0.166, 0}, {0.168, 0.6885906040268456},
          RoundingRadius->0], 
         RectangleBox[{0.168, 0}, {0.17, 0.7115585384041759},
          RoundingRadius->0], 
         RectangleBox[{0.17, 0}, {0.172, 0.7284116331096196},
          RoundingRadius->0], 
         RectangleBox[{0.172, 0}, {0.174, 0.7483967188665175},
          RoundingRadius->0], 
         RectangleBox[{0.174, 0}, {0.176, 0.7664429530201342},
          RoundingRadius->0], 
         RectangleBox[{0.176, 0}, {0.178, 0.7813571961222968},
          RoundingRadius->0], 
         RectangleBox[{0.178, 0}, {0.18, 0.7995525727069351},
          RoundingRadius->0], 
         RectangleBox[{0.18, 0}, {0.182, 0.8201342281879195},
          RoundingRadius->0], 
         RectangleBox[{0.182, 0}, {0.184, 0.8417598806860551},
          RoundingRadius->0], 
         RectangleBox[{0.184, 0}, {0.186, 0.8608501118568233},
          RoundingRadius->0], 
         RectangleBox[{0.186, 0}, {0.188, 0.8827740492170022},
          RoundingRadius->0], 
         RectangleBox[{0.188, 0}, {0.19, 0.9029082774049216},
          RoundingRadius->0], 
         RectangleBox[{0.19, 0}, {0.192, 0.9237882177479493},
          RoundingRadius->0], 
         RectangleBox[{0.192, 0}, {0.194, 0.9425801640566741},
          RoundingRadius->0], 
         RectangleBox[{0.194, 0}, {0.196, 0.9603281133482475},
          RoundingRadius->0], 
         RectangleBox[{0.196, 0}, {0.198, 0.9783743475018642},
          RoundingRadius->0], RectangleBox[{0.198, 0}, {0.2, 1.},
          
          RoundingRadius->
           0]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, False},
      AxesLabel->{None, None},
      AxesOrigin->{0.098, 0},
      Frame->True,
      FrameLabel->{{None, None}, {None, None}},
      FrameStyle->Automatic,
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{Automatic, Automatic},
      GridLinesStyle->Directive[
        GrayLevel[0.4, 0.5], 
        AbsoluteThickness[1], 
        AbsoluteDashing[{1, 2}]],
      LabelStyle->{FontFamily -> "Helvetica", FontSize -> 14},
      PlotRange->{{0.1, 0.2}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {None, 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
  
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"astsizetype", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", "3"}], "]"}], "]"}], "=", 
     RowBox[{"Table", "[", 
      RowBox[{"diaforgravlim", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "nasteroids"}], "}"}]}], "]"}]}], ";"}], "*)"}], 
  " ", " ", 
  RowBox[{"(*", " ", 
   RowBox[{"here", " ", "all", " ", "the", " ", "same"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gravlim3", "=", 
    RowBox[{"gravlimit", " ", 
     RowBox[{"RandomVariate", "[", 
      RowBox[{
       RowBox[{"TriangularDistribution", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{".8", ",", "1.02"}], "}"}], ",", ".95"}], "]"}], ",", 
       "nasteroids"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    GraphicsBox[{
      {RGBColor[0.92, 0.488, 0.2432], EdgeForm[{Opacity[0.581], Thickness[
       Small]}], {}, 
       {RGBColor[0.92, 0.488, 0.2432], EdgeForm[{Opacity[0.581], Thickness[
        Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           TagBox[
            DynamicBox[{
              FEPrivate`If[
               CurrentValue["MouseOver"], 
               EdgeForm[{
                 GrayLevel[0.5], 
                 AbsoluteThickness[1.5], 
                 Opacity[0.66]}], {}, {}], 
              
              RectangleBox[{0.00061, 0}, {0.00062, 13.}, "RoundingRadius" -> 
               0]},
             
             ImageSizeCache->{{26.590720669999968`, 29.781026813999972`}, {
              1.1170981979510535`, 3.1025114552292044`}}],
            "DelayedMouseEffectStyle"],
           StatusArea[#, 13]& ,
           TagBoxNote->"13"],
          StyleBox[
          "13", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
           False]],
         Annotation[#, 
          Style[13, {FontFamily -> "Helvetica", FontSize -> 14}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          TagBox[
           TagBox[
            DynamicBox[{
              FEPrivate`If[
               CurrentValue["MouseOver"], 
               EdgeForm[{
                 GrayLevel[0.5], 
                 AbsoluteThickness[1.5], 
                 Opacity[0.66]}], {}, {}], 
              
              RectangleBox[{0.00062, 0}, {0.00063, 28.}, "RoundingRadius" -> 
               0]},
             
             ImageSizeCache->{{29.281026813999972`, 
              32.47133295799998}, {-0.5968401758314283, 3.1025114552292044`}}],
            "DelayedMouseEffectStyle"],
           StatusArea[#, 28]& ,
           TagBoxNote->"28"],
          StyleBox[
          "28", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
           False]],
         Annotation[#, 
          Style[28, {FontFamily -> "Helvetica", FontSize -> 14}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          TagBox[
           TagBox[
            DynamicBox[{
              FEPrivate`If[
               CurrentValue["MouseOver"], 
               EdgeForm[{
                 GrayLevel[0.5], 
                 AbsoluteThickness[1.5], 
                 Opacity[0.66]}], {}, {}], 
              
              RectangleBox[{0.00063, 0}, {0.00064, 58.}, "RoundingRadius" -> 
               0]},
             
             ImageSizeCache->{{31.971332957999977`, 
              35.16163910199998}, {-4.024716923396392, 3.1025114552292044`}}],
            
            "DelayedMouseEffectStyle"],
           StatusArea[#, 58]& ,
           TagBoxNote->"58"],
          StyleBox[
          "58", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
           False]],
         Annotation[#, 
          Style[58, {FontFamily -> "Helvetica", FontSize -> 14}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          TagBox[
           TagBox[
            DynamicBox[{
              FEPrivate`If[
               CurrentValue["MouseOver"], 
               EdgeForm[{
                 GrayLevel[0.5], 
                 AbsoluteThickness[1.5], 
                 Opacity[0.66]}], {}, {}], 
              
              RectangleBox[{0.00064, 0}, {0.00065, 68.}, "RoundingRadius" -> 
               0]},
             
             ImageSizeCache->{{34.66163910199998, 
              37.85194524599996}, {-5.167342505918048, 3.1025114552292044`}}],
            
            "DelayedMouseEffectStyle"],
           StatusArea[#, 68]& ,
           TagBoxNote->"68"],
          StyleBox[
          "68", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
           False]],
         Annotation[#, 
          Style[68, {FontFamily -> "Helvetica", FontSize -> 14}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          TagBox[
           TagBox[
            DynamicBox[{
              FEPrivate`If[
               CurrentValue["MouseOver"], 
               EdgeForm[{
                 GrayLevel[0.5], 
                 AbsoluteThickness[1.5], 
                 Opacity[0.66]}], {}, {}], 
              
              RectangleBox[{0.00065, 0}, {0.00066, 99.}, "RoundingRadius" -> 
               0]},
             
             ImageSizeCache->{{37.35194524599996, 
              40.54225138999996}, {-8.709481811735177, 3.1025114552292052`}}],
            
            "DelayedMouseEffectStyle"],
           StatusArea[#, 99]& ,
           TagBoxNote->"99"],
          StyleBox[
          "99", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
           False]],
         Annotation[#, 
          Style[99, {FontFamily -> "Helvetica", FontSize -> 14}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          TagBox[
           TagBox[
            DynamicBox[{
              FEPrivate`If[
               CurrentValue["MouseOver"], 
               EdgeForm[{
                 GrayLevel[0.5], 
                 AbsoluteThickness[1.5], 
                 Opacity[0.66]}], {}, {}], 
              
              RectangleBox[{0.00066, 0}, {0.00067, 121.}, "RoundingRadius" -> 
               0]},
             
             ImageSizeCache->{{40.04225138999996, 
              43.232557533999966`}, {-11.223258093282816`, 
              3.1025114552292052`}}],
            "DelayedMouseEffectStyle"],
           StatusArea[#, 121]& ,
           TagBoxNote->"121"],
          StyleBox[
          "121", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
           False]],
         Annotation[#, 
          Style[121, {FontFamily -> "Helvetica", FontSize -> 14}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          TagBox[
           TagBox[
            DynamicBox[{
              FEPrivate`If[
               CurrentValue["MouseOver"], 
               EdgeForm[{
                 GrayLevel[0.5], 
                 AbsoluteThickness[1.5], 
                 Opacity[0.66]}], {}, {}], 
              
              RectangleBox[{0.00067, 0}, {0.00068, 120.}, "RoundingRadius" -> 
               0]},
             
             ImageSizeCache->{{42.732557533999966`, 
              45.922863678}, {-11.108995535030651`, 3.1025114552292052`}}],
            "DelayedMouseEffectStyle"],
           StatusArea[#, 120]& ,
           TagBoxNote->"120"],
          StyleBox[
          "120", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
           False]],
         Annotation[#, 
          Style[120, {FontFamily -> "Helvetica", FontSize -> 14}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          TagBox[
           TagBox[
            DynamicBox[{
              FEPrivate`If[
               CurrentValue["MouseOver"], 
               EdgeForm[{
                 GrayLevel[0.5], 
                 AbsoluteThickness[1.5], 
                 Opacity[0.66]}], {}, {}], 
              
              RectangleBox[{0.00068, 0}, {0.00069, 130.}, "RoundingRadius" -> 
               0]},
             
             ImageSizeCache->{{45.422863678, 
              48.613169821999975`}, {-12.251621117552304`, 
              3.1025114552292052`}}],
            "DelayedMouseEffectStyle"],
           StatusArea[#, 130]& ,
           TagBoxNote->"130"],
          StyleBox[
          "130", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
           False]],
         Annotation[#, 
          Style[130, {FontFamily -> "Helvetica", FontSize -> 14}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          TagBox[
           TagBox[
            DynamicBox[{
              FEPrivate`If[
               CurrentValue["MouseOver"], 
               EdgeForm[{
                 GrayLevel[0.5], 
                 AbsoluteThickness[1.5], 
                 Opacity[0.66]}], {}, {}], 
              RectangleBox[{0.00069, 0}, {0.0007, 169.}, "RoundingRadius" -> 
               0]},
             
             ImageSizeCache->{{48.113169821999975`, 
              51.30347596599998}, {-16.707860889386758`, 
              3.1025114552292052`}}],
            "DelayedMouseEffectStyle"],
           StatusArea[#, 169]& ,
           TagBoxNote->"169"],
          StyleBox[
          "169", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
           False]],
         Annotation[#, 
          Style[169, {FontFamily -> "Helvetica", FontSize -> 14}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          TagBox[
           TagBox[
            DynamicBox[{
              FEPrivate`If[
               CurrentValue["MouseOver"], 
               EdgeForm[{
                 GrayLevel[0.5], 
                 AbsoluteThickness[1.5], 
                 Opacity[0.66]}], {}, {}], 
              
              RectangleBox[{0.0007, 0}, {0.00071, 199.}, "RoundingRadius" -> 
               0]},
             
             ImageSizeCache->{{50.80347596599998, 
              53.993782109999984`}, {-20.13573763695172, 
              3.1025114552292052`}}],
            "DelayedMouseEffectStyle"],
           StatusArea[#, 199]& ,
           TagBoxNote->"199"],
          StyleBox[
          "199", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
           False]],
         Annotation[#, 
          Style[199, {FontFamily -> "Helvetica", FontSize -> 14}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          TagBox[
           TagBox[
            DynamicBox[{
              FEPrivate`If[
               CurrentValue["MouseOver"], 
               EdgeForm[{
                 GrayLevel[0.5], 
                 AbsoluteThickness[1.5], 
                 Opacity[0.66]}], {}, {}], 
              
              RectangleBox[{0.00071, 0}, {0.00072, 216.}, "RoundingRadius" -> 
               0]},
             
             ImageSizeCache->{{53.493782109999984`, 
              56.68408825399999}, {-22.078201127238533`, 
              3.1025114552292052`}}],
            "DelayedMouseEffectStyle"],
           StatusArea[#, 216]& ,
           TagBoxNote->"216"],
          StyleBox[
          "216", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
           False]],
         Annotation[#, 
          Style[216, {FontFamily -> "Helvetica", FontSize -> 14}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          TagBox[
           TagBox[
            DynamicBox[{
              FEPrivate`If[
               CurrentValue["MouseOver"], 
               EdgeForm[{
                 GrayLevel[0.5], 
                 AbsoluteThickness[1.5], 
                 Opacity[0.66]}], {}, {}], 
              
              RectangleBox[{0.00072, 0}, {0.00073, 179.}, "RoundingRadius" -> 
               0]},
             
             ImageSizeCache->{{56.18408825399999, 
              59.374394397999964`}, {-17.85048647190841, 
              3.1025114552292052`}}],
            "DelayedMouseEffectStyle"],
           StatusArea[#, 179]& ,
           TagBoxNote->"179"],
          StyleBox[
          "179", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
           False]],
         Annotation[#, 
          Style[179, {FontFamily -> "Helvetica", FontSize -> 14}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          TagBox[
           TagBox[
            DynamicBox[{
              FEPrivate`If[
               CurrentValue["MouseOver"], 
               EdgeForm[{
                 GrayLevel[0.5], 
                 AbsoluteThickness[1.5], 
                 Opacity[0.66]}], {}, {}], 
              
              RectangleBox[{0.00073, 0}, {0.00074, 162.}, "RoundingRadius" -> 
               0]},
             
             ImageSizeCache->{{58.874394397999964`, 
              62.06470054199997}, {-15.908022981621599`, 
              3.1025114552292052`}}],
            "DelayedMouseEffectStyle"],
           StatusArea[#, 162]& ,
           TagBoxNote->"162"],
          StyleBox[
          "162", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
           False]],
         Annotation[#, 
          Style[162, {FontFamily -> "Helvetica", FontSize -> 14}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          TagBox[
           TagBox[
            DynamicBox[{
              FEPrivate`If[
               CurrentValue["MouseOver"], 
               EdgeForm[{
                 GrayLevel[0.5], 
                 AbsoluteThickness[1.5], 
                 Opacity[0.66]}], {}, {}], 
              
              RectangleBox[{0.00074, 0}, {0.00075, 84.}, "RoundingRadius" -> 
               0]},
             
             ImageSizeCache->{{61.56470054199997, 
              64.75500668599997}, {-6.995543437952693, 3.1025114552292044`}}],
            
            "DelayedMouseEffectStyle"],
           StatusArea[#, 84]& ,
           TagBoxNote->"84"],
          StyleBox[
          "84", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
           False]],
         Annotation[#, 
          Style[84, {FontFamily -> "Helvetica", FontSize -> 14}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          TagBox[
           TagBox[
            DynamicBox[{
              FEPrivate`If[
               CurrentValue["MouseOver"], 
               EdgeForm[{
                 GrayLevel[0.5], 
                 AbsoluteThickness[1.5], 
                 Opacity[0.66]}], {}, {}], 
              
              RectangleBox[{0.00075, 0}, {0.00076, 31.}, "RoundingRadius" -> 
               0]},
             
             ImageSizeCache->{{64.25500668599997, 
              67.44531282999998}, {-0.9396278505879243, 3.1025114552292044`}}],
            "DelayedMouseEffectStyle"],
           StatusArea[#, 31]& ,
           TagBoxNote->"31"],
          StyleBox[
          "31", {FontFamily -> "Helvetica", FontSize -> 14}, StripOnInput -> 
           False]],
         Annotation[#, 
          Style[31, {FontFamily -> "Helvetica", FontSize -> 14}], 
          "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}}},
     AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
     Axes->{False, False},
     AxesLabel->{None, None},
     AxesOrigin->{0.000607, 0},
     Frame->True,
     FrameLabel->{{None, None}, {None, None}},
     FrameStyle->Automatic,
     FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
     GridLines->{Automatic, Automatic},
     GridLinesStyle->Directive[
       GrayLevel[0.4, 0.5], 
       AbsoluteThickness[1], 
       AbsoluteDashing[{1, 2}]],
     ImagePadding->{{26., 25.659279}, {18., 3.872814}},
     ImageSize->{93.6953125, Automatic},
     LabelStyle->{FontFamily -> "Helvetica", FontSize -> 14},
     PlotRange->{{0.000606875, 0.000763125}, {0., 227.3684210526316}},
     PlotRangePadding->Automatic,
     Ticks->{Automatic, Automatic}], "loads", " ", "the", " ", "gravity", " ",
     "limit", " ", 
    RowBox[{"here", ".", "  ", "second"}], " ", "variable", " ", "is", " ", 
    "where", " ", "the", " ", "peak", " ", "is"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"astsizetype", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", "4"}], "]"}], "]"}], "=", "gravlim3"}], ";"}], 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"astsizetype", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", "4"}], "]"}], "]"}], "=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"gravlimit", " ", 
        RowBox[{"Max", "[", 
         RowBox[{"0", ",", 
          RowBox[{"RandomVariate", "[", 
           RowBox[{"NormalDistribution", "[", 
            RowBox[{"1", ",", "0.5"}], "]"}], "]"}]}], "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "nasteroids"}], "}"}]}], "]"}]}], ";"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"astsizetype", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", "5"}], "]"}], "]"}], "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"astsizetype", "[", 
          RowBox[{"[", 
           RowBox[{"i", ",", "2"}], "]"}], "]"}], "\[Equal]", 
         "\"\<C-Type\>\""}], ",", 
        RowBox[{"0.4", " ", "zetafactor"}], ",", 
        RowBox[{"0.8", "  ", "zetafactor"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "nasteroids"}], "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"shape", " ", "parameters"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"astsizetype", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "6"}], "]"}], "]"}], "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"RandomReal", "[", 
      RowBox[{"{", 
       RowBox[{".8", ",", "1"}], "}"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "nasteroids"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"astsizetype", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "7"}], "]"}], "]"}], "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"RandomReal", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"astsizetype", "[", 
         RowBox[{"[", 
          RowBox[{"i", ",", "6"}], "]"}], "]"}], ",", "1"}], "}"}], "]"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "nasteroids"}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"iiplot", "=", "0"}], ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{
   "number", " ", "and", " ", "flag", " ", "for", " ", "history", " ", 
    "plot"}], " ", "*)"}], "\n", " ", 
  RowBox[{"(*", " ", 
   RowBox[{"astsizetype", " ", "loaded"}], " ", "*)"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"cd", "=", "cd0"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"this", " ", "is", " ", "used", " ", "for", " ", "estimates"}], 
    ",", " ", 
    RowBox[{"it", " ", "is", " ", "the", " ", "starting", " ", "one"}], ",", 
    " ", 
    RowBox[{
     RowBox[{
      RowBox[{
      "it", " ", "has", " ", "popfac", " ", "in", " ", "it", " ", "now"}], 
      ".."}], " ", "the", " ", "bin", " ", "distribution", " ", "is", " ", 
     "used", " ", "for", " ", "histories"}]}], " ", "*)"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"originalmass", "=", 
    RowBox[{"massindist", "[", 
     RowBox[{"cumdistr0", ",", "densbar"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"NotebookFind", "[", 
   RowBox[{
   "nb", ",", " ", "\"\<runit\>\"", ",", " ", "All", ",", " ", "CellTags"}], 
   "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"SelectionEvaluate", "[", "nb", "]"}], ";"}]}], "Input",
 CellOpen->False,
 FontFamily->"Arial",
 FontSize->14,
 FontWeight->"Regular",
 FontColor->GrayLevel[0.5],
 Background->GrayLevel[0],
 CellTags->"moreinputcalcs",
 CellLabel->
  "In[306]:=",ExpressionUUID->"a5db4f65-9652-4150-b723-af8ea67e13aa"]
}, Open  ]],

Cell[CellGroupData[{

Cell["main calculation loop", "Subsection",
 FontFamily->"Arial",
 FontSize->14,
 FontWeight->"Regular",
 FontColor->GrayLevel[0.5],
 Background->GrayLevel[
  0],ExpressionUUID->"656590c6-138a-4041-989c-67d26913d68c"],

Cell[BoxData[
 RowBox[{
  StyleBox["\n",
   FontColor->GrayLevel[0]], 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"SelectionMove", "[", 
     RowBox[{
      RowBox[{"EvaluationNotebook", "[", "]"}], ",", "Next", ",", 
      "GeneratedCell"}], "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"testpts", "=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"ii", ",", "nasteroids"}], "}"}]}], "]"}]}], ";"}], "*)"}], 
  " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"here", " ", "for", " ", "diagnostic", " ", "use"}], ",", " ", 
    "\n", 
    RowBox[{"but", " ", 
     RowBox[{"don", "'"}], "t", " ", "load", " ", "below", " ", "for", " ", 
     "large", " ", "runs"}], ",", " ", 
    RowBox[{"it", " ", "creates", " ", "humoungous", " ", "files"}]}], " ", 
   "*)"}], "\n", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"testpts", "=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", "numcum", "}"}]}], "]"}]}], ";"}], "*)"}], 
  "\[IndentingNewLine]", "\n", "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"t0", "=", 
     RowBox[{"AbsoluteTime", "[", "]"}]}], ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"binaries", "=", 
     RowBox[{"{", "}"}]}], ";"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{"Gaurav", ":", " ", 
     RowBox[{
     "May", " ", "be", " ", "for", " ", "listing", " ", "the", " ", 
      "binaries"}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"nnbinaries", "=", 
     RowBox[{"{", "}"}]}], ";"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{"Gaurav", ":", " ", 
     RowBox[{
     "May", " ", "be", " ", "for", " ", "counting", " ", "number", " ", "of", 
      " ", "binaries"}]}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"cdevent", "=", 
     RowBox[{"{", "}"}]}], ";"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{
    "the", " ", "targets", " ", "with", " ", "any", " ", "cd", " ", "event"}],
     " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"firstcdevent", "=", 
     RowBox[{"{", "}"}]}], ";"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"only", " ", "the", "  ", "events", " ", "when", " ", 
      RowBox[{"d", "/", "d0"}]}], ">", ".5"}], "*)"}], "\n", 
   RowBox[{
    RowBox[{"cdplotpts", "=", 
     RowBox[{"{", "}"}]}], ";"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{"Gaurav", ":", " ", 
     RowBox[{"For", " ", "plotting"}]}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"pulvplotpts", "=", 
     RowBox[{"{", "}"}]}], ";"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{
    "only", " ", "for", " ", "asteroids", " ", "with", " ", "history", " ", 
     "plot"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"binforplots", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"pulvevent", "=", 
     RowBox[{"{", "}"}]}], ";"}], 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"keep", " ", "dia", " ", "d0"}], ",", " ", "omeg", ",", " ", 
     RowBox[{"time", " ", "of", " ", "\"\<pulverized\>\"", " ", "ones"}]}], 
    " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"pulvevent1", "=", 
     RowBox[{"{", "}"}]}], ";"}], 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"pulv", " ", "when", " ", "m"}], ">", " ", 
     RowBox[{"0.5", " ", "m0"}]}], " ", "*)"}], "\n", "\n", " ", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
     "get", " ", "random", " ", "asteroids", " ", "for", " ", "history", " ", 
      "plots"}], ",", " ", 
     RowBox[{"no", " ", "duplicates"}]}], " ", "*)"}], "\n", 
   RowBox[{"(*", 
    RowBox[{"Gaurav", ":", " ", 
     RowBox[{
     "Not", " ", "for", " ", "my", " ", "use", " ", "creating", " ", 
      "asteroid", " ", "sample", " ", "for", " ", "the", " ", "purose", " ", 
      "of", " ", "plotting"}]}], "\[IndentingNewLine]", "*)"}], " ", "\n", 
   RowBox[{
    RowBox[{"histast", "=", 
     RowBox[{"RandomSample", "[", 
      RowBox[{
       RowBox[{"Range", "[", "nasteroids", "]"}], ",", "nhistplots"}], 
      "]"}]}], ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "load", " ", "itsahist", " ", "the", " ", "histroy", " ", "plot", " ", 
     "numbers", " ", "for", " ", "all", " ", "hist", " ", 
     RowBox[{"asteroids", "."}]}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"itsahist", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"0", ",", "nasteroids"}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"Do", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"itsahist", "[", 
        RowBox[{"[", 
         RowBox[{"histast", "[", 
          RowBox[{"[", "i", "]"}], "]"}], "]"}], "]"}], "=", "i"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "nhistplots"}], "}"}]}], "]"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"lastimptime", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"0", ",", 
       RowBox[{"{", "nasteroids", "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"erodedhmevent", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"nframes", ">", "0"}], ",", 
      RowBox[{"binformovies", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"nframes", "+", "10"}]}], "]"}]}]}], "]"}], ";"}], 
   "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"impdia", "=", 
       RowBox[{"{", "}"}]}], ";", " ", 
      RowBox[{"for", " ", "diagnostics", " ", "only"}]}], ",", " ", 
     RowBox[{
     "it", " ", "becomes", " ", "humoungous", " ", "for", " ", "larget", " ", 
      "problems"}]}], " ", "*)"}]}]}]], "Input",
 Deletable->True,
 CellMargins->{{64, 10}, {5, 10}},
 CellOpen->False,
 InitializationCell->False,
 CellChangeTimes->{{3.886588431684371*^9, 3.886588450704803*^9}, {
  3.8865884962998323`*^9, 3.886588521178522*^9}, {3.886588577137142*^9, 
  3.88658860373615*^9}, {3.886589261052603*^9, 3.88658926366607*^9}, {
  3.8865902154346027`*^9, 3.886590266419663*^9}},
 FontFamily->"Arial",
 FontSize->14,
 FontWeight->"Regular",
 FontColor->GrayLevel[0.5],
 Background->GrayLevel[0],
 CellTags->"runit",
 CellLabel->
  "In[358]:=",ExpressionUUID->"58507f43-b9b6-4383-91d4-08bc055dc2a5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"halfmevent", "=", 
    RowBox[{"{", "}"}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{"erodedhmevent", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"nutation", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"erodedtozero", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"dcrimdias", "=", 
    RowBox[{"{", "}"}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"craterdias", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"craterdiasnow", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"spalldias", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"complexdias", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testarray", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"craterplotpts", "=", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"0", ",", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], "}"}]}], "}"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"totalnow", "=", "0"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"nexplicit", "=", "0"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"diffplots", "=", 
    RowBox[{"{", "}"}]}], ";"}], " ", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "might", " ", "be", " ", "better", " ", "to", " ", "pick", " ", "at", " ", 
    "least", " ", "one", " ", "asteroid", " ", "from", " ", "each", " ", 
    "bin", " ", "for", " ", "plotting"}], "*)"}], "\[IndentingNewLine]", " ", 
  
  RowBox[{"(*", " ", 
   RowBox[{
   "now", " ", "3", " ", "components", " ", "the", " ", "initial", " ", 
    "values"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"histplotpts", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "nhistplots"}], "]"}]}], ";"}], "\n", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"load", " ", "initial", " ", "histplotpts", " ", 
    RowBox[{"(", 
     RowBox[{"for", " ", "hist", " ", "targets"}], ")"}]}], " ", "*)"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"runboxplots", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", 
        RowBox[{"nsteps", "+", "1"}]}], "}"}]}], "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"omegvals", "=", 
    RowBox[{"initialspins", "[", "]"}]}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "this", " ", "gets", " ", "all", " ", "nasteroids", " ", "of", " ", 
    "them"}], " ", "*)"}], "\n", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"load", "  ", "initial", " ", "history", " ", 
     RowBox[{"plots", ".", " ", "jj"}], " ", "is", " ", "the", " ", "history",
      " ", "plot", " ", "number"}], ",", " ", "\n", "  ", "  ", 
    RowBox[{
     RowBox[{"histast", "[", 
      RowBox[{"[", "jj", "]"}], "]"}], " ", "is", " ", "the", " ", "asteroid",
      " ", "number"}]}], "*)"}], "\n", 
  RowBox[{"(*", 
   RowBox[{"Gaurav", ":", " ", 
    RowBox[{"Not", " ", "for", " ", "my", " ", 
     RowBox[{"use", ".", " ", "It"}], " ", "is", " ", "creating", " ", 
     "asteroid", " ", "sample", " ", "for", " ", "the", " ", "plots"}]}], 
   "\n", "*)"}]}], "\n", 
 RowBox[{
  StyleBox[" ",
   FontColor->GrayLevel[0]], 
  RowBox[{
   RowBox[{"Do", "[", "\n", "  ", 
    RowBox[{
     RowBox[{
      RowBox[{"omeg", "=", 
       RowBox[{"omegvals", "[", 
        RowBox[{"[", 
         RowBox[{"histast", "[", 
          RowBox[{"[", "jj", "]"}], "]"}], "]"}], "]"}]}], ";", "\n", "  ", 
      RowBox[{"omegzz", "=", 
       RowBox[{
        RowBox[{"Sign", "[", 
         RowBox[{"omeg", "[", 
          RowBox[{"[", "3", "]"}], "]"}], "]"}], " ", 
        RowBox[{"Max", "[", 
         RowBox[{
          RowBox[{"Abs", "[", 
           RowBox[{"omeg", "[", 
            RowBox[{"[", "3", "]"}], "]"}], "]"}], ",", 
          RowBox[{"10", "^", 
           RowBox[{"-", "9"}]}]}], "]"}]}]}], ";", "\n", "  ", 
      RowBox[{"wobble", "=", 
       RowBox[{"ArcTan", "[", 
        RowBox[{
         RowBox[{"Sqrt", "[", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"omeg", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "^", "2"}], "+", 
            RowBox[{
             RowBox[{"omeg", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "^", "2"}]}], ")"}], "]"}], "/", 
         RowBox[{"Abs", "[", "omegzz", "]"}]}], "]"}]}], ";", "\n", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Im", "[", "wobble", "]"}], ">", "0"}], ",", 
        RowBox[{
         RowBox[{"Print", "[", "\"\<here 3, wobble not real \>\"", "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\n", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"wobble", "<", 
         RowBox[{"1.", " ", "Degree"}]}], ",", " ", 
        RowBox[{"wobble", "=", 
         RowBox[{"1.", "Degree"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "  ", 
      RowBox[{"omegnet", "=", 
       RowBox[{
        RowBox[{"Sign", "[", 
         RowBox[{"omeg", "[", 
          RowBox[{"[", "3", "]"}], "]"}], "]"}], " ", 
        RowBox[{"Norm", "[", "omeg", "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"histplotpts", "[", 
        RowBox[{"[", "jj", "]"}], "]"}], "=", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"0", ",", 
          RowBox[{"dlist", "[", 
           RowBox[{"[", 
            RowBox[{"histast", "[", 
             RowBox[{"[", "jj", "]"}], "]"}], "]"}], "]"}], ",", "omegnet", 
          ",", "wobble"}], "}"}], "}"}]}]}], ",", "\n", 
     RowBox[{"{", 
      RowBox[{"jj", ",", "nhistplots"}], "}"}]}], "]"}], ";"}], "\n", 
  RowBox[{"(*", 
   RowBox[{"Gaurav", ":", " ", 
    RowBox[{
    "Storing", " ", "frames", " ", "for", " ", "the", " ", "movies"}]}], " ", 
   "\[IndentingNewLine]", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"nframes", ">", "0"}], ",", 
     RowBox[{
      RowBox[{"asterdata", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"nframes", "+", "1"}]}], "]"}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"includes", " ", "first", " ", "and", " ", "last"}], "  ", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
         RowBox[{"asterdata", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "=", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"dlist", "[", 
              RowBox[{"[", "i", " ", "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{"RandomChoice", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"-", "1."}], ",", "1."}], "}"}], "]"}], "omega0"}]}],
             "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "nasteroids"}], "}"}]}], "]"}]}], ";"}], "*)"}],
       "\n", 
      RowBox[{
       RowBox[{"asterdata", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"dlist", "[", 
            RowBox[{"[", "i", " ", "]"}], "]"}], ",", 
           RowBox[{
            RowBox[{"Norm", "[", 
             RowBox[{"omegvals", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "]"}], " ", "1.38", " ", 
            RowBox[{"10", "^", "4"}]}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "nasteroids"}], "}"}]}], "]"}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"first", " ", "frame", " ", "at", " ", "t"}], "=", "0"}], " ",
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"nmovie", "=", "1"}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "counter", " ", "for", " ", "data", " ", "for", " ", "movie", " ", 
        "frames"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"framefreq", "=", 
       RowBox[{"Max", "[", 
        RowBox[{"1", ",", 
         RowBox[{"Ceiling", "[", 
          RowBox[{"nsteps", "/", "nframes"}], "]"}]}], "]"}]}]}], ",", "\n", 
     RowBox[{"(*", " ", "else", " ", "*)"}], "\n", 
     RowBox[{
      RowBox[{"framefreq", "=", "0"}], ";", 
      RowBox[{"nmovie", "=", "0"}]}]}], "]"}], ";"}], "\n", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"diagnostics", " ", "for", " ", "mass", " ", "losses"}], " ", 
   "*)"}], 
  RowBox[{"(*", " ", 
   RowBox[{"Gaurav", ":", " ", 
    RowBox[{"Not", " ", "for", " ", "my", " ", "use"}]}], " ", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"sumpop", "=", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testplot", "=", 
   RowBox[{"Table", "[", 
    RowBox[{"sumpop", ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "5"}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"keepbin", "=", 
   RowBox[{"{", 
    RowBox[{"10", ",", "20", ",", "30", ",", "40", ",", "50"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"percentchange", "=", "sumpop"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"masstest", "=", 
    RowBox[{"{", "}"}]}], ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"time", "=", "0"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"timetonow", "=", "0."}], ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Print", "[", "\"\<ready to take time steps \>\"", "]"}], ";"}], 
  "\n"}], "\n", 
 RowBox[{
  RowBox[{"iiast", "=", "0"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"iistep", "=", "1"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"impacttime", "=", "10."}], " ", ";"}], 
  StyleBox[
   RowBox[{"(*", " ", 
    RowBox[{"need", " ", "for", " ", "first", " ", "monitor", " ", "output"}],
     " ", "*)"}],
   FontColor->GrayLevel[0]]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"timetonow", "=", "0."}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"maximpd", "=", "0"}], ";"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"testmaxd", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testmeanv", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"fragpart", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{"0", ",", 
        RowBox[{"numcum", "-", "1"}]}], "]"}], ",", 
      RowBox[{"{", "3", "}"}]}], "]"}]}], " ", ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"now", " ", "3", " ", "types"}], " ", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"stepdepletion", "=", 
   RowBox[{"Table", "[", 
    RowBox[{"0.", ",", 
     RowBox[{"numcum", "-", "1"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{" ", 
  RowBox[{
   RowBox[{"depletepart", "=", 
    RowBox[{"Table", "[", 
     RowBox[{"0.", ",", 
      RowBox[{"numcum", "-", "1"}]}], "]"}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{"numcd", "=", "0"}], ";"}]}], "Input",
 Deletable->True,
 CellMargins->{{64, 10}, {5, 10}},
 CellOpen->False,
 InitializationCell->False,
 CellChangeTimes->{{3.886589534308107*^9, 3.886589607522402*^9}, {
   3.886590146359437*^9, 3.88659020828166*^9}, {3.886590280958271*^9, 
   3.8865903340379543`*^9}, 3.8897610581155*^9, {3.889761135203743*^9, 
   3.8897611483218317`*^9}},
 FontFamily->"Arial",
 FontSize->14,
 FontWeight->"Regular",
 FontColor->GrayLevel[0.5],
 Background->GrayLevel[0],
 CellTags->"runit",
 CellLabel->
  "In[374]:=",ExpressionUUID->"242d2da1-5989-40a1-a644-1afa503f944e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Monitor", "[", " ", "\n", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"A", ".", "  ", "The"}], " ", "time", " ", "steps"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"istep", ",", "nsteps"}], "}"}]}], " ", "*)"}], "\n", "\n", 
    StyleBox[
     RowBox[{"(*", 
      RowBox[{
      "Initialization", " ", "codes", " ", "written", " ", "by", " ", 
       RowBox[{"G", ":"}]}], "*)"}],
     FontSize->18,
     FontColor->RGBColor[1, 0.5, 0]], "\n", "\n", 
    RowBox[{
     RowBox[{
      RowBox[{"parameters", "=", 
       RowBox[{
       "Import", "[", 
        "\"\</Users/kumargaurav/Documents/Asteroids/parameters\>\"", "]"}]}], 
      ";", "\n", 
      RowBox[{
      "SetDirectory", "[", 
       "\"\</Users/kumargaurav/Documents/Asteroids/output\>\"", "]"}], ";", 
      "\n", 
      RowBox[{"mydir", "=", 
       RowBox[{"StringJoin", "[", 
        RowBox[{"\"\<files_\>\"", ",", 
         RowBox[{"ToString", "[", 
          RowBox[{"NumberForm", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"parameters", "[", 
               RowBox[{"[", 
                RowBox[{
                 RowBox[{"Position", "[", 
                  RowBox[{"parameters", ",", "\"\<delta\>\""}], "]"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}], "*", "1.0"}], ",", 
            RowBox[{"{", 
             RowBox[{"2", ",", "6"}], "}"}]}], "]"}], "]"}], ",", "\"\<_\>\"",
          ",", 
         RowBox[{"ToString", "[", 
          RowBox[{"NumberForm", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"parameters", "[", 
              RowBox[{"[", 
               RowBox[{
                RowBox[{"Position", "[", 
                 RowBox[{"parameters", ",", "\"\<omega_initial\>\""}], "]"}], 
                "[", 
                RowBox[{"[", 
                 RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "]"}], "[", 
             RowBox[{"[", "2", "]"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"2", ",", "6"}], "}"}]}], "]"}], "]"}]}], "]"}]}], ";", 
      "\n", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"DirectoryQ", "[", "mydir", "]"}], ",", " ", 
        RowBox[{"DeleteDirectory", "[", 
         RowBox[{"mydir", ",", " ", 
          RowBox[{"DeleteContents", "\[Rule]", "True"}]}], "]"}], ",", 
        RowBox[{"Print", "[", "\"\<No directory exist\>\"", "]"}]}], "]"}], 
      ";", "\n", 
      RowBox[{"CreateDirectory", "[", "mydir", "]"}], ";", "\n", 
      RowBox[{
      "SetDirectory", "[", "\"\</Users/kumargaurav/Documents/Asteroids\>\"", 
       "]"}], ";", "\n", 
      RowBox[{"RegisterExternalEvaluator", "[", 
       RowBox[{
       "\"\<Python\>\"", ",", 
        "\"\</Users/kumargaurav/opt/anaconda3/bin/python3\>\""}], "]"}], ";", 
      "\n", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"FailureQ", "[", "parameters", "]"}], ",", 
        RowBox[{
         RowBox[{"Print", "[", "\"\<Failed in importing the data\>\"", "]"}], 
         ";", " ", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\n", 
      RowBox[{"session", "=", " ", 
       RowBox[{"StartExternalSession", "[", "\"\<Python\>\"", "]"}]}], ";", 
      "\n", 
      RowBox[{"d", " ", "=", " ", 
       RowBox[{"astsizetype", "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", " ", "1"}], "]"}], "]"}]}], ";", " ", "\n", 
      RowBox[{"Mkg", " ", "=", " ", 
       RowBox[{
        RowBox[{"Pi", "/", "6"}], " ", "dens", " ", 
        RowBox[{"d", "^", "3"}]}]}], ";", "\n", 
      RowBox[{"jinertia", "=", 
       RowBox[{
        RowBox[{"2", "/", "5"}], " ", "Mkg", " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"d", "/", "2"}], ")"}], "^", "2"}], "  ", 
        RowBox[{"{", 
         RowBox[{"1", ",", "1", ",", "1"}], "}"}]}]}], ";", "\n", 
      RowBox[{
       RowBox[{
        RowBox[{"parameters", "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{"Position", "[", 
            RowBox[{"parameters", ",", "\"\<jinertia\>\""}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}], "=", 
       RowBox[{
        RowBox[{
         RowBox[{"jinertia", "[", 
          RowBox[{"[", "3", "]"}], "]"}], "/", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"d", "/", "2"}], ")"}], "^", "5"}]}], "/", "dens"}]}], ";",
       "\n", 
      RowBox[{
       RowBox[{
        RowBox[{"parameters", "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{"Position", "[", 
            RowBox[{"parameters", ",", "\"\<jinertia1\>\""}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}], "=", 
       RowBox[{
        RowBox[{
         RowBox[{"jinertia", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "/", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"d", "/", "2"}], ")"}], "^", "5"}]}], "/", "dens"}]}], ";",
       "\n", 
      RowBox[{
       RowBox[{
        RowBox[{"parameters", "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{"Position", "[", 
            RowBox[{"parameters", ",", "\"\<radius\>\""}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}], "=", "1"}], ";", "\n", 
      RowBox[{
       RowBox[{
        RowBox[{"parameters", "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{"Position", "[", 
            RowBox[{"parameters", ",", "\"\<slides\>\""}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}], "=", "1"}], ";", "\n", 
      RowBox[{
       RowBox[{
        RowBox[{"parameters", "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{"Position", "[", 
            RowBox[{"parameters", ",", "\"\<time\>\""}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}], "=", "0"}], ";", "\n", 
      RowBox[{
       RowBox[{
        RowBox[{"parameters", "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{"Position", "[", 
            RowBox[{"parameters", ",", "\"\<omega\>\""}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}], "=", 
       RowBox[{
        RowBox[{"parameters", "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{"Position", "[", 
            RowBox[{"parameters", ",", "\"\<omega_initial\>\""}], "]"}], "[", 
           
           RowBox[{"[", 
            RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], ";", "\n", 
      RowBox[{"resultExport", "=", 
       RowBox[{"Export", "[", 
        RowBox[{
        "\"\<~/Documents/Asteroids/parameters\>\"", ",", "parameters", ",", 
         "\"\<Table\>\"", ",", 
         RowBox[{"\"\<FieldSeparators\>\"", "->", "\"\<    \>\""}]}], "]"}]}],
       ";", "\n", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"FailureQ", "[", "resultExport", "]"}], ",", 
        RowBox[{
         RowBox[{"Print", "[", "\"\<Failed in exporting the data\>\"", "]"}], 
         ";", " ", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\n", 
      RowBox[{"myomega", "=", 
       RowBox[{"{", "}"}]}], ";", "\n", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"myomega", ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"parameters", "[", 
             RowBox[{"[", 
              RowBox[{
               RowBox[{"Position", "[", 
                RowBox[{"parameters", ",", "\"\<omega_initial\>\""}], "]"}], 
               "[", 
               RowBox[{"[", 
                RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "]"}], "[", 
            RowBox[{"[", "2", "]"}], "]"}], "*", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"G", "*", 
              RowBox[{"4", "/", "3"}], "*", " ", "Pi", "*", 
              RowBox[{"dens", "/", 
               RowBox[{"10", "^", "9"}]}]}], ")"}], "^", "0.5"}]}]}], "}"}]}],
        "]"}], ";", "\n", "\n", " ", 
      RowBox[{"Do", "[", "\n", "  ", 
       RowBox[{
        RowBox[{
         RowBox[{"begintime", " ", "=", " ", 
          RowBox[{"TimeUsed", "[", "]"}]}], ";", " ", 
         RowBox[{"(*", " ", 
          RowBox[{"G", ":", " ", 
           RowBox[{"Initial", " ", "time"}]}], " ", "*)"}], "\n", "\n", 
         StyleBox[
          RowBox[{"(*", " ", 
           RowBox[{"Not", " ", "Important", " ", "for", " ", 
            RowBox[{"us", " ", ":", "G"}]}], " ", "*)"}],
          FontSize->16], "\n", "\n", "  ", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Max", "[", "dlist", "]"}], " ", "<", " ", 
            RowBox[{"10", "^", 
             RowBox[{"-", "4"}]}]}], ",", "\n", "   ", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<Only 10 cm sizes remain, Nothing more to calculate.  \
Time=\>\"", ",", " ", 
              RowBox[{"N", "[", 
               RowBox[{"time", "/", 
                RowBox[{"10", "^", "9"}]}], "]"}], ",", " ", "\"\< Byr\>\""}],
              "]"}], ";", "\n", "   ", 
            RowBox[{"endtime", " ", "=", " ", "time"}], ";", "\n", "   ", 
            RowBox[{"Break", "[", "]"}]}]}], "]"}], ";", 
         RowBox[{"(*", " ", 
          RowBox[{"G", ":", " ", 
           RowBox[{
           "Check", " ", "if", " ", "all", " ", "particles", " ", "are", " ", 
            "very", " ", "small"}]}], " ", "*)"}], "\n", "  ", "\n", 
         StyleBox[
          RowBox[{"(*", " ", 
           RowBox[{
           "Not", " ", "important", " ", "as", " ", "we", " ", "are", " ", 
            "not", " ", "interested", " ", "in", " ", "history", " ", 
            RowBox[{"plots", " ", ":", "G"}]}], " ", "*)"}],
          FontSize->16], 
         StyleBox["\n",
          FontSize->16], "\n", "  ", 
         RowBox[{"iistep", " ", "=", " ", "istep"}], ";", 
         RowBox[{"(*", " ", 
          RowBox[{
          "istep", " ", "is", " ", "the", " ", "counter", " ", "of", " ", 
           "the", " ", 
           RowBox[{"loop", " ", ":", " ", "Gaurav"}]}], "  ", "*)"}], "\n", 
         "  ", 
         RowBox[{"iiplot", " ", "=", " ", "0"}], ";", "\n", "  ", 
         RowBox[{"timeold", " ", "=", " ", "time"}], ";", "\n", "  ", 
         RowBox[{"deltime", " ", "=", " ", 
          RowBox[{"tmax", "/", "nsteps"}]}], ";", "  ", 
         RowBox[{"(*", " ", 
          RowBox[{"time", " ", "increment", " ", "in", " ", "years"}], " ", 
          "*)"}], "\n", "  ", 
         RowBox[{"time", " ", "=", " ", 
          RowBox[{"time", " ", "+", " ", "deltime"}]}], ";", " ", 
         RowBox[{"(*", " ", 
          RowBox[{"global", " ", "time", " ", "in", " ", "years"}], " ", 
          "*)"}], "\n", "\n", 
         StyleBox[
          RowBox[{"(*", " ", 
           RowBox[{"For", " ", "plotting", " ", 
            RowBox[{"movies", " ", ".", " ", "Not"}], " ", 
            RowBox[{"Important", " ", ":", "G"}]}], " ", "*)"}],
          FontSize->16], 
         StyleBox["\n",
          FontSize->16], "\n", "  ", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"framefreq", " ", ">", " ", "0"}], ",", " ", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Mod", "[", 
                  RowBox[{"istep", ",", " ", "framefreq"}], "]"}], " ", 
                 "\[Equal]", " ", "0"}], ")"}], " ", "||", " ", 
               RowBox[{"(", 
                RowBox[{"istep", " ", "==", " ", "nsteps"}], ")"}]}], ")"}], 
             ",", "\n", "    ", 
             RowBox[{
              RowBox[{"nmovie", "++"}], ";", " ", 
              RowBox[{"plotmovie", " ", "=", " ", "True"}]}], ",", " ", 
             RowBox[{"plotmovie", " ", "=", " ", "False"}]}], "]"}], ",", " ", 
           RowBox[{"plotmovie", " ", "=", " ", "False"}]}], "]"}], ";", " ", 
         RowBox[{"(*", " ", 
          RowBox[{"time", " ", "for", " ", "a", " ", "movie", " ", "frame"}], 
          " ", "*)"}], "\n", "  ", "\n", 
         StyleBox[
          RowBox[{"(*", " ", 
           RowBox[{"For", " ", "population", " ", 
            RowBox[{"change", " ", ".", " ", "Not"}], " ", 
            RowBox[{"Important", " ", ":", "G"}]}], " ", "*)"}],
          FontSize->16], 
         StyleBox["\n",
          FontSize->16], "\n", "  ", 
         RowBox[{"(*", 
          RowBox[{
          "reset", " ", "popchange", " ", "to", " ", "only", " ", "that", " ",
            "for", " ", "this", " ", "timestep", " ", "there", " ", "are", 
           " ", "now", " ", "4", " ", "types"}], "*)"}], "\n", "  ", 
         RowBox[{"popchange", " ", "=", 
          RowBox[{"Table", "[", " ", 
           RowBox[{
            RowBox[{"Table", "[", 
             RowBox[{"0.", ",", " ", 
              RowBox[{"numcum", "-", "1"}]}], "]"}], ",", "3"}], "]"}]}], ";",
          "\[IndentingNewLine]", "  ", 
         RowBox[{"(*", 
          RowBox[{
          "difference", " ", "values", " ", "to", " ", "be", " ", 
           "accumulated", " ", "over", " ", "target", " ", "hits"}], "*)"}], 
         "\n", "  ", 
         RowBox[{"memused", " ", "=", " ", 
          RowBox[{"N", "[", 
           RowBox[{
            RowBox[{"MaxMemoryUsed", "[", "]"}], "/", 
            RowBox[{"10", "^", "9"}]}], "]"}]}], ";", "\n", "  ", 
         RowBox[{"memavail", " ", "=", " ", 
          RowBox[{"N", "[", 
           RowBox[{
            RowBox[{"MemoryAvailable", "[", "]"}], "/", 
            RowBox[{"10", "^", "9"}]}], "]"}]}], ";", "\n", "  ", 
         RowBox[{"iiast", " ", "=", " ", "1"}], ";", "\n", 
         RowBox[{"expimpdias", "=", 
          RowBox[{"{", "}"}]}], ";", "\n", 
         RowBox[{"nnbinaries", "=", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"nnbinaries", ",", 
            RowBox[{"{", 
             RowBox[{"time", ",", " ", 
              RowBox[{"Length", "[", "binaries", "]"}]}], "}"}]}], "]"}]}], 
         ";", " ", 
         RowBox[{"(*", " ", 
          RowBox[{"G", ":", " ", 
           RowBox[{"For", " ", "Binaries", " ", "only"}]}], " ", "*)"}], "\n",
          "  ", "\n", "  ", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"B", ".", "  ", "the"}], " ", 
            StyleBox["target", "Code"], 
            StyleBox[" ", "Code"], 
            StyleBox["loop", "Code"]}], ",", " ", 
           RowBox[{
           "loops", " ", "on", " ", "targets", " ", "for", " ", "each", " ", 
            "time", " ", "step"}], ",", " ", 
           RowBox[{
           "inside", " ", "there", " ", "is", " ", "a", " ", "loop", " ", 
            "on", " ", "impactors"}]}], " ", "*)"}], "\n", "  ", "\n", "  ", 
         "\n", "  ", 
         RowBox[{"Do", "[", "  ", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"B", ".", "  ", "target"}], " ", "asteroid", " ", 
             "loop"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"iast", ",", " ", "nasteroids"}], "}"}]}], " ", "*)"}], 
          "\t\t", "\n", "\n", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"iiast", " ", "=", " ", "iast"}], ";", "\n", "  ", 
            RowBox[{"impacttime", " ", "=", " ", "0."}], ";", "   ", 
            RowBox[{"(*", " ", 
             RowBox[{"Created", " ", 
              RowBox[{"by", " ", ":", "G"}]}], " ", "*)"}], "\n", 
            RowBox[{"maximpd", "=", "0"}], ";", "\n", "\n", "   ", 
            RowBox[{"(*", " ", 
             RowBox[{
             "see", " ", "if", " ", "this", " ", "is", " ", "a", " ", 
              "history", " ", "asteroid"}], " ", "*)"}], "\n", "    ", 
            RowBox[{"plothis", " ", "=", " ", 
             RowBox[{"itsahist", "[", 
              RowBox[{"[", "iast", "]"}], "]"}]}], ";", 
            "                        ", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
              "now", " ", "the", " ", "hist", " ", "plot", " ", "number"}], 
              ",", " ", 
              RowBox[{"or", " ", "0", " ", "if", " ", "not"}]}], "*)"}], "\n",
             "\n", "   ", 
            RowBox[{"d", " ", "=", " ", 
             RowBox[{"dlist", "[", 
              RowBox[{"[", "iast", "]"}], "]"}]}], ";", 
            "                                             ", 
            RowBox[{"(*", 
             RowBox[{
             "current", " ", "diameter", " ", "for", " ", "this", " ", 
              "asteroid"}], "*)"}], "\n", "   ", 
            RowBox[{"d0", " ", "=", " ", 
             RowBox[{"astsizetype", "[", 
              RowBox[{"[", 
               RowBox[{"iast", ",", " ", "1"}], "]"}], "]"}]}], ";", 
            "                ", 
            RowBox[{"(*", " ", 
             RowBox[{"initial", " ", "value"}], "  ", "*)"}], "\n", "\n", 
            StyleBox[
             RowBox[{"(*", " ", 
              RowBox[{
              "Checking", " ", "if", " ", "it", " ", "is", " ", "too", " ", 
               RowBox[{"small", ".", " ", "Not"}], " ", 
               RowBox[{"important", "  ", ":", "G"}]}], " ", "*)"}],
             FontSize->16], "\n", "\n", "   ", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
              "0", " ", "\[LessEqual]", " ", "d", " ", "<", " ", "0.0001"}], 
              ",", 
              RowBox[{"(*", " ", 
               RowBox[{
               "eroded", " ", "down", " ", "to", " ", "10", " ", "cm"}], 
               "*)"}], "\n", "       ", 
              RowBox[{"erodedtozerof", "[", "]"}]}], "]"}], ";", "\n", 
            "     ", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"d", " ", "<=", " ", 
               RowBox[{"10", "^", 
                RowBox[{"-", "4"}]}]}], ",", " ", 
              RowBox[{"Continue", "[", "]"}]}], "]"}], ";", " ", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{"d", "=", 
               RowBox[{"0", "  ", "in", " ", 
                RowBox[{"erodedtozerof", "[", "]"}]}]}], ",", " ", 
              RowBox[{"kicks", " ", "out", " ", "if", " ", "pulverized"}]}], 
             " ", "*)"}], "\n", "\n", "\n", "    ", 
            RowBox[{"prob", "=", 
             RowBox[{"probi", " ", "deltime", "  ", 
              RowBox[{
               RowBox[{"d", "^", "2"}], "/", "4"}]}]}], ";", 
            "                     ", 
            RowBox[{"(*", " ", 
             RowBox[{
             "To", " ", "be", " ", "used", " ", "for", " ", "calculating", 
              " ", "number", " ", "of", " ", 
              RowBox[{"collisions", ":", " ", "G"}]}], "*)"}], 
            "\[IndentingNewLine]", "\n", 
            StyleBox["   ",
             FontSize->16], 
            StyleBox[
             RowBox[{"(*", " ", 
              RowBox[{
              "get", " ", "rest", " ", "of", " ", "target", " ", "properties",
                " ", "for", " ", "this", " ", "target", " ", "and", " ", 
               "time", " ", "step"}], " ", "*)"}],
             FontSize->16], "\n", "\n", "   ", 
            RowBox[{"asttypestuff", "[", 
             RowBox[{"astsizetype", "[", 
              RowBox[{"[", 
               RowBox[{"iast", ",", " ", "2"}], "]"}], "]"}], "]"}], ";", " ", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{"loads", " ", "properties", " ", "for", " ", "c"}], "-", 
              RowBox[{"type", " ", "or", " ", "s"}], "-", "type"}], " ", 
             "*)"}], "\n", " ", 
            RowBox[{"spinupflg", " ", "=", " ", 
             RowBox[{"astsizetype", "[", 
              RowBox[{"[", 
               RowBox[{"iast", ",", " ", "3"}], "]"}], "]"}]}], ";", " ", 
            RowBox[{"(*", " ", 
             RowBox[{
             "flag", " ", "for", " ", "spinup", " ", "in", " ", "transition", 
              " ", "region", " ", "values", " ", "set", " ", "in", " ", 
              "initialization"}], " ", "*)"}], "\n", "   ", 
            RowBox[{"gravlimhere", " ", "=", " ", 
             RowBox[{"astsizetype", "[", 
              RowBox[{"[", 
               RowBox[{"iast", ",", " ", "4"}], "]"}], "]"}]}], ";", " ", 
            "\n", "   ", 
            RowBox[{"zeta0", " ", "=", " ", 
             RowBox[{"astsizetype", "[", 
              RowBox[{"[", 
               RowBox[{"iast", ",", " ", "5"}], "]"}], "]"}]}], ";", "\n", 
            "   ", 
            RowBox[{"ashape", " ", "=", " ", 
             RowBox[{"astsizetype", "[", 
              RowBox[{"[", 
               RowBox[{"iast", ",", " ", "6"}], "]"}], "]"}]}], ";", "  ", 
            RowBox[{"(*", " ", 
             RowBox[{
             "r", " ", "is", " ", "always", " ", "the", " ", "averaged"}], 
             " ", "*)"}], "\n", "   ", 
            RowBox[{"beta", " ", "=", " ", 
             RowBox[{"astsizetype", "[", 
              RowBox[{"[", 
               RowBox[{"iast", ",", " ", "7"}], "]"}], "]"}]}], ";", "\n", 
            "   ", 
            RowBox[{"Y", " ", "=", " ", 
             RowBox[{"Y0", " ", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"d0strength", "/", 
                 RowBox[{"(", 
                  RowBox[{"2", " ", "r"}], ")"}]}], ")"}], "^", 
               RowBox[{"(", 
                RowBox[{"1", "/", "nsize"}], ")"}]}]}]}], ";", " ", 
            RowBox[{"(*", " ", 
             RowBox[{"G", ":", " ", 
              RowBox[{"For", " ", "Cratering"}]}], " ", "*)"}], "\n", "   ", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
              "these", " ", "are", " ", "the", " ", "values", " ", "at", " ", 
               "the", " ", "beginning", " ", "of", " ", "the", " ", 
               "impactor", " ", "loop"}], ",", " ", 
              RowBox[{
              "they", " ", "are", " ", "modified", " ", "in", " ", "the", " ",
                "loop", " ", "as", " ", "erosion", " ", "happens"}]}], " ", 
             "*)"}], "\n", "\n", 
            StyleBox[
             RowBox[{"(*", " ", 
              RowBox[{"Written", " ", 
               RowBox[{"by", " ", ":", "G"}]}], " ", "*)"}],
             FontSize->16], 
            StyleBox["\n",
             FontSize->16], "\n", "   ", 
            RowBox[{"r", " ", "=", " ", 
             RowBox[{"d", "/", "2"}]}], ";", "\n", 
            RowBox[{"epsilon", "=", 
             RowBox[{
              RowBox[{"parameters", "[", 
               RowBox[{"[", 
                RowBox[{
                 RowBox[{"Position", "[", 
                  RowBox[{"parameters", ",", "\"\<epsilon\>\""}], "]"}], "[", 
                 
                 RowBox[{"[", 
                  RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], ";", " ", 
            RowBox[{"(*", " ", 
             RowBox[{"By", " ", "G"}], " ", "*)"}], "\n", 
            RowBox[{"layers", "=", 
             RowBox[{
              RowBox[{"parameters", "[", 
               RowBox[{"[", 
                RowBox[{
                 RowBox[{"Position", "[", 
                  RowBox[{"parameters", ",", "\"\<layers\>\""}], "]"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], ";", " ", 
            RowBox[{"(*", " ", 
             RowBox[{"By", " ", "G"}], " ", "*)"}], "\n", "   ", 
            RowBox[{"Mkg", " ", "=", " ", 
             RowBox[{
              RowBox[{"Pi", "/", "6"}], " ", "dens", " ", 
              RowBox[{"d", "^", "3"}]}]}], ";", "\n", "   ", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{"jinertia", " ", "=", " ", 
               RowBox[{
                RowBox[{"Mkg", "/", "5"}], " ", 
                RowBox[{"r", "^", "2"}], " ", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"ashape", " ", "beta"}], ")"}], "^", 
                 RowBox[{"-", 
                  RowBox[{"(", 
                   RowBox[{"2", "/", "3"}], ")"}]}]}], " ", 
                RowBox[{"{", " ", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"ashape", "^", "2"}], " ", "+", " ", 
                   RowBox[{"beta", "^", "2"}]}], ",", " ", 
                  RowBox[{"1", " ", "+", " ", 
                   RowBox[{"ashape", "^", "2"}]}], ",", " ", 
                  RowBox[{"1", " ", "+", " ", 
                   RowBox[{"beta", "^", "2"}]}]}], "  ", "}"}]}]}], ";"}], 
             "*)"}], "\n", "   ", 
            RowBox[{
             RowBox[{"jinertia", "[", 
              RowBox[{"[", "3", "]"}], "]"}], "=", 
             RowBox[{
              RowBox[{
               RowBox[{"parameters", "[", 
                RowBox[{"[", 
                 RowBox[{
                  RowBox[{"Position", "[", 
                   RowBox[{"parameters", ",", "\"\<jinertia\>\""}], "]"}], 
                  "[", 
                  RowBox[{"[", 
                   RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "]"}], "[", 
               RowBox[{"[", "2", "]"}], "]"}], "*", 
              RowBox[{"r", "^", "5"}], "*", "dens"}]}], ";", "\n", "  ", 
            RowBox[{
             RowBox[{"jinertia", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "=", 
             RowBox[{
              RowBox[{"jinertia", "[", 
               RowBox[{"[", "2", "]"}], "]"}], "=", 
              RowBox[{
               RowBox[{
                RowBox[{"parameters", "[", 
                 RowBox[{"[", 
                  RowBox[{
                   RowBox[{"Position", "[", 
                    RowBox[{"parameters", ",", "\"\<jinertia1\>\""}], "]"}], 
                   "[", 
                   RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "]"}], "[", 
                
                RowBox[{"[", "2", "]"}], "]"}], "*", 
               RowBox[{"r", "^", "5"}], "*", "dens"}]}]}], ";", "\n", "\n", 
            "\n", "   ", 
            RowBox[{"dstarave", " ", "=", " ", 
             RowBox[{
              RowBox[{"qstarf", "[", 
               RowBox[{"r", ",", " ", 
                RowBox[{"Pi", "/", "4"}], ",", " ", "velave"}], " ", "]"}], 
              "[", 
              RowBox[{"[", "3", "]"}], "]"}]}], ";", 
            "                                   ", 
            RowBox[{"(*", " ", 
             RowBox[{
             "note", " ", "that", " ", "this", " ", "changes", " ", "in", " ",
               "the", " ", "impactor", " ", "loop", " ", "since", " ", "r", 
              " ", "changes"}], " ", "*)"}], "   ", "\n", "   ", 
            RowBox[{"grav", " ", "=", " ", 
             RowBox[{"2", " ", 
              RowBox[{"Pi", "/", "3"}], "  ", "6.67", " ", 
              RowBox[{"10", "^", 
               RowBox[{"-", "20"}]}], " ", "dens", " ", "2", " ", "r"}]}], 
            ";", "\n", "   ", 
            RowBox[{"vesc", " ", "=", " ", 
             RowBox[{
              RowBox[{"Sqrt", "[", 
               RowBox[{"8", " ", 
                RowBox[{"Pi", "/", "3"}], " ", "dens", " ", "Grav"}], "]"}], 
              " ", "r"}]}], ";", "\n", "   ", 
            RowBox[{"dgrav", " ", "=", " ", 
             RowBox[{"7.158", " ", 
              RowBox[{"10", "^", "18"}], " ", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"d0strength", "/", "r"}], "/", "2"}], ")"}], "^", 
               RowBox[{"(", 
                RowBox[{"1", "/", "nsize"}], ")"}]}], " ", 
              RowBox[{"Y0", "/", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"dens", "^", "2"}], " ", "r"}], ")"}]}]}]}], ";", 
            "\n", "    ", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
              "cratering", " ", "strength", " ", "gravity", " ", 
               "transition"}], ".."}], " ", "*)"}], "\n", "   ", 
            RowBox[{"masslost", " ", "=", " ", "0"}], ";", "\n", "\n", 
            StyleBox[
             RowBox[{"(*", " ", 
              RowBox[{"initializing", " ", "the", " ", 
               RowBox[{"Omega", ":", " ", "G"}]}], " ", "*)"}],
             FontSize->16], 
            StyleBox["\n",
             FontSize->16], "\n", "   ", 
            RowBox[{"omeg", " ", "=", " ", 
             RowBox[{"omegvals", "[", 
              RowBox[{"[", "iast", "]"}], "]"}]}], ";", " ", 
            RowBox[{"(*", 
             RowBox[{"3", " ", "components"}], " ", "*)"}], "\n", "   ", "\n", 
            StyleBox[
             RowBox[{"(*", 
              RowBox[{"Finding", " ", "the", " ", "bin", " ", 
               RowBox[{"numbers", " ", ":", "G"}]}], " ", "*)"}],
             FontSize->16], "\n", "\n", "   ", 
            RowBox[{"binnumt", " ", "=", " ", 
             RowBox[{
              RowBox[{"astnum", "[", "d", "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], ";", 
            RowBox[{"(*", " ", 
             RowBox[{"the", " ", "current", " ", "bin", " ", "number"}], " ", 
             "*)"}], "\n", "   ", 
            RowBox[{"binnumt0", " ", "=", " ", 
             RowBox[{
              RowBox[{"astnum", "[", "d0", "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], ";", 
            RowBox[{"(*", " ", 
             RowBox[{"the", " ", "original", " ", "bin", " ", "number"}], " ",
              "*)"}], "\n", "   ", "\n", 
            StyleBox[
             RowBox[{"(*", " ", 
              RowBox[{"Not", " ", 
               RowBox[{"Important", ":", " ", "G"}]}], " ", "*)"}],
             FontSize->16], "\n", "\n", "   ", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"MemberQ", "[", 
               RowBox[{
                RowBox[{"binaries", "[", 
                 RowBox[{"[", 
                  RowBox[{"All", ",", " ", "1"}], "]"}], "]"}], ",", " ", 
                "iast"}], "]"}], ",", " ", 
              RowBox[{"itsabinary", " ", "=", " ", "True"}], ",", " ", 
              RowBox[{"itsabinary", " ", "=", " ", "False"}]}], "]"}], ";", 
            "\n", 
            RowBox[{"(*", " ", 
             RowBox[{
             "the", " ", "tratio", " ", "is", " ", "defined", " ", "for", " ",
               "the", " ", 
              RowBox[{"target", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "these", " ", "are", " ", "the", " ", "ratios", " ", "for", " ", 
              "reducing", " ", "number", " ", "in", " ", "impactor", " ", 
              "bins", " ", "for", " ", "the", " ", "current", " ", "target"}],
              " ", "*)"}], "\n", "   ", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"ntopick", "[", 
                RowBox[{"[", "binnumt0", "]"}], "]"}], "\[Equal]", "0"}], ",", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<tratio=? \>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"binnumt0", ",", 
                   RowBox[{
                    RowBox[{"diffdistr", "[", 
                    RowBox[{"[", 
                    RowBox[{"binnumt0", ",", "2"}], "]"}], "]"}], 
                    RowBox[{"ntopick", "[", 
                    RowBox[{"[", "binnumt0", "]"}], "]"}]}]}], "}"}]}], "]"}],
                ";", "\[IndentingNewLine]", 
               RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", " ", "\n", 
            RowBox[{"tratio", "=", 
             RowBox[{
              RowBox[{"diffdistr0", "[", 
               RowBox[{"[", 
                RowBox[{"binnumt0", ",", "2"}], "]"}], "]"}], "/", 
              RowBox[{"ntopick", "[", 
               RowBox[{"[", "binnumt0", "]"}], "]"}]}]}], ";", " ", 
            RowBox[{"(*", " ", 
             RowBox[{
             "factor", " ", "for", " ", "sampling", " ", "considerations"}], 
             " ", "*)"}], 
            RowBox[{"(*", " ", 
             RowBox[{"G", ":", " ", 
              RowBox[{
               RowBox[{"Can", "'"}], "t", " ", "understand", " ", "what", " ",
                "this", " ", "tratio", " ", "implies"}]}], " ", "*)"}], "\n", 
            
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
              "actually", " ", "not", " ", "needed", " ", "for", " ", "a", 
               " ", "given", " ", "set", " ", "of", " ", "diameters"}], ",", 
              " ", 
              RowBox[{
               RowBox[{"i", ".", "e", ".", " ", 
                RowBox[{"a", " ", "'"}]}], 
               RowBox[{"family", "'"}]}]}], "*)"}], "\[IndentingNewLine]", 
            "\n", "\n", "\n", 
            StyleBox[
             RowBox[{"(*", " ", 
              RowBox[{
               RowBox[{
                RowBox[{"C", ".", " ", "get"}], " ", "ready", " ", "for", " ",
                 "the", " ", "impact", " ", "loop"}], ",", " ", 
               RowBox[{
               "load", " ", "the", " ", "set", " ", "impactorstuff", " ", 
                "for", " ", "each", " ", "impactor"}], ",", " ", 
               RowBox[{"explicit", " ", "and", " ", 
                RowBox[{"implicit", ".", " ", "here"}], " ", "there", " ", 
                "is", " ", "one", " ", "target", " ", "and", " ", "the", " ", 
                "timestep", " ", "deltime", " ", "is", " ", "set"}]}], "*)"}],
             
             FontSize->16], "\n", 
            RowBox[{"(*", " ", 
             RowBox[{
             "i", " ", "need", " ", "range", " ", "or", " ", "explicit", " ", 
              "and", " ", "implicit"}], " ", "*)"}], "\[IndentingNewLine]", 
            "\n", 
            RowBox[{"impactorstuff", " ", "=", " ", 
             RowBox[{"{", "}"}]}], ";", "\n", 
            RowBox[{"dstarave", "=", 
             RowBox[{
              RowBox[{"qstarf", "[", 
               RowBox[{
                RowBox[{"d", "/", "2"}], ",", 
                RowBox[{"Pi", "/", "4"}], ",", "velave"}], "]"}], "[", 
              RowBox[{"[", "3", "]"}], "]"}]}], ";", "\n", 
            RowBox[{"kkk", "=", 
             RowBox[{"probi", " ", "deltime", " ", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"d", "/", "2"}], ")"}], "^", "2"}]}]}], ";", "\n", 
            "\n", 
            StyleBox[
             RowBox[{"(*", 
              RowBox[{
              "Finding", " ", "number", " ", "of", " ", "explicit", " ", 
               RowBox[{"impactors", ":", " ", "G"}]}], " ", "*)"}],
             FontSize->16], "\n", "\n", 
            RowBox[{"numgtd", "=", 
             RowBox[{
              RowBox[{"astnum", "[", "dstarave", "]"}], "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], ";", 
            "                                 ", 
            RowBox[{"(*", " ", 
             RowBox[{
             "number", " ", "greater", " ", "than", " ", "the", " ", 
              "target"}], " ", "*)"}], 
            RowBox[{"(*", " ", 
             RowBox[{"Changed", " ", "by", " ", 
              RowBox[{"G", ".", " ", "Earlier"}], " ", "it", " ", "was", " ", 
              
              RowBox[{"d", "."}]}], " ", "*)"}], "\n", 
            RowBox[{"dialittle", "=", 
             RowBox[{
              RowBox[{"cumdistr", "[", 
               RowBox[{"[", "80", "]"}], "]"}], "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], ";", 
            "                                             ", 
            RowBox[{"(*", " ", 
             RowBox[{"second", " ", "from", " ", 
              RowBox[{"end", ".", " ", "Smallest"}], " ", "impactor", " ", 
              RowBox[{"possible", ":", " ", "G"}]}], " ", "*)"}], "\n", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"1", "/", "kkk"}], "<", "dialittle"}], ",", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<oops, 1/kkk<dialittle\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"1", "/", "kkk"}], ",", "dialittle"}], " ", 
                  "}"}]}], "]"}], ";", 
               RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", 
            "                                                       ", 
            RowBox[{"(*", " ", 
             RowBox[{"G", ":", " ", 
              RowBox[{
              "May", " ", "be", " ", "to", " ", "check", " ", "whether", " ", 
               "there", " ", "is", " ", "even", " ", "a", " ", "single", " ", 
               "impact"}]}], " ", "*)"}], "\n", 
            RowBox[{"dexplicit", "=", " ", 
             RowBox[{"Max", "[", 
              RowBox[{"dialittle", ",", " ", 
               RowBox[{"0.05", " ", "explicitfac", " ", 
                RowBox[{"(", "dstarave", ")"}]}]}], "]"}]}], " ", ";", 
            "                                                                 \
                                        ", 
            RowBox[{"(*", " ", 
             RowBox[{"G", ":", " ", 
              RowBox[{
              "Defining", " ", "diameter", " ", "for", " ", "the", " ", 
               "explicit", " ", "limit"}]}], " ", "*)"}], " ", 
            RowBox[{"(*", " ", 
             RowBox[{"Changed", " ", "by", " ", 
              RowBox[{"G", ".", " ", "Earlier"}], " ", "it", " ", "was", " ", 
              "0.1"}], " ", "*)"}], "\n", 
            RowBox[{"(*", 
             RowBox[{
             "modify", " ", "for", " ", "too", " ", "many", " ", "as", " ", 
              "for", " ", "small", " ", "targets"}], " ", "*)"}], " ", "\n", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
              "and", " ", "need", " ", "to", " ", "lower", " ", "for", " ", 
               "large", " ", "targets"}], ",", " ", 
              RowBox[{
              "especially", " ", "for", " ", "lots", " ", "of", " ", "time", 
               " ", "steps", " ", "or", " ", "it", " ", "will", " ", "get", 
               " ", "0", " ", 
               RowBox[{"explicit", "."}]}]}], " ", "*)"}], "\n", 
            RowBox[{"binexplicit", "=", 
             RowBox[{
              RowBox[{"astnum", "[", "dexplicit", "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], ";", "\n", 
            RowBox[{"dexplicit", "=", 
             RowBox[{"boundaries", "[", 
              RowBox[{"[", 
               RowBox[{"binexplicit", "+", "1"}], "]"}], "]"}]}], ";", " ", 
            RowBox[{"(*", " ", 
             RowBox[{
             "lower", " ", "the", " ", "diameter", " ", "to", " ", "the", " ",
               "next", " ", "boundary", " ", "down"}], " ", "*)"}], "\n", 
            RowBox[{"nstepexplicit", "=", 
             RowBox[{
              RowBox[{"astnum", "[", "dexplicit", "]"}], "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], ";", "  ", 
            RowBox[{"(*", " ", 
             RowBox[{
             "all", " ", "objects", " ", "in", " ", "that", " ", "range", "  ",
               "this", " ", "must", " ", "be", " ", "limited", " ", "for", 
              " ", "small", " ", 
              RowBox[{"targets", " ", "?"}]}], " ", "*)"}], "\n", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"nstepexplicit", "<", 
               RowBox[{"1", "/", "kkk"}]}], ",", 
              RowBox[{
               RowBox[{"dexplicit", "=", 
                RowBox[{"getdiaf", "[", 
                 RowBox[{"1", "/", "kkk"}], "]"}]}], ";", 
               RowBox[{"nstepexplicit", "=", 
                RowBox[{"1", "/", "kkk"}]}]}]}], "]"}], ";", "\n", "\n", 
            RowBox[{"nexpimpactors", "=", 
             RowBox[{"Round", "[", 
              RowBox[{"kkk", " ", "nstepexplicit"}], "]"}]}], ";", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{"for", " ", "small", " ", "numbers"}], ",", " ", 
              RowBox[{
              "this", " ", "can", " ", "round", " ", "down", " ", "to", " ", 
               RowBox[{"0", "  ", "!!"}]}]}], " ", "*)"}], "\n", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
              "keep", " ", "all", " ", "in", " ", "this", " ", "bin"}], ",", 
              " ", 
              RowBox[{"move", " ", "bdry", " ", "dia", " ", "down"}]}], " ", 
             "*)"}], "\n", "\n", 
            RowBox[{"Print", "[", 
             RowBox[{"{", 
              RowBox[{
              "nexpimpactors", ",", "deltime", ",", "kkk", ",", "dexplicit", 
               ",", "nstepexplicit", ",", "dstarave", ",", "dialittle", ",", 
               "explicitfac", ",", " ", "velave", ",", "d", ",", "densi"}], 
              "}"}], "]"}], ";", "\n", "\n", 
            RowBox[{"nexplicit", "=", 
             RowBox[{"nexplicit", "+", "nexpimpactors"}]}], ";", "  ", 
            RowBox[{"(*", " ", 
             RowBox[{"total", " ", "to", " ", "here"}], " ", "*)"}], "\n", 
            RowBox[{"dimplicit", "=", 
             RowBox[{"Max", "[", 
              RowBox[{"dialast", ",", 
               RowBox[{"0.05", "  ", "dexplicit"}]}], "]"}]}], ";", 
            "                                             ", 
            RowBox[{"(*", " ", 
             RowBox[{"Changed", " ", "by", " ", "G", " ", "to", " ", 
              RowBox[{"0.05", ".", " ", "Earlier"}], " ", "it", " ", "was", 
              " ", "0.1"}], " ", "*)"}], "\n", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
              "lower", "  ", "limit", " ", "for", " ", "implicit", " ", 
               "dont", " ", "need", " ", "numbers"}], ",", " ", 
              RowBox[{"only", " ", "bins"}]}], " ", "*)"}], "\n", 
            RowBox[{"binimplicit", "=", 
             RowBox[{
              RowBox[{"astnum", "[", "dimplicit", "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], ";", "\n", "\n", 
            StyleBox[
             RowBox[{"(*", " ", 
              RowBox[{
              "Finding", " ", "diameters", " ", "of", " ", "explicit", " ", 
               RowBox[{"impactors", " ", ":", "G"}]}], " ", "*)"}],
             FontSize->16], "\n", "\n", 
            RowBox[{"vec", "=", 
             RowBox[{"RandomReal", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"numgtd", ",", "nstepexplicit"}], "}"}], ",", 
               "nexpimpactors"}], "]"}]}], ";", "\n", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{"dias", "=", 
               RowBox[{"InverseFunction", "[", 
                RowBox[{"cumfit", "[", "vec", "]"}], "]"}]}], ";", "  ", 
              RowBox[{"hangs", " ", "up", " ", "sometimes"}]}], "*)"}], "\n", 
            
            RowBox[{"(*", 
             RowBox[{
              RowBox[{"dias", "=", 
               RowBox[{"ReverseSort", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"cdx", "/", "vec"}], ")"}], "^", 
                 RowBox[{"(", 
                  RowBox[{"1", "/", "alphax"}], ")"}]}], "]"}]}], ";", " ", 
              RowBox[{
              "using", " ", "the", " ", "approximate", " ", "power", " ", 
               "law"}]}], "*)"}], "\n", 
            RowBox[{"dias", "=", 
             RowBox[{"getdiaf", "[", "vec", "]"}]}], ";", " ", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
              "the", " ", "set", " ", "of", " ", "random", " ", "explicit", 
               " ", "impactors", "  ", "this", " ", "uses", " ", "the", " ", 
               "actual", " ", "cumdist"}], ",", " ", 
              RowBox[{
              "with", " ", "a", " ", "power", " ", "law", " ", "fit", " ", 
               "over", " ", "each", " ", 
               RowBox[{"bin", ".", " ", "different"}], " ", "for", " ", 
               "large", " ", "targets"}]}], "*)"}], "\n", 
            RowBox[{"expimpdias", "=", 
             RowBox[{"Join", "[", 
              RowBox[{"expimpdias", ",", "dias"}], "]"}]}], ";", "\n", "\n", 
            StyleBox[
             RowBox[{"(*", " ", 
              RowBox[{
              "Generating", " ", "attributes", " ", "for", " ", "the", " ", 
               RowBox[{"impactors", " ", ":", "G"}]}], " ", "*)"}],
             FontSize->16], "\n", "\n", 
            RowBox[{"Do", "[", "\n", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"phival", " ", "=", " ", 
                RowBox[{
                 RowBox[{"ArcCos", "[", 
                  RowBox[{"1", " ", "-", " ", 
                   RowBox[{"2", " ", 
                    RowBox[{"RandomReal", "[", "]"}]}]}], "]"}], "/", "2"}]}],
                ";", "\n", " ", 
               RowBox[{"vel", " ", "=", " ", 
                RowBox[{"velstatf", "[", 
                 RowBox[{"RandomReal", "[", "]"}], "]"}]}], ";", "\n", "   ", 
               
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"RandomInteger", "[", 
                   RowBox[{"{", 
                    RowBox[{"1", ",", " ", "4"}], "}"}], "]"}], " ", 
                  "\[Equal]", " ", "1"}], ",", " ", 
                 RowBox[{"densi", " ", "=", " ", 
                  RowBox[{"2.5", " ", 
                   RowBox[{"10", "^", "12"}]}]}], ",", " ", 
                 RowBox[{"densi", " ", "=", " ", 
                  RowBox[{"1.5", " ", 
                   RowBox[{"10", "^", "12"}]}]}]}], "]"}], ";", " ", "\n", 
               " ", 
               RowBox[{"impacttime", " ", "=", " ", 
                RowBox[{"RandomReal", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"time", " ", "-", " ", "deltime"}], ",", " ", 
                   "time"}], "}"}], "]"}]}], ";", "\n", 
               RowBox[{"thetaval", " ", "=", " ", 
                RowBox[{"2", " ", "Pi", " ", 
                 RowBox[{"RandomReal", "[", "]"}]}]}], ";", 
               "                        ", 
               RowBox[{"(*", " ", 
                RowBox[{
                "range", " ", "from", " ", "0", " ", "to", " ", "2", " ", 
                 "Pi"}], " ", "*)"}], "\n", 
               RowBox[{"Thetaval", " ", "=", " ", 
                RowBox[{"2", " ", "Pi", " ", 
                 RowBox[{"RandomReal", "[", "]"}]}]}], ";", 
               "                       ", 
               RowBox[{"(*", " ", 
                RowBox[{
                 RowBox[{"location", " ", "on", " ", "sphere"}], ",", " ", 
                 RowBox[{
                 "range", " ", "from", " ", "0", " ", "to", " ", "2", 
                  "Pi"}]}], " ", "*)"}], "\n", " ", 
               RowBox[{"Phival", " ", "=", " ", 
                RowBox[{"ArcCos", "[", 
                 RowBox[{"1", " ", "-", " ", 
                  RowBox[{"2", " ", 
                   RowBox[{"RandomReal", "[", "]"}]}]}], "]"}]}], ";", " ", 
               RowBox[{"(*", 
                RowBox[{
                "range", " ", "from", " ", "0", " ", "to", " ", "Pi"}], 
                "*)"}], "\n", "  ", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"dias", "[", 
                   RowBox[{"[", "jj", "]"}], "]"}], " ", "<", " ", "dgrav"}], 
                 ",", " ", 
                 RowBox[{"vstar", " ", "=", " ", 
                  RowBox[{"k2s", " ", 
                   RowBox[{"Sqrt", "[", 
                    RowBox[{"Y", "/", "dens"}], "]"}]}]}], " ", ",", 
                 RowBox[{"(*", "else", "*)"}], " ", "\n", "         ", 
                 RowBox[{"vstar", " ", "=", " ", 
                  RowBox[{"k2g", " ", "vel", " ", 
                   RowBox[{"Cos", "[", "phival", "]"}], " ", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"grav", " ", 
                    RowBox[{
                    RowBox[{"diameter", "/", "2"}], "/", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"vel", " ", 
                    RowBox[{"Cos", "[", "phival", "]"}]}], ")"}], "^", 
                    "2"}]}]}], ")"}], "^", 
                    RowBox[{"(", 
                    RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{"mu", " ", "+", " ", "2"}], ")"}]}], 
                    ")"}]}]}]}]}], " ", "]"}], ";", "\n", " ", "\n", 
               RowBox[{"AppendTo", "[", 
                RowBox[{"impactorstuff", ",", " ", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"dias", "[", 
                    RowBox[{"[", "jj", "]"}], "]"}], ",", " ", "phival", ",", 
                   " ", "vel", ",", " ", "densi", ",", " ", "1", ",", 
                   "impacttime", ",", " ", "vstar", ",", " ", "thetaval", ",",
                    " ", "Phival", ",", " ", "Thetaval"}], "}"}]}], "]"}], 
               ";"}], "\n", ",", 
              RowBox[{"{", 
               RowBox[{"jj", ",", "nexpimpactors"}], "}"}]}], "]"}], " ", ";",
             "   ", "\n", "\n", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
              "now", " ", "append", " ", "the", " ", "implicit", " ", 
               "ones"}], ",", " ", 
              RowBox[{
              "only", " ", "one", " ", "for", " ", "each", " ", "bin"}]}], 
             "  ", "*)"}], "\n", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"binimplicit", ">", "binexplicit"}], ",", "\n", 
              RowBox[{"Do", "[", "\n", 
               RowBox[{
                RowBox[{
                 RowBox[{"ninbin", "=", 
                  RowBox[{"Round", "[", 
                   RowBox[{"k", 
                    StyleBox["kk", "Input"], " ", 
                    RowBox[{"diffdistr", "[", 
                    RowBox[{"[", 
                    RowBox[{"jj", ",", " ", "2"}], "]"}], "]"}]}], "]"}]}], 
                 ";", 
                 RowBox[{"(*", " ", 
                  RowBox[{
                  "number", " ", "of", " ", "impactors", " ", "in", " ", 
                   "this", " ", "implicit", " ", "bin"}], " ", "*)"}], "\n", 
                 RowBox[{"diameter", " ", "=", " ", 
                  RowBox[{"Exp", "[", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Log", "[", 
                    RowBox[{"cumdistr", "[", 
                    RowBox[{"[", 
                    RowBox[{"jj", ",", " ", "1"}], "]"}], "]"}], "]"}], " ", 
                    "+", " ", 
                    RowBox[{"Log", "[", 
                    RowBox[{"cumdistr", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"jj", " ", "+", " ", "1"}], ",", " ", "1"}], 
                    "]"}], "]"}], "]"}]}], ")"}], "/", "2"}], "]"}]}], ";", 
                 "         ", 
                 RowBox[{"phival", " ", "=", " ", 
                  RowBox[{"Pi", "/", "4."}]}], ";", "\n", "        ", 
                 RowBox[{"vel", " ", "=", " ", "velave"}], ";", "\n", 
                 "        ", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"RandomInteger", "[", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", " ", "4"}], "}"}], "]"}], " ", 
                    "\[Equal]", " ", "1"}], ",", " ", 
                   RowBox[{"densi", " ", "=", " ", 
                    RowBox[{"2.5", " ", 
                    RowBox[{"10", "^", "12"}]}]}], ",", " ", 
                   RowBox[{"densi", " ", "=", " ", 
                    RowBox[{"1.5", " ", 
                    RowBox[{"10", "^", "12"}]}]}]}], "]"}], ";", "\n", 
                 "        ", 
                 RowBox[{"impacttime", " ", "=", " ", 
                  RowBox[{"RandomReal", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"time", " ", "-", " ", "deltime"}], ",", " ", 
                    "time"}], "}"}], "]"}]}], ";", "\n", "        ", 
                 RowBox[{"thetaval", " ", "=", " ", "Pi"}], ";", " ", 
                 RowBox[{"(*", " ", 
                  RowBox[{
                   RowBox[{"doesn", "'"}], "t", " ", "matter"}], " ", "*)"}], 
                 "\n", "        ", 
                 RowBox[{"Thetaval", " ", "=", " ", "0."}], ";", "\n", 
                 "        ", 
                 RowBox[{"Phival", " ", "=", " ", 
                  RowBox[{"Pi", "/", "2"}]}], ";", 
                 RowBox[{"(*", " ", 
                  RowBox[{
                   RowBox[{"doesn", "'"}], "t", " ", "matter"}], " ", "*)"}], 
                 "\n", "        ", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"diameter", " ", "<", " ", "dgrav"}], ",", " ", 
                   RowBox[{"vstar", " ", "=", " ", 
                    RowBox[{"k2s", " ", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"Y", "/", "dens"}], "]"}]}]}], " ", ",", 
                   RowBox[{"(*", "else", "*)"}], " ", "\n", "         ", 
                   RowBox[{"vstar", " ", "=", " ", 
                    RowBox[{"k2g", " ", "vel", " ", 
                    RowBox[{"Cos", "[", "phival", "]"}], " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"grav", " ", 
                    RowBox[{
                    RowBox[{"diameter", "/", "2"}], "/", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"vel", " ", 
                    RowBox[{"Cos", "[", "phival", "]"}]}], ")"}], "^", 
                    "2"}]}]}], ")"}], "^", 
                    RowBox[{"(", 
                    RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{"mu", " ", "+", " ", "2"}], ")"}]}], 
                    ")"}]}]}]}]}], " ", "]"}], ";", "\n", "        ", 
                 RowBox[{"AppendTo", "[", 
                  RowBox[{"impactorstuff", ",", " ", 
                   RowBox[{"{", 
                    RowBox[{
                    "diameter", ",", " ", "phival", ",", " ", "vel", ",", " ",
                     "densi", ",", "ninbin", ",", " ", "impacttime", ",", " ",
                     "vstar", ",", " ", "thetaval", ",", " ", "Phival", ",", 
                    " ", "Thetaval"}], "}"}]}], "]"}], ";"}], "\n", ",", 
                RowBox[{"{", 
                 RowBox[{"jj", ",", "binexplicit", ",", 
                  RowBox[{"binimplicit", "-", "1"}]}], "}"}]}], "]"}]}], 
             "]"}], ";", "\n", "\n", 
            StyleBox[" ",
             FontSize->16], 
            StyleBox[
             RowBox[{"(*", " ", 
              RowBox[{
               RowBox[{
               "i", " ", "now", " ", "have", " ", "the", " ", "impactors"}], 
               ",", " ", 
               RowBox[{
               "now", " ", "mix", " ", "them", " ", "up", " ", "and", " ", 
                "do", " ", "impacts"}]}], " ", "*)"}],
             FontSize->16], 
            StyleBox["\n",
             FontSize->16], 
            StyleBox["   ",
             FontSize->16], 
            StyleBox["\n",
             FontSize->16], 
            StyleBox["   ",
             FontSize->16], 
            StyleBox[
             RowBox[{"(*", " ", 
              RowBox[{
              "load", " ", "the", " ", "impactors", " ", "list", " ", "for", 
               " ", "this", " ", "time", " ", "step"}], " ", "*)"}],
             FontSize->16], "\n", "          ", "\n", 
            RowBox[{"impactorstuff", " ", "=", " ", 
             RowBox[{"Sort", "[", 
              RowBox[{"impactorstuff", ",", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{"#1", "[", 
                  RowBox[{"[", "6", "]"}], "]"}], " ", "<", " ", 
                 RowBox[{"#2", "[", 
                  RowBox[{"[", "6", "]"}], "]"}]}], " ", "&"}]}], "]"}]}], 
            ";", "                            ", 
            RowBox[{"(*", " ", 
             RowBox[{
             "sort", " ", "impactors", " ", "by", " ", "time", " ", 
              "values"}], " ", "*)"}], "\n", "   ", "\n", "   ", "\n", "   ", 
            
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"E", ".", "  ", "2"}], "nd", " ", "impactor", " ", 
               "loop"}], ",", " ", 
              RowBox[{
              "over", " ", "the", " ", "list", " ", "of", " ", "explicit", 
               " ", "and", " ", "implicit", " ", "impactors"}]}], " ", "*)"}],
             "\n", "   ", "\n", "   ", 
            RowBox[{"vellist", "=", 
             RowBox[{"{", "}"}]}], ";", "\n", "\n", 
            StyleBox[
             RowBox[{"(*", " ", 
              RowBox[{"My", " ", 
               RowBox[{"codes", ":", " ", "G"}]}], " ", "*)"}],
             FontSize->16], "\n", "\n", 
            RowBox[{"G", "=", 
             RowBox[{"6.67", "*", 
              RowBox[{"10", "^", 
               RowBox[{"(", 
                RowBox[{"-", "11"}], ")"}]}]}]}], ";", "\n", 
            RowBox[{
             RowBox[{"omeg", "[", 
              RowBox[{"[", "3", "]"}], "]"}], "=", 
             RowBox[{
              RowBox[{
               RowBox[{"parameters", "[", 
                RowBox[{"[", 
                 RowBox[{
                  RowBox[{"Position", "[", 
                   RowBox[{"parameters", ",", "\"\<omega\>\""}], "]"}], "[", 
                  RowBox[{"[", 
                   RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "]"}], "[", 
               RowBox[{"[", "2", "]"}], "]"}], "*", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"G", "*", 
                 RowBox[{"4", "/", "3"}], "*", " ", "Pi", "*", 
                 RowBox[{"dens", "/", 
                  RowBox[{"10", "^", "9"}]}]}], ")"}], "^", "0.5"}]}]}], ";", 
            "\n", 
            RowBox[{"obliq", "=", " ", 
             RowBox[{
              RowBox[{"parameters", "[", 
               RowBox[{"[", 
                RowBox[{
                 RowBox[{"Position", "[", 
                  RowBox[{"parameters", ",", "\"\<obliq\>\""}], "]"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], ";", "\n", 
            RowBox[{"time0", "=", 
             RowBox[{"time", "-", "deltime"}]}], ";", "\n", 
            RowBox[{"slides", "=", "1"}], ";", "\n", "   ", 
            RowBox[{
            "Do", "[", 
             "                                                                \
                            ", 
             RowBox[{"(*", " ", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"ii", ",", 
                 RowBox[{"Length", "[", "impactorstuff", "]"}]}], "}"}], " ", 
               "loop", " ", "over", " ", "impactors", " ", "in", " ", "time", 
               " ", "order"}], "  ", "*)"}], "\n", "   ", "\n", "    ", 
             RowBox[{
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"d", "/", "d0"}], " ", "<", " ", ".001"}], ",", 
                 RowBox[{"(*", " ", 
                  RowBox[{
                   RowBox[{
                   "Print", "[", "\"\<break since d/d0<.001 \>\"", "]"}], 
                   ";"}], "*)"}], 
                 RowBox[{"Break", "[", "]"}]}], "]"}], ";", 
               RowBox[{"(*", " ", 
                RowBox[{"it", " ", 
                 RowBox[{"busted", ".", "forget"}], " ", "the", " ", "rest", 
                 " ", "of", " ", "the", " ", 
                 RowBox[{"impactors", "."}]}], " ", "*)"}], "\n", "    ", 
               "\n", "    ", 
               RowBox[{"diameter", " ", "=", " ", 
                RowBox[{"impactorstuff", "[", 
                 RowBox[{"[", 
                  RowBox[{"ii", ",", " ", "1"}], "]"}], "]"}]}], ";", "\n", 
               "   ", "\n", "   ", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"diameter", "<", 
                  RowBox[{"10", "^", 
                   RowBox[{"-", "5"}]}]}], ",", 
                 RowBox[{"Break", "[", "]"}]}], "]"}], ";", " ", 
               RowBox[{"(*", " ", 
                RowBox[{
                "but", " ", "this", " ", "should", " ", "not", " ", "happen", 
                 "??"}], " ", "*)"}], "\[IndentingNewLine]", 
               RowBox[{"binnumi", " ", "=", " ", 
                RowBox[{
                 RowBox[{"astnum", "[", "diameter", "]"}], "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], ";", " ", 
               RowBox[{"(*", " ", 
                RowBox[{
                 RowBox[{
                 "this", " ", "could", " ", "be", " ", "carried", " ", 
                  "along"}], ",", " ", 
                 RowBox[{
                  RowBox[{"not", " ", "reconstructed"}], ".."}]}], "  ", 
                "*)"}], "\[IndentingNewLine]", "\n", "    ", 
               RowBox[{"phival", " ", "=", " ", 
                RowBox[{"impactorstuff", "[", 
                 RowBox[{"[", 
                  RowBox[{"ii", ",", " ", "2"}], "]"}], "]"}]}], ";", "\n", 
               "    ", 
               RowBox[{"vel", " ", "=", " ", 
                RowBox[{"impactorstuff", "[", 
                 RowBox[{"[", 
                  RowBox[{"ii", ",", " ", "3"}], "]"}], "]"}]}], ";", "\n", 
               RowBox[{"AppendTo", "[", 
                RowBox[{"vellist", ",", "vel"}], "]"}], ";", "\n", "    ", 
               RowBox[{"densi", " ", "=", " ", 
                RowBox[{"impactorstuff", "[", 
                 RowBox[{"[", 
                  RowBox[{"ii", ",", " ", "4"}], "]"}], "]"}]}], ";", "\n", 
               "    ", 
               RowBox[{"ninbin", " ", "=", " ", 
                RowBox[{"impactorstuff", "[", 
                 RowBox[{"[", 
                  RowBox[{"ii", ",", " ", "5"}], "]"}], "]"}]}], ";", "\n", 
               "   ", 
               RowBox[{"impacttime", " ", "=", " ", 
                RowBox[{"impactorstuff", "[", 
                 RowBox[{"[", 
                  RowBox[{"ii", ",", " ", "6"}], "]"}], "]"}]}], ";", " ", 
               RowBox[{"(*", " ", 
                RowBox[{
                "time", " ", "when", " ", "this", " ", "impactor", " ", 
                 "hits"}], " ", "*)"}], "\n", "    ", "\n", "    ", 
               RowBox[{"tlasthit", " ", "=", " ", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"ii", " ", ">", " ", "1"}], ",", " ", 
                  RowBox[{"impactorstuff", "[", 
                   RowBox[{"[", 
                    RowBox[{
                    RowBox[{"ii", " ", "-", " ", "1"}], ",", " ", "6"}], 
                    "]"}], "]"}], ",", " ", 
                  RowBox[{"time", " ", "-", " ", "deltime"}]}], "]"}]}], ";", 
               "                                              ", 
               RowBox[{"(*", " ", 
                RowBox[{
                "time", " ", "when", " ", "previous", " ", "impactor", " ", 
                 "hit", " ", "this", " ", "target"}], " ", "*)"}], "\n", 
               "    ", "\n", "    ", 
               RowBox[{"vstar", " ", "=", " ", 
                RowBox[{"impactorstuff", "[", 
                 RowBox[{"[", 
                  RowBox[{"ii", ",", " ", "7"}], "]"}], "]"}]}], ";", "\n", 
               "    ", 
               RowBox[{"thetaval", " ", "=", " ", 
                RowBox[{"impactorstuff", "[", 
                 RowBox[{"[", 
                  RowBox[{"ii", ",", " ", "8"}], "]"}], "]"}]}], ";", "\n", 
               "    ", 
               RowBox[{"Phival", " ", "=", " ", 
                RowBox[{"impactorstuff", "[", 
                 RowBox[{"[", 
                  RowBox[{"ii", ",", " ", "9"}], "]"}], "]"}]}], ";", "\n", 
               "    ", 
               RowBox[{"Thetaval", " ", "=", " ", 
                RowBox[{"impactorstuff", "[", 
                 RowBox[{"[", 
                  RowBox[{"ii", ",", " ", "10"}], "]"}], "]"}]}], ";", "\n", 
               "    ", 
               RowBox[{"mass", " ", "=", " ", 
                RowBox[{
                 RowBox[{"Pi", "/", "6"}], " ", "densi", " ", 
                 RowBox[{"diameter", "^", "3"}]}]}], ";", "\n", "    ", "\n", 
               "    ", 
               RowBox[{"dlast", " ", "=", " ", 
                RowBox[{"dlist", "[", 
                 RowBox[{"[", "iast", "]"}], "]"}]}], ";", 
               "                                                              \
                                  ", 
               RowBox[{"(*", " ", 
                RowBox[{
                "current", " ", "target", " ", "d", " ", "in", " ", 
                 "impactor", " ", "loop"}], " ", "*)"}], "\n", "    ", "\n", 
               "    ", 
               RowBox[{"trelax", " ", "=", " ", 
                RowBox[{"relaxfac", " ", 
                 RowBox[{
                  RowBox[{"Log", "[", 
                   RowBox[{"wobble", "/", 
                    RowBox[{"(", 
                    RowBox[{"1.", " ", "Degree"}], ")"}]}], "]"}], "/", "2"}],
                  "  ", "1.1", " ", 
                 RowBox[{"10", "^", 
                  RowBox[{"-", "3"}]}], " ", 
                 RowBox[{"dlast", "^", 
                  RowBox[{"-", "2"}]}], " ", 
                 RowBox[{
                  RowBox[{"Abs", "[", "omegnet", "]"}], "^", 
                  RowBox[{"-", "3"}]}]}]}], ";", "  ", "\n", "\n", "    ", 
               RowBox[{"(*", " ", 
                RowBox[{
                 RowBox[{"new", " ", "trelax", " ", "in", " ", "years"}], ",",
                  " ", 
                 RowBox[{"manuscript", " ", 
                  RowBox[{"Eq", ".", " ", "41"}]}], ",", "  ", 
                 RowBox[{
                 "for", " ", "any", " ", "initial", " ", "and", " ", 
                  "adjusted", " ", "to", " ", "1", " ", "degree"}]}], " ", 
                "*)"}], " ", "\n", "    ", 
               RowBox[{"(*", " ", 
                RowBox[{
                "these", " ", "have", " ", "to", " ", "be", " ", "here", " ", 
                 "since", " ", "d", " ", "and", " ", "omeg", " ", "are", " ", 
                 "changing"}], " ", "*)"}], "\n", "    ", "\n", "    ", 
               RowBox[{"qstar", " ", "=", " ", 
                RowBox[{
                 RowBox[{"qstarf", "[", 
                  RowBox[{
                   RowBox[{"dlast", "/", "2"}], ",", " ", "phival", ",", " ", 
                   "vel"}], "]"}], "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}], ";", "\n", "    ", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"qq", " ", "=", " ", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"mass", "/", "2"}], ")"}], " ", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"vel", " ", 
                    RowBox[{"Cos", "[", "phival", "]"}]}], ")"}], "^", "2"}], 
                    "/", "Mkg"}]}]}], ";"}], " ", "*)"}], "\n", "   ", 
               RowBox[{"qq", " ", "=", " ", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"mass", "/", "2"}], ")"}], " ", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"(", "vel", " ", ")"}], "^", "2"}], "/", 
                  "Mkg"}]}]}], ";", " ", "\n", "    ", 
               RowBox[{"qratio", " ", "=", " ", 
                RowBox[{"qq", "/", "qstar"}]}], ";", "\n", "\n", 
               RowBox[{"omegaLimit", "=", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"G", "*", 
                   RowBox[{"4", "/", "3"}], "*", " ", "Pi", "*", 
                   RowBox[{"dens", "/", 
                    RowBox[{"10", "^", "9"}]}]}], ")"}], "^", "0.5"}]}], ";", 
               "                                                ", 
               RowBox[{"(*", " ", 
                RowBox[{
                 RowBox[{
                 "Omega", " ", "limit", " ", "derivec", " ", "by", " ", "me", 
                  " ", "for", " ", "the", " ", "spherical", " ", "case"}], 
                 " ", ";", "G"}], " ", "*)"}], "\n", "\n", 
               StyleBox[
                RowBox[{"(*", " ", 
                 RowBox[{"My", " ", 
                  RowBox[{"Codes", " ", ":", "G"}]}], " ", "*)"}],
                FontSize->16], "\n", "\n", 
               RowBox[{"Yorp", "[", "]"}], ";", "\n", "\n", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"Print", "[", "impacttime", "]"}], ";"}], "*)"}], 
               "\n", "\n", "\n", "\n", "\n", 
               RowBox[{"outcomesf", " ", "[", "]"}], ";", 
               "                                                              \
                                   ", 
               RowBox[{"(*", " ", 
                RowBox[{
                 RowBox[{
                 "primary", " ", "calculation", " ", "of", " ", "each", " ", 
                  "impact"}], ",", " ", 
                 RowBox[{"gives", " ", "new", " ", "d"}], ",", " ", 
                 RowBox[{
                 "calls", " ", "dmeg", " ", "to", " ", "get", " ", "omeg"}]}],
                 " ", "*)"}], "\n", 
               RowBox[{"Print", "[", 
                RowBox[{"\"\<Omega after the collision\>\"", ",", 
                 RowBox[{"omeg", "[", 
                  RowBox[{"[", "3", "]"}], "]"}]}], "]"}], ";", "\n", 
               RowBox[{"AppendTo", "[", 
                RowBox[{"myomega", ",", 
                 RowBox[{"{", 
                  RowBox[{"time0", ",", 
                   RowBox[{"omeg", "[", 
                    RowBox[{"[", "3", "]"}], "]"}]}], "}"}]}], "]"}], ";", 
               "\n", 
               StyleBox[
                RowBox[{"(*", " ", 
                 RowBox[{"MY", " ", "CODES", " ", "for", " ", "coupling"}], 
                 " ", "*)"}],
                FontSize->16], 
               StyleBox["\n",
                FontSize->16], "\n", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"diameter", ">", "dexplicit"}], ",", "\n", "\n", 
                 RowBox[{
                  RowBox[{"Landslides", "[", "]"}], ";", "\n", 
                  RowBox[{"Print", "[", 
                   RowBox[{"\"\<Omega after the Landslides\>\"", ",", 
                    RowBox[{"omeg", "[", 
                    RowBox[{"[", "3", "]"}], "]"}]}], "]"}], ";"}]}], "\n", 
                "]"}], ";", "\n", 
               RowBox[{"time0", "=", "impacttime"}], ";", "\n", "\n", 
               RowBox[{"(*", 
                RowBox[{"MY", " ", "CODES", "  ", "end"}], " ", "*)"}], "\n", 
               "\n", 
               StyleBox["    ",
                FontSize->18], 
               StyleBox[
                RowBox[{"(*", " ", 
                 RowBox[{
                 "now", " ", "check", " ", "if", " ", "it", " ", "became", 
                  " ", "a", " ", "overspun", " ", "candidate"}], " ", "*)"}],
                FontSize->18], "\n", "\n", "    ", 
               RowBox[{"currentspinlim", " ", "=", " ", 
                RowBox[{"combinedspinlimf", "[", 
                 RowBox[{
                 "d", ",", " ", "dcenter", ",", " ", "gravlimhere", ",", " ", 
                  "spinupflg"}], "]"}]}], ";", "\n", "    ", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Norm", "[", "omeg", "]"}], " ", ">", " ", 
                  "currentspinlim"}], ",", " ", 
                 RowBox[{"spunoverf", "[", "]"}]}], " ", "]"}], ";", 
               
               "                                                              \
       ", 
               RowBox[{"(*", " ", 
                RowBox[{
                 RowBox[{"will", " ", "update", " ", "omeg"}], ",", " ", 
                 RowBox[{"set", " ", "wobble", " ", "to", " ", "zero", " ", 
                  RowBox[{"(", 
                   RowBox[{"1", "\:02da"}], ")"}], " ", "if", " ", 
                  "spunover"}]}], " ", "*)"}], " ", 
               RowBox[{"(*", " ", 
                RowBox[{"G", ":", " ", 
                 RowBox[{
                 "spunoverf", " ", "changed", " ", "by", " ", "me"}]}], " ", 
                "*)"}], "\n", "    ", 
               RowBox[{"(*", " ", 
                RowBox[{
                "now", " ", "load", " ", "all", " ", "new", " ", "values"}], 
                " ", "*)"}], "\n", "     ", 
               RowBox[{
                RowBox[{"dlist", "[", 
                 RowBox[{"[", "iast", "]"}], "]"}], " ", "=", " ", "d"}], ";",
                "  ", 
               RowBox[{"(*", " ", 
                RowBox[{"new", " ", "reduced", " ", "diameter"}], " ", "*)"}],
                "\n", "     ", 
               RowBox[{
                RowBox[{"omegvals", "[", 
                 RowBox[{"[", "iast", "]"}], "]"}], " ", "=", " ", "omeg"}], 
               ";", 
               RowBox[{"(*", " ", 
                RowBox[{
                "current", " ", "value", "  ", "3", " ", "components"}], " ", 
                "*)"}], "\n", "    ", 
               RowBox[{"omegnet", " ", "=", " ", 
                RowBox[{
                 RowBox[{"Sign", "[", 
                  RowBox[{"omeg", "[", 
                   RowBox[{"[", "3", "]"}], "]"}], "]"}], " ", 
                 RowBox[{"Norm", "[", "omeg", "]"}]}]}], ";", "\n", "    ", 
               "\n", "    ", "\n", "    ", 
               RowBox[{"omegzz", " ", "=", " ", 
                RowBox[{
                 RowBox[{"Sign", "[", 
                  RowBox[{"omeg", "[", 
                   RowBox[{"[", "3", "]"}], "]"}], "]"}], " ", 
                 RowBox[{"Max", "[", 
                  RowBox[{
                   RowBox[{"Abs", "[", 
                    RowBox[{"omeg", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "]"}], ",", " ", 
                   RowBox[{"10", "^", 
                    RowBox[{"-", "9"}]}]}], "]"}]}]}], ";", "\n", "    ", 
               RowBox[{"wobble", " ", "=", " ", 
                RowBox[{"ArcTan", "[", 
                 RowBox[{
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"omeg", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "^", "2"}], " ", "+", " ", 
                    RowBox[{
                    RowBox[{"omeg", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "^", "2"}]}], "]"}], "/", 
                  
                  RowBox[{"Abs", "[", "omegzz", "]"}]}], "]"}]}], ";", "\n", 
               "\n", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Im", "[", "wobble", "]"}], ">", "0"}], ",", 
                 RowBox[{
                  RowBox[{
                  "Print", "[", "\"\<here 4, wobble not real \>\"", "]"}], 
                  ";", 
                  RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\n", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"wobble", " ", "<", " ", 
                  RowBox[{"1.", " ", "Degree"}]}], ",", " ", 
                 RowBox[{"wobble", " ", "=", " ", 
                  RowBox[{"1.", " ", "Degree"}]}]}], "]"}], ";", "\n", "    ",
                "\n", "    ", 
               RowBox[{"If", "[", " ", 
                RowBox[{
                 RowBox[{"plothis", " ", ">", " ", "0"}], ",", " ", 
                 RowBox[{"(*", " ", 
                  RowBox[{
                   RowBox[{
                   "keep", " ", "track", " ", "of", " ", "all", " ", "hits", 
                    " ", "for", " ", "a", " ", "history", " ", "asteroid"}], 
                   ",", " ", 
                   RowBox[{
                   "plothis", " ", "is", " ", "the", " ", "history", " ", 
                    "plot", " ", "number"}]}], " ", "*)"}], "\n", "     ", 
                 RowBox[{"AppendTo", "[", 
                  RowBox[{
                   RowBox[{"histplotpts", "[", 
                    RowBox[{"[", "plothis", "]"}], "]"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{
                    "impacttime", ",", " ", "d", ",", " ", "omegnet", ",", 
                    " ", "wobble"}], "}"}]}], "]"}]}], "]"}], ";", "\n", 
               "    ", "\n", "    ", 
               RowBox[{"(*", " ", 
                RowBox[{
                 RowBox[{
                 "now", " ", "reduce", " ", "size", " ", "of", " ", 
                  "remaining", " ", "impactors", " ", "to", " ", "account", 
                  " ", "for", " ", "reduction", " ", "in", " ", "target", " ",
                   "size"}], ",", " ", 
                 RowBox[{
                  RowBox[{"w", "/", "o"}], " ", "recalculation", " ", "all", 
                  " ", "the", " ", 
                  RowBox[{"impactor", ".", " ", "\n", "    ", "max"}], " ", 
                  "expected", " ", "scales", " ", "like", " ", 
                  RowBox[{
                   RowBox[{"dlargets", "~", "d"}], "^", 
                   RowBox[{"(", 
                    RowBox[{"2", "/", "alpha"}], ")"}]}]}], ",", " ", 
                 RowBox[{
                  RowBox[{"but", " ", 
                   RowBox[{"alpha", "~", "2.04"}], " ", "\n", "    ", "so", 
                   " ", "largest", " ", "espected", " ", "dlargest"}], "->", 
                  "d"}], ","}], " ", "*)"}], "\n", "    ", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"d", "/", "dlast"}], " ", "<", " ", ".95"}], ",", 
                 "\n", "     ", 
                 RowBox[{"Do", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"impactorstuff", "[", 
                    RowBox[{"[", 
                    RowBox[{"ij", ",", " ", "1"}], "]"}], "]"}], " ", "=", 
                    " ", 
                    RowBox[{
                    RowBox[{"impactorstuff", "[", 
                    RowBox[{"[", 
                    RowBox[{"ij", ",", " ", "1"}], "]"}], "]"}], " ", 
                    RowBox[{"d", "/", "dlast"}]}]}], ";"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"ij", ",", " ", 
                    RowBox[{"ii", " ", "+", " ", "1"}], ",", " ", 
                    RowBox[{"Length", "[", "impactorstuff", "]"}]}], "}"}]}], 
                  "]"}]}], "]"}]}], "\n", "    ", "\n", "    ", ",", " ", 
              RowBox[{"{", 
               RowBox[{"ii", ",", " ", 
                RowBox[{"Length", "[", "impactorstuff", "]"}]}], "}"}]}], 
             "]"}], ";", "\n", "\n", "   ", 
            RowBox[{"(*", " ", 
             RowBox[{
             "end", " ", "of", " ", "impactor", " ", "loop", " ", "all", " ", 
              "impacts", " ", "for", " ", "this", " ", "target", " ", "and", 
              " ", "time", " ", "step"}], " ", "*)"}], "\n", "   ", "\n", 
            "   ", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
              "end", " ", "of", " ", "time", " ", "step", "  ", "make", " ", 
               "history", " ", "plot", " ", "for", " ", "this", " ", 
               RowBox[{"target", "?", " ", "relax"}], " ", "wobble"}], ",", 
              " ", 
              RowBox[{
               RowBox[{
               "add", " ", "end", " ", "time", " ", "step", " ", "history", 
                " ", "points"}], ".."}]}], "*)"}], "\n", "    ", 
            RowBox[{"(*", " ", 
             RowBox[{"get", " ", "last", " ", "relaxation"}], "*)"}], "\n", 
            "   ", "\n", " ", "\n", "   ", 
            RowBox[{"impacttime", " ", "=", " ", "time"}], ";", "\n", 
            RowBox[{"Yorp", "[", "]"}], ";", "\n", "   ", 
            RowBox[{"calcomega", "[", "0", "]"}], ";", "  ", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
              "relax", " ", "spin", " ", "to", " ", "final", " ", "time"}], 
              ",", " ", 
              RowBox[{"no", " ", "new", " ", "impacts"}]}], " ", "*)"}], "\n",
             "   ", 
            RowBox[{
             RowBox[{"omegvals", "[", 
              RowBox[{"[", "iast", "]"}], "]"}], " ", "=", " ", "omeg"}], ";",
             "\n", 
            RowBox[{"resultExport", "=", 
             RowBox[{"Export", "[", 
              RowBox[{
              "\"\<~/Documents/Asteroids/omega_1\>\"", ",", "myomega", ",", 
               "\"\<Table\>\"", ",", 
               RowBox[{"\"\<FieldSeparators\>\"", "->", "\"\<    \>\""}]}], 
              "]"}]}], ";", "\n", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"FailureQ", "[", "resultExport", "]"}], ",", 
              RowBox[{
               RowBox[{
               "Print", "[", "\"\<Failed in exporting the data\>\"", "]"}], 
               ";", " ", 
               RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "   ", "\n", "\n",
             "\n", "   ", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{"If", "[", " ", 
               RowBox[{
                RowBox[{"plothis", ">", "0"}], ",", "\n", "   ", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{
                  RowBox[{"histplotpts", "[", 
                   RowBox[{"[", "plothis", "]"}], "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"time", ",", "d", ",", "omegnet", ",", "wobble"}], 
                   "}"}]}], "]"}]}], "]"}], ";"}], "*)"}], "\n", "   ", 
            RowBox[{"If", "[", 
             RowBox[{"plotmovie", ",", " ", 
              RowBox[{
               RowBox[{"AppendTo", "[", 
                RowBox[{
                 RowBox[{"asterdata", "[", 
                  RowBox[{"[", "nmovie", "]"}], "]"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"d", ",", " ", 
                   RowBox[{
                    RowBox[{"Norm", "[", "omeg", "]"}], " ", "1.38", " ", 
                    RowBox[{"10", "^", "4"}]}]}], "}"}]}], "]"}], ";", "\n", 
               "    ", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"Print", "[", 
                  RowBox[{"\"\<adding to asterdata\>\"", ",", 
                   RowBox[{"{", 
                    RowBox[{"nmovie", ",", "iast"}], "}"}]}], "]"}], ";"}], 
                "*)"}], "\n", "    ", 
               RowBox[{"If", "[", 
                RowBox[{"itsabinary", ",", " ", 
                 RowBox[{"AppendTo", "[", 
                  RowBox[{
                   RowBox[{"binformovies", "[", 
                    RowBox[{"[", "nmovie", "]"}], "]"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"d", ",", " ", 
                    RowBox[{"Norm", "[", "omeg", "]"}]}], "}"}]}], "]"}]}], 
                "]"}]}]}], "]"}], ";", "\n", "   ", "\n", "   ", "\n", "   ", 
            
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
              "reload", " ", "shapes", " ", "for", " ", "next", " ", "go"}], 
              "-", "round"}], " ", "*)"}], "\n", "   ", 
            RowBox[{
             RowBox[{
              RowBox[{"astsizetype", "[", 
               RowBox[{"[", "iast", "]"}], "]"}], "[", 
              RowBox[{"[", "6", "]"}], "]"}], " ", "=", " ", "ashape"}], ";", 
            "\n", "   ", 
            RowBox[{
             RowBox[{
              RowBox[{"astsizetype", "[", 
               RowBox[{"[", "iast", "]"}], "]"}], "[", 
              RowBox[{"[", "7", "]"}], "]"}], " ", "=", " ", "beta"}], ";"}], 
           "\n", "  ", "\n", "   ", ",", " ", 
           RowBox[{"{", 
            RowBox[{"iast", ",", " ", "nasteroids"}], "}"}]}], "]"}], ";", 
         "\n", "  ", "\n", "    ", 
         RowBox[{"(*", " ", 
          RowBox[{
          "end", " ", "of", " ", "target", " ", "asteroid", " ", "do", " ", 
           "loop", " ", "still", " ", "in", " ", "time", " ", "step", " ", 
           "loop"}], "*)"}], "\n", "  ", 
         RowBox[{"(*", " ", 
          RowBox[{
          "here", " ", "i", " ", "have", " ", "looped", " ", "on", " ", "all",
            " ", "test", " ", "asteroids", " ", "for", " ", "this", " ", 
           "time", " ", "step"}], " ", "*)"}], "\n", "  ", "\n", "  ", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
           "get", " ", "run", " ", "box", " ", "mean", " ", "spins", " ", 
            "for", " ", "each", " ", "time", " ", "step", " ", "of", " ", 
            "remaining", " ", "asteroids", "\n", "  ", "do", " ", "not", " ", 
            "need", " ", "to", " ", "cull", " ", "out", " ", "the", " ", 
            "zero", " ", "cases"}], ",", " ", 
           RowBox[{"that", " ", "is", " ", "done", " ", "in", " ", 
            RowBox[{"runboxmeanf", "[", "]"}]}]}], " ", "*)"}], "\n", "  ", 
         RowBox[{"(*", " ", 
          RowBox[{
          "get", " ", "run", " ", "box", " ", "mean", " ", "spins", " ", 
           "for", " ", "each", " ", "step"}], " ", "*)"}], "\n", "  ", "\n", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Min", "[", "dlist", "]"}], "<", 
             RowBox[{"0.9", " ", 
              RowBox[{"Max", "[", "dlist", "]"}]}]}], "&&", 
            RowBox[{
             RowBox[{"Length", "[", "dlist", "]"}], ">", "6"}]}], ",", "\n", 
           "     ", 
           RowBox[{
            RowBox[{"spinptsnow", " ", "=", " ", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"dlist", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], ",", " ", 
                 RowBox[{"1.38", " ", 
                  RowBox[{"10", "^", "4"}], " ", 
                  RowBox[{"Norm", "[", 
                   RowBox[{"omegvals", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "]"}]}]}], "}"}], ",", 
               " ", 
               RowBox[{"{", 
                RowBox[{"i", ",", " ", 
                 RowBox[{"Length", "[", "dlist", "]"}]}], "}"}]}], "]"}]}], 
            ";", "\n", "   ", 
            RowBox[{"meanplot", " ", "=", " ", 
             RowBox[{"runboxmeanf", "[", 
              RowBox[{"spinptsnow", ",", " ", "1.1", ",", " ", "Green"}], 
              "]"}]}], ";", "\n", 
            RowBox[{"meanplot", "=", 
             RowBox[{"ListLogLogPlot", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"Mean", "[", "dlist", "]"}], ",", " ", 
                  RowBox[{"1.38", " ", 
                   RowBox[{"10", "^", "4"}], " ", 
                   RowBox[{"Norm", "[", 
                    RowBox[{"Mean", "[", "omegvals", "]"}], "]"}]}]}], "}"}], 
                "}"}], ",", 
               RowBox[{"PlotStyle", "\[Rule]", "Green"}]}], "]"}]}], ";", 
            "\n", "   ", "\n", "   ", 
            RowBox[{
             RowBox[{"runboxplots", "[", 
              RowBox[{"[", "istep", "]"}], "]"}], " ", "=", " ", 
             RowBox[{"Show", "[", 
              RowBox[{"meanplot", ",", " ", "spindata2019means", ",", " ", 
               RowBox[{"spinlimplots", "[", "\"\<Cycles/day\>\"", "]"}], ",", 
               "\n", "     ", 
               RowBox[{"Graphics", "[", 
                RowBox[{"Text", "[", 
                 RowBox[{
                  RowBox[{"Framed", "[", 
                   RowBox[{"StringForm", "[", 
                    RowBox[{
                    "\"\<This is the running box mean of the target asteroids\
\\r at `` Yrs.\\rThe red curve \n         is from the spin database: \\rThe \
left segment is from NEA's, \\rthe right segment is the main belt\>\"", ",", 
                    " ", 
                    RowBox[{"N", "[", "time", "]"}]}], "]"}], "]"}], ",", 
                  "\n", "       ", 
                  RowBox[{"Scaled", "[", 
                   RowBox[{"{", 
                    RowBox[{".4", ",", " ", ".15"}], "}"}], "]"}], ",", " ", 
                  RowBox[{"Background", " ", "\[Rule]", " ", "White"}], ",", 
                  " ", 
                  RowBox[{"BaseStyle", " ", "\[Rule]", " ", 
                   RowBox[{"{", 
                    RowBox[{"14", ",", " ", 
                    RowBox[{
                    "FontFamily", " ", "\[Rule]", " ", "\"\<Times\>\""}]}], 
                    "}"}]}]}], "]"}], "]"}], ",", " ", 
               RowBox[{"ImageSize", " ", "\[Rule]", " ", "Full"}]}], 
              "]"}]}]}]}], "]"}], ";", "\n", 
         RowBox[{"(*", " ", 
          RowBox[{"running", " ", "box", " ", "mean"}], " ", "*)"}], "\n", 
         "  ", "\n", "  ", 
         RowBox[{"(*", " ", 
          RowBox[{
          "can", " ", "now", " ", "update", " ", "cumdistr", " ", "and", " ", 
           "number", " ", "in", " ", "each", " ", "bin"}], "*)"}], "\n", "  ", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
           "the", " ", "depletion", " ", "is", " ", "a", " ", "given", " ", 
            "rate", " ", "as", " ", "a", " ", "function", " ", "of", " ", 
            "dia"}], ",", " ", 
           RowBox[{
           "scale", " ", "by", " ", "time", " ", "step", " ", "size"}]}], " ",
           "*)"}], "\n", "  ", 
         RowBox[{"(*", " ", 
          RowBox[{
          "now", " ", "the", " ", "change", " ", "due", " ", "to", " ", 
           "fragmentation", " ", "in", " ", "each", " ", "bin"}], " ", "*)"}],
          "\[IndentingNewLine]", "  ", "\[IndentingNewLine]", "  ", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"F", ".", "  ", "update"}], " ", "POPULATIONS", " ", 
           "after", " ", "the", " ", "target", " ", "loop", " ", "and", " ", 
           "at", " ", "end", " ", "of", " ", "each", " ", "time", " ", 
           "step"}], " ", "*)"}], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"Comments", " ", "on", " ", "mass", " ", "adjustments"}], 
           " ", ";"}], " ", "*)"}], "\n", 
         RowBox[{"(*", "  ", 
          RowBox[{
           RowBox[{
           "The", " ", "additions", " ", "and", " ", "losses", " ", "to", " ",
             "the", " ", "differential", " ", "distribution"}], ",", " ", 
           RowBox[{"the", " ", "number", " ", "in", " ", "each", " ", "bin"}],
            ",", " ", 
           RowBox[{
           "for", " ", "the", " ", "impacts", " ", "are", " ", "divided", " ",
             "into", " ", "3", " ", 
            RowBox[{"parts", ".", "  ", "The"}], " ", 
            RowBox[{"array", " ", "'"}], 
            RowBox[{
             RowBox[{"popchange", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "'"}], " ", "for", " ", "each", 
            " ", "of", " ", "3", " ", "parts", " ", "is", " ", "the", " ", 
            "changes", " ", "in", " ", "numbers", " ", "in", " ", "each", " ",
             "bin", " ", "and", " ", "is", " ", "reset", " ", "to", " ", 
            "zero", " ", "at", " ", "the", " ", "beginning", " ", "of", " ", 
            "the", " ", "time", " ", 
            RowBox[{"step", ".", " ", "It"}], " ", "is", " ", "accumulated", 
            " ", "for", " ", "each", " ", "target", " ", "and", " ", "its", 
            " ", 
            RowBox[{"impacts", ".", " ", "at"}], " ", "the", " ", "end", " ", 
            "of", " ", "the", " ", "time", " ", "step"}], ",", " ", 
           RowBox[{
           "it", " ", "is", " ", "added", " ", "into", " ", "diffdistr", " ", 
            "whihc", " ", "are", " ", "the", " ", "pairs", " ", "of", " ", 
            "diameters", " ", "and", " ", 
            RowBox[{"numbers", ".", "\n", "\[IndentingNewLine]", "The"}], " ",
             "3", " ", "parts", " ", "include", " ", "loss", " ", "of", " ", 
            "impactor", " ", "and", " ", "target"}], ",", " ", 
           RowBox[{"and", " ", "gain", " ", "of", " ", 
            RowBox[{"fragments", ".", "  ", "They"}], " ", 
            RowBox[{"are", ":", "  ", "\[IndentingNewLine]", " ", 
             RowBox[{
             "1.", "  ", "The", " ", "loss", " ", "including", " ", "th", " ",
               "impactor", " ", "and", " ", "redistribution", " ", "from", 
              " ", "cratering", " ", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"ignored", "?"}], ")"}], ".", " ", 
               RowBox[{"popchange", "[", 
                RowBox[{"[", "1", "]"}], "]"}]}], "\[IndentingNewLine]", "2.",
               " ", "The", " ", "losses", " ", "and", " ", "redistribution", 
              " ", "for", " ", "near", " ", "or", " ", "over", " ", "CD", " ",
               "event", " ", "from", " ", "a", " ", "target", " ", "in", " ", 
              "a", " ", 
              RowBox[{"bin", ".", " ", 
               RowBox[{"popchange", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], "\[IndentingNewLine]", "3.",
               " ", "The", " ", "losses", " ", "and", " ", "redistribution", 
              " ", "from", " ", "a", " ", "pulverization"}]}]}], ",", " ", 
           RowBox[{"includes", " ", "impactor"}], ",", " ", 
           RowBox[{
           "from", " ", "a", " ", "target", " ", "in", " ", "a", " ", 
            RowBox[{"bin", ".", " ", 
             RowBox[{"popchange", "[", 
              RowBox[{"[", "3", "]"}], "]"}]}], "\[IndentingNewLine]", 
            "\[IndentingNewLine]", "In", " ", "each", " ", "case", " ", 
            "each", " ", "target", " ", "is", " ", "considered", " ", "a", 
            " ", "sample", " ", "from", " ", "each", " ", 
            RowBox[{"bin", ".", " ", "Therefore"}], " ", "the", " ", "total", 
            " ", "associated", " ", "with", " ", "each", " ", "event", " ", 
            "is", " ", "multiplied", " ", "by", " ", "the", " ", "ratio", " ",
             "of", " ", "the", " ", "total", " ", "number", " ", "of", " ", 
            "targets", " ", "in", " ", "a", " ", "bin", " ", "to", " ", "the",
             " ", "number", " ", "of", " ", "sample", " ", "targets", " ", 
            "in", " ", "the", " ", 
            RowBox[{
            "bin", ".", "\[IndentingNewLine]", "\[IndentingNewLine]", "The"}],
             " ", "3", " ", "impact", " ", "events", " ", "are", " ", 
            "considered", " ", "first"}], ",", " ", 
           RowBox[{"and", " ", "then", " ", "the", " ", 
            RowBox[{"depletion", ".", "\n", "Note"}], " ", "also", " ", 
            "that", " ", "the", " ", "diffdistr", " ", "is", " ", "the", " ", 
            
            StyleBox["number",
             FontSlant->"Italic"], " ", "of", " ", "objects", " ", "in", " ", 
            "each", " ", "bin"}], ",", " ", 
           RowBox[{
           "the", " ", "corresponding", " ", "mass", " ", "is", " ", 
            "caculated", " ", "separately", " ", "using", " ", 
            RowBox[{
             RowBox[{"massindist", "[", 
              RowBox[{"dist_", ",", "densbar_"}], "]"}], "."}]}]}], "*)"}], 
         "\n", "\n", "  ", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"!", "steadypop"}], ",", "\n", "  ", 
           RowBox[{"(*", " ", 
            RowBox[{
            "accumulate", " ", "frag", " ", "during", " ", "time", " ", 
             "steps", " ", "for", " ", "each", " ", 
             RowBox[{"bin", ".", " ", "now"}], " ", "there", " ", "are", " ", 
             "3", " ", "kinds"}], " ", "*)"}], "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"fragpart", "=", 
             RowBox[{"fragpart", "+", "popchange"}]}], ";", " ", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
              "the", " ", "total", " ", "bin", " ", "numbers", " ", "of", " ",
                "3", " ", "types", " ", "of", " ", "changes", " ", "of", " ", 
               "frags", " ", "at", " ", "the", " ", "end", " ", "of", " ", 
               "each", " ", "time", " ", 
               RowBox[{"step", ".", "  ", "used"}], " ", "for", " ", 
               "plotting"}], ",", " ", 
              RowBox[{
              "either", " ", "movies", " ", "or", " ", "at", " ", "end"}]}], 
             " ", "*)"}], "\n", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{"Print", "[", 
               RowBox[{
               "\"\<update populations here \
{time,istep,popchange,fragpart\>\"", ",", 
                RowBox[{"{", 
                 RowBox[{
                 "time", ",", "istep", ",", "popchange", ",", "fragpart"}], 
                 "}"}]}], "]"}], ";"}], "*)"}], "\n", "\[IndentingNewLine]", 
            RowBox[{"popchangeall", "=", 
             RowBox[{"Sum", "[", 
              RowBox[{
               RowBox[{"popchange", "[", 
                RowBox[{"[", "ik", "]"}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"ik", ",", "3"}], "}"}]}], "]"}]}], ";", " ", 
            RowBox[{"(*", " ", 
             RowBox[{"all", " ", "3", " ", "types", " ", "combined"}], " ", 
             "*)"}], "\n", 
            RowBox[{"(*", " ", 
             RowBox[{
             "accumulate", " ", "all", " ", "changes", " ", "for", " ", 
              "diffdistr"}], "*)"}], "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"diffdistr", "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", " ", "2"}], "]"}], "]"}], "=", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"Max", "[", 
                RowBox[{"0", ",", 
                 RowBox[{
                  RowBox[{"diffdistr", "[", 
                   RowBox[{"[", 
                    RowBox[{"ii", ",", "2"}], "]"}], "]"}], "+", 
                  RowBox[{"popchangeall", "[", 
                   RowBox[{"[", "ii", "]"}], "]"}]}]}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"ii", ",", 
                 RowBox[{"numcum", "-", "1"}]}], "}"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
              "cannot", " ", "remove", " ", "more", " ", "than", " ", "all", 
               " ", "of", " ", "them"}], ".."}], " ", "*)"}], " ", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{
               RowBox[{"diffdistr", "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", " ", "2"}], "]"}], "]"}], "=", 
               RowBox[{
                RowBox[{"diffdistr", "[", 
                 RowBox[{"[", 
                  RowBox[{"All", ",", "2"}], "]"}], "]"}], "+", 
                RowBox[{"popchangeall", "[", 
                 RowBox[{"[", "All", "]"}], "]"}]}]}], ";"}], "*)"}], " ", 
            RowBox[{"(*", " ", 
             RowBox[{"what", " ", "if", " ", 
              RowBox[{"negative", "?"}]}], "*)"}], "\n", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{"Print", "[", 
               RowBox[{"\"\<huh2? \>\"", ",", "diffdistr"}], "]"}], ";"}], 
             "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{"now", " ", "the", " ", "depletions"}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"difflossrate", " ", "=", " ", 
             RowBox[{"lostfrombins", " ", 
              RowBox[{"diffdistr", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", " ", "2"}], "]"}], "]"}]}]}], ";", " ", 
            RowBox[{"(*", " ", 
             RowBox[{
             "number", " ", "rate", " ", "lost", " ", "from", " ", "each", 
              " ", "bin", " ", "per", " ", "million", " ", 
              RowBox[{"year", ".", "  ", "some"}], " ", "percentage", " ", 
              "of", " ", "remaining", " ", "oness"}], "*)"}], "\n", 
            RowBox[{"stepdepletion", " ", "=", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"tmax", "/", "nsteps"}], ")"}], "/", 
               RowBox[{"10", "^", "6"}]}], " ", "difflossrate"}]}], ";", 
            RowBox[{"(*", " ", 
             RowBox[{
             "number", " ", "lost", " ", "in", " ", "this", " ", "time", " ", 
              "step", " ", "from", " ", "each", " ", "bin", " ", "from", " ", 
              "depletions"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{"Print", "[", 
               RowBox[{"\"\<time, depletions \>\"", ",", 
                RowBox[{"{", 
                 RowBox[{"time", ",", "stepdepletion"}], "}"}]}], "]"}], 
              ";"}], "*)"}], "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{
               RowBox[{
               "make", " ", "a", " ", "cumulative", " ", "number", " ", 
                "distribution", " ", "of", " ", "all", " ", "to", " ", "this",
                 " ", "time", " ", "step"}], ".."}], " ", "to", " ", "here", 
              " ", "the", " ", "depletions", " ", "are", " ", 
              RowBox[{"positive", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{"Print", "[", 
               RowBox[{"\"\<accumulate2 \>\"", ",", 
                RowBox[{"{", 
                 RowBox[{"time", ",", 
                  RowBox[{"diffdistr", "[", 
                   RowBox[{"[", 
                    RowBox[{"31", ",", "2"}], "]"}], "]"}], ",", 
                  RowBox[{"stepdepletion", "[", 
                   RowBox[{"[", "31", "]"}], "]"}]}], "}"}]}], "]"}], ";"}], 
             "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"depletepart", "=", 
             RowBox[{"depletepart", "+", "stepdepletion"}]}], ";", " ", 
            RowBox[{"(*", 
             RowBox[{
             "total", " ", "numbers", " ", "to", " ", "this", " ", "time"}], 
             " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                 "this", " ", "should", " ", "never", " ", "be", " ", 
                  "needed"}], ".."}], " ", 
                RowBox[{"diffdistr", "[", 
                 RowBox[{"[", 
                  RowBox[{"All", ",", " ", "2"}], "]"}], "]"}]}], " ", "=", 
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{"Max", "[", 
                  RowBox[{"0", ",", 
                   RowBox[{
                    RowBox[{"diffdistr", "[", 
                    RowBox[{"[", 
                    RowBox[{"ii", ",", "2"}], "]"}], "]"}], "-", 
                    RowBox[{"stepdepletion", "[", 
                    RowBox[{"[", "ii", "]"}], "]"}]}]}], "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"ii", ",", 
                   RowBox[{"numcum", "-", "1"}]}], "}"}]}], "]"}]}], ";"}], 
             " ", "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"diffdistr", "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", " ", "2"}], "]"}], "]"}], " ", "=", 
             RowBox[{
              RowBox[{"diffdistr", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "2"}], "]"}], "]"}], "-", 
              RowBox[{"stepdepletion", "[", 
               RowBox[{"[", "All", "]"}], "]"}]}]}], ";", " ", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{"Print", "[", 
               RowBox[{"\"\<accumulate3 \>\"", ",", 
                RowBox[{"{", 
                 RowBox[{"time", ",", 
                  RowBox[{"diffdistr", "[", 
                   RowBox[{"[", 
                    RowBox[{"31", ",", "2"}], "]"}], "]"}]}], "}"}]}], "]"}], 
              ";"}], "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"cumdistr", " ", "=", " ", 
             RowBox[{"Transpose", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"cumdistr0", "[", 
                 RowBox[{"[", 
                  RowBox[{"All", ",", " ", "1"}], "]"}], "]"}], ",", " ", 
                RowBox[{"Prepend", "[", 
                 RowBox[{
                  RowBox[{"Accumulate", "[", 
                   RowBox[{"diffdistr", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", " ", "2"}], "]"}], "]"}], "]"}], ",", 
                  " ", "0"}], "]"}]}], "}"}], "]"}]}], ";", 
            "\[IndentingNewLine]", "     ", "\[IndentingNewLine]", 
            StyleBox["\[IndentingNewLine]",
             Background->GrayLevel[0.85]], 
            StyleBox[
             RowBox[{"(*", " ", 
              RowBox[{
              "these", " ", "are", " ", "for", " ", "movies", " ", "of", " ", 
               "population"}], " ", "*)"}],
             Background->GrayLevel[0.85]], "\n", 
            StyleBox["\[IndentingNewLine]",
             Background->GrayLevel[1]], 
            RowBox[{
             RowBox[{"cumplots", "[", 
              RowBox[{"[", 
               RowBox[{"istep", "+", "1"}], "]"}], "]"}], "=", " ", 
             RowBox[{"Show", "[", 
              RowBox[{"cumplot1", ",", "cumplot2", ",", 
               RowBox[{"ListLogLogPlot", "[", 
                RowBox[{"cumdistr", ",", " ", 
                 RowBox[{"ImageSize", " ", "\[Rule]", " ", "Large"}], ",", 
                 RowBox[{"PlotStyle", "\[Rule]", "Black"}], ",", 
                 RowBox[{"Joined", "\[Rule]", "True"}], ",", "\n", "      ", 
                 RowBox[{"PlotRange", " ", "\[Rule]", " ", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"10", "^", 
                    RowBox[{"-", "5"}]}], ",", " ", 
                    RowBox[{"10", "^", "3"}]}], "}"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{".1", ",", " ", 
                    RowBox[{"10", "^", "16"}]}], "}"}]}], "}"}]}]}], "]"}], 
               ",", " ", 
               RowBox[{"Graphics", "[", 
                RowBox[{"Text", "[", 
                 RowBox[{
                  RowBox[{"\"\<Time= \>\"", " ", "<>", " ", 
                   RowBox[{"ToString", "[", 
                    RowBox[{"time", "/", 
                    RowBox[{"10", "^", "9"}]}], "]"}], "<>", "\"\< Gyr\>\""}],
                   ",", " ", 
                  RowBox[{"Scaled", "[", 
                   RowBox[{"{", 
                    RowBox[{".5", ",", " ", "0.9"}], "}"}], "]"}]}], "]"}], 
                "]"}]}], "]"}]}]}]}], "]"}], ";", "\n", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"AppendTo", "[", 
              RowBox[{"diffplots", ",", " ", 
               RowBox[{"Show", "[", 
                RowBox[{
                 RowBox[{"ListLogLogPlot", "[", 
                  RowBox[{"diffdistr", ",", " ", 
                   RowBox[{"ImageSize", " ", "\[Rule]", " ", "Large"}], ",", 
                   " ", 
                   RowBox[{"PlotRange", " ", "\[Rule]", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"10", "^", 
                    RowBox[{"-", "4"}]}], ",", " ", 
                    RowBox[{"10", "^", "3"}]}], "}"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{".1", ",", " ", 
                    RowBox[{"10", "^", "16"}]}], "}"}]}], "}"}]}]}], "]"}], 
                 ",", "\n", "     ", 
                 RowBox[{"ListLogLogPlot", "[", 
                  RowBox[{
                   RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"cumdistr", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", " ", "1"}], "]"}], "]"}], ",", 
                    RowBox[{"-", " ", 
                    RowBox[{"Sum", "[", 
                    RowBox[{
                    RowBox[{"fragpartcum", "[", 
                    RowBox[{"[", "ii", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"ii", ",", "4"}], "}"}]}], "]"}]}]}], "}"}], 
                    "]"}], ",", " ", 
                   RowBox[{"PlotMarkers", " ", "\[Rule]", " ", "\"\<f\>\""}], 
                   ",", " ", 
                   RowBox[{"ImageSize", " ", "\[Rule]", " ", "Large"}], ",", 
                   "\n", "      ", 
                   RowBox[{"PlotRange", " ", "\[Rule]", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"10", "^", 
                    RowBox[{"-", "4"}]}], ",", " ", 
                    RowBox[{"10", "^", "3"}]}], "}"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{".1", ",", " ", 
                    RowBox[{"10", "^", "16"}]}], "}"}]}], "}"}]}]}], "]"}], 
                 ",", " ", 
                 RowBox[{"Graphics", "[", 
                  RowBox[{"Text", "[", 
                   RowBox[{
                    RowBox[{"\"\<Timestep= \>\"", " ", "<>", " ", 
                    RowBox[{"ToString", "[", "itime", "]"}]}], ",", " ", 
                    RowBox[{"Scaled", "[", 
                    RowBox[{"{", 
                    RowBox[{".5", ",", " ", "0.9"}], "}"}], "]"}]}], "]"}], 
                  "]"}]}], "]"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
            StyleBox["  ",
             Background->GrayLevel[1]], "\n", 
            StyleBox[" ",
             Background->GrayLevel[1]], 
            StyleBox["]",
             Background->GrayLevel[1]]}], 
           StyleBox[";",
            Background->GrayLevel[1]]}], "*)"}], 
         StyleBox[" ",
          Background->GrayLevel[1]], 
         StyleBox[
          RowBox[{"(*", 
           RowBox[{
            RowBox[{
            "end", " ", "of", " ", "not", " ", "steady", " ", "update"}], 
            ".."}], "*)"}],
          Background->GrayLevel[1]], 
         StyleBox["\n",
          Background->GrayLevel[1]], "\[IndentingNewLine]", "  ", 
         RowBox[{"calctime", "=", 
          RowBox[{"AbsoluteTime", "[", "]"}]}], ";", "\[IndentingNewLine]", 
         "  ", 
         RowBox[{"astsurv", " ", "=", " ", 
          RowBox[{"Flatten", "[", 
           RowBox[{"Position", "[", 
            RowBox[{"dlist", ",", " ", 
             RowBox[{"_", "?", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"#", " ", ">", " ", 
                 RowBox[{"1.", " ", 
                  RowBox[{"10", "^", 
                   RowBox[{"-", "5"}]}]}]}], " ", "&"}], ")"}]}]}], "]"}], 
           "]"}]}], ";", " ", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"all", " ", "with", " ", "d"}], ">", 
           RowBox[{"10", "^", 
            RowBox[{"-", "5"}]}]}], " ", "*)"}], "\n", "  ", "\n", "  ", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"craters", " ", "&&", " ", 
            RowBox[{"d", " ", ">", " ", "0"}]}], ",", "\n", "   ", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{
             "now", " ", "upscaled", " ", "to", " ", "the", " ", "entire", 
              " ", "asteroid", " ", "surface", " ", "area"}], ",", " ", 
             RowBox[{
             "next", " ", "get", " ", "all", " ", "calculated", " ", 
              "craters", " ", "to", " ", "date"}]}], " ", "*)"}], "\n", "   ", 
           RowBox[{
            RowBox[{"craterdias", " ", "=", " ", 
             RowBox[{"Join", "[", 
              RowBox[{
               RowBox[{"spalldias", "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", " ", "3"}], "]"}], "]"}], ",", " ", 
               RowBox[{"dcrimdias", "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", " ", "3"}], "]"}], "]"}], ",", " ", 
               RowBox[{"complexdias", "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", " ", "3"}], "]"}], "]"}]}], "]"}]}], ";",
             "\n", "   ", 
            RowBox[{"craterdias", " ", "=", " ", 
             RowBox[{"ReverseSort", "[", "craterdias", "]"}]}], ";", " ", 
            RowBox[{"(*", " ", 
             RowBox[{"for", " ", "distibutions"}], " ", "*)"}], "\n", "   ", 
            RowBox[{"plotpoints", " ", "=", " ", 
             RowBox[{"Transpose", "[", 
              RowBox[{"{", 
               RowBox[{"craterdias", ",", " ", 
                RowBox[{"Range", "[", 
                 RowBox[{"Length", "[", "craterdias", "]"}], "]"}]}], "}"}], 
              "]"}]}], ";", "\n", "   ", 
            RowBox[{"AppendTo", "[", 
             RowBox[{"craterplotpts", ",", " ", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"time", " ", "+", " ", "deltime"}], ",", " ", 
                "plotpoints"}], "}"}]}], "]"}]}]}], 
          RowBox[{"(*", " ", 
           RowBox[{
           "these", " ", "are", " ", "all", " ", "of", " ", "the", " ", 
            "craters", " ", "to", " ", "this", " ", 
            RowBox[{"time", "."}]}], " ", "*)"}], "\n", "   ", "]"}], ";", 
         "\n", "  ", "\n", "  ", 
         RowBox[{"dtimetonow", " ", "=", " ", 
          RowBox[{
           RowBox[{"N", "[", 
            RowBox[{
             RowBox[{"AbsoluteTime", "[", "]"}], " ", "-", " ", "t0"}], "]"}],
            " ", "-", " ", "timetonow"}]}], ";", "\n", "  ", 
         RowBox[{"timetonow", " ", "=", " ", 
          RowBox[{"N", "[", 
           RowBox[{
            RowBox[{"AbsoluteTime", "[", "]"}], " ", "-", " ", "t0"}], 
           "]"}]}], ";"}], "\n", "  ", "\n", "\n", "  ", ",", " ", 
        RowBox[{"{", 
         RowBox[{"istep", ",", " ", "nsteps"}], "}"}]}], "]"}]}], ",", "\n", 
     "\n", 
     StyleBox[" ",
      FontSize->18], 
     StyleBox[
      RowBox[{"(*", " ", 
       RowBox[{"For", " ", "Output", " ", 
        RowBox[{"Screen", ":", " ", "G"}]}], " ", "*)"}],
      FontSize->18], "\n", " ", "\n", " ", 
     RowBox[{
      RowBox[{"numastdone", " ", "=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"iistep", " ", "-", " ", "1"}], ")"}], " ", "nasteroids"}], 
        " ", "+", " ", "iiast"}]}], ";", "\n", " ", 
      RowBox[{"totaltimeestimate", " ", "=", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"nasteroids", " ", 
          RowBox[{"nsteps", "/", "numastdone"}]}], ")"}], " ", 
        "timetonow"}]}], ";", "\n", " ", 
      RowBox[{"timetogo", " ", "=", " ", 
       RowBox[{"totaltimeestimate", " ", "-", " ", "timetonow"}]}], ";", "\n",
       "\[IndentingNewLine]", " ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"timetonow", " ", "\[Equal]", " ", "0."}], ",", "  ", "\n", 
        "   ", 
        RowBox[{"timetogomin", " ", "=", " ", 
         RowBox[{"expecttime", "/", "60"}]}], ",", "\n", "   ", 
        RowBox[{"timetogomin", " ", "=", " ", 
         RowBox[{"timetogo", "/", "60"}]}]}], "]"}], ";", "\n", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"timetogohr", " ", "=", " ", 
       RowBox[{"timetogomin", "/", "60"}]}], ";", " ", "\n", " ", "\n", " ", 
      RowBox[{"string1", " ", "=", " ", 
       RowBox[{"Style", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"DateString", "[", "localtime0", "]"}], " ", "<>", " ", 
          "\"\<. \\nSSAH Version \>\"", " ", "<>", " ", 
          RowBox[{"ToString", "[", "mversion", "]"}], " ", "<>", " ", 
          "\"\<.\\n\>\""}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"Large", ",", " ", "Red"}], "}"}]}], "]"}]}], ";", "\n", 
      " ", 
      RowBox[{"string1a", " ", "=", " ", 
       RowBox[{"StringForm", "[", 
        RowBox[{
        "\"\<Timestep `1` of `2`\>\"", ",", " ", "iistep", ",", " ", 
         "nsteps"}], "]"}]}], ";", "\n", " ", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{"{", 
          RowBox[{
          "iistep", ",", "nsteps", ",", "iiast", ",", "impacttime", ",", 
           "numastdone", ",", "timetonow", ",", "timetogo", ",", 
           "totaltimeestimate"}], "}"}], "]"}], ";"}], "*)"}], "\n", " ", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"string1", ",", " ", "string1a", ",", "\n", "  ", 
         RowBox[{"ProgressIndicator", "[", 
          RowBox[{
           RowBox[{"Dynamic", "[", 
            RowBox[{"(", 
             RowBox[{"iistep", "/", "nsteps"}], " ", ")"}], "]"}], ",", " ", 
           RowBox[{"ImageMargins", " ", "\[Rule]", " ", "10"}], ",", " ", 
           RowBox[{"Background", " ", "\[Rule]", " ", "Red"}]}], "]"}], ",", 
         "\n", "  ", "\n", "  ", 
         RowBox[{"Framed", "[", 
          RowBox[{
           RowBox[{"Style", "[", 
            RowBox[{
             RowBox[{"StringForm", "[", 
              RowBox[{
              "\"\<Current Problem Time `` years of `` total,  Elapsed \
Computer Time `` seconds or `` minutes\>\"", ",", " ", "\n", "  ", 
               RowBox[{"NumberForm", "[", 
                RowBox[{"time", ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"5", ",", " ", "1"}], "}"}]}], "]"}], ",", 
               RowBox[{"NumberForm", "[", 
                RowBox[{"tmax", ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"4", ",", " ", "1"}], "}"}]}], "]"}], " ", ",", " ", 
               RowBox[{"NumberForm", "[", 
                RowBox[{"timetonow", ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"4", ",", " ", "1"}], "}"}]}], "]"}], ",", 
               RowBox[{"NumberForm", "[", 
                RowBox[{
                 RowBox[{"timetonow", "/", "60."}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"4", ",", " ", "1"}], "}"}]}], "]"}]}], "]"}], ",", 
             " ", "16"}], "]"}], ",", " ", 
           RowBox[{"Background", " ", "\[Rule]", " ", "LightBrown"}]}], "]"}],
          ",", "\n", "  ", 
         RowBox[{"If", "[", 
          RowBox[{"bornagain", ",", " ", "Nothing", ",", " ", 
           RowBox[{"Framed", "[", 
            RowBox[{
             RowBox[{"Style", "[", 
              RowBox[{
               RowBox[{"StringForm", "[", 
                RowBox[{
                "\"\< Asteroids Surviving ``\>\"", ",", " ", "\n", "      ", 
                 RowBox[{
                  RowBox[{"NumberForm", "[", 
                   RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"iistep", "\[Equal]", "1"}], ",", "nasteroids", 
                    ",", 
                    RowBox[{"Length", "[", "astsurv", "]"}]}], "]"}], ",", 
                    " ", 
                    RowBox[{"{", 
                    RowBox[{"4", ",", " ", "0"}], "}"}]}], "]"}], "/", 
                  "nasteroids"}]}], "]"}], ",", " ", "16"}], "]"}], ",", " ", 
             
             RowBox[{"Background", " ", "\[Rule]", " ", "LightYellow"}]}], 
            "]"}]}], "]"}], ",", "\n", "  ", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"Framed", "[", 
            RowBox[{
             RowBox[{"Style", "[", 
              RowBox[{
               RowBox[{"StringForm", "[", 
                RowBox[{"\"\< Number of tumblers ``\>\"", ",", " ", 
                 RowBox[{
                  RowBox[{"NumberForm", "[", 
                   RowBox[{
                    RowBox[{"Length", "[", "tumblers", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "0"}], "}"}]}], "]"}], "/", 
                  "nasteroids"}]}], "]"}], ",", "16"}], "]"}], ",", "\n", 
             "  ", 
             RowBox[{"Background", "\[Rule]", "LightYellow"}]}], "]"}], ","}],
           "*)"}], "\n", "  ", 
         RowBox[{"Framed", "[", 
          RowBox[{
           RowBox[{"Style", "[", 
            RowBox[{
             RowBox[{"StringForm", "[", 
              RowBox[{
              "\"\< Estimated Time Remaining `` minutes, (`` hours)\>\"", " ",
                ",", "\n", "     ", 
               RowBox[{"NumberForm", "[", 
                RowBox[{"timetogomin", ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"4", ",", " ", "1"}], "}"}]}], "]"}], ",", " ", 
               RowBox[{"NumberForm", "[", 
                RowBox[{"timetogohr", ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"5", ",", " ", "3"}], "}"}]}], "]"}]}], "]"}], ",", 
             " ", "16"}], "]"}], ",", " ", 
           RowBox[{"Background", " ", "\[Rule]", " ", "LightBlue"}]}], "]"}], 
         ",", "\n", "  ", 
         RowBox[{"Framed", "[", 
          RowBox[{
           RowBox[{"Style", "[", 
            RowBox[{
             RowBox[{"StringForm", "[", 
              RowBox[{
              "\"\< Memory used `` GB, Available: `` GB .. \\r(Reruns do not \
release memory.  \n     To free up memory, quit and restart kernel from menu \
item ...)\>\"", "\n", "     ", ",", " ", 
               RowBox[{"NumberForm", "[", " ", 
                RowBox[{"memused", ",", " ", "2"}], "]"}], ",", " ", 
               RowBox[{"NumberForm", "[", " ", 
                RowBox[{"memavail", ",", " ", "2"}], "]"}]}], "]"}], ",", " ",
              "16"}], "]"}], ",", " ", 
           RowBox[{"Background", " ", "\[Rule]", " ", "LightPurple"}]}], 
          "]"}]}], "\n", "  ", "}"}], "\n", 
       RowBox[{"Clear", "[", "session", "]"}]}], ";"}]}], "\n", " ", "]"}], 
   ";"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"end", " ", "of", " ", "monitor"}], "  ", "*)"}], 
  "\[IndentingNewLine]", "\n", "\n", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "Speak", "[", 
     "\"\<The calculation is finished, should I construct the plots?\>\"", 
     "]"}], ";"}], 
   RowBox[{"(*", 
    RowBox[{")", "//", "RuntimeTools`Profile"}], "*)"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"test", " ", "=", " ", 
   RowBox[{"ChoiceDialog", "[", 
    RowBox[{
    "\"\<Do you want\n   me to make the plots of output?\>\"", ",", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Yes", " ", "\[Rule]", " ", "1"}], ",", " ", 
       RowBox[{"No", " ", "\[Rule]", " ", "0"}]}], "}"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"test", " ", "\[Equal]", " ", "1"}], ",", " ", 
     RowBox[{
      RowBox[{"NotebookFind", "[", 
       RowBox[{
       "nb", ",", " ", "\"\<outcell\>\"", ",", " ", "All", ",", " ", 
        "CellTags"}], "]"}], ";", "\n", " ", 
      RowBox[{"SelectionEvaluate", "[", "nb", "]"}]}], ",", " ", 
     RowBox[{
      RowBox[{"NotebookFind", "[", 
       RowBox[{
       "nb", ",", " ", "\"\<firstone\>\"", ",", " ", "All", ",", " ", 
        "CellTags"}], "]"}], ";", " ", 
      RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]"}], "Input",
 Deletable->True,
 CellMargins->{{56.91168212890625, 10.}, {5., 10.}},
 CellOpen->True,
 InitializationCell->False,
 CellChangeTimes->{{3.878620380852847*^9, 3.878620396501854*^9}, {
   3.878622338887651*^9, 3.87862234083689*^9}, 3.878624149472024*^9, {
   3.878625152720379*^9, 3.87862518195191*^9}, 3.8786252187303257`*^9, {
   3.878625355747573*^9, 3.878625417954454*^9}, 3.878626799975441*^9, {
   3.878626855000698*^9, 3.878626951759346*^9}, 3.878627051145637*^9, {
   3.8786271236606083`*^9, 3.87862713172191*^9}, {3.878627271131899*^9, 
   3.878627301504768*^9}, {3.878627786588541*^9, 3.878627808388739*^9}, {
   3.8786297718643837`*^9, 3.878629804044907*^9}, {3.886291682335535*^9, 
   3.886291704423821*^9}, {3.886291826529009*^9, 3.886291832259493*^9}, {
   3.886293924658536*^9, 3.886293941446328*^9}, {3.88629723872666*^9, 
   3.886297239101399*^9}, 3.8862973299011593`*^9, {3.8865904750416117`*^9, 
   3.886590484766613*^9}, {3.886590600509376*^9, 3.8865906139629793`*^9}, {
   3.8865906508238373`*^9, 3.886590669491762*^9}, {3.886591373078018*^9, 
   3.886591382818962*^9}, {3.886591583137402*^9, 3.886591607990127*^9}, {
   3.886592362142582*^9, 3.886592382742434*^9}, {3.886593186829994*^9, 
   3.886593199691975*^9}, {3.886595908813635*^9, 3.886595930967277*^9}, {
   3.886637204612776*^9, 3.886637225505802*^9}, {3.886637434657407*^9, 
   3.886637450278275*^9}, 3.886674284441083*^9, {3.8878633945337667`*^9, 
   3.887863407167636*^9}, {3.887863456665777*^9, 3.887863462660636*^9}, {
   3.8878635567752647`*^9, 3.8878635615177794`*^9}, {3.8878953106817083`*^9, 
   3.887895314646771*^9}, {3.887895790429278*^9, 3.887895808024515*^9}, {
   3.887895880262097*^9, 3.887895891782466*^9}, {3.887896343389625*^9, 
   3.887896359349185*^9}, {3.887896623216255*^9, 3.8878966308253727`*^9}, {
   3.887896711078272*^9, 3.8878967349115553`*^9}, {3.887896876813395*^9, 
   3.887896895500325*^9}, {3.887896956761012*^9, 3.887896958326531*^9}, {
   3.887896999828539*^9, 3.887897002024782*^9}, {3.8878970859418163`*^9, 
   3.887897121425921*^9}, {3.8878972107651854`*^9, 3.8878972162148323`*^9}, {
   3.8878973070757113`*^9, 3.887897311322995*^9}, {3.8878973758556013`*^9, 
   3.887897378546081*^9}, {3.887897461109558*^9, 3.887897464783146*^9}, {
   3.887897620326247*^9, 3.887897624099176*^9}, {3.8878977662408123`*^9, 
   3.88789776687643*^9}, {3.887898018990356*^9, 3.887898024079153*^9}, {
   3.8880443065139923`*^9, 3.8880443095029488`*^9}, {3.888044395386325*^9, 
   3.8880444787429647`*^9}, {3.888044589835294*^9, 3.888044601668092*^9}, {
   3.888044643345911*^9, 3.888044662255176*^9}, {3.888061670808154*^9, 
   3.888061673539837*^9}, {3.8880617077558947`*^9, 3.8880617150574503`*^9}, 
   3.888061811905677*^9, {3.888061868111355*^9, 3.8880618815303698`*^9}, {
   3.888062131464986*^9, 3.8880621358248158`*^9}, {3.888062267574751*^9, 
   3.888062322488434*^9}, 3.888062434910754*^9, {3.888062470138608*^9, 
   3.888062483241933*^9}, {3.888062548709619*^9, 3.8880626054414043`*^9}, {
   3.8880626402020206`*^9, 3.88806264333956*^9}, 3.888128744672188*^9, {
   3.888129606978397*^9, 3.8881296140868053`*^9}, {3.88814364811469*^9, 
   3.8881436499022284`*^9}, {3.8881438965362463`*^9, 
   3.8881439665508842`*^9}, {3.888144153562339*^9, 3.888144160119762*^9}, 
   3.888144327789455*^9, {3.888144391143916*^9, 3.888144406959174*^9}, {
   3.8881445043130713`*^9, 3.888144509106577*^9}, {3.888144573964926*^9, 
   3.888144608781044*^9}, {3.888145253925042*^9, 3.8881453486250143`*^9}, {
   3.88814558935771*^9, 3.888145597621018*^9}, {3.88814619155877*^9, 
   3.8881462176417837`*^9}, {3.8881470034842243`*^9, 3.888147011702943*^9}, {
   3.888149516572789*^9, 3.8881496258765507`*^9}, {3.888149760451646*^9, 
   3.888149771700603*^9}, {3.8881499015053797`*^9, 3.888149903857273*^9}, {
   3.888149946520159*^9, 3.88814997354405*^9}, 3.88820848862274*^9, 
   3.888208532426858*^9, {3.888208575175013*^9, 3.8882085920034246`*^9}, 
   3.888208634042912*^9, {3.8882094513453703`*^9, 3.8882094553088713`*^9}, {
   3.888209771647214*^9, 3.888209776143969*^9}, {3.888209848621879*^9, 
   3.8882100013334312`*^9}, {3.888210513212462*^9, 3.8882105660323153`*^9}, {
   3.88821083453659*^9, 3.8882108622423143`*^9}, {3.888210980880192*^9, 
   3.8882109880213327`*^9}, {3.8882110207010202`*^9, 3.888211026167286*^9}, {
   3.888213342313048*^9, 3.888213361523888*^9}, {3.888213508253088*^9, 
   3.888213517306978*^9}, {3.888213830878892*^9, 3.88821384688863*^9}, {
   3.8882138886003637`*^9, 3.888213901245922*^9}, {3.8882139802645283`*^9, 
   3.888213984112718*^9}, {3.888214035168442*^9, 3.8882140531309233`*^9}, {
   3.888216260040161*^9, 3.888216350306418*^9}, {3.888216380517961*^9, 
   3.888216432578367*^9}, {3.888216495117434*^9, 3.888216515673386*^9}, {
   3.8882165814041*^9, 3.888216583393869*^9}, {3.888216834796316*^9, 
   3.888216860112121*^9}, {3.888216907232238*^9, 3.888216907775379*^9}, {
   3.8882169568964663`*^9, 3.888216994763883*^9}, {3.888217619013006*^9, 
   3.888217668990568*^9}, {3.888218357015656*^9, 3.8882183640135508`*^9}, {
   3.8882184118132668`*^9, 3.88821841741323*^9}, {3.888218696862033*^9, 
   3.888218714215626*^9}, {3.888218796021207*^9, 3.888218800902647*^9}, {
   3.888218858592705*^9, 3.888218862995455*^9}, {3.888218975640141*^9, 
   3.8882189786625967`*^9}, {3.888219009056423*^9, 3.888219011434868*^9}, 
   3.888321950328989*^9, {3.888322312252571*^9, 3.888322315275587*^9}, {
   3.888322451023385*^9, 3.88832245411425*^9}, {3.888322846150139*^9, 
   3.888322873546624*^9}, {3.888323073931184*^9, 3.8883231421994247`*^9}, {
   3.888323172279211*^9, 3.888323183601698*^9}, {3.8883232734143543`*^9, 
   3.888323279496838*^9}, {3.88832364887118*^9, 3.8883236516028748`*^9}, {
   3.8883266302606287`*^9, 3.888326635451873*^9}, {3.888326872940352*^9, 
   3.888326874572229*^9}, {3.889354692191547*^9, 3.889354733130026*^9}, {
   3.8893587278891983`*^9, 3.889358942800796*^9}, {3.889359077700897*^9, 
   3.8893591431366673`*^9}, {3.889359296232728*^9, 3.889359344116576*^9}, {
   3.889418791310272*^9, 3.889418814218164*^9}, {3.889419001907566*^9, 
   3.889419015554574*^9}, {3.889437296783472*^9, 3.889437299445939*^9}, {
   3.889438449400947*^9, 3.889438451138565*^9}, {3.889438546506629*^9, 
   3.889438585047213*^9}, {3.889439237854912*^9, 3.889439241132806*^9}, {
   3.889439463705518*^9, 3.8894395081117477`*^9}, {3.889440143351078*^9, 
   3.8894401483179493`*^9}, {3.889440197730692*^9, 3.8894402818960333`*^9}, {
   3.8894403248800373`*^9, 3.8894403739791107`*^9}, 3.889440425589924*^9, {
   3.889440474624095*^9, 3.889440612610071*^9}, {3.889440667065645*^9, 
   3.8894406745926647`*^9}, {3.889444399917379*^9, 3.889444423733602*^9}, {
   3.8894508883687*^9, 3.8894508887460003`*^9}, {3.889450923384074*^9, 
   3.889450929715397*^9}, {3.889490364942401*^9, 3.8894904129978857`*^9}, {
   3.889490517560616*^9, 3.889490518351986*^9}, {3.889504422207836*^9, 
   3.889504424911025*^9}, {3.889504486032133*^9, 3.88950448919092*^9}, {
   3.889505158361411*^9, 3.8895051612888737`*^9}, {3.889505226118939*^9, 
   3.8895052561050034`*^9}, {3.8895058511856737`*^9, 
   3.8895058545577993`*^9}, {3.889506361707625*^9, 3.8895063912917957`*^9}, {
   3.889506493399225*^9, 3.889506547356369*^9}, {3.8895070126113033`*^9, 
   3.889507070921657*^9}, {3.889510140274555*^9, 3.8895101604613934`*^9}, {
   3.889510199917205*^9, 3.88951024212015*^9}, 3.8895134556318693`*^9, {
   3.8895134935904083`*^9, 3.889513496993209*^9}, {3.889513565446416*^9, 
   3.889513572357717*^9}, {3.889513809210424*^9, 3.889513836471637*^9}, {
   3.889513898320496*^9, 3.889513913497097*^9}, {3.8895141692892723`*^9, 
   3.889514178146183*^9}, {3.8895142580207253`*^9, 3.8895142613349733`*^9}, {
   3.889685158389998*^9, 3.8896851834842*^9}, {3.889687265494981*^9, 
   3.889687271163419*^9}, {3.889689507555192*^9, 3.8896895261678257`*^9}, {
   3.889701545507131*^9, 3.8897015532829323`*^9}, {3.889701761647284*^9, 
   3.8897017767715197`*^9}, {3.8897026243905087`*^9, 
   3.8897026444446793`*^9}, {3.889702711039013*^9, 3.889702833842979*^9}, {
   3.8897029298646803`*^9, 3.889702937124858*^9}, {3.889702991302664*^9, 
   3.8897029977910748`*^9}, {3.889703909653737*^9, 3.889703955164886*^9}, {
   3.889704222734398*^9, 3.889704272945187*^9}, {3.889704466819521*^9, 
   3.889704491253222*^9}, {3.889704541931435*^9, 3.889704586583035*^9}, 
   3.889762906898779*^9, {3.889763051655539*^9, 3.889763055398909*^9}, {
   3.8897638080698643`*^9, 3.88976383397536*^9}, {3.8897638906129637`*^9, 
   3.8897639474398947`*^9}, {3.889764066119474*^9, 3.88976406686189*^9}, {
   3.889764749784452*^9, 3.889764776377445*^9}, {3.889765289961335*^9, 
   3.889765291022478*^9}, {3.889765538462324*^9, 3.889765546101466*^9}, {
   3.889765869899531*^9, 3.889765917310421*^9}, {3.889766577948501*^9, 
   3.889766578431964*^9}, {3.889767375349296*^9, 3.889767424591846*^9}, {
   3.8897674648669977`*^9, 3.889767472577725*^9}, {3.889767679310172*^9, 
   3.889767689378913*^9}, {3.889768745442388*^9, 3.889768746148353*^9}, {
   3.889792175464176*^9, 3.889792181732183*^9}, {3.889792693532235*^9, 
   3.8897927035172853`*^9}, {3.889792845612801*^9, 3.889792856424892*^9}, {
   3.889793233212554*^9, 3.8897932346844273`*^9}, {3.8897932697992907`*^9, 
   3.889793271780654*^9}, {3.8897961585785427`*^9, 3.889796159235649*^9}, {
   3.8897984018643417`*^9, 3.889798467960637*^9}, {3.889799325652206*^9, 
   3.889799362083869*^9}, {3.889799485322754*^9, 3.889799486364483*^9}, {
   3.889799707355673*^9, 3.889799707713743*^9}, {3.8898003212070923`*^9, 
   3.889800335932971*^9}, {3.889800427779752*^9, 3.889800474976012*^9}, {
   3.889800517956687*^9, 3.889800521238826*^9}, {3.889800597573227*^9, 
   3.889800600079648*^9}, {3.889800878102783*^9, 3.889800889994581*^9}, {
   3.889800973068939*^9, 3.889800979192295*^9}, {3.8898010911409616`*^9, 
   3.889801115737258*^9}, {3.8898011556926737`*^9, 3.8898011595083437`*^9}, {
   3.889801278070488*^9, 3.88980128155058*^9}, {3.8898015504460297`*^9, 
   3.889801572277955*^9}, {3.889801603505354*^9, 3.889801606191325*^9}, {
   3.889801726482243*^9, 3.889801727195284*^9}, {3.889801832669051*^9, 
   3.8898018348484583`*^9}, {3.893153091415785*^9, 3.893153097560576*^9}, {
   3.8931534063884373`*^9, 3.893153532904048*^9}, {3.893153570345071*^9, 
   3.893153642783853*^9}, {3.893153717325055*^9, 3.893153807357644*^9}, {
   3.8931538422600937`*^9, 3.893153862921935*^9}, {3.8931538967000437`*^9, 
   3.893153913893456*^9}, {3.8931539480499363`*^9, 3.893153959593049*^9}, {
   3.893154017043503*^9, 3.893154059252619*^9}, {3.893154964087075*^9, 
   3.8931549736593018`*^9}, {3.893156556323197*^9, 3.893156559359448*^9}, 
   3.893156691484878*^9, {3.893156909786118*^9, 3.8931569379472303`*^9}, {
   3.893157004945951*^9, 3.893157012501244*^9}, {3.893157187727475*^9, 
   3.893157336856514*^9}, {3.89316268046237*^9, 3.893162683184289*^9}, {
   3.893162765219006*^9, 3.893162839118929*^9}, {3.8931629280482273`*^9, 
   3.8931629623572693`*^9}, {3.893163057876186*^9, 3.893163208959429*^9}, {
   3.8931632625113287`*^9, 3.89316333903717*^9}, {3.893163471479196*^9, 
   3.893163526875353*^9}, {3.8931636048581877`*^9, 3.893163624924385*^9}, {
   3.8931638274819393`*^9, 3.893163838559273*^9}, {3.8931638762925787`*^9, 
   3.893163935650229*^9}, {3.8931639716379967`*^9, 3.893163984013708*^9}, {
   3.8931640157045193`*^9, 3.89316401612823*^9}, {3.893164245773838*^9, 
   3.893164338714439*^9}, {3.89316446140994*^9, 3.893164470822118*^9}, 
   3.893164903605288*^9, {3.893165057321171*^9, 3.893165079293893*^9}, {
   3.8931651225827093`*^9, 3.8931651268325653`*^9}, {3.8931652215878563`*^9, 
   3.893165241203063*^9}, {3.893165294860332*^9, 3.893165311421274*^9}, {
   3.893165360588076*^9, 3.893165367366741*^9}, {3.893165420738027*^9, 
   3.893165496890255*^9}, {3.893165726284686*^9, 3.893165764355983*^9}, {
   3.893165811172221*^9, 3.893165850302609*^9}, {3.8931659449456453`*^9, 
   3.893166040638424*^9}, 3.893166223752491*^9, {3.893166307192672*^9, 
   3.8931663573828793`*^9}, {3.893166392025483*^9, 3.893166392991591*^9}, 
   3.893166454797439*^9, {3.893166580177088*^9, 3.893166587664426*^9}, {
   3.8931667938072443`*^9, 3.893166813119611*^9}, {3.8931672228690863`*^9, 
   3.893167225978956*^9}, {3.893167348824956*^9, 3.893167358096773*^9}, {
   3.89316798399616*^9, 3.893168002656411*^9}, 3.8931681512212067`*^9, {
   3.8931692804231987`*^9, 3.893169292969791*^9}, {3.893170110092484*^9, 
   3.893170190533856*^9}, {3.893170465471838*^9, 3.893170475382113*^9}, 
   3.8931707133486567`*^9, {3.8931707532366247`*^9, 3.8931708800275993`*^9}, {
   3.893170943354494*^9, 3.893171007295311*^9}, {3.8931711047264013`*^9, 
   3.89317111095671*^9}, {3.8932026209923763`*^9, 3.893202638500936*^9}, 
   3.8932029071029367`*^9, {3.893203019757036*^9, 3.893203022327773*^9}, {
   3.893203179194517*^9, 3.893203232867231*^9}, {3.893205026634884*^9, 
   3.893205078983918*^9}, {3.893205308725768*^9, 3.8932053178895073`*^9}, {
   3.893205373685927*^9, 3.893205399141449*^9}, 3.893206123150228*^9, {
   3.893211879523604*^9, 3.893211909450397*^9}, {3.8932120443988934`*^9, 
   3.893212047176046*^9}, {3.893212247027485*^9, 3.893212249451601*^9}, {
   3.893227771358953*^9, 3.8932278507374163`*^9}, {3.893228007186075*^9, 
   3.893228048045363*^9}, {3.893228097105143*^9, 3.893228122732153*^9}, {
   3.893228567046817*^9, 3.893228576195414*^9}, {3.8932288311211348`*^9, 
   3.893228834806312*^9}, {3.893229879845881*^9, 3.8932298984010468`*^9}, {
   3.893238581324287*^9, 3.8932385998381166`*^9}, {3.8932387045418367`*^9, 
   3.8932387672145033`*^9}, {3.8932401219038982`*^9, 3.893240138394203*^9}, {
   3.8932419197150517`*^9, 3.893241934606773*^9}, {3.893243381625217*^9, 
   3.893243388961656*^9}, {3.893243541512265*^9, 3.893243567195963*^9}, {
   3.893243741091888*^9, 3.893243744554524*^9}, 3.893243974573251*^9, {
   3.8932562958927593`*^9, 3.8932562993106613`*^9}, 3.893646440872033*^9, 
   3.8936464712016973`*^9, {3.89372840460485*^9, 3.893728465233143*^9}, {
   3.893728666230666*^9, 3.8937286682222843`*^9}, {3.8937288059522467`*^9, 
   3.8937288109760313`*^9}, {3.8937289382394457`*^9, 3.893728981043129*^9}, {
   3.893761938066683*^9, 3.893761939079414*^9}, {3.893822409489148*^9, 
   3.893822413768817*^9}, {3.8938247907885923`*^9, 3.893824793276884*^9}, {
   3.893824875144841*^9, 3.893824878019177*^9}, {3.8938255615513906`*^9, 
   3.893825564812207*^9}, {3.893826154272537*^9, 3.8938261545295553`*^9}, {
   3.893826278454723*^9, 3.893826281265823*^9}, {3.893831911003745*^9, 
   3.893831914378578*^9}, {3.8938335747235813`*^9, 3.8938335994650908`*^9}, {
   3.894515424026237*^9, 3.894515429891427*^9}},
 FontFamily->"Arial",
 FontSize->16,
 FontWeight->"Regular",
 FontColor->GrayLevel[0.5],
 Background->GrayLevel[0],
 CellTags->"runit",
 CellLabel->
  "In[411]:=",ExpressionUUID->"edcff950-029a-4de4-b96e-d42f311a559c"],

Cell[BoxData["time0"], "Input",
 CellOpen->True,
 CellChangeTimes->{
  3.8895057556849613`*^9, {3.889505961788355*^9, 3.889505979092154*^9}, {
   3.8895068751987667`*^9, 3.889506883235218*^9}, {3.889685272867601*^9, 
   3.8896852740466423`*^9}, {3.889767578669025*^9, 3.889767647448955*^9}, {
   3.8897677303019457`*^9, 3.889767738019986*^9}, {3.889767774063936*^9, 
   3.889767774820904*^9}, {3.889767829404029*^9, 3.889767854812489*^9}, {
   3.889768597441435*^9, 3.889768655644158*^9}, {3.893167775310821*^9, 
   3.893167798892837*^9}, {3.893228225220887*^9, 3.893228251661161*^9}, {
   3.893228727071416*^9, 3.893228730935162*^9}, {3.893228778035186*^9, 
   3.89322878049234*^9}, {3.893724078162529*^9, 3.8937241157472267`*^9}},
 FontFamily->"Arial",
 FontSize->14,
 FontWeight->"Regular",
 FontColor->GrayLevel[0.5],
 Background->GrayLevel[0],
 CellLabel->
  "In[584]:=",ExpressionUUID->"a567a05a-7422-4a7b-8541-6bbe5cde63d3"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   StyleBox[
    RowBox[{"(*", " ", 
     RowBox[{"now", " ", "all", " ", "of", " ", "the", " ", "output"}], " ", 
     "*)"}], "Subsection",
    FontSize->18], "Chapter",
   FontSize->24,
   FontColor->RGBColor[0, 1, 0]], "\n", "  ", 
  StyleBox[
   StyleBox[
    RowBox[{"(*", " ", 
     RowBox[{"now", " ", "all", " ", "of", " ", "the", " ", "output"}], " ", 
     "*)"}], "Subsection",
    FontSize->18], "Chapter",
   FontSize->24,
   FontColor->RGBColor[0, 1, 0]], "\n", 
  StyleBox["  ", "Chapter",
   FontColor->RGBColor[0, 1, 0]], 
  StyleBox[
   StyleBox[
    RowBox[{"(*", " ", 
     RowBox[{"now", " ", "all", " ", "of", " ", "the", " ", "output"}], " ", 
     "*)"}], "Subsection",
    FontSize->18], "Chapter",
   FontSize->24,
   FontColor->RGBColor[0, 1, 0]], "\[IndentingNewLine]", "     ", 
  StyleBox[
   StyleBox[
    RowBox[{"(*", " ", 
     RowBox[{"now", " ", "all", " ", "of", " ", "the", " ", "output"}], " ", 
     "*)"}], "Subsection",
    FontSize->18], "Chapter",
   FontSize->24,
   FontColor->RGBColor[0, 1, 0]], "\n", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "FrontEndTokenExecute", "[", "\"\<DeleteGeneratedCells\>\"", "]"}], ";"}],
    "*)"}], 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"take", " ", "out"}], ",", " ", 
    RowBox[{
    "dumps", " ", "input", " ", "cell", " ", "stuff", " ", "and", " ", 
     "disgnostics"}]}], "*)"}], 
  StyleBox["\[IndentingNewLine]", "Chapter",
   FontColor->RGBColor[0, 1, 0]], 
  StyleBox["\[IndentingNewLine]", "Chapter",
   FontColor->RGBColor[0, 1, 0]], 
  RowBox[{
   RowBox[{
    RowBox[{"TextCell", "[", 
     RowBox[{"outtext", ",", " ", "\"\<Title\>\"", ",", " ", 
      RowBox[{"CellFrame", " ", "\[Rule]", " ", "True"}], ",", " ", 
      RowBox[{"FontSize", " ", "\[Rule]", " ", "16"}], ",", " ", 
      RowBox[{"Background", " ", "\[Rule]", " ", "LightGreen"}]}], "]"}], 
    ";"}], 
   StyleBox["\[IndentingNewLine]", "Chapter",
    FontColor->RGBColor[0, 1, 0]], "\[IndentingNewLine]", 
   RowBox[{"Row", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<Constructing the Figure \>\"", " ", ",", 
      RowBox[{"Dynamic", "[", 
       RowBox[{"ToString", "[", "xdone", "]"}], "]"}], ",", "\"\<    \>\"", 
      ",", "\[IndentingNewLine]", 
      RowBox[{"ProgressIndicator", "[", 
       RowBox[{
        RowBox[{"Dynamic", "[", "xdone", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "13"}], "}"}], ",", 
        RowBox[{"BaseStyle", "\[Rule]", "Large"}]}], "]"}]}], "}"}], "]"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"MessageDialog", "[", 
     RowBox[{"Row", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Constructing the Figure \>\"", " ", ",", 
        RowBox[{"Dynamic", "[", 
         RowBox[{"ToString", "[", "xdone", "]"}], "]"}], ",", "\"\<    \>\"", 
        ",", "\[IndentingNewLine]", 
        RowBox[{"ProgressIndicator", "[", 
         RowBox[{
          RowBox[{"Dynamic", "[", "xdone", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "11"}], "}"}], ",", 
          RowBox[{"BaseStyle", "\[Rule]", "Large"}]}], "]"}]}], "}"}], "]"}], 
     "]"}], "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"colors", "=", 
     RowBox[{"Join", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "Black", ",", "Red", ",", "Blue", ",", "Green", ",", "Purple", ",", 
         "Yellow"}], "}"}], ",", 
       RowBox[{"RandomColor", "[", "nhistplots", "]"}]}], "]"}]}], ";"}], 
   "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"always", " ", "output", " ", "a", " ", "summary", " ", "slide"}],
     " ", "*)"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"all", " ", "remaining"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"fulltermd", " ", "=", " ", 
     RowBox[{"dlist", "[", 
      RowBox[{"[", "astsurv", "]"}], "]"}]}], ";"}], "  ", 
   RowBox[{"(*", " ", 
    RowBox[{"strips", " ", "zeroes"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"finalomegs", " ", "=", " ", 
     RowBox[{"omegvals", "[", 
      RowBox[{"[", "astsurv", "]"}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"numleft", " ", "=", " ", 
     RowBox[{"Length", "[", "fulltermd", "]"}]}], ";"}], "\n", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"numleft", ">", "0"}], ",", 
     RowBox[{
      RowBox[{"dsmallest", "=", " ", 
       RowBox[{"Min", "[", "fulltermd", "]"}]}], ";", "\n", 
      RowBox[{"dlargest", " ", "=", " ", 
       RowBox[{"Max", "[", "fulltermd", "]"}]}], ";", "\n", 
      RowBox[{"enuf", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"numleft", ">", "20"}], "&&", 
         RowBox[{
          RowBox[{"dlargest", "/", "dsmallest"}], ">", "2"}]}], ")"}]}], 
      ";"}], ",", "\n", 
     RowBox[{"(*", "else", "*)"}], "\n", 
     RowBox[{
      RowBox[{"dsmallest", "=", "0"}], ";", "\n", 
      RowBox[{"dlargest", "=", "0"}], ";", "\n", 
      RowBox[{"enuf", "=", "False"}], ";"}]}], "]"}], "\n", " ", "\n", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"numleft", " ", ">", " ", "0"}], ",", "\n", "  ", 
      RowBox[{
       RowBox[{"fulltermnet", " ", "=", " ", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"Norm", "[", 
           RowBox[{"finalomegs", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"i", ",", " ", "numleft"}], "}"}]}], "]"}]}], ";", " ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"the", " ", "norms"}], ",", " ", 
         RowBox[{"all", " ", "positive", " ", "here"}]}], " ", "*)"}], "\n", 
       "  ", 
       RowBox[{"fulltermwobble", " ", "=", " ", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"ArcTan", "[", 
           RowBox[{
            RowBox[{"Sqrt", "[", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"finalomegs", "[", 
                 RowBox[{"[", 
                  RowBox[{"i", ",", " ", "1"}], "]"}], "]"}], "^", "2"}], " ",
                "+", " ", 
               RowBox[{
                RowBox[{"finalomegs", "[", 
                 RowBox[{"[", 
                  RowBox[{"i", ",", " ", "2"}], "]"}], "]"}], "^", "2"}]}], 
              ")"}], "]"}], "/", 
            RowBox[{"Abs", "[", 
             RowBox[{"finalomegs", "[", 
              RowBox[{"[", 
               RowBox[{"i", ",", " ", "3"}], "]"}], "]"}], "]"}]}], "]"}], 
          ",", " ", 
          RowBox[{"{", 
           RowBox[{"i", ",", " ", "numleft"}], "}"}]}], "]"}]}], ";", " ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"the", " ", "wobbles"}], ",", " ", 
         RowBox[{
         "all", " ", "are", " ", "wobbling", " ", "to", " ", "some", " ", 
          "radian"}]}], " ", "*)"}], "\n", "  ", 
       RowBox[{"maxspin1", " ", "=", " ", 
        RowBox[{"Max", "[", "fulltermnet", "]"}]}], ";", "\n", "  ", 
       RowBox[{"minspin1", " ", "=", " ", 
        RowBox[{"Min", "[", "fulltermnet", "]"}]}], ";", "\n", "  ", 
       RowBox[{"spinpts", " ", "=", " ", 
        RowBox[{"Transpose", "[", 
         RowBox[{"{", 
          RowBox[{"fulltermd", ",", " ", 
           RowBox[{"1.38", " ", 
            RowBox[{"10", "^", "4"}], " ", "fulltermnet"}]}], "}"}], "]"}]}], 
       ";", "  ", 
       RowBox[{"(*", " ", 
        RowBox[{"for", " ", "fig", " ", "1"}], " ", "*)"}], "\n", "  ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
         "lets", " ", "get", " ", "the", " ", "number", " ", "and", " ", 
          "lsit", " ", "of", " ", "those", " ", "above"}], ",", " ", "say", 
         ",", " ", 
         RowBox[{"15", "\:02da"}]}], " ", "*)"}], "\n", 
       RowBox[{"test", " ", "=", " ", 
        RowBox[{
         RowBox[{"Position", "[", 
          RowBox[{"fulltermwobble", ",", " ", 
           RowBox[{"_", "?", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"#", " ", ">", " ", "tumbleangle"}], ")"}], " ", "&"}],
              ")"}]}]}], "]"}], " ", "//", " ", "Flatten"}]}], ";", "\n", 
       "  ", 
       RowBox[{"numtumblers", " ", "=", " ", 
        RowBox[{"Length", "[", "test", "]"}]}]}]}], "]"}], ";"}], " ", "\n", 
   "\n", 
   RowBox[{
    RowBox[{"maxhistspin", " ", "=", " ", 
     RowBox[{"Max", "[", 
      RowBox[{"Abs", "[", 
       RowBox[{"histplotpts", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", " ", "All", ",", " ", "3"}], "]"}], "]"}], "]"}],
       "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"numpulv", " ", "=", " ", 
     RowBox[{"Length", "[", "pulvevent", "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"numcd", " ", "=", " ", 
     RowBox[{"Length", "[", "cdevent", "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"numpulvplots", " ", "=", " ", 
     RowBox[{"Length", "[", "pulvplotpts", "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"numtozero", " ", "=", " ", 
     RowBox[{"Length", "[", "erodedtozero", "]"}]}], ";"}], "\n", "\n", 
   RowBox[{"(*", " ", "binaries", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"binarylist", " ", "=", " ", 
     RowBox[{"binaries", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", " ", "1"}], "]"}], "]"}]}], ";"}], "  ", "\n", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Length", "[", "binarylist", "]"}], " ", ">", " ", "0"}], ",", 
      " ", 
      RowBox[{
       RowBox[{"binariestoplot", " ", "=", 
        RowBox[{"Transpose", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"dlist", "[", 
            RowBox[{"[", "binarylist", "]"}], "]"}], ",", " ", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"Norm", "[", 
              RowBox[{"omegvals", "[", 
               RowBox[{"[", 
                RowBox[{"binarylist", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "]"}], "]"}], "]"}], ",", 
             " ", 
             RowBox[{"{", 
              RowBox[{"i", ",", " ", 
               RowBox[{"Length", "[", "binarylist", "]"}]}], "}"}]}], "]"}]}],
           "}"}], "]"}]}], ";", " ", 
       RowBox[{"(*", " ", 
        RowBox[{"current", " ", "state", " ", "of", " ", "binaries"}], " ", 
        "*)"}], "\n", "  ", 
       RowBox[{"numbin", " ", "=", " ", 
        RowBox[{"Length", "[", "binarylist", "]"}]}], ";", " ", 
       RowBox[{"(*", " ", 
        RowBox[{"the", " ", "surviving", " ", "binaries"}], " ", "*)"}], "\n",
        "  ", 
       RowBox[{"numbinplots", " ", "=", " ", 
        RowBox[{"Length", "[", "binforplots", "]"}]}]}], ",", "\n", "  ", 
      RowBox[{
       RowBox[{"numbin", " ", "=", " ", "0"}], ";", "\n", "  ", 
       RowBox[{"numbinplots", " ", "=", " ", "0"}], ";"}]}], "]"}], ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"CD", " ", "events"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"numcd", " ", "=", " ", 
     RowBox[{"Length", "[", "cdevent", "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"numfirstcdevent", " ", "=", " ", 
     RowBox[{"Length", "[", "firstcdevent", "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"numhalf", " ", "=", " ", 
     RowBox[{"Length", "[", "halfmevent", "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"numhalferoded", " ", "=", " ", 
     RowBox[{"Length", "[", "erodedhmevent", "]"}]}], ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"meanhalfmass", " ", "=", " ", 
     RowBox[{"Mean", "[", 
      RowBox[{"halfmevent", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", " ", "3"}], "]"}], "]"}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"medianhalfmass", " ", "=", " ", 
     RowBox[{"Median", "[", 
      RowBox[{"halfmevent", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", " ", "3"}], "]"}], "]"}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"periods", " ", "=", " ", 
     RowBox[{"2", " ", 
      RowBox[{
       RowBox[{"Pi", "/", "fulltermnet"}], "/", "3600"}]}]}], ";"}], "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"Print", "[", 
      RowBox[{"\"\<peroids =\>\"", ",", "periods"}], "]"}], ";"}], "*)"}], 
   "\n", 
   RowBox[{
    RowBox[{"medianperiod", " ", "=", " ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "periods", "]"}], " ", ">", " ", "0"}], ",", 
       " ", 
       RowBox[{"Median", "[", "periods", "]"}]}], "]"}]}], ";"}], "\n", "\n", 
   "\n", 
   RowBox[{
    RowBox[{"outtext", " ", "=", " ", 
     RowBox[{
      RowBox[{"ToString", "[", "string1", "]"}], " ", "<>", " ", 
      RowBox[{"ToString", "[", "descript", "]"}], " ", "<>", " ", 
      "\"\<\\r\>\"", " ", "<>", " ", 
      "\"\<\\n\[FilledCircle] The simulation for \>\"", " ", "<>", " ", 
      RowBox[{"ToString", "[", "nasteroids", "]"}], " ", "<>", " ", 
      "\"\< \>\"", " ", "<>", " ", 
      RowBox[{"ToString", "[", " ", "asttype", "]"}], " ", "<>", " ", 
      "\"\< asteroids, with diameters from \>\"", " ", "<>", " ", 
      RowBox[{"ToString", "[", "dmin", "]"}], " ", "<>", " ", 
      "\"\< km to \>\"", " ", "<>", " ", 
      RowBox[{"ToString", "[", "dmax", "]"}], " ", "<>", " ", 
      "\"\< km is done; \\n\[FilledCircle] There were \>\"", " ", "<>", " ", 
      RowBox[{"ToString", "[", 
       RowBox[{"Round", "[", "nexplicit", "]"}], "]"}], " ", "<>", " ", 
      "\"\< explicit impacts, an average of \>\"", " ", "<>", " ", 
      RowBox[{"ToString", "[", 
       RowBox[{"N", "[", 
        RowBox[{"Round", "[", 
         RowBox[{"nexplicit", "/", "nasteroids"}], "]"}], "]"}], "]"}], " ", "<>",
       " ", "\"\< per target.; \\r\[FilledCircle] The calculation took \>\"", 
      " ", "<>", " ", 
      RowBox[{"ToString", "[", 
       RowBox[{"Floor", "[", " ", 
        RowBox[{"calctime", " ", "-", " ", "t0"}], "]"}], "]"}], " ", "<>", 
      " ", "\"\< seconds (\>\"", " ", "<>", " ", 
      RowBox[{"ToString", "[", 
       RowBox[{"N", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"calctime", " ", "-", " ", "t0"}], ")"}], "/", "60"}], ",",
          " ", "3"}], "]"}], "]"}], " ", "<>", " ", "\"\< minutes;)\>\"", " ",
       "<>", " ", "\"\< compared to the expected estimate of \>\"", "<>", 
      RowBox[{"ToString", "[", 
       RowBox[{"N", "[", 
        RowBox[{"expecttime", "/", "60"}], "]"}], "]"}], "<>", " ", 
      "\"\< minutes, and used \>\"", " ", "<>", " ", 
      RowBox[{"ToString", "[", 
       RowBox[{"N", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"MemoryInUse", "[", "]"}], "/", "1000000000"}], ",", " ", 
         "3"}], "]"}], "]"}], " ", "<>", " ", "\"\< GB of memory.\>\"", " ", "<>",
       "\n", "   ", "\"\<\\n\>\"", " ", "<>", "\n", "   ", 
      RowBox[{"If", "[", 
       RowBox[{"bornagain", ",", " ", 
        RowBox[{
        "\"\<\\n\\nBut since they were reborn after each destruction along \
the way,  \\n\\t\[FilledCircle]  All of the original \>\"", " ", "<>", " ", 
         RowBox[{"ToString", "[", "nasteroids", "]"}], " ", "<>", " ", 
         "\"\< survived to the time of \>\"", " ", "<>", " ", 
         RowBox[{"ToString", "[", 
          RowBox[{"N", "[", 
           RowBox[{"endtime", "/", 
            RowBox[{"10", "^", "9"}]}], "]"}], "]"}], " ", "<>", " ", 
         "\"\< Byr; \\n\\tThe simulation was to run for \>\"", " ", "<>", " ", 
         RowBox[{"ToString", "[", 
          RowBox[{"N", "[", 
           RowBox[{"tmax", "/", 
            RowBox[{"10", "^", "9"}]}], "]"}], "]"}], " ", "<>", " ", 
         "\"\< Byr.\\n\\n\>\""}], ",", " ", 
        RowBox[{"\"\<\\n\\t\[FilledCircle] \>\"", " ", "<>", " ", 
         RowBox[{"ToString", "[", "numleft", "]"}], " ", "<>", " ", 
         "\"\</\>\"", " ", "<>", " ", 
         RowBox[{"ToString", "[", "nasteroids", "]"}], " ", "<>", " ", 
         "\"\< of the original \>\"", " ", "<>", " ", 
         RowBox[{"ToString", "[", "nasteroids", "]"}], " ", "<>", " ", 
         "\"\< survived \\r\\t  to the time of \>\"", " ", "<>", " ", 
         RowBox[{"ToString", "[", 
          RowBox[{"N", "[", 
           RowBox[{"endtime", "/", 
            RowBox[{"10", "^", "9"}]}], "]"}], "]"}], " ", "<>", " ", 
         "\"\< Byr; The simulation was to run for \>\"", " ", "<>", " ", 
         RowBox[{"ToString", "[", 
          RowBox[{"N", "[", 
           RowBox[{"tmax", "/", 
            RowBox[{"10", "^", "9"}]}], "]"}], "]"}], " ", "<>", " ", 
         "\"\< Byr.\\n\\n\>\""}]}], "]"}], " ", "<>", "\n", "   ", "\n", 
      "     ", "\"\<\\t\[FilledCircle] The Number of Catastrophic Events (not \
including pulverized) that occurred  was \\n\\t  \>\"", " ", "<>", " ", 
      RowBox[{"ToString", "[", " ", "numcd", "]"}], " ", "<>", "  ", 
      "\"\</\>\"", " ", "<>", " ", 
      RowBox[{"ToString", "[", "nasteroids", "]"}], " ", "<>", " ", 
      "\"\<. Of that number, \>\"", " ", "<>", " ", 
      RowBox[{"ToString", "[", "numfirstcdevent", "]"}], " ", "<>", " ", 
      "\"\< were before erosion to below half mass,\\n\\tthe rest were \
subsequent or after being reborn;\\n\\n\>\"", " ", "<>", "\n", "   ", "\n", 
      "   ", "\"\<\\t\[FilledCircle] The Number of Asteroids Reduced to less \
than Half-mass by Erosion\\n\\t    alone was \>\"", " ", "<>", " ", 
      RowBox[{"ToString", "[", "numhalferoded", "]"}], " ", "<>", " ", 
      "\"\</\>\"", " ", "<>", " ", 
      RowBox[{"ToString", "[", "nasteroids", "]"}], " ", "<>", " ", 
      "\"\<;\>\"", " ", "<>", "\n", "      ", "\"\<  In addition, \>\"", " ", 
      "<>", " ", 
      RowBox[{"ToString", "[", "numtozero", "]"}], " ", "<>", " ", 
      "\"\< were eroded to essentially zero size;\\n\\n\>\"", "  ", "<>", 
      "\n", "\n", "   ", 
      "\"\<\\t\[FilledCircle] The Total Number of Asteroids Reduced to less \
than Half-mass by Erosion,\\n \\t CD Event, or Pulverization was \>\"", " ", "<>",
       " ", 
      RowBox[{"ToString", "[", "numhalf", "]"}], " ", "<>", " ", "\"\</\>\"", 
      " ", "<>", " ", 
      RowBox[{"ToString", "[", "nasteroids", "]"}], " ", "<>", "\n", "   ", 
      "\"\<;\\n\\n\>\"", " ", "<>", "\n", "   ", "\n", "  ", 
      "\"\<\\t\[FilledCircle] The Total number of pulverizations occurring \
was \>\"", " ", "<>", " ", 
      RowBox[{"ToString", "[", " ", "numpulv", "]"}], " ", "<>", " ", 
      "\"\</\>\"", " ", "<>", " ", 
      RowBox[{"ToString", "[", " ", "nasteroids", "]"}], " ", "<>", " ", 
      "\"\< many after a previous CD;\\n\\n\>\"", " ", "<>", "\n", "   ", 
      "\n", "  ", 
      "\"\<\\t\[FilledCircle] The number of asteroids with  Gravity Limit \
Excursions by the end of the simulation \\n \\t was  \>\"", " ", "<>", " ", 
      RowBox[{"ToString", "[", " ", "numbin", "]"}], " ", "<>", "  ", 
      "\"\</\>\"", " ", "<>", " ", 
      RowBox[{"ToString", "[", "nasteroids", "]"}], " ", "<>", " ", 
      "\"\< or \>\"", " ", "<>", " ", 
      RowBox[{"ToString", "[", 
       RowBox[{"NumberForm", "[", 
        RowBox[{
         RowBox[{"100.", " ", 
          RowBox[{"numbin", "/", " ", "nasteroids"}]}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"3", ",", " ", "1"}], "}"}]}], "]"}], "]"}], " ", "<>", 
      " ", "\"\< percent;\\n\\n\>\"", " ", "<>", "\n", "   ", "\n", 
      "        ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"numleft", ">", "0"}], ",", "  ", 
        RowBox[{
        "\"\<\\t\[FilledCircle]  The number wobbling at greater than \>\"", 
         " ", "<>", " ", 
         RowBox[{"ToString", "[", "tumbleangle\:02da", "]"}], " ", "<>", " ", 
         "\"\< \:02da at the end of the simulation \\n \\t   was  \>\"", " ", 
         "<>", " ", 
         RowBox[{"ToString", "[", " ", "numtumblers", "]"}], " ", "<>", "  ", 
         "\"\</\>\"", " ", "<>", " ", 
         RowBox[{"ToString", "[", "numleft", "]"}], " ", "<>", " ", 
         "\"\< or \>\"", " ", "<>", " ", 
         RowBox[{"ToString", "[", 
          RowBox[{"NumberForm", "[", 
           RowBox[{
            RowBox[{"100.", " ", 
             RowBox[{"numtumblers", "/", " ", "nasteroids"}]}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"3", ",", " ", "1"}], "}"}]}], "]"}], "]"}], " ", "<>", 
         " ", "\"\< percent;\\n\>\""}], ",", " ", "\"\< \>\""}], "]"}]}]}], 
    ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"outtext2", " ", "=", " ", 
     RowBox[{
     "\"\<\\r\\t\[FilledCircle] Although tmax was set at \>\"", " ", "<>", 
      " ", 
      RowBox[{"ToString", "[", 
       RowBox[{"N", "[", 
        RowBox[{"tmax", "/", 
         RowBox[{"10", "^", "9"}]}], "]"}], "]"}], " ", "<>", " ", 
      "\"\< Byr, \\n\\tThe calculation terminated at time of \>\"", " ", "<>",
       " ", 
      RowBox[{"ToString", "[", 
       RowBox[{"N", "[", 
        RowBox[{
         RowBox[{"endtime", "/", 
          RowBox[{"10", "^", "9"}]}], ",", " ", "3"}], "]"}], "]"}], " ", "<>",
       " ", "\"\< Byr because no targets remained;  \\n\\t\n      The actual \
number of explicit impacts per target was \>\"", " ", "<>", " ", 
      RowBox[{"ToString", "[", 
       RowBox[{"nsteps", " ", 
        RowBox[{"endtime", "/", "tmax"}]}], "]"}], " ", "<>", " ", 
      "\"\<;\\n\\n\>\""}]}], ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{
    "outtext3", " ", "=", " ", 
     "\"\<\\n\\n\\t\[HappySmiley] (but they were replaced along the \
way).\>\""}], ";"}], "\n", "\n", "\n", " ", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"endtime", " ", "<", " ", "tmax"}], ",", " ", 
      RowBox[{"outtext", " ", "=", " ", 
       RowBox[{"outtext", " ", "<>", " ", "outtext2"}]}]}], "]"}], ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{"bornagain", ",", " ", 
      RowBox[{"outtext", " ", "=", " ", 
       RowBox[{"outtext", " ", "<>", " ", "outtext3"}]}]}], "]"}], ";"}], 
   "\n", "\n", 
   RowBox[{
    RowBox[{"textonplots", " ", "=", " ", 
     RowBox[{"Graphics", "[", 
      RowBox[{"Style", "[", 
       RowBox[{
        RowBox[{"Text", "[", 
         RowBox[{
          RowBox[{"Framed", "[", 
           RowBox[{"plottext", ",", " ", 
            RowBox[{"Background", " ", "\[Rule]", " ", "LightRed"}]}], "]"}], 
          ",", " ", 
          RowBox[{"Scaled", "[", 
           RowBox[{"{", 
            RowBox[{".98", ",", " ", ".98"}], "}"}], "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"1", ",", " ", "1"}], "}"}]}], "]"}], ",", "14"}], "]"}], 
      "]"}]}], ";"}], "\n", "\n", 
   RowBox[{"TextCell", "[", 
    RowBox[{"outtext", ",", " ", "\"\<Title\>\"", ",", " ", 
     RowBox[{"CellFrame", " ", "\[Rule]", " ", "True"}], ",", " ", 
     RowBox[{"FontSize", " ", "\[Rule]", " ", "16"}], ",", " ", 
     RowBox[{"Background", " ", "\[Rule]", " ", "LightGreen"}]}], "]"}], "\n",
    "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"now", " ", "the", " ", "plots"}], "..."}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"popplotf", "[", "]"}], " ", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"CellPrint", "[", 
     RowBox[{"Cell", "[", 
      RowBox[{
       RowBox[{"ToString", "[", 
        RowBox[{"StringForm", "[", 
         RowBox[{
         "\"\<Figure 0.  The black dashed curve is the original cumulative \
number population of asteroids, the black solid one is the current \
population. The blue one is a possible goal for the evolution of the \
population. The lower green one is the initial distribution of `` target \
asteroids.  The red plot and right scale are the masses in each bin of the \
population.\>\"", ",", "nasteroids"}], "]"}], "]"}], ",", "\"\<Text\>\"", ",", 
       RowBox[{"Background", "\[Rule]", 
        RowBox[{"GrayLevel", "[", ".9", "]"}]}]}], "]"}], "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
    "Print", "[", 
     "\"\<====================================================================\
================\>\"", "]"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"!", "steadypop"}], "&&", 
      RowBox[{"nframes", ">", "0"}]}], ",", "\n", 
     RowBox[{"ListAnimate", "[", 
      RowBox[{"cumplots", ",", 
       RowBox[{"AnimationRepetitions", "\[Rule]", "2"}], ",", 
       RowBox[{"AnimationRunning", "\[Rule]", "False"}], ",", 
       RowBox[{"ImageSize", "\[Rule]", "Full"}], ",", 
       RowBox[{"DisplayAllSteps", "\[Rule]", "True"}]}], "]"}]}], "]"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"!", "steadypop"}], "&&", 
      RowBox[{"nframes", ">", "0"}]}], ",", 
     RowBox[{
      RowBox[{"CellPrint", "[", 
       RowBox[{"Cell", "[", 
        RowBox[{
         RowBox[{"ToString", "[", 
          RowBox[{"StringForm", "[", 
           RowBox[{
           "\"\<Figure 0.1. A movie of the Population History \>\"", ",", 
            "nhistplots", ",", "nasteroids"}], "]"}], "]"}], ",", 
         "\"\<Text\>\"", ",", 
         RowBox[{"Background", "\[Rule]", 
          RowBox[{"GrayLevel", "[", ".9", "]"}]}]}], "]"}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
      "Print", "[", 
       "\"\<==================================================================\
=============================\>\"", "]"}]}]}], "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "provisions", " ", "to", " ", "compare", " ", "inital", " ", "target", 
      " ", "dist"}], ",", " ", 
     RowBox[{
     "final", " ", "target", " ", "dist", " ", "and", " ", "actual", " ", 
      "data", " ", "if", " ", "data", " ", "is", " ", "a", " ", "given", " ", 
      "set"}]}], " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"If", "[", 
     RowBox[{"famflg", ",", 
      RowBox[{
       RowBox[{"data", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"family0pts", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"nasteroids", "-", "1"}]}], "}"}]}], "]"}]}], ";", 
       RowBox[{"fam0plot", "=", 
        RowBox[{"ListLogLogPlot", "[", 
         RowBox[{"data", ",", 
          RowBox[{"PlotStyle", "\[Rule]", "Black"}], ",", 
          RowBox[{"PlotMarkers", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"\"\<\[Bullet]\>\"", ",", "Tiny"}], "}"}]}], ",", 
          RowBox[{"PlotRange", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{".1", ",", 
               RowBox[{"10", "^", "5"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{".001", ",", "1000"}], "}"}]}], "}"}]}]}], "]"}]}], ";",
        "\[IndentingNewLine]", 
       RowBox[{"ddlist", "=", 
        RowBox[{"ReverseSort", "[", "dlist", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"data2", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"ddlist", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"nasteroids", "-", "1"}]}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"famnowplot", "=", 
        RowBox[{"ListLogLogPlot", "[", 
         RowBox[{"data", ",", 
          RowBox[{"PlotStyle", "\[Rule]", "Red"}], ",", 
          RowBox[{"PlotMarkers", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"\"\<\[Bullet]\>\"", ",", "Tiny"}], "}"}]}]}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"data3", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"notshiftedpts", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"nasteroids", "-", "1"}]}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"famdataplot", "=", 
        RowBox[{"ListLogLogPlot", "[", 
         RowBox[{"data3", ",", 
          RowBox[{"PlotStyle", "\[Rule]", "Green"}], ",", 
          RowBox[{"PlotMarkers", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"\"\<\[Bullet]\>\"", ",", "Tiny"}], "}"}]}]}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"Show", "[", 
        RowBox[{"fam0plot", ",", "famnowplot", ",", "famdataplot"}], 
        "]"}]}]}], "]"}], "*)"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"get", " ", "better", " ", "initial", " ", "estimate"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"If", "[", 
     RowBox[{"famflg", ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"familythenpts", "=", 
        RowBox[{
         RowBox[{"2", " ", "notshifted"}], "-", "famnowpts"}]}], ";", "\n", 
       RowBox[{"famthenplot", "=", 
        RowBox[{"ListLogLogPlot", "[", 
         RowBox[{"familythenpts", ",", 
          RowBox[{"PlotStyle", "\[Rule]", "Green"}], ",", 
          RowBox[{"PlotRange", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{".001", ",", "1000"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", 
               RowBox[{"2", " ", 
                RowBox[{"10", "^", "4"}]}]}], "}"}]}], "}"}]}], ",", 
          RowBox[{"FrameLabel", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
            "\"\<diameter, km\>\"", ",", "\"\<number greater than\>\""}], 
            "}"}]}]}], "]"}]}], ";", " ", 
       RowBox[{
       "turn", " ", "this", " ", "on", " ", "and", " ", "plot", " ", "it", 
        " ", "to", " ", "get", " ", "a", " ", "better", " ", "estimate", " ", 
        "for", " ", "the", " ", "starting", " ", 
        RowBox[{"population", "."}]}]}]}]}], "*)"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "now", " ", "a", " ", "plot", " ", "showing", " ", "the", " ", "mass", 
      " ", "loss", " ", "from", " ", "each", " ", "of", " ", "4", " ", 
      "types", " ", "using", " ", "popchange"}], ",", " ", 
     RowBox[{
     "plus", " ", "the", " ", "depeletion", " ", "which", " ", "was", " ", 
      "put", " ", "into", " ", "diffdistr", " ", "directly"}]}], " ", "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "get", " ", "all", " ", "types", " ", "of", " ", "bin", " ", "masses"}], 
    " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"!", "steadypop"}], ",", 
     RowBox[{
      RowBox[{"massdistplots", "[", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"DynamicModule", "[", 
       RowBox[{
        RowBox[{"{", "names2", "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Show", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Which", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"names2", "==", "\"\<All\>\""}], ",", 
              RowBox[{"{", 
               RowBox[{
               "plotmass0", ",", "plotmassf", ",", "plotlost", ",", 
                "plotgained", ",", "plotdeplete", ",", "plotpulvgain", ",", 
                "plotpulvloss", ",", "plotcdloss", ",", "plotcdgain", ",", 
                "plotcratergain", ",", "plotcraterloss"}], "}"}], ",", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{
              "names2", "==", 
               "\"\<Original, final and net losses and gains\>\""}], ",", 
              RowBox[{"{", 
               RowBox[{
               "plotmass0", ",", "plotmassf", ",", "plotlost", ",", 
                "plotgained"}], "}"}], ",", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{
              "names2", "==", "\"\<Losses from dynamic depletion\>\""}], ",", 
              
              RowBox[{"{", "plotdeplete", "}"}], ",", 
              RowBox[{
              "names2", "==", "\"\<Gains and losses from Near CD\>\""}], ",", 
              
              RowBox[{"{", 
               RowBox[{"plotcdgain", ",", "plotcdloss"}], "}"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"names2", "==", "\"\<Gains and lossses from pulv\>\""}],
               ",", 
              RowBox[{"{", 
               RowBox[{"plotpulvgain", ",", "plotpulvloss"}], "}"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
              "names2", "==", "\"\<Gains and lossses from cratering\>\""}], 
              ",", 
              RowBox[{"{", 
               RowBox[{"plotcratergain", ",", "plotcraterloss"}], "}"}]}], 
             "\[IndentingNewLine]", "]"}], ",", 
            RowBox[{"ImageSize", "\[Rule]", "Full"}], ",", 
            RowBox[{"FrameLabel", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{
              "\"\<Diameter, km\>\"", ",", "\"\<Mass, kg, in each bin\>\""}], 
              "}"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"names2", ",", "\"\<All\>\"", ",", 
              RowBox[{"Style", "[", 
               RowBox[{"\"\<Which Plots?\>\"", ",", "Bold", ",", "14"}], 
               "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
             "\"\<All\>\"", ",", 
              "\"\<Original, final and net losses and gains\>\"", ",", 
              "\"\<Losses from dynamic depletion\>\"", ",", 
              "\"\<Gains and losses from Near CD\>\"", ",", 
              "\"\<Gains and lossses from pulv\>\"", ",", 
              "\"\<Gains and lossses from cratering\>\""}], "}"}], ",", 
            RowBox[{"ControlType", "\[Rule]", "PopupMenu"}]}], "}"}]}], 
         "]"}]}], "]"}]}]}], "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"!", "steadypop"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"masstable", "=", 
       RowBox[{"Grid", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"\"\<MASS ACCOUNTING\>\"", ",", "SpanFromLeft"}], "}"}], 
           ",", "\n", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
            "\"\<Item\>\"", ",", " ", "\"\<\[PlusMinus] Total Mass, Kg\>\"", 
             ",", "\"\<Plot Legend\>\"", ",", "\"\<Value for 1 km bin\>\"", 
             ",", "\"\<Value for 100 m bin\>\"", ",", 
             "\"\<Value for 10 m bin\>\"", ",", "\"\<Value for 1 m bin\>\""}],
             "}"}], ",", "\[IndentingNewLine]", "\n", 
           RowBox[{"{", " ", 
            RowBox[{"\"\<Original Mass\>\"", ",", " ", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"mass0", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], " ", ",", 
             "\"\<Black Squares\>\"", ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"mass0inbin1", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"mass0inbin2", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"mass0inbin3", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"mass0inbin4", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}]}], "}"}], ",", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"\"\<Final Mass\>\"", ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"finalmass", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             "\"\<Black Curve\>\"", ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"massfinbin1", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"massfinbin2", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"massfinbin3", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"massfinbin4", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}]}], "}"}], ",", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"\"\<Change, Gain (+), Loss (-); % \>\"", ",", 
             RowBox[{"ScientificForm", "[", 
              RowBox[{"totallost", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "3"}], "}"}]}], "]"}], ",", 
             "\"\<Red Curve \>\"", ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"massdiffinbin1", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"massdiffinbin2", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"massdiffinbin3", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"massdiffinbin4", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}]}], "}"}], ",", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"\"\<Depletion\>\"", ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"depletemass", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             "\"\<Red Curve\>\"", ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"depleteinbin1", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"depleteinbin2", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"depleteinbin3", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"depleteinbin4", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}]}], "}"}], ",", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"\"\<Pulv masses gained\>\"", ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"pulvposmass", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             "\"\<Orange Curve\>\"", ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"pulvbingain1", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"pulvbingain2", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"pulvbingain3", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"pulvbingain4", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}]}], "}"}], ",", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"\"\<Pulvmasses lost\>\"", ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"pulvnegmass", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             "\"\<Orange Markers\>\"", ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"pulvbinloss1", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"pulvbinloss2", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"pulvbinloss3", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"pulvbinloss4", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}]}], "}"}], ",", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"\"\<Near CD masses gained\>\"", ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"cdposmass", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             "\"\<Purple Curve\>\"", ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"cdbingain1", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"cdbingain2", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"cdbingain3", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"cdbingain4", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}]}], "}"}], ",", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"\"\<Near CD masses lost\>\"", ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"cdnegmass", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             "\"\<Purple Markers\>\"", ",", "\[IndentingNewLine]", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"cdbinloss1", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"cdbinloss2", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"cdbinloss3", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"cdbinloss4", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}]}], "}"}], ",", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"\"\<Cratering masses gained\>\"", ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"craterposmass", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             "\"\<Blue Curve\>\"", ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"craterbingain1", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"craterbingain2", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"craterbingain3", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"craterbingain4", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}]}], "}"}], ",", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"\"\<Cratering masses lost\>\"", ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"craternegmass", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             "\"\<Blue Markers\>\"", ",", "\[IndentingNewLine]", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"craterbinloss1", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"craterbinloss2", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"craterbinloss3", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}], ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{"craterbinloss4", ",", 
               RowBox[{"{", 
                RowBox[{"4", ",", "4"}], "}"}]}], "]"}]}], "}"}]}], "}"}], 
         ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"Frame", "\[Rule]", "All"}], ",", 
         RowBox[{"ItemStyle", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"Automatic", ",", 
            RowBox[{"{", 
             RowBox[{"Bold", ",", "Bold"}], "}"}]}], "}"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Print", "[", "masstable", "]"}]}]}], "]"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"CellPrint", "[", 
    RowBox[{"Cell", "[", 
     RowBox[{
      RowBox[{"ToString", "[", 
       RowBox[{
       "StringForm", "[", 
        "\"\<Figure 0.5.  The mass change in each bin versus the the bin \
diameters from two impact types and that lost to dynamic depletion.  The \
upper black square symbols are the original mass in each bin, the black curve \
are the final masses. Values shown as green, dashed are the net gain, the \
green curve are the net losses. The Red curve is the magnitude of the dynamic \
depletion and gone from the belt. For pulverization impacts, the orange curve \
are the gains, and the orange \
\!\(\*StyleBox[\"\[FilledDownTriangle]\",FontColor->RGBColor[1, 0.5, 0]]\) \
are the loss magnitude. For near-CD impacts, the purple curve are the gains, \
and the purple \
\!\(\*StyleBox[\"\[FilledDownTriangle]\",FontColor->RGBColor[0.5, 0, 0.5]]\) \
are the loss magnitudes. For cratering impacts, the blue curve are the gains, \
and the blue\!\(\*StyleBox[\" \
\",FontColor->GrayLevel[0]]\)\!\(\*StyleBox[\"symbols\",FontColor->GrayLevel[\
0]]\)\!\(\*StyleBox[\" \",FontColor->GrayLevel[0]]\)are the loss \
magnitudes.\>\"", "]"}], "]"}], ",", "\"\<Text\>\"", ",", 
      RowBox[{"Background", "\[Rule]", 
       RowBox[{"GrayLevel", "[", ".9", "]"}]}]}], "]"}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
    "Print", "[", 
     "\"\<====================================================================\
===============\>\"", "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
   "Print", "[", 
    "\"\<=====================================================================\
==============\>\"", "]"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"CellPrint", "[", 
     RowBox[{"Cell", "[", 
      RowBox[{
      "\"\<I.  Here are the Final States of the Surviving Asteroids\>\"", 
       ",", "\"\<Section\>\"", ",", 
       RowBox[{"Background", "\[Rule]", 
        RowBox[{"GrayLevel", "[", ".7", "]"}]}]}], "]"}], "]"}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"xdone", "=", "1"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"numleft", ">", "0"}], ",", "\[IndentingNewLine]", 
     RowBox[{"DynamicModule", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"tangle", ",", "names2", ",", "unitsfac", ",", "unitsname"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "here", " ", "i", " ", "get", " ", "wobbles", " ", "to", " ", 
          "whatever", " ", "degrees", " ", "the", " ", "choice", " ", "in", 
          " ", "the", " ", "slider", " ", "is"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"test2", "=", 
           RowBox[{
            RowBox[{"Position", "[", 
             RowBox[{
              RowBox[{"fulltermwobble", "/", "Degree"}], ",", 
              RowBox[{"_", "?", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"#", ">", "tangle"}], "||", 
                   RowBox[{"#", "<", 
                    RowBox[{"-", "tangle"}]}]}], ")"}], " ", "&"}], ")"}]}]}],
              "]"}], "//", "Flatten"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"tummarkers", "=", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "test2", "]"}], ">", "0"}], ",", 
             RowBox[{"ListLogLogPlot", "[", 
              RowBox[{
               RowBox[{"Transpose", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"fulltermd", "[", 
                   RowBox[{"[", "test2", "]"}], "]"}], ",", 
                  RowBox[{"unitsfac", " ", 
                   RowBox[{"Abs", "[", 
                    RowBox[{"fulltermnet", "[", 
                    RowBox[{"[", "test2", "]"}], "]"}], "]"}]}]}], "}"}], 
                "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"PlotStyle", "\[Rule]", "Green"}], ",", 
               RowBox[{"PlotMarkers", "\[Rule]", 
                RowBox[{"{", 
                 RowBox[{"\[FilledSmallCircle]", ",", "Tiny"}], "}"}]}]}], 
              "]"}], ",", "limitshere"}], "]"}]}], ";", "\[IndentingNewLine]",
           "\[IndentingNewLine]", 
          RowBox[{"Which", "[", 
           RowBox[{
            RowBox[{"unitsname", "\[Equal]", "\"\<Radians/s\>\""}], ",", 
            RowBox[{
             RowBox[{"unitsfac", "=", "1"}], ";", 
             RowBox[{"exp2", "=", "1"}]}], ",", 
            RowBox[{"unitsname", "==", "\"\<Cycles/day\>\""}], ",", 
            RowBox[{
             RowBox[{"exp2", "=", "1"}], ";", 
             RowBox[{"unitsfac", "=", 
              RowBox[{"1.38", " ", 
               RowBox[{"10", "^", "4"}]}]}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"unitsname", "==", "\"\<Hours/cycle\>\""}], ",", 
            RowBox[{
             RowBox[{"unitsfac", "=", 
              RowBox[{"1.745", " ", 
               RowBox[{"10", "^", 
                RowBox[{"-", "3"}]}]}]}], ";", 
             RowBox[{"exp2", "=", 
              RowBox[{"-", "1"}]}]}]}], "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"spinpts2", "=", 
           RowBox[{"Transpose", "[", 
            RowBox[{"{", 
             RowBox[{"fulltermd", ",", 
              RowBox[{"unitsfac", " ", 
               RowBox[{"Abs", "[", 
                RowBox[{"fulltermnet", "^", "exp2"}], "]"}]}]}], "}"}], 
            "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"meanplot2", "=", 
           RowBox[{"If", "[", 
            RowBox[{"enuf", ",", " ", 
             RowBox[{"runboxmeanf", "[", 
              RowBox[{"spinpts2", ",", "1.2", ",", "Purple"}], "]"}], ",", 
             "limitshere"}], "]"}]}], ";", " ", 
          RowBox[{"(*", " ", 
           RowBox[{"running", " ", "box", " ", "mean"}], " ", "*)"}], 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"limitshere", "=", 
           RowBox[{"spinlimplots", "[", "unitsname", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"tumblelimitf", "[", 
           RowBox[{"unitsname", ",", "False"}], "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"binplot2", "=", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"numbin", ">", "0"}], ",", 
             RowBox[{"ListLogLogPlot", "[", 
              RowBox[{
               RowBox[{"Transpose", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"binariestoplot", "[", 
                   RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Abs", "[", 
                    RowBox[{"binariestoplot", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}], "^", 
                    "exp2"}], " ", "unitsfac"}]}], "}"}], "]"}], ",", 
               RowBox[{"PlotStyle", "\[Rule]", 
                RowBox[{"{", 
                 RowBox[{"Red", ",", " ", "Tiny"}], "}"}]}], ",", 
               RowBox[{"PlotMarkers", "\[Rule]", 
                RowBox[{"{", "\[EmptySmallCircle]", "}"}]}]}], "]"}], ",", 
             "limitshere"}], "]"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"oe84plot2", "=", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"plotdsmallest", "<", "1"}], ",", 
             RowBox[{"ListLogLogPlot", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"{", 
                 RowBox[{"0.65", ",", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"3.6", " ", 
                    RowBox[{"10", "^", 
                    RowBox[{"-", "3"}]}]}], ")"}], "^", "exp2"}], " ", 
                   "unitsfac"}]}], "}"}], "}"}], ",", 
               RowBox[{"PlotMarkers", "\[Rule]", 
                RowBox[{"{", 
                 RowBox[{"\"\<\[CloverLeaf]\>\"", ",", "Medium"}], "}"}]}], 
               ",", 
               RowBox[{"PlotStyle", "\[Rule]", "Green"}]}], "]"}], ",", 
             "limitshere"}], "]"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"textonplots2", "=", 
           RowBox[{"Graphics", "[", 
            RowBox[{"Style", "[", 
             RowBox[{
              RowBox[{"Text", "[", 
               RowBox[{
                RowBox[{"Framed", "[", 
                 RowBox[{"ToString", "[", 
                  RowBox[{
                  "plottext", "<>", "\"\<\\r\>\"", "<>", 
                   "\"\<Possible Binaries= \>\"", "<>", 
                   RowBox[{"ToString", "[", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{
                    RowBox[{"100.", " ", 
                    RowBox[{"numbin", "/", " ", "nasteroids"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "1"}], "}"}]}], "]"}], "]"}], "<>", 
                   "\"\< %\\rWobblers= \>\"", "<>", 
                   RowBox[{"ToString", "[", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{
                    RowBox[{"100.", 
                    RowBox[{
                    RowBox[{"Length", "[", " ", "test2", "]"}], "/", 
                    "nasteroids"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "1"}], "}"}]}], "]"}], "]"}], "<>", 
                   "\"\< % >\>\"", "<>", 
                   RowBox[{"ToString", "[", "tangle", "]"}], "<>", 
                   "\"\<\:02da\>\""}], "]"}], "]"}], ",", 
                RowBox[{"Scaled", "[", 
                 RowBox[{"{", 
                  RowBox[{".8", ",", ".8"}], "}"}], "]"}], ",", 
                RowBox[{"Background", "\[Rule]", "LightGray"}]}], "]"}], ",", 
              "14"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"final", "=", 
           RowBox[{"Show", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Which", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"names2", "==", "\"\<All\>\""}], ",", 
               RowBox[{"{", 
                RowBox[{
                "limitshere", ",", "tumblelimit1", ",", "tumblelimit2", ",", 
                 "tumblelimit3", ",", "tumblelimit4", ",", "textonplots2", 
                 ",", 
                 RowBox[{"ListLogLogPlot", "[", 
                  RowBox[{"spinpts2", ",", 
                   RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", "Black", "}"}]}], ",", 
                   RowBox[{"PlotMarkers", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    StyleBox["\[FilledSmallCircle]",
                    FontColor->GrayLevel[0]], ",", "Tiny"}], "}"}]}]}], "]"}],
                  ",", "\[IndentingNewLine]", "binplot2", ",", "oe84plot2", 
                 ",", "meanplot2", ",", "tummarkers"}], "}"}], ",", 
               "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{
               "names2", "==", "\"\<No binaries/tops or tumblers\>\""}], ",", 
               
               RowBox[{"{", 
                RowBox[{
                "limitshere", ",", "tumblelimit1", ",", "tumblelimit2", ",", 
                 "tumblelimit3", ",", "tumblelimit4", ",", "textonplots2", 
                 ",", 
                 RowBox[{"ListLogLogPlot", "[", 
                  RowBox[{"spinpts2", ",", 
                   RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", "Black", "}"}]}]}], "]"}], ",", 
                 "\[IndentingNewLine]", "oe84plot2", ",", "meanplot2"}], 
                "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{"names2", "==", "\"\<final GLE points\>\""}], ",", 
               RowBox[{"{", 
                RowBox[{
                "limitshere", ",", "binplot2", ",", "tumblelimit1", ",", 
                 "tumblelimit2", ",", "tumblelimit3", ",", "tumblelimit4", 
                 ",", "textonplots2"}], "}"}], ",", "\[IndentingNewLine]", 
               "\[IndentingNewLine]", 
               RowBox[{"names2", "==", "\"\<final tumbler points\>\""}], ",", 
               
               RowBox[{"{", 
                RowBox[{
                "limitshere", ",", "tumblelimit1", ",", "tumblelimit2", ",", 
                 "tumblelimit3", ",", "tumblelimit4", ",", "tummarkers", ",", 
                 "textonplots2"}], "}"}], ",", "\[IndentingNewLine]", 
               "\[IndentingNewLine]", 
               RowBox[{"names2", "==", "\"\<No Limits\>\""}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"ListLogLogPlot", "[", 
                  RowBox[{"spinpts2", ",", 
                   RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", "Black", "}"}]}]}], "]"}], ",", "meanplot2", 
                 ",", "textonplots2"}], "}"}]}], "]"}], ",", 
             "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"FrameLabel", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"\"\<Diameter, km\>\"", ",", 
                RowBox[{"\"\<Spin, \>\"", "<>", " ", 
                 RowBox[{"ToString", "[", "unitsname", "]"}]}]}], "}"}]}], 
             ",", 
             RowBox[{"LabelStyle", "\[Rule]", "24"}], ",", 
             RowBox[{"FrameTicksStyle", "\[Rule]", "20"}], ",", 
             RowBox[{"ImageSize", "\[Rule]", "Full"}], ",", 
             RowBox[{"PlotMarkers", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"\[FilledSmallCircle]", ",", "Large"}], "}"}]}], ",", 
             RowBox[{"PlotRange", "\[Rule]", 
              RowBox[{"Log", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{".001", ",", "1000"}], "}"}], ",", 
                 RowBox[{"unitsfac", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"4", " ", 
                    RowBox[{"10", "^", 
                    RowBox[{"-", "7"}]}]}], ",", "1"}], "}"}], "^", 
                   "exp2"}]}]}], "}"}], "]"}]}]}], "]"}]}]}], ",", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "names2", ",", "\"\<All\>\"", ",", "\"\<Which Plots?\>\""}], 
            "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
            "\"\<All\>\"", ",", "\"\<No binaries/tops or tumblers\>\"", ",", 
             "\"\<No Limits\>\"", ",", "\"\<final GLE points\>\"", ",", 
             "\"\<final tumbler points\>\""}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "unitsname", ",", "\"\<Cycles/day\>\"", ",", 
             "\"\<Choose the units\>\""}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
            "\"\<Radians/s\>\"", ",", "\"\<Cycles/day\>\"", ",", 
             "\"\<Hours/cycle\>\""}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "tangle", ",", "tumbleangle\:02da", ",", 
             "\"\<Observable Tumble Angle, Degrees\>\""}], "}"}], ",", "0", 
           ",", "90", ",", "2", ",", 
           RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}]}], 
        "]"}]}], "]"}]}], " ", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"numleft", ">", "0"}], ",", 
     RowBox[{"CellPrint", "[", 
      RowBox[{"Cell", "[", 
       RowBox[{
        RowBox[{"ToString", "[", 
         RowBox[{"StringForm", "[", 
          RowBox[{
          "\"\<Figure 1.  The  spin magnitudes versus final diameter of the \
surviving `` of the  total of `` sample asteroids after a `` Byr history.  \
\\r \\t A selection of the various curves and of the units are selected by \
the controls at the top. \\r\\tThose that exceeded the gravity limit have the \
red symbols, and are binary/tops candidates. \\r\\tThe tumblers are the green \
\[EmptyCircle]. The asteroid 2001 OE84 has the green \[CloverLeaf]. \\r\\t \
The orange curves at the top are the strength spin limits for three values of \
strength, the upper one is for the expected strength. \\r\\tThe horizontal \
black line is the gravity spin limit. \\r\\tThe lower solid black sloped line \
is the limit below which tumblers relaxation time from 45\:02da to 6\:02da is \
greater than 4.5 Byr, the green dot-dashed is for a time of 450 Myr, the red \
dashed is for a time of 45 Myr, and the purple dotted line is for a time of \
4.5 Myr.  \\r\\tThe purple wiggly curve is the running box mean.  This can be \
compared to the 2019 data using the button below.\>\"", ",", "numleft", ",", 
           "nasteroids", ",", 
           RowBox[{"tmax", "/", 
            RowBox[{"10", "^", "9"}]}], ",", 
           RowBox[{"NumberForm", "[", 
            RowBox[{
             RowBox[{"100.", " ", 
              RowBox[{"numbin", "/", " ", "nasteroids"}]}], ",", 
             RowBox[{"{", 
              RowBox[{"3", ",", "1"}], "}"}]}], "]"}], ",", 
           "tumbleangle\:02da", ",", 
           RowBox[{"NumberForm", "[", 
            RowBox[{
             RowBox[{"100.", " ", 
              RowBox[{"numtumblers", "/", " ", "nasteroids"}]}], ",", 
             RowBox[{"{", 
              RowBox[{"3", ",", "1"}], "}"}]}], "]"}]}], "]"}], "]"}], ",", 
        "\"\<Text\>\"", ",", 
        RowBox[{"Background", "\[Rule]", 
         RowBox[{"GrayLevel", "[", ".9", "]"}]}], ",", 
        RowBox[{"ImageSize", "\[Rule]", "All"}]}], "]"}], "]"}], ",", 
     RowBox[{"Print", "[", "\"\<None survived, no figure 1 \>\"", "]"}]}], 
    "]"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"numleft", ">", "0"}], ",", 
     RowBox[{"Row", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Show", "[", 
          RowBox[{"spinplot1", ",", 
           RowBox[{"DisplayFunction", "\[Rule]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"PopupWindow", "[", 
               RowBox[{
                RowBox[{"Button", "[", 
                 RowBox[{"\"\<Show me the 2019 Spin Data Plot\>\"", ",", 
                  RowBox[{"Background", "\[Rule]", "LightBrown"}]}], "]"}], 
                ",", "#", ",", 
                RowBox[{
                "WindowTitle", "\[Rule]", 
                 "\"\<2019 Database spin distribution\>\""}], ",", 
                RowBox[{"WindowSize", "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{"700", ",", "550"}], "}"}]}]}], "]"}], "&"}], 
             ")"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Show", "[", 
          RowBox[{
           RowBox[{"wobblecurvef", "[", "]"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"PopupWindow", "[", 
               RowBox[{
                RowBox[{"Button", "[", 
                 RowBox[{
                 "\"\<Plot the simulated wobble percentages versus observable \
angle.\>\"", ",", 
                  RowBox[{"Background", "\[Rule]", "LightBrown"}]}], "]"}], 
                ",", "#", ",", 
                RowBox[{
                "WindowTitle", "\[Rule]", "\"\<Simulated Wobble Angles\>\""}],
                 ",", 
                RowBox[{"WindowSize", "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{"700", ",", "550"}], "}"}]}]}], "]"}], "&"}], 
             ")"}]}]}], "]"}]}], "}"}], ",", "\"\<      \>\""}], "]"}]}], 
    "]"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"xdone", "=", "2"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"limitplots2", "=", 
     RowBox[{"spinlimplots", "[", "\"\<Cycles/day\>\"", "]"}]}], ";"}], "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"!", "enuf"}], "&&", 
      RowBox[{
       RowBox[{"Length", "[", "fulltermd", "]"}], ">", "0"}]}], ",", "\n", 
     RowBox[{"Show", "[", 
      RowBox[{"spindata2019means", ",", "limitplots2", ",", 
       RowBox[{"ListLogLogPlot", "[", 
        RowBox[{
         RowBox[{"Transpose", "[", 
          RowBox[{"{", 
           RowBox[{"fulltermd", ",", 
            RowBox[{"1.38", " ", 
             RowBox[{"10", "^", "4"}], " ", 
             RowBox[{"Abs", "[", "fulltermnet", "]"}]}]}], "}"}], "]"}], ",", 
         
         RowBox[{"PlotStyle", "\[Rule]", "Green"}]}], "]"}], ",", 
       RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
       RowBox[{"ImageSize", "\[Rule]", "Full"}]}], "]"}]}], "]"}], "\n", "\n", 
   RowBox[{"If", "[", 
    RowBox[{"enuf", ",", "\n", 
     RowBox[{
      RowBox[{"Grid", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"CellPrint", "[", 
           RowBox[{"Cell", "[", 
            RowBox[{
             RowBox[{"ToString", "[", 
              RowBox[{"StringForm", "[", 
               RowBox[{
               "\"\<Figure 2.  The spins of the remaining `` sample asteroids \
(green), all with the same size,  compared to that of the 2019 data (red). \
The simulation ran for `` Byr.\>\"", ",", "numleft", ",", 
                RowBox[{"tmax", "/", 
                 RowBox[{"10", "^", "9"}]}]}], "]"}], "]"}], ",", 
             "\"\<Text\>\"", ",", 
             RowBox[{"Background", "\[Rule]", 
              RowBox[{"GrayLevel", "[", ".9", "]"}]}], ",", 
             RowBox[{"ImageSize", "\[Rule]", "All"}]}], "]"}], "]"}], "}"}], 
         ",", 
         RowBox[{"{", 
          RowBox[{"Spacer", "[", 
           RowBox[{"{", 
            RowBox[{"1", ",", "50"}], "}"}], "]"}], "}"}]}], "}"}], "]"}], 
      ";", "\n", "\n", 
      RowBox[{"DynamicModule", "[", 
       RowBox[{
        RowBox[{"{", " ", "xd", " ", "}"}], ",", "\n", 
        RowBox[{"Manipulate", "[", " ", "\n", 
         RowBox[{
          RowBox[{
           RowBox[{"meanplot", "=", 
            RowBox[{"runboxmeanf", "[", 
             RowBox[{"spinpts", ",", "xd", ",", "Green"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"Show", "[", 
            RowBox[{
            "spindata2019means", ",", "meanplot", ",", "limitplots2", ",", 
             "textonplots", ",", 
             RowBox[{"ImageSize", "\[Rule]", "Full"}], ",", 
             RowBox[{"Frame", "\[Rule]", "True"}], ",", 
             RowBox[{"FrameLabel", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
               "\"\<Diameter, km\>\"", ",", "\"\<Spin, cyles/day\>\""}], 
               "}"}]}], ",", 
             RowBox[{"FrameTicksStyle", "\[Rule]", "20"}], ",", 
             RowBox[{"LabelStyle", "\[Rule]", "24"}]}], "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
             "xd", ",", "1.2", ",", "\"\<Range for running box, %d\>\""}], 
             "}"}], ",", "1.01", ",", "2", ",", ".1", ",", 
            RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}]}], 
         "]"}]}], "]"}]}]}], "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"If", "[", 
    RowBox[{"enuf", ",", 
     RowBox[{"Grid", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"CellPrint", "[", 
          RowBox[{"Cell", "[", 
           RowBox[{
            RowBox[{"ToString", "[", 
             RowBox[{"StringForm", "[", 
              RowBox[{
              "\"\<Figure 2.  The running box mean of the spins of the \
remaining `` sample asteroids (green) compared to that of the 2019 data \
(red). The simulation ran for `` Byr.  The range for the running box mean are \
 ratios {1/1.2,1.2} around a given diameter and can be set by the slider at \
the top of this plot. The spin of the small objects have little dependence on \
the population, since they are destroyed and replaced many times.  However \
the results for all diameters are very dependent upon the models chosen for \
the spin up efficiency.  A button is provided in the input panel to make an \
overall factor change of those efficiencies. The details of the diameter \
dependence of the efficiency are set in the \
\!\(\*StyleBox[\"SSAH\",FontSlant->\"Italic\"]\) function zetaf[].\>\"", ",", 
               "numleft", ",", 
               RowBox[{"tmax", "/", 
                RowBox[{"10", "^", "9"}]}]}], "]"}], "]"}], ",", 
            "\"\<Text\>\"", ",", 
            RowBox[{"Background", "\[Rule]", 
             RowBox[{"GrayLevel", "[", ".9", "]"}]}], ",", 
            RowBox[{"ImageSize", "\[Rule]", "All"}]}], "]"}], "]"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"Spacer", "[", 
          RowBox[{"{", 
           RowBox[{"1", ",", "50"}], "}"}], "]"}], "}"}]}], "}"}], "]"}], ",", 
     RowBox[{"Print", "[", "\"\<Not enuf survived, no figure 2 \>\"", "]"}]}],
     "]"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"xdone", "=", "3"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"!", "enuf"}], ",", 
     RowBox[{
     "Print", "[", 
      "\"\<Not enuf targets or diameter range to make histogram for Fig. 3.\>\
\"", "]"}], ",", 
     RowBox[{"DynamicModule", "[", 
      RowBox[{
       RowBox[{"{", " ", 
        RowBox[{
        "type", ",", "nn", ",", "dia1", ",", "dia2", " ", ",", "spinmin", ",",
          "test"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"dd1", "=", 
         RowBox[{"Min", "[", 
          RowBox[{"spinpts", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dd2", "=", "50"}], ";", "\[IndentingNewLine]", 
        RowBox[{"dd3", "=", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"dd2", "-", "dd1"}], ")"}], "/", "20"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"test", "=", 
           RowBox[{"Length", "[", 
            RowBox[{"Position", "[", 
             RowBox[{
              RowBox[{"spinpts", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
              RowBox[{"_", "?", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"#", ">", "dia1"}], "||", 
                   RowBox[{"#", "<", "dia2"}]}], ")"}], " ", "&"}], ")"}]}]}],
              "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", "*)"}], 
        RowBox[{"Manipulate", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"dia2", "<", "dia1"}], ",", 
             RowBox[{"dia2", "=", 
              RowBox[{"1.2", " ", "dia1"}]}]}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"Show", "[", 
            RowBox[{
             RowBox[{"histogramf", "[", 
              RowBox[{
              "spinpts", ",", "dia1", ",", "dia2", ",", "spinmin", ",", 
               "type", ",", "nn", ",", "\"\<Spin in cycles/day\>\""}], "]"}], 
             ",", "textonplots", ",", 
             RowBox[{"FrameLabel", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"\"\<Spin, cycles/day\>\"", ",", "\"\<number\>\""}], 
               "}"}]}], ",", 
             RowBox[{"LabelStyle", "\[Rule]", "24"}]}], "]"}]}], 
          "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
             "type", ",", "\"\<PDF\>\"", ",", "\"\<Type of Histogram\>\""}], 
             "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
             "\"\<Count\>\"", ",", "\"\<PDF\>\"", ",", "\"\<Log\>\"", ",", 
              "\"\<Probability\>\"", ",", "\"\<CDF\>\""}], "}"}]}], "}"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"nn", ",", 
              RowBox[{"Min", "[", 
               RowBox[{
                RowBox[{"Round", "[", 
                 RowBox[{"nasteroids", "/", "40"}], "]"}], ",", "50"}], "]"}],
               ",", "\"\<Number of Bins\>\""}], "}"}], ",", "1", ",", "100", 
            ",", "1", ",", 
            RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"dia1", ",", "5.", ",", "\"\<Lower diameter range\>\""}],
              "}"}], ",", "dd1", ",", "dd2", ",", "dd3", ",", 
            RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
             "dia2", ",", "10.", ",", "\"\<Upper diameter range\>\""}], "}"}],
             ",", "dd1", ",", "dd2", ",", "dd3", ",", 
            RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"spinmin", ",", "0", ",", "\"\<Minimum Spin Value\>\""}],
              "}"}], ",", "0", ",", "10", ",", ".1", ",", 
            RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}]}], 
         "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
    "]"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{"enuf", ",", 
      RowBox[{
       StyleBox[
        RowBox[{"CellPrint", "[", 
         RowBox[{"Cell", "[", 
          RowBox[{
           RowBox[{"ToString", "[", 
            RowBox[{"StringForm", "[", 
             RowBox[{
             "\"\<Figure 3. A histogram of the spin values for a given \
diameter range of 1 to 10 km of the remaining `` asteroids after the history \
of `` Byr. The vertical line is the mean value.The  histogram type, number of \
bins, and the diameter range can be reset by the controls at the top of this \
plot.  It also can be compared to the 2019 database using the button below.\>\
\"", ",", "numleft", ",", 
              RowBox[{"tmax", "/", 
               RowBox[{"10", "^", "9"}]}]}], "]"}], "]"}], ",", 
           "\"\<Text\>\"", ",", 
           RowBox[{"Background", "\[Rule]", 
            RowBox[{"GrayLevel", "[", ".9", "]"}]}], ",", 
           RowBox[{"ImageSize", "\[Rule]", "All"}]}], "]"}], "]"}], "Input"], 
       
       StyleBox[";", "Input"], "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Show", "[", 
        RowBox[{"histoplot2", ",", 
         RowBox[{"DisplayFunction", "\[Rule]", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"PopupWindow", "[", 
             RowBox[{
              RowBox[{"Button", "[", 
               RowBox[{"\"\<Show me the 2019 Histogram Plot\>\"", ",", 
                RowBox[{"Background", "\[Rule]", "Pink"}]}], "]"}], ",", "#", 
              ",", 
              RowBox[{
              "WindowTitle", "\[Rule]", 
               "\"\<2019 Database Log Histogram\>\""}], ",", 
              RowBox[{"WindowSize", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{"700", ",", "550"}], "}"}]}]}], "]"}], "&"}], 
           ")"}]}]}], "]"}]}]}], "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
    "Print", "[", 
     "\"\<====================================================================\
==============================\>\"", "]"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Grid", "[", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"(*", 
        RowBox[{"out3", ","}], "*)"}], "out4", "}"}], "}"}], "]"}], "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"xdone", "=", "4"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"numhalf", ">", "5"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"xl", "=", 
       RowBox[{"Min", "[", 
        RowBox[{"halfmevent", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"xr", "=", 
       RowBox[{"Max", "[", 
        RowBox[{"halfmevent", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"xrange", "=", 
       RowBox[{"xr", "-", "xl"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"DynamicModule", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "xl", ",", "xr", ",", "x1", ",", "x2", ",", "type", ",", "nn"}], 
         "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"xl", "=", 
          RowBox[{"Min", "[", 
           RowBox[{"halfmevent", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"xr", "=", 
          RowBox[{"Max", "[", 
           RowBox[{"halfmevent", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"xrange", "=", 
          RowBox[{"xr", "-", "xl"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Show", "[", 
            RowBox[{
             RowBox[{"histogramf", "[", 
              RowBox[{
               RowBox[{"halfmevent", "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", 
                  RowBox[{"2", ";;", "3"}]}], "]"}], "]"}], ",", "x1", ",", 
               "x2", ",", "0", ",", "type", ",", "nn", ",", 
               "\"\<the lifetimes of \>\""}], "]"}], ",", 
             RowBox[{"FrameLabel", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"\"\<Lifetime, yrs\>\"", ",", "\"\<number\>\""}], 
               "}"}]}], ",", 
             RowBox[{"LabelStyle", "\[Rule]", "24"}]}], " ", "]"}], 
           "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "type", ",", "\"\<Log\>\"", ",", "\"\<Type of Histogram\>\""}], 
              "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
              "\"\<Count\>\"", ",", "\"\<PDF\>\"", ",", "\"\<Log\>\"", ",", 
               "\"\<Probability\>\"", ",", "\"\<CDF\>\""}], "}"}]}], "}"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"nn", ",", "30", ",", "\"\<Number of Bins\>\""}], "}"}],
              ",", "5", ",", "100", ",", "1", ",", 
             RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "x1", ",", "xl", ",", 
               "\"\<Lower Diameter Range for lifetimes, %d\>\""}], "}"}], ",",
              "xl", ",", "xr", ",", 
             RowBox[{"xrange", "/", "20"}], ",", 
             RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "x2", ",", "xr", ",", 
               "\"\<Upper Diameter Range for lifetimes, %d\>\""}], "}"}], ",",
              "xl", ",", "xr", ",", 
             RowBox[{"xrange", "/", "50"}], ",", 
             RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}]}], 
          "]"}]}]}], "]"}]}], ",", 
     RowBox[{
      RowBox[{
      "Print", "[", 
       "\"\<Not enuf to plot the half mass targets for Fig. 4.\>\"", "]"}], 
      ";"}]}], "]"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"numhalf", ">", "5"}], ",", 
      RowBox[{
       StyleBox["CellPrint", "Input"], 
       StyleBox["[", "Input"], 
       RowBox[{
        StyleBox["Cell", "Input"], 
        StyleBox["[", "Input"], 
        RowBox[{
         RowBox[{
          StyleBox["ToString", "Input"], 
          StyleBox["[", "Input"], 
          RowBox[{
           StyleBox["StringForm", "Input"], 
           StyleBox["[", "Input"], 
           RowBox[{
           "\"\<Figure 4.  A histogram of the  ``  asteroids of the total of \
`` that were reduced to less than half mass by erosion, catastrophic \
disruption, or pulverization during the `` Byr history. This is the average \
lifetime of all asteroids only if all targets have been reduced to half mass.\
\>\"", ",", "numhalf", ",", "nasteroids", ",", 
            RowBox[{"tmax", "/", 
             RowBox[{"10", "^", "9"}]}]}], " ", "]"}], "]"}], ",", 
         "\"\<Text\>\"", ",", 
         RowBox[{"Background", "\[Rule]", 
          RowBox[{"GrayLevel", "[", ".9", "]"}]}]}], "]"}], "]"}]}], "]"}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
    "Print", "[", 
     "\"\<____________________________________________________________________\
______________________________\>\"", "]"}], ";"}], 
   StyleBox["\[IndentingNewLine]", "CodeText"], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"CellPrint", "[", 
     RowBox[{"Cell", "[", 
      RowBox[{
      "\"\<II. HERE ARE HISTORIES OF THE DIAMETER, MASS RATIO, AND SPIN\>\"", 
       ",", "\"\<Section\>\"", ",", 
       RowBox[{"Background", "\[Rule]", 
        RowBox[{"GrayLevel", "[", ".7", "]"}]}]}], "]"}], "]"}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"xdone", "=", "5"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"plotsd5", "=", 
     RowBox[{"Show", "[", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"ListPlot", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"histplotpts", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "2"}], "}"}]}], "]"}], "]"}], ",", 
          RowBox[{"PlotStyle", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"Black", ",", "Medium", ",", 
             RowBox[{"Thickness", "[", "Small", "]"}]}], "}"}]}], ",", 
          RowBox[{"InterpolationOrder", "\[Rule]", "0"}], ",", 
          RowBox[{"Joined", "\[Rule]", "True"}], ",", 
          RowBox[{"PlotRange", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0", ",", 
               RowBox[{"1.1", " ", "endtime"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"1.2", " ", 
                RowBox[{"Max", "[", 
                 RowBox[{"histplotpts", "[", 
                  RowBox[{"[", 
                   RowBox[{"All", ",", "All", ",", "2"}], "]"}], "]"}], 
                 "]"}]}], ",", "0"}], "}"}]}], "}"}]}], ",", 
          RowBox[{"FrameLabel", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"\"\<Time, yr\>\"", ",", "\"\<Diameter, km\>\""}], 
            "}"}]}], ",", 
          RowBox[{"LabelStyle", "\[Rule]", "24"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "nhistplots"}], "}"}]}], "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"plotpts5", "=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Last", "[", 
         RowBox[{"histplotpts", "[", 
          RowBox[{"[", "i", "]"}], "]"}], "]"}], "[", 
        RowBox[{"[", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}], "]"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "nhistplots"}], "}"}]}], "]"}]}], ";", 
    RowBox[{"plotlast5", "=", 
     RowBox[{"ListPlot", "[", 
      RowBox[{"plotpts5", ",", 
       RowBox[{"PlotMarkers", "\[Rule]", "\"\<O\>\""}], ",", 
       RowBox[{"PlotStyle", "\[Rule]", 
        RowBox[{"{", "Blue", "}"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]",
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"plotbust5", "=", 
     RowBox[{"ListPlot", "[", 
      RowBox[{
       RowBox[{"cdplotpts", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "3"}], "}"}]}], "]"}], "]"}], ",", 
       RowBox[{"PlotMarkers", "\[Rule]", "\"\<X\>\""}], ",", 
       RowBox[{"PlotStyle", "\[Rule]", 
        RowBox[{"{", "Green", "}"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"plotfissions5", "=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"numbinplots", ">", "0"}], ",", 
       RowBox[{"ListPlot", "[", 
        RowBox[{
         RowBox[{"binforplots", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "3"}], "}"}]}], "]"}], "]"}], ",", 
         RowBox[{"PlotMarkers", "\[Rule]", "\"\<\[FivePointedStar]\>\""}], 
         ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", "Orange", "}"}]}]}], "]"}], ",", "plotlast5"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"plotpulv5", "=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"numpulv", ">", "0"}], ",", 
       RowBox[{"ListPlot", "[", 
        RowBox[{
         RowBox[{"pulvplotpts", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "3"}], "}"}]}], "]"}], "]"}], ",", 
         RowBox[{"PlotMarkers", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<\[SadSmiley]\>\"", ",", "Medium"}], "}"}]}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", "Red", "}"}]}]}], "]"}], ",", "plotlast5"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"linespulv5", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"pulvplotpts", "[", 
           RowBox[{"[", 
            RowBox[{"i", ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "3"}], "}"}]}], "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"pulvplotpts", "[", 
             RowBox[{"[", 
              RowBox[{"i", ",", "1"}], "]"}], "]"}], ",", "0"}], "}"}]}], 
         "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", 
          RowBox[{
           RowBox[{"Dimensions", "[", "pulvplotpts", "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"vertical", " ", "lines", " ", "for", " ", "pulverized"}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"lineplotpulv5", "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"numpulvplots", ">", "0"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Show", "[", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"ListPlot", "[", 
            RowBox[{
             RowBox[{"linespulv5", "[", 
              RowBox[{"[", "i", "]"}], "]"}], ",", 
             RowBox[{"Joined", "\[Rule]", "True"}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"Black", ",", "Thin"}], "}"}]}], ",", 
             RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", 
             RowBox[{"Length", "[", "linespulv5", "]"}]}], "}"}]}], "]"}], 
         "]"}], ",", "plotlast5"}], "]"}]}], ";"}], "*)"}], 
   RowBox[{"Manipulate", "[", 
    RowBox[{
     RowBox[{"Show", "[", 
      RowBox[{
      "plotsd5", ",", "plotbust5", ",", "plotfissions5", ",", "plotpulv5", 
       ",", 
       RowBox[{"(*", 
        RowBox[{"lineplotpulv5", ","}], "*)"}], "textonplots", ",", 
       "plotlast5", ",", 
       RowBox[{"PlotRange", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"1.1", " ", 
             RowBox[{"endtime", "/", "mm"}]}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"1.2", " ", 
             RowBox[{
              RowBox[{"Max", "[", 
               RowBox[{"histplotpts", "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "All", ",", "2"}], "]"}], "]"}], "]"}], 
              "/", "nn"}]}]}], "}"}]}], "}"}]}], ",", 
       RowBox[{"PlotRangePadding", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"None", ",", 
          RowBox[{"{", 
           RowBox[{"None", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
       RowBox[{"Epilog", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"Red", ",", "Thick", ",", "Dotted", ",", 
          RowBox[{"Line", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"endtime", ",", "0"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"endtime", ",", "1000"}], "}"}]}], "}"}], "]"}]}], 
         "}"}]}], ",", 
       RowBox[{"ImageSize", "\[Rule]", "Full"}], ",", 
       RowBox[{"LabelStyle", "\[Rule]", "24"}], ",", 
       RowBox[{"FrameStyle", "\[Rule]", "Thick"}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Grid", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Control", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"nn", ",", "1", ",", "\"\<Diameter range\>\""}], "}"}], 
             ",", "1", ",", "10"}], "}"}], "]"}], ",", 
          RowBox[{"Control", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"mm", ",", "1", ",", "\"\<Time range\>\""}], "}"}], ",",
              "1", ",", "10"}], "}"}], "]"}]}], "}"}], "}"}], ",", 
       RowBox[{"Spacings", "\[Rule]", "5"}]}], "]"}]}], "]"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     StyleBox["CellPrint", "Input"], 
     StyleBox["[", "Input"], 
     RowBox[{
      StyleBox["Cell", "Input"], 
      StyleBox["[", "Input"], 
      RowBox[{
       RowBox[{"ToString", "[", 
        RowBox[{"StringForm", "[", 
         RowBox[{
         "\"\<Figure 5.  The Diameter Histories of a random `` histories of \
the total of `` sample asteroids,\\r Green 'X' is a cd event, red '\
\[SadSmiley]' is a pulverization, blue 'o' is the last point.  If they are \
'reborn' (an input setting), then after the pulverization they are set back \
to their original diameter.  Orange '\[FivePointedStar]' has exceeded the \
gravity limit, and is a candidate for a binary.\>\"", ",", "nhistplots", ",", 
          "nasteroids"}], "]"}], "]"}], ",", "\"\<Text\>\"", ",", 
       RowBox[{"Background", "\[Rule]", 
        RowBox[{"GrayLevel", "[", ".9", "]"}]}]}], "]"}], "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
    "Print", "[", 
     "\"\<====================================================================\
==============================\>\"", "]"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"xdone", "=", "6"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"plotsm", "=", 
     RowBox[{"Show", "[", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"ListPlot", "[", 
         RowBox[{
          RowBox[{"Transpose", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"histplotpts", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"histplotpts", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"All", ",", "2"}], "]"}], "]"}], "/", 
                RowBox[{
                 RowBox[{"histplotpts", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"1", ",", "2"}], "]"}], "]"}]}], ")"}], "^", 
              "3"}]}], "}"}], "]"}], ",", 
          RowBox[{"PlotStyle", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"Black", ",", 
             RowBox[{"Thickness", "[", "Small", "]"}]}], "}"}]}], ",", 
          RowBox[{"InterpolationOrder", "\[Rule]", "0"}], ",", 
          RowBox[{"Joined", "\[Rule]", "True"}], ",", 
          RowBox[{"LabelStyle", "\[Rule]", "24"}], ",", " ", 
          RowBox[{"FrameLabel", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"\"\<Time, yr\>\"", ",", "\"\<Massratio M/M0\>\""}], 
            "}"}]}], ",", "  ", "\[IndentingNewLine]", 
          RowBox[{"PlotRange", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0", ",", 
               RowBox[{"1.1", " ", "endtime"}]}], "}"}], ",", "All"}], 
            "}"}]}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "nhistplots"}], "}"}]}], "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"plotpts", "=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"Last", "[", 
           RowBox[{"histplotpts", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"Last", "[", 
              RowBox[{"histplotpts", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "]"}], "[", 
             RowBox[{"[", "2", "]"}], "]"}], "/", 
            RowBox[{
             RowBox[{"histplotpts", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "2"}], "]"}], "]"}]}], ")"}], "^", "3"}]}], 
        " ", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "nhistplots"}], "}"}]}], "]"}]}], ";", 
    RowBox[{"plotlast", "=", 
     RowBox[{"ListPlot", "[", 
      RowBox[{"plotpts", ",", 
       RowBox[{"PlotMarkers", "\[Rule]", "\"\<O\>\""}], ",", 
       RowBox[{"PlotStyle", "\[Rule]", 
        RowBox[{"{", "Blue", "}"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]",
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"plotpulv", "=", 
     RowBox[{"ListPlot", "[", 
      RowBox[{
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"pulvplotpts", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"pulvplotpts", "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", "3"}], "]"}], "]"}], "/", 
             RowBox[{"pulvplotpts", "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", "4"}], "]"}], "]"}]}], ")"}], "^", "3"}]}],
          "}"}], "]"}], ",", 
       RowBox[{"PlotMarkers", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<\[SadSmiley]\>\"", ",", "Medium"}], "}"}]}], ",", 
       RowBox[{"PlotStyle", "\[Rule]", 
        RowBox[{"{", "Red", "}"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"plotfissions", "=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"numbinplots", ">", "0"}], ",", 
       RowBox[{"ListPlot", "[", 
        RowBox[{
         RowBox[{"Transpose", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"binforplots", "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"binforplots", "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "3"}], "]"}], "]"}], "/", 
               RowBox[{"binforplots", "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "4"}], "]"}], "]"}]}], ")"}], "^", 
             "3"}]}], "}"}], "]"}], ",", 
         RowBox[{"PlotMarkers", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<\[FivePointedStar]\>\"", ",", "Medium"}], "}"}]}], 
         ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", "Orange", "}"}]}]}], "]"}], ",", "plotlast"}], "]"}]}],
     ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"linespulv", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"pulvplotpts", "[", 
             RowBox[{"[", 
              RowBox[{"i", ",", "1"}], "]"}], "]"}], ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"pulvplotpts", "[", 
                RowBox[{"[", 
                 RowBox[{"i", ",", "3"}], "]"}], "]"}], "/", 
               RowBox[{"pulvplotpts", "[", 
                RowBox[{"[", 
                 RowBox[{"i", ",", "4"}], "]"}], "]"}]}], ")"}], "^", "3"}]}],
            "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"pulvplotpts", "[", 
             RowBox[{"[", 
              RowBox[{"i", ",", "1"}], "]"}], "]"}], ",", "0"}], "}"}]}], 
         "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", 
          RowBox[{"Length", "[", "pulvplotpts", "]"}]}], "}"}]}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"lineplotpulv", "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"numpulvplots", ">", "0"}], ",", 
        RowBox[{"Show", "[", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"ListPlot", "[", 
            RowBox[{
             RowBox[{"linespulv", "[", 
              RowBox[{"[", "i", "]"}], "]"}], ",", 
             RowBox[{"Joined", "\[Rule]", "True"}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"Black", ",", "Thin"}], "}"}]}], ",", 
             RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", 
             RowBox[{"Length", "[", "linespulv", "]"}]}], "}"}]}], "]"}], 
         "]"}], ",", "plotlast"}], "]"}]}], ";"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"lineaxis", "=", 
     RowBox[{"Plot", "[", 
      RowBox[{"1", ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "0", ",", "tmax"}], "}"}], ",", 
       RowBox[{"PlotStyle", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"Black", ",", "Dashed", ",", "Thick"}], "}"}]}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"plotcd", "=", 
     RowBox[{"ListPlot", "[", 
      RowBox[{
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"cdplotpts", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"cdplotpts", "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", "3"}], "]"}], "]"}], "/", 
             RowBox[{"cdplotpts", "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", "4"}], "]"}], "]"}]}], ")"}], "^", "3"}]}],
          "}"}], "]"}], ",", "\n", "\t\t", 
       RowBox[{"PlotMarkers", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<X\>\"", ",", "Medium"}], "}"}]}], ",", 
       RowBox[{"PlotStyle", "\[Rule]", 
        RowBox[{"{", "Green", "}"}]}]}], "]"}]}], ";"}], "\n", 
   RowBox[{"Show", "[", 
    RowBox[{
    "plotsm", ",", "plotcd", ",", "plotpulv", ",", "plotfissions", ",", 
     "plotlast", ",", 
     RowBox[{"(*", 
      RowBox[{"lineplotpulv", ","}], "*)"}], "lineaxis", ",", "textonplots", 
     ",", 
     RowBox[{"PlotRange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", 
          RowBox[{"1.1", " ", "endtime"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "1.1"}], "}"}]}], "}"}]}], ",", 
     RowBox[{"PlotRangePadding", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"None", ",", 
        RowBox[{"{", 
         RowBox[{"None", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
     RowBox[{"Epilog", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"Red", ",", "Thick", ",", "Dashed", ",", 
          RowBox[{"Line", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0", ",", ".5"}], "}"}], ",", "\n", 
             RowBox[{"{", 
              RowBox[{"endtime", ",", ".5"}], "}"}]}], "}"}], "]"}]}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"Red", ",", "Thick", ",", "Dotted", ",", 
          RowBox[{"Line", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", " ", 
              RowBox[{"endtime", ",", "0"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"endtime", ",", "1"}], "}"}]}], "}"}], "]"}]}], "}"}]}],
        "}"}]}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "Full"}], ",", 
     RowBox[{"LabelStyle", "\[Rule]", "24"}], ",", 
     RowBox[{"FrameStyle", "\[Rule]", "Thick"}]}], "]"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"CellPrint", "[", 
     RowBox[{"Cell", "[", 
      RowBox[{
       RowBox[{"ToString", "[", 
        RowBox[{"StringForm", "[", 
         RowBox[{
         "\"\<Figure 6.  The Mass ratio Histories of a random `` histories of \
the total of `` sample asteroids,\\r Green 'X' is a cd event, red '\
\[SadSmiley]' is a pulverization, blue 'o' is the last point.  If they are \
'reborn' (an input setting), then after the pulverization they are redefined \
at their original diameter.  Orange '\[FivePointedStar]' spun over the \
gravity limit and is a binary candidate.\\r The red line is the 50% value \
which is commonly used to define the lifetime.\>\"", ",", "nhistplots", ",", 
          "nasteroids"}], "]"}], "]"}], ",", "\"\<Text\>\"", ",", 
       RowBox[{"Background", "\[Rule]", 
        RowBox[{"GrayLevel", "[", ".9", "]"}]}]}], "]"}], "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
    "Print", "[", 
     "\"\<====================================================================\
==============================\>\"", "]"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"xdone", "=", "7"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"plotzero", "=", 
     RowBox[{"ListPlot", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"endtime", ",", "0"}], "}"}]}], "}"}], ",", 
       RowBox[{"PlotStyle", "->", 
        RowBox[{"{", 
         RowBox[{"Black", ",", "Thick"}], "}"}]}], ",", 
       RowBox[{"Joined", "\[Rule]", "True"}], ",", 
       RowBox[{"Frame", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
       RowBox[{"FrameLabel", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<Time, years\>\"", ",", "\"\<spin, cycles/day\>\""}], 
         "}"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"DynamicModule", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "n0", ",", "n1", ",", "m1", ",", "m2", ",", "unitsfac", ",", 
       "Tumblesymbols", ",", "CDsymbols", ",", "Fissionsymbols", ",", 
       "Pulvsymbols", ",", "plotpulv", ",", "plotfissions", ",", "plotcd", 
       ",", "plotsomeg", ",", "tumast", ",", "tummarkers", ",", "lastpts", 
       ",", "plotlast", ",", "tangle"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"lastpts", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Last", "[", 
           RowBox[{"histplotpts", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "]"}], "[", 
          RowBox[{"[", 
           RowBox[{"{", 
            RowBox[{"1", ",", "3"}], "}"}], "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "nhistplots"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"tumast", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", "nhistplots"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"unitsfac", "=", 
       RowBox[{"1.38", " ", 
        RowBox[{"10", "^", "4"}]}]}], ";", 
      RowBox[{"(*", " ", 
       RowBox[{"not", " ", "changing", " ", "this", " ", "now"}], " ", "*)"}],
       "\[IndentingNewLine]", 
      RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"m2", "<", "m1"}], ",", 
           RowBox[{"m2", "=", "m1"}]}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "get", " ", "tumble", " ", "points", " ", "for", " ", "all", " ", 
           "history", " ", "plots"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"Do", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"test", "=", 
             RowBox[{
              RowBox[{"Position", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"histplotpts", "[", 
                   RowBox[{"[", "i", "]"}], "]"}], "[", 
                  RowBox[{"[", 
                   RowBox[{"All", ",", "4"}], "]"}], "]"}], "/", "Degree"}], 
                ",", 
                RowBox[{"_", "?", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", ">", "tangle"}], "||", 
                    RowBox[{"#", "<", 
                    RowBox[{"-", "tangle"}]}]}], ")"}], " ", "&"}], ")"}]}]}],
                "]"}], "//", "Flatten"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"tumast", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "=", 
             RowBox[{
              RowBox[{
               RowBox[{"histplotpts", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "[", 
               RowBox[{"[", "test", "]"}], "]"}], "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "3"}], "}"}]}], "]"}], "]"}]}]}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "nhistplots"}], "}"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"tummarkers", "=", 
          RowBox[{"If", "[", 
           RowBox[{"Tumblesymbols", ",", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"ListPlot", "[", 
               RowBox[{
                RowBox[{"Transpose", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"tumast", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", ",", "All", ",", "1"}], "]"}], "]"}], ",", 
                   RowBox[{"unitsfac", " ", 
                    RowBox[{"tumast", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", ",", "All", ",", "2"}], "]"}], "]"}]}]}], 
                  "}"}], "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"PlotStyle", "\[Rule]", "Purple"}], ",", 
                RowBox[{"PlotMarkers", "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{"\"\<\[RightPointer]\>\"", ",", "Large"}], 
                  "}"}]}]}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", "m1", ",", "m2"}], "}"}]}], "]"}], ",", 
            "plotzero"}], "]"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"plotpulv", "=", 
          RowBox[{"If", "[", 
           RowBox[{"Pulvsymbols", ",", 
            RowBox[{"ListPlot", "[", 
             RowBox[{
              RowBox[{"Transpose", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"pulvplotpts", "[", 
                  RowBox[{"[", 
                   RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
                 RowBox[{"unitsfac", " ", 
                  RowBox[{"pulvplotpts", "[", 
                   RowBox[{"[", 
                    RowBox[{"All", ",", "2"}], "]"}], "]"}]}]}], "}"}], "]"}],
               ",", 
              RowBox[{"PlotMarkers", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{"\"\<\[SadSmiley]\>\"", ",", "Medium"}], "}"}]}], ",", 
              RowBox[{"PlotStyle", "\[Rule]", 
               RowBox[{"{", "\[IndentingNewLine]", "Red", "}"}]}]}], "]"}], 
            ",", "plotzero"}], "]"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"plotfissions", "=", 
          RowBox[{"If", "[", 
           RowBox[{"Fissionsymbols", ",", 
            RowBox[{"Show", "[", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"ListPlot", "[", 
                RowBox[{
                 RowBox[{"Transpose", "[", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"binforplots", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
                    RowBox[{"unitsfac", " ", 
                    RowBox[{"binforplots", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "2"}], "]"}], "]"}]}]}], "}"}], "]"}],
                  ",", 
                 RowBox[{"PlotMarkers", "\[Rule]", 
                  RowBox[{"{", 
                   RowBox[{"\"\<\[FivePointedStar]\>\"", ",", "Medium"}], 
                   "}"}]}], ",", 
                 RowBox[{"PlotStyle", "\[Rule]", 
                  RowBox[{"{", "Orange", "}"}]}]}], "\[IndentingNewLine]", 
                "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"i", ",", "m1", ",", "m2"}], "}"}]}], "]"}], "]"}], 
            ",", "plotzero"}], "]"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"plotlast", "=", 
          RowBox[{"ListPlot", "[", 
           RowBox[{
            RowBox[{"Transpose", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"lastpts", "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
               RowBox[{"unitsfac", " ", 
                RowBox[{"lastpts", "[", 
                 RowBox[{"[", 
                  RowBox[{"All", ",", "2"}], "]"}], "]"}]}]}], "}"}], "]"}], 
            ",", 
            RowBox[{"PlotMarkers", "\[Rule]", "\"\<O\>\""}], ",", 
            RowBox[{"PlotStyle", "\[Rule]", 
             RowBox[{"{", "Blue", "}"}]}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"plotcd", "=", 
          RowBox[{"If", "[", 
           RowBox[{"CDsymbols", ",", 
            RowBox[{"ListPlot", "[", 
             RowBox[{
              RowBox[{"Transpose", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"cdplotpts", "[", 
                  RowBox[{"[", 
                   RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
                 RowBox[{"unitsfac", " ", 
                  RowBox[{"cdplotpts", "[", 
                   RowBox[{"[", 
                    RowBox[{"All", ",", "2"}], "]"}], "]"}]}]}], "}"}], "]"}],
               ",", 
              RowBox[{"PlotMarkers", "\[Rule]", 
               RowBox[{"{", "\"\<X\>\"", "}"}]}], ",", 
              RowBox[{"PlotStyle", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{"Green", ",", "Large"}], "}"}]}]}], "]"}], ",", 
            "plotzero"}], "]"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"plotsomeg", "=", 
          RowBox[{"Show", "[", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"ListPlot", "[", 
              RowBox[{
               RowBox[{"Transpose", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"histplotpts", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                   RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
                  RowBox[{"unitsfac", " ", 
                   RowBox[{
                    RowBox[{"histplotpts", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "3"}], "]"}], "]"}]}]}], "}"}], "]"}],
                ",", 
               RowBox[{"PlotStyle", "\[Rule]", 
                RowBox[{"{", 
                 RowBox[{"Black", ",", "Thin"}], "}"}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"InterpolationOrder", "\[Rule]", "0"}], ",", 
               RowBox[{"Joined", "\[Rule]", "True"}], ",", 
               RowBox[{"PlotRange", "\[Rule]", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"0", ",", 
                    RowBox[{"1.2", " ", "endtime"}]}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"-", "1.2"}], " ", "unitsfac", " ", 
                    "maxhistspin"}], ",", 
                    RowBox[{"1.2", " ", "unitsfac", " ", "maxhistspin"}]}], 
                   "}"}]}], "}"}]}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", "m1", ",", "m2"}], "}"}]}], "]"}], "]"}]}], 
         ";", 
         RowBox[{"gravlim1", "=", 
          RowBox[{"ListPlot", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"0", ",", 
                RowBox[{"unitsfac", " ", "gravlimit"}]}], "}"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"endtime", ",", 
                RowBox[{"unitsfac", " ", "gravlimit"}]}], "}"}]}], "}"}], ",", 
            RowBox[{"Joined", "\[Rule]", "True"}], ",", 
            RowBox[{"PlotStyle", "\[Rule]", "Dashed"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"gravlim2", "=", 
          RowBox[{"ListPlot", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"0", ",", 
                RowBox[{
                 RowBox[{"-", "unitsfac"}], " ", "gravlimit"}]}], "}"}], ",", 
              " ", 
              RowBox[{"{", 
               RowBox[{"endtime", ",", 
                RowBox[{
                 RowBox[{"-", "unitsfac"}], " ", "gravlimit"}]}], "}"}]}], 
             "}"}], ",", 
            RowBox[{"Joined", "\[Rule]", "True"}], ",", 
            RowBox[{"PlotStyle", "\[Rule]", "Dashed"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"Show", "[", 
          RowBox[{
          "plotzero", ",", "plotsomeg", ",", "plotfissions", ",", "plotpulv", 
           ",", "plotlast", ",", "tummarkers", ",", "plotcd", ",", "gravlim1",
            ",", "gravlim2", ",", "textonplots", ",", 
           RowBox[{"PlotRange", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"0", ",", 
                RowBox[{"1.05", " ", "endtime", " ", 
                 RowBox[{"n1", "/", "100"}]}]}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"-", "1.2"}], " ", "unitsfac", " ", "maxhistspin", 
                 " ", 
                 RowBox[{"n0", "/", "100"}]}], ",", 
                RowBox[{"1.2", " ", "unitsfac", " ", "maxhistspin", " ", 
                 RowBox[{"n0", "/", "100"}]}]}], "}"}]}], "}"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"PlotRangePadding", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"None", ",", "Automatic"}], "}"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Epilog", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"Red", ",", "Thick", ",", "Dashed", ",", 
              RowBox[{"Line", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"endtime", ",", 
                   RowBox[{"-", "unitsfac"}]}], " ", "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"endtime", ",", 
                   RowBox[{"unitsfac", " ", "maxhistspin"}]}], "}"}]}], "}"}],
                "]"}]}], "}"}]}], ",", 
           RowBox[{"ImageSize", "\[Rule]", "Full"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", "24"}], ",", 
           RowBox[{"FrameStyle", "\[Rule]", "Thick"}]}], "]"}]}], ",", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"n0", ",", "100", ",", "\"\<Spin % Plot Range\>\""}], 
           "}"}], ",", "10", ",", "100", ",", 
          RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"n1", ",", "100", ",", "\"\<Time Interval % Range\>\""}], 
           "}"}], ",", "10", ",", "100", ",", 
          RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "tangle", ",", "tumbleangle\:02da", ",", 
            "\"\<Observable Tumble Angle, Degrees\>\""}], "}"}], ",", "0", 
          ",", "90", ",", "5", ",", 
          RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"m1", ",", "1", ",", "\"\<First History number\>\""}], 
           "}"}], ",", "1", ",", "nhistplots", ",", "1", ",", 
          RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
        
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "m2", ",", "nhistplots", ",", "\"\<Last History number\>\""}], 
           "}"}], ",", "1", ",", "nhistplots", ",", "1", ",", 
          RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Row", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Spacer", "[", "33", "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"Control", "[", 
            RowBox[{"{", 
             RowBox[{"Tumblesymbols", ",", 
              RowBox[{"{", 
               RowBox[{"True", ",", "False"}], "}"}]}], "}"}], "]"}], ",", 
           RowBox[{"Spacer", "[", "30", "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"Control", "[", 
            RowBox[{"{", 
             RowBox[{"CDsymbols", ",", 
              RowBox[{"{", 
               RowBox[{"True", ",", "False"}], "}"}]}], "}"}], "]"}], ",", 
           RowBox[{"Spacer", "[", "30", "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"Control", "[", 
            RowBox[{"{", 
             RowBox[{"Fissionsymbols", ",", 
              RowBox[{"{", 
               RowBox[{"True", ",", "False"}], "}"}]}], "}"}], "]"}], ",", 
           RowBox[{"Spacer", "[", "30", "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"Control", "[", 
            RowBox[{"{", 
             RowBox[{"Pulvsymbols", ",", 
              RowBox[{"{", 
               RowBox[{"True", ",", "False"}], "}"}]}], "}"}], "]"}]}], "}"}],
          "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"ControlPlacement", "\[Rule]", "Top"}]}], "]"}]}]}], "]"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"CellPrint", "[", 
     RowBox[{"Cell", "[", 
      RowBox[{
       RowBox[{"ToString", "[", 
        RowBox[{"StringForm", "[", 
         RowBox[{
         "\"\<Figure 7. The Spin Histories of `` histories of a random sample \
of the total of `` sample asteroids.\\r A green 'X' is a cd event, 'o' is the \
last point.  A red '\[SadSmiley]' is a pulverization, after which the spin is \
reduced to zero. An orange '\[FivePointedStar]' exceeded the gravity limit \
(red dashed lines) and is a candidate for a binary. The purple \
\[RightPointer] are times when the tumbling in excess of the observable value \
set by the control above, the small ones usually quickly return to not \
tumbling. \\rThe controls allow the symbols to be turned on or off and the \
the sliders let you zoom in.. \>\"", ",", "nhistplots", ",", "nasteroids"}], 
         "]"}], "]"}], ",", "\"\<Text\>\"", ",", 
       RowBox[{"Background", "\[Rule]", 
        RowBox[{"GrayLevel", "[", ".9", "]"}]}]}], "]"}], "]"}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
    "Print", "[", 
     "\"\<====================================================================\
==============================\>\"", "]"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"xdone", "=", "8"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"nhistplots2", "=", 
     RowBox[{"Min", "[", 
      RowBox[{"5", ",", "nhistplots"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"tumblepts", "=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"histplotpts", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"histplotpts", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "4"}], "]"}], "]"}], "/", "Degree"}]}], 
         "}"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "nhistplots2"}], "}"}]}], "]"}]}], ";", 
    RowBox[{"lastpts", "=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"Last", "[", 
        RowBox[{"tumblepts", "[", 
         RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "nhistplots2"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"lastplots", "=", 
      RowBox[{"ListPlot", "[", 
       RowBox[{"lastpts", ",", 
        RowBox[{"PlotStyle", "\[Rule]", "Black"}], ",", 
        RowBox[{"PlotMarkers", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"\"\<\[EmptySmallCircle]\>\"", ",", "20"}], "}"}]}]}], 
       "]"}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"limplots", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"ListPlot", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"endtime", ",", "0"}], "}"}]}], "}"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", "Black", "}"}]}], ",", 
         RowBox[{"Joined", "\[Rule]", "True"}]}], "]"}], ",", 
       RowBox[{"ListPlot", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "90"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"endtime", ",", "90"}], "}"}]}], "}"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"Dotted", ",", "Black"}], "}"}]}], ",", 
         RowBox[{"Joined", "\[Rule]", "True"}]}], "]"}], ",", 
       RowBox[{"ListPlot", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "90"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"1.05", " ", "endtime"}], ",", 
             RowBox[{"-", "90"}]}], "}"}]}], "}"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"Dotted", ",", "Black"}], "}"}]}], ",", 
         RowBox[{"Joined", "\[Rule]", "True"}]}], "]"}]}], " ", "}"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"DynamicModule", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n0", ",", "n1", ",", "m1", ",", "m2", ",", "tangle"}], "}"}], 
     ",", 
     RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"m2", "<", "m1"}], ",", 
          RowBox[{"m2", "=", "m1"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"observelimit", "=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"ListPlot", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"0", ",", "tangle"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"endtime", ",", "tangle"}], "}"}]}], "}"}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"Dashed", ",", "Black"}], "}"}]}], ",", 
             RowBox[{"Joined", "\[Rule]", "True"}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"Black", ",", "Dashed"}], "}"}]}]}], "]"}], ",", 
           RowBox[{"ListPlot", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"0", ",", 
                 RowBox[{"-", "tangle"}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"endtime", ",", 
                 RowBox[{"-", "tangle"}]}], "}"}]}], "}"}], ",", 
             RowBox[{"Joined", "\[Rule]", "True"}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"Black", ",", "Dashed"}], "}"}]}]}], "]"}]}], "}"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"Show", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"ListPlot", "[", 
             RowBox[{
              RowBox[{"tumblepts", "[", 
               RowBox[{"[", "i", "]"}], "]"}], ",", 
              RowBox[{"Frame", "\[Rule]", "True"}], ",", 
              RowBox[{"FrameLabel", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{
                "\"\<time\>\"", ",", "\"\<wobble angle, degrees \>\""}], 
                "}"}]}], ",", 
              RowBox[{"LabelStyle", "\[Rule]", "24"}], ",", 
              RowBox[{"Joined", "\[Rule]", "True"}], ",", 
              RowBox[{"(*", 
               RowBox[{
                RowBox[{"PlotMarkers", "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{"\[EmptyCircle]", ",", "Orange", ",", "Small"}], 
                  "}"}]}], " ", ","}], "*)"}], " ", 
              RowBox[{"ImageSize", "\[Rule]", "Full"}], ",", 
              RowBox[{"PlotStyle", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{"colors", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "}"}]}], ",", 
              RowBox[{"PlotRange", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"n2", " ", "endtime"}], ",", 
                   RowBox[{"1.05", " ", "endtime", " ", 
                    RowBox[{"n1", "/", "100"}]}]}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"-", "5"}], ",", 
                   RowBox[{"100", " ", 
                    RowBox[{"n0", "/", "100"}]}]}], "}"}]}], "}"}]}]}], "]"}],
             ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "m1", ",", "m2"}], "}"}]}], "]"}], ",", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"Graphics", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"PointSize", "[", "Large", "]"}], ",", "Red", ",", 
               RowBox[{"Point", "[", 
                RowBox[{"lastpts", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "]"}]}], "}"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "m1", ",", "m2"}], "}"}]}], "]"}], ",", 
          "\[IndentingNewLine]", "observelimit", ",", "limplots", ",", 
          "textonplots", ",", 
          RowBox[{"Epilog", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"Red", ",", "Thick", ",", "Dashed", ",", 
             RowBox[{"Line", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"endtime", ",", 
                  RowBox[{"-", "90"}]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"endtime", ",", "90"}], "}"}]}], "}"}], "]"}]}], 
            "}"}]}]}], "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"n0", ",", "100", ",", "\"\<Wobble Magnitude Range\>\""}], 
          "}"}], ",", "10", ",", "100", ",", 
         RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"n1", ",", "100", ",", "\"\<Time Interval; Range\>\""}], 
          "}"}], ",", "10", ",", "100", ",", 
         RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"n2", ",", "0", ",", "\"\<Time Origin\>\""}], "}"}], ",", 
         "0", ",", "1", ",", 
         RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"m1", ",", "1", ",", "\"\<First History number\>\""}], 
          "}"}], ",", "1", ",", "nhistplots2", ",", "1", ",", 
         RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "m2", ",", "nhistplots2", ",", "\"\<Last History number\>\""}], 
          "}"}], ",", "1", ",", "nhistplots2", ",", "1", ",", 
         RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "tangle", ",", "tumbleangle\:02da", ",", 
           "\"\<Observable Tumble Angle for this plot, Degrees\>\""}], "}"}], 
         ",", "0", ",", "90", ",", "5", ",", 
         RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}]}], 
      "]"}]}], "]"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"CellPrint", "[", 
     RowBox[{"Cell", "[", 
      RowBox[{
       RowBox[{"ToString", "[", 
        RowBox[{"StringForm", "[", 
         RowBox[{
         "\"\<Figure 8. The magnitude of the wobble angle histories of a  `` \
random histories of the total of `` sample asteroids.   Since it is too \
crowded to plot all `` of the histories, I plot only `` as examples.  The \
black dashed lines are for the angle set by the slider above as the \
indication of tumbling.\>\"", ",", "nhistplots2", ",", "nasteroids", ",", 
          "nhistplots", ",", "nhistplots2"}], "]"}], "]"}], ",", 
       "\"\<Text\>\"", ",", 
       RowBox[{"Background", "\[Rule]", 
        RowBox[{"GrayLevel", "[", ".9", "]"}]}]}], "]"}], "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
    "Print", "[", 
     "\"\<====================================================================\
==============================\>\"", "]"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"xdone", "=", "9"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", "fulltermd", "]"}], "\[Equal]", "0"}], ",", 
     RowBox[{"Style", "[", 
      RowBox[{"\"\<No asteroids survived.\>\"", ",", "18", ",", "Red"}], 
      "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "here", " ", "i", " ", "get", " ", "wobbles", " ", "to", " ", 
       "whatever", " ", "degrees", " ", "the", " ", "choice", " ", "in", " ", 
       "the", " ", "slider", " ", "is"}], " ", "*)"}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"DynamicModule", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"test", ",", "tangle"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"test", "=", 
           RowBox[{
            RowBox[{"Position", "[", 
             RowBox[{
              RowBox[{"fulltermwobble", "/", " ", "Degree"}], ",", 
              RowBox[{"_", "?", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"#", ">", "tangle"}], "||", 
                   RowBox[{"#", "<", 
                    RowBox[{"-", "tangle"}]}]}], ")"}], " ", "&"}], ")"}]}]}],
              "]"}], "//", "Flatten"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"nwobble", "=", 
           RowBox[{"Length", "[", "test", "]"}]}], ";", "\[IndentingNewLine]",
           "\[IndentingNewLine]", 
          RowBox[{"lineplot", "=", 
           RowBox[{"ListLogLinearPlot", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{".01", ",", "tangle"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"1.5", " ", 
                  RowBox[{"10", "^", "4"}], "  ", "maxspin1"}], ",", 
                 "tangle"}], "}"}]}], "}"}], ",", 
             RowBox[{"Joined", "\[Rule]", "True"}], ",", 
             RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"lineplot2", "=", 
           RowBox[{"ListLogLinearPlot", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"0.01", ",", "1."}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"1.5", " ", 
                  RowBox[{"10", "^", "4"}], "  ", "maxspin1"}], ",", "1."}], 
                "}"}]}], "}"}], ",", 
             RowBox[{"Joined", "\[Rule]", "True"}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"Green", ",", " ", "Dashed"}], "}"}]}], ",", 
             RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"Show", "[", 
           RowBox[{
            RowBox[{"ListLogLinearPlot", "[", 
             RowBox[{
              RowBox[{"Transpose", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"fulltermnet", " ", "1.38", " ", 
                  RowBox[{"10", "^", "4"}]}], ",", 
                 RowBox[{"fulltermwobble", "/", "Degree"}]}], "}"}], "]"}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{"PlotStyle", "\[Rule]", "Purple"}], ",", 
              RowBox[{"PlotMarkers", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{"\[FilledCircle]", ",", "Medium"}], "}"}]}], ",", 
              RowBox[{"Frame", "\[Rule]", "True"}], ",", 
              RowBox[{"FrameLabel", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{
                "\"\<Spin magnitude, Cycles/day\>\"", ",", 
                 "\"\<Wobble angle, Degrees\>\""}], "}"}]}], ",", 
              RowBox[{"PlotRange", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"0.01", ",", 
                   RowBox[{"1.5", " ", 
                    RowBox[{"10", "^", "4"}], "  ", "maxspin1"}]}], "}"}], 
                 ",", 
                 RowBox[{"{", 
                  RowBox[{"0.8", ",", 
                   RowBox[{"1.2", " ", 
                    RowBox[{"Max", "[", 
                    RowBox[{"tangle", ",", 
                    RowBox[{"1.4", " ", 
                    RowBox[{"Max", "[", 
                    RowBox[{"fulltermwobble", "/", "Degree"}], "]"}]}]}], 
                    "]"}]}]}], "}"}]}], "}"}]}]}], "]"}], ",", 
            RowBox[{"Graphics", "[", 
             RowBox[{"Text", "[", 
              RowBox[{
               RowBox[{"Framed", "[", 
                RowBox[{"StringForm", "[", 
                 RowBox[{
                 "\"\<These are the wobble angles for the surviving `` \
asteroids. \\r  `` of then have wobbles above the designated threshhold\\r \
shown by the red line. \>\"", ",", "numleft", ",", "nwobble"}], "]"}], "]"}], 
               ",", 
               RowBox[{"Scaled", "[", 
                RowBox[{"{", 
                 RowBox[{".7", ",", ".9"}], "}"}], "]"}], ",", 
               RowBox[{"Background", "\[Rule]", "White"}], ",", 
               RowBox[{"BaseStyle", "\[Rule]", 
                RowBox[{"{", 
                 RowBox[{"12", ",", 
                  RowBox[{"FontFamily", "\[Rule]", "\"\<Times\>\""}]}], 
                 "}"}]}]}], "]"}], "]"}], ",", "lineplot", ",", "lineplot2", 
            ",", 
            RowBox[{"ImageSize", "\[Rule]", "Full"}]}], "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "tangle", ",", "tumbleangle\:02da", ",", 
             "\"\<Observable Tumble Angle fpor this plot, Degrees\>\""}], 
            "}"}], ",", "1", ",", "45", ",", "1", ",", 
           RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}]}], 
        "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}], "\[IndentingNewLine]",
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"CellPrint", "[", 
     RowBox[{"Cell", "[", 
      RowBox[{
       RowBox[{"ToString", "[", 
        RowBox[{"StringForm", "[", 
         RowBox[{
          RowBox[{
          "\"\<Figure 9. The final wobble angle versus the final spin \
magnitude of the \>\"", "<>", " ", 
           RowBox[{"ToString", "[", " ", "numleft", "]"}], "<>", 
           "\"\< surviving sample asteroids. Histories are not tracked below \
1\:02da.\>\""}], ",", " ", "numleft"}], "]"}], "]"}], ",", "\"\<Text\>\"", 
       ",", 
       RowBox[{"Background", "\[Rule]", 
        RowBox[{"GrayLevel", "[", ".9", "]"}]}]}], "]"}], "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
    "Print", "[", 
     "\"\<====================================================================\
==============================\>\"", "]"}], ";"}], "\[IndentingNewLine]", 
   StyleBox[
    RowBox[{
     RowBox[{"xdone", "=", "10"}], ";"}], "CodeText"], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"CellPrint", "[", 
     RowBox[{"Cell", "[", 
      RowBox[{
      "\"\<III. AND SOME COOL MOVIES SHOWING THE EVOLUTION OF SPINS AND \
MOVING AVERAGES\>\"", ",", "\"\<Section\>\"", ",", 
       RowBox[{"Background", "\[Rule]", 
        RowBox[{"GrayLevel", "[", ".7", "]"}]}]}], "]"}], "]"}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"nframes", ">", "0"}], ",", "\n", 
     RowBox[{
      RowBox[{"limitshere", "=", 
       RowBox[{"spinlimplots", "[", "\"\<Cycles/day\>\"", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"maxtplot", "=", 
       RowBox[{"Max", "[", 
        RowBox[{"histplotpts", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "All", ",", "1"}], "]"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"tvals", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"ii", "-", "1"}], ")"}], 
          RowBox[{"maxtplot", "/", "nframes"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"ii", ",", "1", ",", 
           RowBox[{"nframes", "+", "1"}]}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "now", " ", "the", " ", "pairs", " ", "of", " ", "d", " ", "and", " ", 
        "omeg", " ", "at", " ", "those", " ", "times", " ", "for", " ", 
        "each", " ", "target"}], "*)"}], "\n", 
      RowBox[{"histvals", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"Last", "[", 
            RowBox[{"Select", "[", 
             RowBox[{
              RowBox[{"histplotpts", "[", 
               RowBox[{"[", "ii", "]"}], "]"}], ",", 
              RowBox[{
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "\[LessEqual]", 
                RowBox[{"tvals", "[", 
                 RowBox[{"[", "kk", "]"}], "]"}]}], "&"}]}], "]"}], "]"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{"kk", ",", "nframes"}], "}"}]}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"ii", ",", "nhistplots"}], "}"}]}], "]"}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "nframe", " ", "of", " ", "them", " ", "for", " ", "each", " ", 
        "history", " ", "target"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "parse", " ", "down", " ", "to", " ", "the", " ", "d", " ", "and", " ",
         "omeg", " ", "only"}], " ", "*)"}], "\n", 
      RowBox[{"ptsnow", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Transpose", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"histvals", "[", 
             RowBox[{"[", 
              RowBox[{"ii", ",", "All", ",", "2"}], "]"}], "]"}], ",", 
            RowBox[{"1.38", " ", 
             RowBox[{"10", "^", "4"}], 
             RowBox[{"Abs", "[", 
              RowBox[{"histvals", "[", 
               RowBox[{"[", 
                RowBox[{"ii", ",", "All", ",", "3"}], "]"}], "]"}], "]"}]}]}],
            "}"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"ii", ",", "1", ",", "nhistplots"}], "}"}]}], "]"}]}], ";", 
      " ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"these", " ", "are", " ", "just", " ", "the", " ", "d"}], ",",
         " ", 
        RowBox[{
         RowBox[{"abs", "[", "omeg", "]"}], " ", "at", " ", "all", " ", 
         "time"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "get", " ", "rid", " ", "of", " ", "the", " ", "zero", " ", "times", 
        " ", "for", " ", "those", " ", "that", " ", "did", " ", "not", " ", 
        "last", " ", "the", " ", "max", " ", "time"}], " ", "*)"}], "\n", 
      RowBox[{"ptsnow", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"DeleteCases", "[", 
          RowBox[{
           RowBox[{"ptsnow", "[", 
            RowBox[{"[", "gg", "]"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "a_"}], "}"}]}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"gg", ",", "nhistplots"}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"dsmall", "=", 
       RowBox[{"Min", "[", 
        RowBox[{"ptsnow", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "All", ",", "1"}], "]"}], "]"}], "]"}]}], ";", 
      "\n", 
      RowBox[{"colors", "=", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "Black", ",", "Red", ",", "Blue", ",", "Green", ",", "Purple", ",", 
           "Yellow"}], "}"}], ",", 
         RowBox[{"RandomColor", "[", 
          RowBox[{"nhistplots", "+", "3"}], "]"}]}], "]"}]}], ";", "\n", 
      RowBox[{"npts", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"ptsnow", "[", 
           RowBox[{"[", "kk", "]"}], "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"kk", ",", "nhistplots"}], "}"}]}], "]"}]}], ";", "\n", 
      "\n", 
      RowBox[{"frames10", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Show", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"ListLogLogPlot", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"ptsnow", "[", 
                 RowBox[{"[", "kk", "]"}], "]"}], "[", 
                RowBox[{"[", 
                 RowBox[{"1", ";;", 
                  RowBox[{"Min", "[", 
                   RowBox[{"igo", ",", 
                    RowBox[{"npts", "[", 
                    RowBox[{"[", "kk", "]"}], "]"}]}], " ", "]"}]}], " ", 
                 "]"}], "]"}], ",", 
               RowBox[{"PlotStyle", "\[Rule]", 
                RowBox[{"{", 
                 RowBox[{"Thick", ",", 
                  RowBox[{"colors", "[", 
                   RowBox[{"[", "kk", "]"}], "]"}]}], "}"}]}], ",", 
               RowBox[{"Joined", "\[Rule]", "True"}], ",", 
               RowBox[{"PlotMarkers", "\[Rule]", 
                RowBox[{"{", 
                 RowBox[{"\[FilledSmallSquare]", ",", "Small"}], "}"}]}], ",", 
               RowBox[{"PlotRange", "\[Rule]", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"0.8", "dsmallest"}], ",", 
                    RowBox[{"1.5", " ", "dmax"}]}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"0.01", ",", 
                    RowBox[{"1.5", " ", 
                    RowBox[{"10", "^", "4"}], " ", "maxhistspin"}]}], "}"}]}],
                  "}"}]}], ",", 
               RowBox[{"ImageSize", "\[Rule]", "Full"}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"kk", ",", "1", ",", "nhistplots"}], "}"}]}], "]"}], 
           ",", "limitshere"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"igo", ",", "nframes"}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"ListAnimate", "[", 
       RowBox[{"frames10", ",", 
        RowBox[{"AnimationRepetitions", "\[Rule]", "2"}], ",", 
        RowBox[{"AnimationRunning", "\[Rule]", "False"}], ",", 
        RowBox[{"ImageSize", "\[Rule]", "Full"}], ",", 
        RowBox[{"DisplayAllSteps", "\[Rule]", "True"}]}], "]"}]}]}], "]"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"CellPrint", "[", 
     RowBox[{"Cell", "[", 
      RowBox[{
       RowBox[{"ToString", "[", 
        RowBox[{"StringForm", "[", 
         RowBox[{
         "\"\<Figure 10. A movie of the Spin-Diameter Paths of  `` histories \
of the total of `` sample asteroids.  Each sample is color-coded, and \
line-connected. All are assumed to start with a random small spin. Note that \
the small ones do not reach the strength limit spins, but follow a path \
leftward and upward.\>\"", ",", "nhistplots", ",", "nasteroids"}], "]"}], 
        "]"}], ",", "\"\<Text\>\"", ",", 
       RowBox[{"Background", "\[Rule]", 
        RowBox[{"GrayLevel", "[", ".9", "]"}]}]}], "]"}], "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
    "Print", "[", 
     "\"\<====================================================================\
==============================\>\"", "]"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"xdone", "=", "11"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"nframes", ">", "0"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"plotsspin", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Show", "[", "\n", 
          RowBox[{
           RowBox[{"ListLogLogPlot", "[", 
            RowBox[{
             RowBox[{"Abs", "[", 
              RowBox[{"asterdata", "[", 
               RowBox[{"[", "mm", "]"}], "]"}], "]"}], ",", 
             RowBox[{"PlotRange", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{".5", "dsmallest"}], ",", 
                  RowBox[{"1.5", " ", "dmax"}]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"0.1", ",", "10000"}], "}"}]}], "}"}]}], ",", 
             RowBox[{"FrameLabel", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"\"\<Diameter, km\>\"", ",", "\"\<Spin, rad/s\>\""}], 
               "}"}]}], ",", 
             RowBox[{"LabelStyle", "\[Rule]", "24"}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", "Black"}]}], "]"}], ",", 
           RowBox[{"spinlimplots", "[", "\"\<Cycles/day\>\"", "]"}], ",", 
           "textonplots", ",", 
           RowBox[{"Epilog", "\[Rule]", 
            RowBox[{"Text", "[", 
             RowBox[{
              RowBox[{"Framed", "[", 
               RowBox[{"Style", "[", 
                RowBox[{
                 RowBox[{"\"\<time = \>\"", "<>", 
                  RowBox[{"ToString", "[", 
                   StyleBox[
                    RowBox[{"N", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"mm", "-", "1"}], ")"}], " ", 
                    RowBox[{
                    RowBox[{"tmax", "/", "nframes"}], "/", 
                    RowBox[{"10", "^", "9"}]}]}], "]"}],
                    FontWeight->"Bold"], " ", "]"}], "<>", " ", 
                  "\"\< Byr. \\n \>\"", "<>", "\"\<The median spin is \>\"", "<>", 
                  RowBox[{"ToString", "[", 
                   RowBox[{"NumberForm", "[", " ", 
                    RowBox[{
                    RowBox[{"Median", "[", 
                    RowBox[{
                    RowBox[{"asterdata", "[", 
                    RowBox[{"[", "mm", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}], ",", 
                    "3"}], "]"}], "]"}]}], ",", "20"}], "]"}], "]"}], ",", 
              RowBox[{"Scaled", "[", 
               RowBox[{"{", 
                RowBox[{".25", ",", ".1"}], "}"}], "]"}]}], "]"}]}], ",", 
           RowBox[{"ImageSize", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"700", ",", "450"}], "}"}]}]}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"mm", ",", 
           RowBox[{"Length", "[", "asterdata", "]"}]}], "}"}]}], "]"}]}], ";",
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"ListAnimate", "[", 
       RowBox[{"plotsspin", ",", 
        RowBox[{"AnimationRepetitions", "\[Rule]", "2"}], ",", 
        RowBox[{"AnimationRunning", "\[Rule]", "False"}], ",", 
        RowBox[{"DisplayAllSteps", "\[Rule]", "True"}]}], "]"}]}]}], "]"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"nframes", ">", "0"}], ",", 
     RowBox[{"Grid", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"CellPrint", "[", 
          RowBox[{"Cell", "[", 
           RowBox[{
            RowBox[{"ToString", "[", 
             RowBox[{"StringForm", "[", 
              RowBox[{
              "\"\<Figure 11.  And a movie of the  spin magnitudes at the end \
of each time step of all  `` sample asteroids. The over-spun asteroids have \
the orange \[FivePointedStar], and are candidates for binaries. A few exceed \
the limit, and then migrate around the left gravity spin limit and become a \
fast spinner.\>\"", ",", "nasteroids"}], "]"}], "]"}], ",", "\"\<Text\>\"", 
            ",", 
            RowBox[{"Background", "\[Rule]", 
             RowBox[{"GrayLevel", "[", ".9", "]"}]}]}], "]"}], "]"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"Spacer", "[", 
          RowBox[{"{", 
           RowBox[{"1", ",", "50"}], "}"}], "]"}], "}"}]}], "}"}], "]"}]}], 
    "]"}], "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{"xdone", "=", "12"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"nframes", ">", "0"}], "&&", "enuf"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"ListAnimate", "[", 
      RowBox[{"runboxplots", ",", 
       RowBox[{"AnimationRepetitions", "\[Rule]", "3"}], ",", 
       RowBox[{"AnimationRunning", "\[Rule]", "False"}], ",", 
       RowBox[{"ImageSize", "\[Rule]", "Full"}], ",", 
       RowBox[{"DisplayAllSteps", "\[Rule]", "True"}], ",", 
       RowBox[{"DefaultDuration", "\[Rule]", "2"}]}], "]"}]}], 
    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"nframes", ">", "0"}], "&&", "enuf"}], ",", 
      RowBox[{"CellPrint", "[", 
       RowBox[{"Cell", "[", 
        RowBox[{
         RowBox[{"ToString", "[", 
          RowBox[{"StringForm", "[", 
           RowBox[{
           "\"\<Figure 12.  A movie of the  history of the running box mean \
spins of all  `` sample asteroids. The red curve is from the spin database, \
the green one is the simulation at various times: \\rThe smaller ones are \
mostly NEA's, the larger ones are from the main belt.\>\"", ",", 
            "nasteroids"}], "]"}], "]"}], ",", "\"\<Text\>\"", ",", 
         RowBox[{"Background", "\[Rule]", 
          RowBox[{"GrayLevel", "[", ".9", "]"}]}]}], "]"}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
      "Print", "[", 
       "\"\<Not enough asteroids or diameter range to make mean plots\>\"", 
       "]"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
    "Print", "[", 
     "\"\<====================================================================\
==============================\>\"", "]"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"xdone", "=", "14"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"If", "[", 
    RowBox[{"craters", ",", 
     RowBox[{
      RowBox[{"dcrimdiasbar", "=", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"dcrimdias", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "2"}], "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{"dcrimdias", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "3"}], "]"}], "]"}], "/", 
           RowBox[{"dcrimdias", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "2"}], "]"}], "]"}]}]}], "}"}], "]"}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"spalldiasbar", "=", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"spalldias", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "2"}], "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{"spalldias", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "3"}], "]"}], "]"}], "/", 
           RowBox[{"spalldias", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "2"}], "]"}], "]"}]}]}], "}"}], "]"}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"complexdiasbar", "=", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"complexdias", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "2"}], "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{"complexdias", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "3"}], "]"}], "]"}], "/", 
           RowBox[{"complexdias", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "2"}], "]"}], "]"}]}]}], "}"}], "]"}]}], ";",
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"plot1", "=", 
       RowBox[{"ListLogLogPlot", "[", 
        RowBox[{"dcrimdiasbar", ",", 
         RowBox[{"PlotStyle", "\[Rule]", "Black"}], ",", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{".01", ",", "1000"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{".001", ",", "2"}], "}"}]}], "}"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"plot2", "=", 
       RowBox[{"ListLogLogPlot", "[", 
        RowBox[{"spalldiasbar", ",", 
         RowBox[{"PlotStyle", "\[Rule]", "Green"}], ",", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{".01", ",", "1000"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{".001", ",", "2"}], "}"}]}], "}"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"plot3", "=", 
       RowBox[{"ListLogLogPlot", "[", 
        RowBox[{"complexdiasbar", ",", 
         RowBox[{"PlotStyle", "\[Rule]", "Blue"}], ",", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{".01", ",", "1000"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{".001", ",", "2"}], "}"}]}], "}"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Show", "[", 
       RowBox[{
       "craterlimits", ",", "plot1", ",", "plot2", ",", "plot3", ",", 
        "plot14", 
        RowBox[{"(*", 
         RowBox[{"plotbowllimits", ",", "plotcomplexlimits", ","}], "*)"}], 
        ",", 
        RowBox[{"(*", 
         RowBox[{"plotforbiggies", ","}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"FrameLabel", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
          "\"\<Target diameter, km\>\"", ",", 
           "\"\<Crater diameter/target diameter\>\""}], "}"}]}], ",", 
        RowBox[{"LabelStyle", "\[Rule]", "24"}], ",", 
        RowBox[{"ImageSize", "\[Rule]", "Full"}], ",", 
        RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{"craters", ",", 
      RowBox[{"CellPrint", "[", 
       RowBox[{"Cell", "[", 
        RowBox[{
         RowBox[{"ToString", "[", 
          RowBox[{"StringForm", "[", 
           RowBox[{
           "\"\<Figure 13.  The crater population for the `` asteroid. \\r \
Black=bowl crater, green=Spall, blue=Complex Craters.  For S-Types, the green \
'S' are the spall crater bust limit, Purple 'b' the bowl crater bust limit, \
the brown thick line is the Leliwa et al. bust limit estimate.\\r For \
S=Types, the black lines are a range of the boundary from spall to bowl \
craters, the blue line the transition to complex craters.\\r The pink curves \
are the expected largest crater \\r  at probabilities of `` %, in the time of \
`` Byr.\n   'Deimos' is a tentative Deimos crater, 'Steins' is a Steins \
crater, \\r  'Vesta' indicates 5 different Vesta craters,\\r  'Pallas' is a \
tentative Pallas crater, 'Ceres' is a Ceres crater\>\"", ",", "newname", ",", 
            
            RowBox[{"100", " ", "probfacs"}], ",", 
            RowBox[{"tmax", "/", 
             RowBox[{"10", "^", "9"}]}]}], "]"}], "]"}], ",", "\"\<Text\>\"", 
         ",", 
         RowBox[{"Background", "\[Rule]", 
          RowBox[{"GrayLevel", "[", ".9", "]"}]}]}], "]"}], "]"}]}], "]"}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
    "Print", "[", 
     "\"\<====================================================================\
==============================\>\"", "]"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"xdone", "=", "15"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"If", "[", 
    RowBox[{"craters", ",", "\n", 
     RowBox[{
      RowBox[{"Print", "[", "\"\<here for fig 14\>\"", "]"}], ";", 
      StyleBox["\[IndentingNewLine]", "CodeText"], "\[IndentingNewLine]", 
      RowBox[{"biggest", "=", 
       RowBox[{
        RowBox[{"Last", "[", "craterplotpts", "]"}], "[", 
        RowBox[{"[", 
         RowBox[{"2", ",", "1", ",", "1"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"smallest", "=", 
       RowBox[{
        RowBox[{"Last", "[", 
         RowBox[{
          RowBox[{"Last", "[", "craterplotpts", "]"}], "[", 
          RowBox[{"[", "2", "]"}], "]"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"most", "=", 
       RowBox[{
        RowBox[{"Last", "[", 
         RowBox[{
          RowBox[{"Last", "[", "craterplotpts", "]"}], "[", 
          RowBox[{"[", "2", "]"}], "]"}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "astcraters", "]"}], ">", "0"}], ",", 
        RowBox[{
         RowBox[{"astcraterplot", "=", 
          RowBox[{"ListLogLogPlot", "[", 
           RowBox[{"astcraters", ",", 
            RowBox[{"PlotStyle", "\[Rule]", "Black"}], ",", 
            RowBox[{"PlotMarkers", "\[Rule]", 
             RowBox[{"{", "\[EmptyCircle]", "}"}]}]}], "]"}]}], ";", " ", 
         RowBox[{"(*", " ", 
          RowBox[{"the", " ", "binned", " ", "data"}], " ", "*)"}], " ", 
         RowBox[{"myplots", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"Show", "[", 
             RowBox[{"astcraterplot", ",", 
              RowBox[{"ListLogLogPlot", "[", 
               RowBox[{
                RowBox[{"craterplotpts", "[", 
                 RowBox[{"[", 
                  RowBox[{"i", ",", "2"}], "]"}], "]"}], ",", 
                RowBox[{"PlotMarkers", "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{"Automatic", ",", "Tiny"}], "}"}]}]}], "]"}], ",", 
              "textonplots", ",", 
              RowBox[{"Graphics", "[", 
               RowBox[{"Text", "[", 
                RowBox[{
                 RowBox[{"Framed", "[", 
                  RowBox[{"\"\<Time=\>\"", "<>", 
                   RowBox[{"ToString", "[", 
                    RowBox[{
                    RowBox[{"craterplotpts", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", ",", "1"}], "]"}], "]"}], "/", 
                    RowBox[{"10", "^", "6"}]}], "]"}], "<>", 
                   "\"\< Myr \\rRed dots: The SSAH Simulation results for the \
entire asteroid surface.\nBlack circles: Observed crater count, scaled to the \
entire surface. \\r\nThe Gaspra data is scaled up from the data for a small \
patch. \\rThere is a dominant effect of the impactor population!\>\""}], 
                  "]"}], ",", 
                 RowBox[{"Scaled", "[", 
                  RowBox[{"{", 
                   RowBox[{".3", ",", ".2"}], "}"}], "]"}], ",", 
                 RowBox[{"Background", "\[Rule]", "White"}]}], "]"}], "]"}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{"FrameLabel", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{
                "\"\<Crater diameter, km\>\"", ",", 
                 "\"\<Cumulative Count for entire surface\>\""}], "}"}]}], 
              ",", 
              RowBox[{"LabelStyle", "\[Rule]", "24"}], ",", 
              RowBox[{"ImageSize", "\[Rule]", "Full"}], ",", 
              RowBox[{"PlotRange", "\[Rule]", 
               RowBox[{"Log", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"smallest", "/", "2"}], ",", 
                    RowBox[{"2", "biggest"}]}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"0.1", ",", 
                    RowBox[{"10", " ", "most"}]}], "}"}]}], "}"}], "]"}]}]}], 
             "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", 
              RowBox[{"Length", "[", "craterplotpts", "]"}]}], "}"}]}], 
           "]"}]}]}], ",", " ", 
        RowBox[{"(*", " ", "else", " ", "*)"}], "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"myplots", "=", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"Show", "[", 
            RowBox[{
             RowBox[{"ListLogLogPlot", "[", 
              RowBox[{
               RowBox[{"craterplotpts", "[", 
                RowBox[{"[", 
                 RowBox[{"i", ",", "2"}], "]"}], "]"}], ",", 
               RowBox[{"PlotMarkers", "\[Rule]", 
                RowBox[{"{", 
                 RowBox[{"Automatic", ",", "Tiny"}], "}"}]}], ",", 
               RowBox[{"Joined", "->", "True"}]}], "]"}], ",", "textonplots", 
             ",", 
             RowBox[{"Graphics", "[", 
              RowBox[{"Text", "[", 
               RowBox[{
                RowBox[{"Framed", "[", 
                 RowBox[{"\"\<Time=\>\"", "<>", 
                  RowBox[{"ToString", "[", 
                   RowBox[{
                    RowBox[{"craterplotpts", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", ",", "1"}], "]"}], "]"}], "/", 
                    RowBox[{"10", "^", "6"}]}], "]"}], "<>", 
                  "\"\<Myr \\rRed dots: The SSAH Simulation results for the \
entire asteroid surface\>\""}], "]"}], ",", 
                RowBox[{"Scaled", "[", 
                 RowBox[{"{", 
                  RowBox[{".3", ",", ".2"}], "}"}], "]"}], ",", 
                RowBox[{"Background", "\[Rule]", "White"}]}], "]"}], "]"}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{"FrameLabel", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
               "\"\<Crater diameter, km\>\"", ",", 
                "\"\<Cumulative Count for entire surface\>\""}], "}"}]}], ",", 
             RowBox[{"LabelStyle", "\[Rule]", "24"}], ",", 
             RowBox[{"ImageSize", "\[Rule]", "Full"}], ",", 
             RowBox[{"PlotRange", "\[Rule]", 
              RowBox[{"Log", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"smallest", "/", "2"}], ",", 
                   RowBox[{"2", "biggest"}]}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"0.1", ",", 
                   RowBox[{"10", " ", "most"}]}], "}"}]}], "}"}], "]"}]}]}], 
            "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", 
             RowBox[{"Length", "[", "craterplotpts", "]"}]}], "}"}]}], 
          "]"}]}]}], "]"}], "\[IndentingNewLine]", ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"myplots", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "=", 
       RowBox[{"myplots", "[", 
        RowBox[{"[", 
         RowBox[{"Length", "[", "craterplotpts", "]"}], "]"}], "]"}]}], ";", 
      " ", 
      RowBox[{"(*", 
       RowBox[{
       "so", " ", "final", " ", "shows", " ", "at", " ", "the", " ", 
        "beginning"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"ListAnimate", "[", 
       RowBox[{"myplots", ",", 
        RowBox[{"AnimationRepetitions", "\[Rule]", "3"}], ",", 
        RowBox[{"AnimationRunning", "\[Rule]", "False"}], ",", 
        RowBox[{"ImageSize", "\[Rule]", "Full"}], ",", 
        RowBox[{"DisplayAllSteps", "\[Rule]", "True"}], ",", 
        RowBox[{"DefaultDuration", "\[Rule]", " ", "nsteps"}]}], "]"}]}]}], 
    "]"}], "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{"craters", ",", 
      RowBox[{"CellPrint", "[", 
       RowBox[{"Cell", "[", 
        RowBox[{
         RowBox[{"ToString", "[", 
          RowBox[{"StringForm", "[", 
           RowBox[{
           "\"\<Figure 14. Movie of the counts of the craters for the  `` \
asteroid.\>\"", ",", "newname"}], " ", "]"}], "]"}], ",", "\"\<Text\>\"", ",", 
         RowBox[{"Background", "\[Rule]", 
          RowBox[{"GrayLevel", "[", ".9", "]"}]}]}], "]"}], "]"}]}], "]"}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
    "Print", "[", 
     "\"\<====================================================================\
==============================\>\"", "]"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"xdone", "=", "16"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{"craters", ",", "\n", 
        RowBox[{
         RowBox[{"Print", "[", "\"\<here for fig 15\>\"", "]"}], ";", 
         StyleBox["\[IndentingNewLine]", "CodeText"], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"make", " ", "cratering", " ", "movies"}], " ", "*)"}], 
         StyleBox["\[IndentingNewLine]", "CodeText"], 
         StyleBox["\[IndentingNewLine]", "CodeText"], 
         RowBox[{"allcraters", "=", 
          RowBox[{"Join", "[", 
           RowBox[{"spalldias", ",", "dcrimdias", ",", "complexdias"}], 
           "]"}]}], " ", ";", 
         RowBox[{"(*", " ", 
          RowBox[{"time", ",", " ", 
           RowBox[{"target", " ", "dia"}], ",", " ", 
           RowBox[{"crater", " ", "diameter"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"allcraters", "=", 
          RowBox[{"Sort", "[", "allcraters", "]"}]}], ";", " ", 
         RowBox[{"(*", " ", 
          RowBox[{"now", " ", "in", " ", "time", " ", "order"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"filter", " ", "size"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"ncraters0", "=", 
          RowBox[{"Length", "[", "allcraters", "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"minsize", "=", 
          RowBox[{"NumberForm", "[", 
           RowBox[{
            RowBox[{"Min", "[", 
             RowBox[{"allcraters", "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", "3"}], "]"}], "]"}], "]"}], ",", "3"}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"maxsize", "=", 
          RowBox[{"NumberForm", "[", 
           RowBox[{
            RowBox[{"Max", "[", 
             RowBox[{"allcraters", "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", "3"}], "]"}], "]"}], "]"}], ",", "3"}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"allcraters", "=", 
          RowBox[{"Select", "[", 
           RowBox[{"allcraters", ",", 
            RowBox[{
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", "3", "]"}], "]"}], ">", 
              RowBox[{"d", "/", "200."}]}], "&"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"ncraters", "=", 
          RowBox[{"Length", "[", "allcraters", "]"}]}], ";", 
         StyleBox["\[IndentingNewLine]", "CodeText"], "\[IndentingNewLine]", 
         RowBox[{"ncraterset", "=", "20"}], ";", 
         StyleBox[
          RowBox[{"(*", " ", 
           RowBox[{
           "this", " ", "is", " ", "the", " ", "number", " ", "of", " ", 
            "craters", " ", "added", " ", "on", " ", "each", " ", "movie", 
            " ", "frame"}], " ", "*)"}], "CodeText"], "\[IndentingNewLine]", 
         RowBox[{"nnn", "=", 
          RowBox[{"Floor", "[", 
           RowBox[{"ncraters", "/", "ncraterset"}], "]"}]}], ";", " ", 
         RowBox[{"(*", " ", 
          RowBox[{"thus", ",", " ", 
           RowBox[{
           "the", " ", "number", " ", "of", " ", "frames", " ", "in", " ", 
            "the", " ", "movie"}]}], " ", "*)"}], 
         StyleBox["\[IndentingNewLine]", "CodeText"], 
         StyleBox["\[IndentingNewLine]", "CodeText"], 
         RowBox[{"sqside", "=", 
          RowBox[{"Sqrt", "[", 
           RowBox[{"Pi", " ", 
            RowBox[{"d", "^", "2"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"plottext2", "=", 
          RowBox[{"Graphics", "[", 
           RowBox[{"Text", "[", 
            RowBox[{
             RowBox[{"Framed", "[", 
              RowBox[{
               RowBox[{"Style", "[", 
                RowBox[{
                 RowBox[{"\"\<The evolution of \>\"", "<>", 
                  RowBox[{"ToString", "[", "ncraters", "]"}], "<>", 
                  "\"\< craters on a \>\"", "<>", 
                  RowBox[{"ToString", "[", "d0", "]"}], "<>", 
                  "\"\< km initial diameter \>\"", "<>", 
                  RowBox[{"ToString", "[", "newname", "]"}]}], " ", ",", 
                 "12"}], "]"}], ",", 
               RowBox[{"Background", "\[Rule]", "LightGray"}]}], "]"}], ",", 
             RowBox[{"Scaled", "[", 
              RowBox[{"{", 
               RowBox[{".5", ",", "1.1"}], "}"}], "]"}]}], "]"}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"square", "=", 
          RowBox[{"Show", "[", 
           RowBox[{
            RowBox[{"Graphics", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"EdgeForm", "[", 
                RowBox[{"{", 
                 RowBox[{"Thick", ",", "Black"}], "}"}], "]"}], ",", 
               RowBox[{"FaceForm", "[", "Gray", "]"}], ",", 
               RowBox[{"Rectangle", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"0", ",", "0"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"sqside", ",", "sqside"}], "}"}]}], "]"}]}], "}"}], 
             "]"}], ",", 
            RowBox[{"barscalef", "[", "]"}], ",", "plottext2", ",", 
            RowBox[{"ImageMargins", "\[Rule]", "40"}], ",", 
            RowBox[{"ImageSize", "\[Rule]", "700"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"frames16", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            RowBox[{"nnn", "+", "1"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         
         RowBox[{"frames17", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            RowBox[{"nnn", "+", "1"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         
         RowBox[{"craterimages", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"{", "}"}], ",", "ncraterset"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"times", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            RowBox[{"nnn", "+", "1"}]}], "]"}]}], ";", "\n", "  ", 
         RowBox[{"maxtohere", "=", "0"}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"frames16", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "=", "square"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"times", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "=", "0."}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"frames17", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "=", 
          RowBox[{"Show", "[", 
           RowBox[{
            RowBox[{"frames16", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", 
            RowBox[{"Graphics", "[", 
             RowBox[{"Text", "[", 
              RowBox[{
               RowBox[{"Framed", "[", 
                RowBox[{"Style", "[", 
                 RowBox[{
                  RowBox[{"\"\<Time= \>\"", "<>", 
                   RowBox[{"ToString", "[", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{"0", ",", "3"}], "]"}], "]"}], "<>", 
                   "\"\< Myr.  There are now 0 craters larger than \>\"", "<>", 
                   RowBox[{"ToString", "[", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{"smallest", ",", "2"}], "]"}], "]"}], "<>", 
                   "\"\< km\>\""}], " ", ",", "12"}], "]"}], "]"}], ",", 
               RowBox[{"Scaled", "[", 
                RowBox[{"{", 
                 RowBox[{".5", ",", "1.05"}], "}"}], "]"}], ",", 
               RowBox[{"Background", "\[Rule]", "LightGray"}]}], "]"}], 
             "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"Do", "[", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"get", " ", "ncraterset", " ", "craters"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"Do", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"diacrater", "=", 
                RowBox[{
                 RowBox[{"allcraters", "[", 
                  RowBox[{"[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"kk", "-", "1"}], ")"}], "ncraterset"}], " ", "+",
                     "ii"}], "]"}], "]"}], "[", 
                 RowBox[{"[", "3", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"maxtohere", "=", 
                RowBox[{"Max", "[", 
                 RowBox[{"maxtohere", ",", "diacrater"}], "]"}]}], ";", "\n", 
               "\t", 
               RowBox[{
                RowBox[{"craterimages", "[", 
                 RowBox[{"[", "ii", "]"}], "]"}], "=", 
                RowBox[{"Graphics", "[", 
                 RowBox[{"Inset", "[", 
                  RowBox[{"piccrater", ",", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RandomReal", "[", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "sqside"}], "}"}], "]"}], ",", 
                    RowBox[{"RandomReal", "[", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "sqside"}], "}"}], "]"}]}], "}"}], ",", 
                   
                   RowBox[{"{", 
                    RowBox[{"35", ",", "35"}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"diacrater", ",", "diacrater"}], "}"}]}], "]"}], 
                 "]"}]}]}], ",", 
              RowBox[{"{", 
               RowBox[{"ii", ",", "1", ",", "ncraterset"}], "}"}]}], "]"}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"(*", "  ", "*)"}], "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"times", "[", 
              RowBox[{"[", 
               RowBox[{"kk", "+", "1"}], "]"}], "]"}], "=", 
             RowBox[{"allcraters", "[", 
              RowBox[{"[", 
               RowBox[{
                RowBox[{"kk", " ", "ncraterset"}], " ", ",", "1"}], "]"}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"frames16", "[", 
              RowBox[{"[", 
               RowBox[{"kk", "+", "1"}], "]"}], "]"}], "=", 
             RowBox[{"Show", "[", 
              RowBox[{
               RowBox[{"frames16", "[", 
                RowBox[{"[", "kk", "]"}], "]"}], ",", "craterimages"}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"text2", "=", 
             RowBox[{"Graphics", "[", 
              RowBox[{"Text", "[", 
               RowBox[{
                RowBox[{"Framed", "[", 
                 RowBox[{"Style", "[", 
                  RowBox[{
                   RowBox[{"\"\<Time= \>\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"times", "[", 
                    RowBox[{"[", "kk", "]"}], "]"}], "/", 
                    RowBox[{"10", "^", "6"}]}], ",", "4"}], "]"}], "]"}], 
                    "<>", "\"\< Myr.  There are now \>\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"kk", "-", "1"}], ")"}], " ", "ncraterset"}], 
                    "]"}], "<>", "\"\< craters larger than \>\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{"smallest", ",", "2"}], "]"}], "]"}], "<>", 
                    "\"\< km \\n The largest crater is now \>\"", "<>", 
                    RowBox[{"ToString", "[", "maxtohere", "]"}], "<>", 
                    "\"\< km\>\""}], " ", ",", "12"}], "]"}], "]"}], ",", 
                RowBox[{"Scaled", "[", 
                 RowBox[{"{", 
                  RowBox[{".5", ",", "1.05"}], "}"}], "]"}], ",", 
                RowBox[{"Background", "\[Rule]", "LightGray"}]}], "]"}], 
              "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"frames17", "[", 
              RowBox[{"[", 
               RowBox[{"kk", "+", "1"}], "]"}], "]"}], "=", 
             RowBox[{"Show", "[", 
              RowBox[{
               RowBox[{"frames16", "[", 
                RowBox[{"[", 
                 RowBox[{"kk", "+", "1"}], "]"}], "]"}], ",", "text2"}], 
              "]"}]}]}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"kk", ",", "1", ",", "nnn"}], "}"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"ListAnimate", "[", 
          RowBox[{"frames17", ",", 
           RowBox[{"AnimationRepetitions", "\[Rule]", "1"}], ",", 
           RowBox[{"AnimationRunning", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayAllSteps", "\[Rule]", "True"}], ",", 
           RowBox[{"DefaultDuration", "\[Rule]", "10"}]}], "]"}]}]}], "]"}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"craters", ",", 
        RowBox[{"CellPrint", "[", 
         RowBox[{"Cell", "[", 
          RowBox[{
           RowBox[{"ToString", "[", 
            RowBox[{"StringForm", "[", 
             RowBox[{
             "\"\<Figure 15.  Movies for the cratering history of the  `` \
asteroid.  The square is the entire flattened asteroid surface, with `` \
square km. I calculated `` craters from `` to `` km diameter, but only show \
the `` above `` meters diameter\>\"", ",", "\[IndentingNewLine]", "newname", 
              ",", 
              RowBox[{"sqside", "^", "2"}], ",", "nexplicit", ",", "minsize", 
              ",", "maxsize", ",", "ncraters", ",", 
              RowBox[{"d", "/", "200."}]}], "]"}], "]"}], ",", "\"\<Text\>\"",
            ",", 
           RowBox[{"Background", "\[Rule]", 
            RowBox[{"GrayLevel", "[", ".9", "]"}]}]}], "]"}], "]"}]}], 
       "]"}]}], ";", 
     RowBox[{
     "Print", "[", 
      "\"\<===================================================================\
===============================\>\"", "]"}], ";"}], "\[IndentingNewLine]", 
    "*)"}], "\n", 
   RowBox[{"(*", 
    RowBox[{"If", "[", 
     RowBox[{"craters", ",", 
      RowBox[{"Export", "[", 
       RowBox[{"\"\<Gaspra.mov\>\"", ",", "frames17"}], "]"}]}], "]"}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"pathdonesnd", "=", 
      RowBox[{"ToString", "[", 
       RowBox[{"FileNameJoin", "[", 
        RowBox[{"{", 
         RowBox[{"dir", ",", "\"\<data\>\"", ",", "\"\<TaDa.wav\>\""}], "}"}],
         "]"}], "]"}]}], ";", "\n", 
     RowBox[{"snd", "=", 
      RowBox[{"Import", "[", 
       RowBox[{"pathdonesnd", ",", "\"\<Sound\>\""}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"EmitSound", "[", "snd", "]"}]}], "*)"}], "\n", 
   RowBox[{
    RowBox[{"xdone", "=", "\"\<Done, See below..\>\""}], ";"}], 
   "\[IndentingNewLine]", "xdone", " ", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "Speak", "[", 
     "\"\<I Finished the plots, they are below   , have a look! \>\"", "]"}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{"Print", "[", "\"\<All done, plots above..\>\"", "]"}], 
   "\[IndentingNewLine]", "\n", 
   RowBox[{"Button", "[", 
    RowBox[{"\"\<That was fun.. Lets do it again!\>\"", ",", 
     RowBox[{
      RowBox[{"NotebookFind", "[", 
       RowBox[{
        RowBox[{"EvaluationNotebook", "[", "]"}], ",", " ", 
        "\"\<startstart\>\"", ",", " ", "All", ",", " ", "CellTags"}], "]"}], 
      ";", "\n", 
      RowBox[{"SelectionEvaluate", "[", 
       RowBox[{"EvaluationNotebook", "[", "]"}], "]"}]}], ",", 
     RowBox[{"Background", "->", "Orange"}]}], "]"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"SelectionMove", "[", 
      RowBox[{
       RowBox[{"InputNotebook", "[", "]"}], ",", "Previous", ",", "Cell", ",",
        "15"}], "]"}], ";"}], "*)"}], "\[IndentingNewLine]"}]}]], "Input",
 Deletable->True,
 CellFrame->{{0, 0}, {0, 3}},
 CellDingbat->"\[FivePointedStar]",
 CellMargins->{{64, 10}, {5, 10}},
 CellOpen->False,
 CellChangeTimes->{{3.887864368235414*^9, 3.887864369146378*^9}, {
  3.887895253929839*^9, 3.887895257096848*^9}},
 FontFamily->"Arial",
 FontSize->14,
 FontWeight->"Regular",
 FontColor->GrayLevel[0.5],
 Background->GrayLevel[0],
 CellTags->"outcell",
 CellLabel->
  "In[2067]:=",ExpressionUUID->"14097e18-d393-4580-83eb-44e0fbc23215"],

Cell[BoxData[""], "Input",
 CellOpen->True,
 CellChangeTimes->{{3.887865390802609*^9, 3.887865400499682*^9}, {
   3.887865475891527*^9, 3.887865480882354*^9}, {3.8878660321438913`*^9, 
   3.887866046544441*^9}, {3.88786611735769*^9, 3.887866122101899*^9}, {
   3.887896493883243*^9, 3.887896497220633*^9}, {3.888129551992463*^9, 
   3.888129554956214*^9}, 3.889442824575564*^9},
 FontFamily->"Arial",
 FontSize->14,
 FontWeight->"Regular",
 FontColor->GrayLevel[0.5],
 Background->GrayLevel[
  0],ExpressionUUID->"37054033-5826-4fc6-a2a4-7163d9521b18"],

Cell[BoxData[{
 RowBox[{"process", "=", 
  RowBox[{"StartProcess", "[", "$SystemShell", "]"}]}], "\n", 
 RowBox[{"WriteLine", "[", 
  RowBox[{
  "process", ",", 
   "\"\<python3 /Users/kumargaurav/Documents/Asteroids/fit.py \>\""}], 
  "]"}], "\n", 
 RowBox[{"ReadString", "[", 
  RowBox[{"process", ",", "EndOfBuffer"}], "]"}], "\n", 
 RowBox[{"WriteLine", "[", 
  RowBox[{"process", ",", "\"\<exit\>\""}], "]"}], "\n", 
 RowBox[{"ProcessStatus", "[", "process", "]"}]}], "Input",
 CellOpen->True,
 CellChangeTimes->{{3.888143497923317*^9, 3.888143499417613*^9}, {
   3.889442847568433*^9, 3.889442849953233*^9}, {3.889443037459515*^9, 
   3.889443039489085*^9}, {3.889444467752308*^9, 3.889444493495122*^9}, {
   3.8894446990492973`*^9, 3.8894446993971233`*^9}, {3.889444902604453*^9, 
   3.889444903744945*^9}, {3.889444960281502*^9, 3.8894449684679747`*^9}, {
   3.889445057376224*^9, 3.8894450577036858`*^9}, {3.8894458347693453`*^9, 
   3.8894458427288103`*^9}, {3.889446003042804*^9, 3.889446005606102*^9}, {
   3.88944610230435*^9, 3.889446103911615*^9}, {3.889446400009284*^9, 
   3.889446401208645*^9}, {3.88944669045899*^9, 3.8894467339703283`*^9}, {
   3.8894467707681932`*^9, 3.889446805531307*^9}, {3.8894468517636833`*^9, 
   3.889446858713553*^9}, 3.889446913845812*^9, {3.889446977350369*^9, 
   3.8894469925254383`*^9}, {3.889447042207069*^9, 3.889447126033733*^9}, {
   3.889447199037154*^9, 3.889447199466131*^9}},
 FontFamily->"Arial",
 FontSize->14,
 FontWeight->"Regular",
 FontColor->GrayLevel[0.5],
 Background->GrayLevel[0],
 CellLabel->
  "In[743]:=",ExpressionUUID->"bb25f429-c6f9-4d0e-bf47-78a1c82e49aa"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"session", "=", " ", 
   RowBox[{"StartExternalSession", "[", "\"\<Python\>\"", "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"ExternalEvaluate", "[", 
   RowBox[{"session", ",", 
    RowBox[{"File", "[", "\"\<fit.py\>\"", "]"}]}], "]"}], 
  ";"}], "\n"}], "Input",
 CellOpen->True,
 CellChangeTimes->{{3.88944444585874*^9, 3.889444451018847*^9}, {
  3.889444668059099*^9, 3.889444687637273*^9}, {3.8894495832921133`*^9, 
  3.8894495861054068`*^9}, {3.8894498909335833`*^9, 3.889449894546166*^9}, {
  3.889449957042039*^9, 3.889450011092918*^9}, {3.889450157324016*^9, 
  3.889450160391974*^9}, {3.88945020564911*^9, 3.8894502099939547`*^9}, {
  3.889450296038405*^9, 3.889450306705585*^9}, {3.889450399375396*^9, 
  3.889450428837934*^9}, {3.8894507934926434`*^9, 3.889450802482424*^9}, {
  3.889450942708078*^9, 3.889450945460061*^9}, {3.889510412699898*^9, 
  3.889510426910256*^9}, {3.889512547612885*^9, 3.8895125546931143`*^9}},
 FontFamily->"Arial",
 FontSize->14,
 FontWeight->"Regular",
 FontColor->GrayLevel[0.5],
 Background->GrayLevel[0],
 CellLabel->
  "In[557]:=",ExpressionUUID->"14cb9dc2-8ee5-4b9c-805d-f125f3f42dc5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"yark", "[", 
   RowBox[{"[", 
    RowBox[{"1", ",", "7"}], "]"}], "]"}], "=", "5.0"}], "\n", 
 RowBox[{"Export", "[", 
  RowBox[{
  "\"\</Users/kumargaurav/Documents/OrbFit/tests/gaurav/yarkovsky.in\>\"", 
   ",", "yark", ",", "\"\<Table\>\"", ",", 
   RowBox[{"\"\<FieldSeparators\>\"", "->", "\"\<    \>\""}]}], 
  "]"}]}], "Input",
 CellOpen->True,
 CellChangeTimes->{
  3.889685474785084*^9, {3.889685588632943*^9, 3.889685595356141*^9}, {
   3.893151837461344*^9, 3.893151844060937*^9}, {3.893152206897287*^9, 
   3.893152207031445*^9}, {3.8931522807225103`*^9, 3.8931523470681334`*^9}, 
   3.8931523809352827`*^9},
 NumberMarks->False,
 FontFamily->"Arial",
 FontSize->14,
 FontWeight->"Regular",
 FontColor->GrayLevel[0.5],
 Background->GrayLevel[0],
 CellLabel->
  "In[107]:=",ExpressionUUID->"d959ece2-6daf-44d0-acbb-449c2aad24f7"],

Cell[BoxData[
 RowBox[{"DeleteObject", "[", "session", "]"}]], "Input",
 CellOpen->True,
 CellChangeTimes->{{3.889685623907531*^9, 3.8896856431118937`*^9}},
 FontFamily->"Arial",
 FontSize->14,
 FontWeight->"Regular",
 FontColor->GrayLevel[0.5],
 Background->GrayLevel[0],
 CellLabel->
  "In[560]:=",ExpressionUUID->"577128a8-d991-4571-a375-174e7e23f726"],

Cell[BoxData[
 RowBox[{"omegaLimit", "/", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"G", "*", 
     RowBox[{"4", "/", "3"}], "*", " ", "Pi", "*", 
     RowBox[{"dens", "/", 
      RowBox[{"10", "^", "9"}]}]}], ")"}], "^", "0.5"}]}]], "Input",
 CellOpen->True,
 CellChangeTimes->{
  3.8895105169356422`*^9, {3.889512166725582*^9, 3.889512179479087*^9}, {
   3.889512647166058*^9, 3.8895126521812687`*^9}, {3.889512815001933*^9, 
   3.889512830075715*^9}, {3.889667060329389*^9, 3.889667064062862*^9}, 
   3.889685471911126*^9, {3.893202691458929*^9, 3.893202694183732*^9}, {
   3.89321144046719*^9, 3.893211466271771*^9}, {3.893211523322209*^9, 
   3.893211526722041*^9}},
 NumberMarks->False,
 FontFamily->"Arial",
 FontSize->14,
 FontWeight->"Regular",
 FontColor->GrayLevel[0.5],
 Background->GrayLevel[0],
 CellLabel->
  "In[1628]:=",ExpressionUUID->"6e9e2fb6-75ce-4d34-b4ac-ed9232289c9b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"session", "=", " ", 
   RowBox[{"StartExternalSession", "[", "\"\<Python\>\"", "]"}]}], 
  ";"}]], "Input",
 CellOpen->True,
 CellChangeTimes->{{3.888145409937339*^9, 3.888145414178685*^9}, 
   3.889442828124383*^9, {3.889446332156496*^9, 3.8894463662752*^9}, {
   3.889450507639165*^9, 3.889450536661373*^9}, {3.8894505779076357`*^9, 
   3.8894505844073277`*^9}, {3.8894506469583282`*^9, 3.889450649384522*^9}, {
   3.889510289160125*^9, 3.889510305389139*^9}, 3.889510509159801*^9, {
   3.889512210865128*^9, 3.889512230802188*^9}, {3.889512275360964*^9, 
   3.889512282322056*^9}, {3.889512572830659*^9, 3.889512579133443*^9}, {
   3.889667081219123*^9, 3.88966708350576*^9}, 3.889685467822152*^9, 
   3.88968570938092*^9},
 FontFamily->"Arial",
 FontSize->14,
 FontWeight->"Regular",
 FontColor->GrayLevel[0.5],
 Background->GrayLevel[0],
 CellLabel->
  "In[562]:=",ExpressionUUID->"5335bbc2-5939-4982-9f99-395057bafefd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RunProcess", "[", 
   RowBox[{"\"\<./gaurav\>\"", ",", " ", "\"\<StandardOutput\>\""}], "]"}], 
  ";"}]], "Input",
 CellOpen->True,
 CellChangeTimes->{{3.889670069364272*^9, 3.8896700816486673`*^9}, {
   3.889670112654994*^9, 3.889670127301714*^9}, {3.8896715432500677`*^9, 
   3.889671549693885*^9}, {3.88967161626702*^9, 3.889671631958948*^9}, {
   3.889671666889419*^9, 3.889671670519332*^9}, {3.8896717157493134`*^9, 
   3.8896717181537533`*^9}, {3.889671768914444*^9, 3.8896717923918123`*^9}, {
   3.8896728926685143`*^9, 3.889672894870921*^9}, 3.8896854650930347`*^9, {
   3.889685809411043*^9, 3.889685836361586*^9}, {3.889685917679872*^9, 
   3.889685949263961*^9}, {3.8896859844514017`*^9, 3.889686021863902*^9}, {
   3.889686115299528*^9, 3.889686121494166*^9}, 3.889686162143873*^9, 
   3.889686241066347*^9},
 FontFamily->"Arial",
 FontSize->14,
 FontWeight->"Regular",
 FontColor->GrayLevel[0.5],
 Background->GrayLevel[0],
 CellLabel->
  "In[575]:=",ExpressionUUID->"c0e3b6e7-65f4-457c-811e-e020a85c87f8"],

Cell[BoxData[
 RowBox[{"resultExport", "=", 
  RowBox[{"Export", "[", 
   RowBox[{
   "\"\<~/Documents/Asteroids/omega\>\"", ",", "myomega", ",", 
    "\"\<Table\>\"", ",", 
    RowBox[{"\"\<FieldSeparators\>\"", "->", "\"\<    \>\""}]}], 
   "]"}]}]], "Input",
 CellOpen->True,
 CellChangeTimes->{{3.889687230572131*^9, 3.889687237701312*^9}, {
  3.8932439366895*^9, 3.8932439391399612`*^9}, {3.8937290010485153`*^9, 
  3.8937290031911783`*^9}},
 FontFamily->"Arial",
 FontSize->14,
 FontWeight->"Regular",
 FontColor->GrayLevel[0.5],
 Background->GrayLevel[0],
 CellLabel->
  "In[1545]:=",ExpressionUUID->"42a2b62c-10f6-432b-8007-ec268f9830de"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "SetDirectory", "[", 
   "\"\</Users/kumargaurav/Documents/Asteroids/output\>\"", "]"}], 
  ";"}], "\n", 
 RowBox[{"s", "=", 
  RowBox[{"StringJoin", "[", 
   RowBox[{"\"\<files_\>\"", ",", 
    RowBox[{"ToString", "[", 
     RowBox[{"NumberForm", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"parameters", "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{"Position", "[", 
            RowBox[{"parameters", ",", "\"\<delta\>\""}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "6"}], "}"}]}], "]"}], "]"}], ",", "\"\<__\>\"", 
    ",", 
    RowBox[{"ToString", "[", 
     RowBox[{"NumberForm", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"parameters", "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{"Position", "[", 
            RowBox[{"parameters", ",", "\"\<omega_initial\>\""}], "]"}], "[", 
           
           RowBox[{"[", 
            RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "6"}], "}"}]}], "]"}], "]"}]}], "]"}]}]}], "Input",
 CellOpen->True,
 CellChangeTimes->{{3.8896885328633547`*^9, 3.889688580657537*^9}, {
   3.889688617359291*^9, 3.88968864829466*^9}, {3.8896887112198963`*^9, 
   3.889688799784683*^9}, {3.889688994151813*^9, 3.889689014710485*^9}, {
   3.889689050548465*^9, 3.889689064389539*^9}, 3.889689189955476*^9, {
   3.889689231846013*^9, 3.889689322761806*^9}, {3.889689373100272*^9, 
   3.889689417459867*^9}},
 FontFamily->"Arial",
 FontSize->14,
 FontWeight->"Regular",
 FontColor->GrayLevel[0.5],
 Background->GrayLevel[0],
 CellLabel->
  "In[299]:=",ExpressionUUID->"f7509e59-a8f0-4e0e-b195-9fb5b89e729e"],

Cell[BoxData["myomega"], "Input",
 CellOpen->True,
 CellChangeTimes->{{3.893746144224195*^9, 3.893746146027236*^9}},
 FontFamily->"Arial",
 FontSize->14,
 FontWeight->"Regular",
 FontColor->GrayLevel[0.5],
 Background->GrayLevel[0],
 CellLabel->"In[71]:=",ExpressionUUID->"cc92e11c-845f-4480-957c-14b022c52b2f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"G", "*", 
    RowBox[{"4", "/", "3"}], "*", " ", "Pi", "*", 
    RowBox[{"dens", "/", 
     RowBox[{"10", "^", "9"}]}]}], ")"}], "^", "0.5"}]], "Input",
 CellOpen->True,
 CellChangeTimes->{{3.893226688786043*^9, 3.893226710466318*^9}, {
   3.893243857659869*^9, 3.8932438634373493`*^9}, 3.893243899294218*^9, {
   3.8937282513467693`*^9, 3.893728271060339*^9}, {3.8937283094235697`*^9, 
   3.8937283294529963`*^9}, {3.893728365562463*^9, 3.893728373889502*^9}, {
   3.893746121999002*^9, 3.89374612299109*^9}, {3.8937465763169737`*^9, 
   3.893746577477919*^9}},
 FontFamily->"Arial",
 FontSize->14,
 FontWeight->"Regular",
 FontColor->GrayLevel[0.5],
 Background->GrayLevel[0],
 CellLabel->
  "In[303]:=",ExpressionUUID->"3e8afcac-5912-4423-b7aa-c9a1aa54fb7b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"CloseIOCells", "[", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"nb", ",", "cells"}], "}"}], ",", 
     RowBox[{
      RowBox[{"nb", "=", 
       RowBox[{"EvaluationNotebook", "[", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"cells", "=", 
       RowBox[{"Cells", "[", 
        RowBox[{"nb", ",", 
         RowBox[{"CellTags", "\[Rule]", "\"\<outcell\>\""}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"SetOptions", "[", 
         RowBox[{"#", ",", 
          RowBox[{"CellOpen", "\[Rule]", "False"}]}], "]"}], "&"}], "/@", 
       "cells"}], ";", 
      RowBox[{"opentest", "=", "False"}]}]}], "]"}]}], ";"}]], "Input",
 CellOpen->True,
 CellChangeTimes->{{3.889704397945471*^9, 3.889704401557623*^9}, {
   3.889764669158594*^9, 3.889764670634963*^9}, {3.889764841574895*^9, 
   3.8897648766798773`*^9}, {3.8897653462565804`*^9, 
   3.8897653652603493`*^9}, {3.8897654900703363`*^9, 3.889765496777017*^9}, {
   3.88976567579888*^9, 3.889765696061994*^9}, {3.889765743798657*^9, 
   3.8897657900497313`*^9}, {3.889766712135289*^9, 3.889766751252397*^9}, 
   3.88979128796063*^9, {3.889791745844801*^9, 3.8897917617788467`*^9}, {
   3.8897918122440968`*^9, 3.889791866453188*^9}, 3.889791900751273*^9, {
   3.889791965407001*^9, 3.8897919776720247`*^9}, {3.8897920809898357`*^9, 
   3.8897920843930407`*^9}},
 FontFamily->"Arial",
 FontSize->14,
 FontWeight->"Regular",
 FontColor->GrayLevel[0.5],
 Background->GrayLevel[
  0],ExpressionUUID->"9da63e4f-dd03-4072-bac7-a8f72bf26ee3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"CloseIOCells", "[", "]"}], ";"}]], "Input",
 CellOpen->True,
 CellChangeTimes->{{3.8897913346859922`*^9, 3.88979133882437*^9}, {
  3.889791990333304*^9, 3.889792000176442*^9}},
 CellLabel->
  "In[379]:=",ExpressionUUID->"3ef1eb82-2693-4240-8319-2343c1148e5d"]
}, Open  ]]
},
WindowToolbars->"EditBar",
NotebookEventActions->{"WindowClose" :> FrontEndExecute[
    FrontEndToken["DeleteGeneratedCells"]]},
WindowSize->{Full, Full},
WindowMargins->{{93, Automatic}, {Automatic, -1061}},
PrintingCopies->1,
PrintingPageRange->{1, Automatic},
TaggingRules-><|
 "CodeFormatter" -> <|"ToolbarState" -> False|>, "TryRealOnly" -> False|>,
ShowCellTags->True,
AutoIndent->False,
FrontEndVersion->"13.0 for Mac OS X ARM (64-bit) (December 2, 2021)",
StyleDefinitions->"ReverseColor.nb",
ExpressionUUID->"e892acaa-d03b-4a8c-af54-a851f881c281"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "startstart"->{
  Cell[2294, 66, 900196, 14881, 1227, "Input",ExpressionUUID->"5242e803-8edc-4c6d-ac15-6d3f529ace22",
   CellOpen->True,
   InitializationCell->True,
   CellTags->"startstart"]},
 "Functions"->{
  Cell[902493, 14949, 731314, 16195, 23483, "Input",ExpressionUUID->"24bfcc48-0bac-437c-ad13-4510b0119c60",
   CellOpen->True,
   InitializationCell->True,
   CellTags->"Functions"]},
 "topend"->{
  Cell[1633810, 31146, 9080, 235, 19, "Input",ExpressionUUID->"b555c67b-21d0-4036-9d30-fb5a9d7d1adc",
   CellOpen->False,
   InitializationCell->False,
   CellTags->"topend"]},
 "inputcalcs"->{
  Cell[1642893, 31383, 106352, 2497, 19, "Input",ExpressionUUID->"a7f9375c-efb3-4700-9202-d7d6f87c1459",
   CellOpen->False,
   CellTags->"inputcalcs"]},
 "updateall"->{
  Cell[1749470, 33891, 546, 16, 98, "Input",ExpressionUUID->"8f783ecc-21ef-4684-b299-513605ac9f09",
   CellOpen->True,
   CellTags->"updateall"],
  Cell[1750019, 33909, 1823, 41, 19, "Input",ExpressionUUID->"ab7c6444-e556-4a42-a4ad-bb1e43232158",
   CellOpen->False,
   CellTags->"updateall"]},
 "moreinputcalcs"->{
  Cell[1751845, 33952, 76944, 1996, 19, "Input",ExpressionUUID->"a5db4f65-9652-4150-b723-af8ea67e13aa",
   CellOpen->False,
   CellTags->"moreinputcalcs"]},
 "runit"->{
  Cell[1829046, 35961, 6247, 182, 19, "Input",ExpressionUUID->"58507f43-b9b6-4383-91d4-08bc055dc2a5",
   CellOpen->False,
   InitializationCell->False,
   CellTags->"runit"],
  Cell[1835296, 36145, 11918, 350, 19, "Input",ExpressionUUID->"242d2da1-5989-40a1-a644-1afa503f944e",
   CellOpen->False,
   InitializationCell->False,
   CellTags->"runit"],
  Cell[1847217, 36497, 138525, 2967, 11369, "Input",ExpressionUUID->"edcff950-029a-4de4-b96e-d42f311a559c",
   CellOpen->True,
   InitializationCell->False,
   CellTags->"runit"]},
 "outcell"->{
  Cell[1986679, 39486, 188250, 4479, 19, "Input",ExpressionUUID->"14097e18-d393-4580-83eb-44e0fbc23215",
   CellOpen->False,
   CellTags->"outcell"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"startstart", 2188743, 44331},
 {"Functions", 2188938, 44336},
 {"topend", 2189135, 44341},
 {"inputcalcs", 2189329, 44346},
 {"updateall", 2189499, 44350},
 {"moreinputcalcs", 2189815, 44357},
 {"runit", 2189984, 44361},
 {"outcell", 2190530, 44374}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[400, 13, 168, 4, 30, "Input",ExpressionUUID->"6d6f7d20-73d3-4b85-804a-ddbf00f65999",
 CellOpen->True],
Cell[CellGroupData[{
Cell[593, 21, 1698, 43, 19, "Subsection",ExpressionUUID->"9d7c071d-752a-4a05-8619-c6a6a90508bb",
 Evaluatable->False,
 CellOpen->False],
Cell[2294, 66, 900196, 14881, 1227, "Input",ExpressionUUID->"5242e803-8edc-4c6d-ac15-6d3f529ace22",
 CellOpen->True,
 InitializationCell->True,
 CellTags->"startstart"],
Cell[902493, 14949, 731314, 16195, 23483, "Input",ExpressionUUID->"24bfcc48-0bac-437c-ad13-4510b0119c60",
 CellOpen->True,
 InitializationCell->True,
 CellTags->"Functions"],
Cell[1633810, 31146, 9080, 235, 19, "Input",ExpressionUUID->"b555c67b-21d0-4036-9d30-fb5a9d7d1adc",
 CellOpen->False,
 InitializationCell->False,
 CellTags->"topend"],
Cell[1642893, 31383, 106352, 2497, 19, "Input",ExpressionUUID->"a7f9375c-efb3-4700-9202-d7d6f87c1459",
 CellOpen->False,
 CellTags->"inputcalcs"],
Cell[1749248, 33882, 219, 7, 67, "Input",ExpressionUUID->"302417ee-536e-41ef-a637-acf176a684a3",
 CellOpen->True],
Cell[1749470, 33891, 546, 16, 98, "Input",ExpressionUUID->"8f783ecc-21ef-4684-b299-513605ac9f09",
 CellOpen->True,
 CellTags->"updateall"],
Cell[1750019, 33909, 1823, 41, 19, "Input",ExpressionUUID->"ab7c6444-e556-4a42-a4ad-bb1e43232158",
 CellOpen->False,
 CellTags->"updateall"],
Cell[1751845, 33952, 76944, 1996, 19, "Input",ExpressionUUID->"a5db4f65-9652-4150-b723-af8ea67e13aa",
 CellOpen->False,
 CellTags->"moreinputcalcs"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1828826, 35953, 217, 6, 60, "Subsection",ExpressionUUID->"656590c6-138a-4041-989c-67d26913d68c"],
Cell[1829046, 35961, 6247, 182, 19, "Input",ExpressionUUID->"58507f43-b9b6-4383-91d4-08bc055dc2a5",
 CellOpen->False,
 InitializationCell->False,
 CellTags->"runit"],
Cell[1835296, 36145, 11918, 350, 19, "Input",ExpressionUUID->"242d2da1-5989-40a1-a644-1afa503f944e",
 CellOpen->False,
 InitializationCell->False,
 CellTags->"runit"],
Cell[1847217, 36497, 138525, 2967, 11369, "Input",ExpressionUUID->"edcff950-029a-4de4-b96e-d42f311a559c",
 CellOpen->True,
 InitializationCell->False,
 CellTags->"runit"],
Cell[1985745, 39466, 931, 18, 46, "Input",ExpressionUUID->"a567a05a-7422-4a7b-8541-6bbe5cde63d3",
 CellOpen->True],
Cell[1986679, 39486, 188250, 4479, 19, "Input",ExpressionUUID->"14097e18-d393-4580-83eb-44e0fbc23215",
 CellOpen->False,
 CellTags->"outcell"],
Cell[2174932, 43967, 552, 12, 46, "Input",ExpressionUUID->"37054033-5826-4fc6-a2a4-7163d9521b18",
 CellOpen->True],
Cell[2175487, 43981, 1633, 33, 127, "Input",ExpressionUUID->"bb25f429-c6f9-4d0e-bf47-78a1c82e49aa",
 CellOpen->True],
Cell[2177123, 44016, 1168, 26, 87, "Input",ExpressionUUID->"14cb9dc2-8ee5-4b9c-805d-f125f3f42dc5",
 CellOpen->True],
Cell[2178294, 44044, 876, 24, 67, "Input",ExpressionUUID->"d959ece2-6daf-44d0-acbb-449c2aad24f7",
 CellOpen->True],
Cell[2179173, 44070, 355, 10, 47, "Input",ExpressionUUID->"577128a8-d991-4571-a375-174e7e23f726",
 CellOpen->True],
Cell[2179531, 44082, 891, 23, 47, "Input",ExpressionUUID->"6e9e2fb6-75ce-4d34-b4ac-ed9232289c9b",
 CellOpen->True],
Cell[2180425, 44107, 960, 21, 47, "Input",ExpressionUUID->"5335bbc2-5939-4982-9f99-395057bafefd",
 CellOpen->True],
Cell[2181388, 44130, 1054, 22, 47, "Input",ExpressionUUID->"c0e3b6e7-65f4-457c-811e-e020a85c87f8",
 CellOpen->True],
Cell[2182445, 44154, 646, 18, 47, "Input",ExpressionUUID->"42a2b62c-10f6-432b-8007-ec268f9830de",
 CellOpen->True],
Cell[2183094, 44174, 1901, 52, 67, "Input",ExpressionUUID->"f7509e59-a8f0-4e0e-b195-9fb5b89e729e",
 CellOpen->True],
Cell[2184998, 44228, 311, 8, 47, "Input",ExpressionUUID->"cc92e11c-845f-4480-957c-14b022c52b2f",
 CellOpen->True],
Cell[2185312, 44238, 813, 20, 46, "Input",ExpressionUUID->"3e8afcac-5912-4423-b7aa-c9a1aa54fb7b",
 CellOpen->True],
Cell[2186128, 44260, 1630, 39, 87, "Input",ExpressionUUID->"9da63e4f-dd03-4072-bac7-a8f72bf26ee3",
 CellOpen->True],
Cell[2187761, 44301, 294, 7, 30, "Input",ExpressionUUID->"3ef1eb82-2693-4240-8319-2343c1148e5d",
 CellOpen->True]
}, Open  ]]
}
]
*)

